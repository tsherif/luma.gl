{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack:///./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack:///./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///../node_modules/math.gl/dist/esm/lib/validators.js","webpack:///../node_modules/math.gl/dist/esm/lib/common.js","webpack:///../node_modules/math.gl/dist/esm/lib/assert.js","webpack:///../node_modules/gl-matrix/esm/vec3.js","webpack:///./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","webpack:///./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","webpack:///../node_modules/math.gl/dist/esm/classes/base/math-array.js","webpack:///../node_modules/math.gl/dist/esm/lib/gl-matrix-extras.js","webpack:///../node_modules/gl-matrix/esm/common.js","webpack:///./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack:///../node_modules/gl-matrix/esm/vec4.js","webpack:///./node_modules/@babel/runtime/helpers/esm/construct.js","webpack:///../node_modules/math.gl/dist/esm/classes/base/matrix.js","webpack:///../node_modules/gl-matrix/esm/mat4.js","webpack:///../node_modules/gl-matrix/esm/vec2.js","webpack:///../node_modules/math.gl/dist/esm/classes/matrix4.js"],"names":["_getPrototypeOf","o","Object","setPrototypeOf","getPrototypeOf","__proto__","__webpack_require__","d","__webpack_exports__","_inherits","_setPrototypeOf__WEBPACK_IMPORTED_MODULE_0__","subClass","superClass","TypeError","prototype","create","constructor","value","writable","configurable","_possibleConstructorReturn","self","call","esm_typeof","ReferenceError","_assertThisInitialized","checkNumber","checkVector","deprecated","_common__WEBPACK_IMPORTED_MODULE_2__","Number","isFinite","Error","concat","v","length","callerName","debug","i","validateVector","map","method","version","console","warn","config","formatValue","isArray","radians","equals","_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_2__","DEGREES_TO_RADIANS","Math","PI","_ref$precision","arguments","undefined","precision","round","EPSILON","parseFloat","toPrecision","Array","ArrayBuffer","isView","func","result","array","clone","degrees","a","b","epsilon","oldEpsilon","abs","max","printTypes","printDegrees","printRowMajor","assert","condition","message","fromValues","normalize","dot","cross","transformMat4","transformMat3","transformQuat","rotateX","rotateY","rotateZ","angle","len","_common_js__WEBPACK_IMPORTED_MODULE_1__","out","Float32Array","x","y","z","sqrt","ax","ay","az","bx","by","bz","m","w","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","c","p","r","cos","sin","tempA","tempB","cosine","acos","vec","wrapNativeSuper_wrapNativeSuper","Class","_cache","Map","fn","Function","toString","indexOf","has","get","set","Wrapper","construct","this","enumerable","math_array_MathArray","_Array","MathArray","classCallCheck","possibleConstructorReturn","apply","inherits","createClass","key","copy","arrayOrObject","fromObject","offset","ELEMENTS","check","common","toArray","toObject","target","to","formatString","opts","string","name","t","ai","vector","min","minVector","maxVector","_len","vectors","_key","_i","_vectors","_len2","_key2","_i2","_vectors2","_scale","multiply","subtract","addScalar","scalar","scale","validate","valid","vec2_transformMat4AsVector","vec3_transformMat4AsVector","vec3_transformMat2","ARRAY_TYPE","RANDOM","random","_slicedToArray","arr","_arrayWithHoles","_arr","_n","_d","_e","_s","Symbol","iterator","next","done","push","err","_iterableToArrayLimit","_nonIterableRest","_setPrototypeOf","add","squaredLength","lerp","exactEquals","aw","ix","iy","iz","iw","a0","a1","a2","a3","b0","b1","b2","b3","_construct","Parent","args","Reflect","sham","Proxy","Date","e","isNativeReflectConstruct","instance","bind","matrix_Matrix","_MathArray","Matrix","row","RANK","col","validators","columnIndex","fill","firstIndex","columnVector","math_array","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","mat4_scale","esm_common","matrix4_Matrix4","IDENTITY","freeze","ZERO","INDICES","COL0ROW0","COL0ROW1","COL0ROW2","COL0ROW3","COL1ROW0","COL1ROW1","COL1ROW2","COL1ROW3","COL2ROW0","COL2ROW1","COL2ROW2","COL2ROW3","COL3ROW0","COL3ROW1","COL3ROW2","COL3ROW3","constants","_Matrix","Matrix4","_this","identity","m00","m10","m20","m30","m01","m11","m21","m31","m02","m12","m22","m32","m03","m13","m23","m33","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","fromQuat","_ref","left","right","bottom","top","near","far","Infinity","_computeInfinitePerspectiveOffCenter","rl","tb","nf","mat4_frustum","eye","center","up","_eye","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","mat4_lookAt","_ref2","_ref2$near","_ref2$far","lr","bt","mat4_ortho","_ref3","_ref3$fovy","fovy","_ref3$aspect","aspect","_ref3$focalDistance","focalDistance","_ref3$near","_ref3$far","halfY","tan","ortho","_ref4","_ref4$fov","fov","_ref4$aspect","_ref4$near","_ref4$far","f","mat4_perspective","scaleResult","getScale","inverseScale0","inverseScale1","inverseScale2","mat4_transpose","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","rad","s","_ref5","_ref6","slicedToArray","rx","ry","rz","axis","b12","b20","b21","b22","rotate","factor","vec4","transformAsPoint","vec3","gl_matrix_extras","translate","transformAsVector","column0Row0","column1Row1","column2Row0","column2Row1","column3Row2"],"mappings":"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","file":"2-39485fdd5e8a2fb4cdb2.js","sourcesContent":["export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-finite\";\nimport { config } from './common';\nexport function validateVector(v, length) {\n  if (v.length !== length) {\n    return false;\n  }\n\n  for (var i = 0; i < v.length; ++i) {\n    if (!Number.isFinite(v[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function checkNumber(value) {\n  if (!Number.isFinite(value)) {\n    throw new Error(\"Invalid number \".concat(value));\n  }\n\n  return value;\n}\nexport function checkVector(v, length, callerName) {\n  if (config.debug && !validateVector(v, length)) {\n    throw new Error(\"math.gl: \".concat(callerName | '', \" some fields set to invalid numbers'\"));\n  }\n\n  return v;\n}\nvar map = {};\nexport function deprecated(method, version) {\n  if (!map[method]) {\n    map[method] = true;\n    console.warn(\"\".concat(method, \" has been removed in version \").concat(version, \", see upgrade guide for more information\"));\n  }\n}","import \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.array.is-array\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _construct from \"@babel/runtime/helpers/esm/construct\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport assert from './assert';\nvar RADIANS_TO_DEGREES = 1 / Math.PI * 180;\nvar DEGREES_TO_RADIANS = 1 / 180 * Math.PI;\nvar config = {};\nconfig.EPSILON = 1e-12;\nconfig.debug = false;\nconfig.precision = 4;\nconfig.printTypes = false;\nconfig.printDegrees = false;\nconfig.printRowMajor = true;\nexport { config };\nexport function configure() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  for (var key in options) {\n    assert(key in config);\n    config[key] = options[key];\n  }\n\n  return config;\n}\n\nfunction round(value) {\n  return Math.round(value / config.EPSILON) * config.EPSILON;\n}\n\nexport function formatValue(value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$precision = _ref.precision,\n      precision = _ref$precision === void 0 ? config.precision || 4 : _ref$precision;\n\n  value = round(value);\n  return \"\".concat(parseFloat(value.toPrecision(precision)));\n}\nexport function isArray(value) {\n  return Array.isArray(value) || ArrayBuffer.isView(value) && value.length !== undefined;\n}\n\nfunction duplicateArray(array) {\n  return array.clone ? array.clone() : new Array(array.length);\n}\n\nexport function clone(array) {\n  return array.clone ? array.clone() : _construct(Array, _toConsumableArray(array));\n}\n\nfunction map(value, func, result) {\n  if (isArray(value)) {\n    result = result || duplicateArray(value);\n\n    for (var i = 0; i < result.length && i < value.length; ++i) {\n      result[i] = func(value[i], i, result);\n    }\n\n    return result;\n  }\n\n  return func(value);\n}\n\nexport function toRadians(degrees) {\n  return radians(degrees);\n}\nexport function toDegrees(radians) {\n  return degrees(radians);\n}\nexport function radians(degrees, result) {\n  return map(degrees, function (degrees) {\n    return degrees * DEGREES_TO_RADIANS;\n  }, result);\n}\nexport function degrees(radians, result) {\n  return map(radians, function (radians) {\n    return radians * RADIANS_TO_DEGREES;\n  }, result);\n}\nexport function sin(radians) {\n  return map(radians, function (angle) {\n    return Math.sin(angle);\n  });\n}\nexport function cos(radians) {\n  return map(radians, function (angle) {\n    return Math.cos(angle);\n  });\n}\nexport function tan(radians) {\n  return map(radians, function (angle) {\n    return Math.tan(angle);\n  });\n}\nexport function asin(radians) {\n  return map(radians, function (angle) {\n    return Math.asin(angle);\n  });\n}\nexport function acos(radians) {\n  return map(radians, function (angle) {\n    return Math.acos(angle);\n  });\n}\nexport function atan(radians) {\n  return map(radians, function (angle) {\n    return Math.atan(angle);\n  });\n}\nexport function clamp(value, min, max) {\n  return map(value, function (value) {\n    return Math.max(min, Math.min(max, value));\n  });\n}\nexport function lerp(a, b, t) {\n  if (isArray(a)) {\n    return a.map(function (ai, i) {\n      return lerp(ai, b[i], t);\n    });\n  }\n\n  return t * b + (1 - t) * a;\n}\nexport function equals(a, b, epsilon) {\n  var oldEpsilon = config.EPSILON;\n\n  if (epsilon) {\n    config.EPSILON = epsilon;\n  }\n\n  try {\n    if (a === b) {\n      return true;\n    }\n\n    if (isArray(a) && isArray(b)) {\n      if (a.length !== b.length) {\n        return false;\n      }\n\n      for (var i = 0; i < a.length; ++i) {\n        if (!equals(a[i], b[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    if (a && _typeof(a) === 'object' && a.equals) {\n      return a.equals(b);\n    }\n\n    if (b && _typeof(b) === 'object' && b.equals) {\n      return b.equals(a);\n    }\n\n    return Math.abs(a - b) <= config.EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n  } finally {\n    config.EPSILON = oldEpsilon;\n  }\n}\nexport function exactEquals(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a && _typeof(a) === 'object' && b && _typeof(b) === 'object') {\n    if (a.constructor !== b.constructor) {\n      return false;\n    }\n\n    if (a.exactEquals) {\n      return a.exactEquals(b);\n    }\n  }\n\n  if (isArray(a) && isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; ++i) {\n      if (!exactEquals(a[i], b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\nexport function withEpsilon(EPSILON, func) {\n  var oldPrecision = config.EPSILON;\n  config.EPSILON = EPSILON;\n  var value;\n\n  try {\n    value = func();\n  } finally {\n    config.EPSILON = oldPrecision;\n  }\n\n  return value;\n}","export default function assert(condition, message) {\n  if (!condition) {\n    throw new Error(\"math.gl assertion \".concat(message));\n  }\n}","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import getPrototypeOf from \"./getPrototypeOf\";\nimport setPrototypeOf from \"./setPrototypeOf\";\nimport isNativeFunction from \"./isNativeFunction\";\nimport construct from \"./construct\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-finite\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.typed.float32-array\";\nimport \"core-js/modules/es6.array.is-array\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport { config, formatValue, equals as _equals, isArray } from '../../lib/common';\n\nvar MathArray = function (_Array) {\n  _inherits(MathArray, _Array);\n\n  function MathArray() {\n    _classCallCheck(this, MathArray);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MathArray).apply(this, arguments));\n  }\n\n  _createClass(MathArray, [{\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor().copy(this);\n    }\n  }, {\n    key: \"from\",\n    value: function from(arrayOrObject) {\n      return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : this.fromObject(arrayOrObject);\n    }\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(array) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = array[i + offset];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"to\",\n    value: function to(arrayOrObject) {\n      if (arrayOrObject === this) {\n        return this;\n      }\n\n      return isArray(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);\n    }\n  }, {\n    key: \"toTarget\",\n    value: function toTarget(target) {\n      return target ? this.to(target) : this;\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        array[offset + i] = this[i];\n      }\n\n      return array;\n    }\n  }, {\n    key: \"toFloat32Array\",\n    value: function toFloat32Array() {\n      return new Float32Array(this);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.formatString(config);\n    }\n  }, {\n    key: \"formatString\",\n    value: function formatString(opts) {\n      var string = '';\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        string += (i > 0 ? ', ' : '') + formatValue(this[i], opts);\n      }\n\n      return \"\".concat(opts.printTypes ? this.constructor.name : '', \"[\").concat(string, \"]\");\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(array) {\n      if (!array || this.length !== array.length) {\n        return false;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        if (!_equals(this[i], array[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"exactEquals\",\n    value: function exactEquals(array) {\n      if (!array || this.length !== array.length) {\n        return false;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        if (this[i] !== array[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = -this[i];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lerp\",\n    value: function lerp(a, b, t) {\n      if (t === undefined) {\n        t = b;\n        b = a;\n        a = this;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        var ai = a[i];\n        this[i] = ai + t * (b[i] - ai);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"min\",\n    value: function min(vector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(vector[i], this[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"max\",\n    value: function max(vector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.max(vector[i], this[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"clamp\",\n    value: function clamp(minVector, maxVector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(Math.max(this[i], minVector[i]), maxVector[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"add\",\n    value: function add() {\n      for (var _len = arguments.length, vectors = new Array(_len), _key = 0; _key < _len; _key++) {\n        vectors[_key] = arguments[_key];\n      }\n\n      for (var _i = 0, _vectors = vectors; _i < _vectors.length; _i++) {\n        var vector = _vectors[_i];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] += vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract() {\n      for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        vectors[_key2] = arguments[_key2];\n      }\n\n      for (var _i2 = 0, _vectors2 = vectors; _i2 < _vectors2.length; _i2++) {\n        var vector = _vectors2[_i2];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] -= vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(_scale) {\n      if (Array.isArray(_scale)) {\n        return this.multiply(_scale);\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= _scale;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(a) {\n      return this.subtract(a);\n    }\n  }, {\n    key: \"setScalar\",\n    value: function setScalar(a) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = a;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"addScalar\",\n    value: function addScalar(a) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] += a;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"subScalar\",\n    value: function subScalar(a) {\n      return this.addScalar(-a);\n    }\n  }, {\n    key: \"multiplyScalar\",\n    value: function multiplyScalar(scalar) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= scalar;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"divideScalar\",\n    value: function divideScalar(a) {\n      return this.scale(1 / a);\n    }\n  }, {\n    key: \"clampScalar\",\n    value: function clampScalar(min, max) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(Math.max(this[i], min), max);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"multiplyByScalar\",\n    value: function multiplyByScalar(scalar) {\n      return this.scale(scalar);\n    }\n  }, {\n    key: \"check\",\n    value: function check() {\n      if (config.debug && !this.validate(this)) {\n        throw new Error(\"math.gl: \".concat(this.constructor.name, \" some fields set to invalid numbers'\"));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      var valid = this.length === this.ELEMENTS;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        valid = valid && Number.isFinite(this[i]);\n      }\n\n      return valid;\n    }\n  }, {\n    key: \"elements\",\n    get: function get() {\n      return this;\n    }\n  }]);\n\n  return MathArray;\n}(_wrapNativeSuper(Array));\n\nexport { MathArray as default };","export function vec2_transformMat4AsVector(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  var w = m[3] * x + m[7] * y || 1.0;\n  out[0] = (m[0] * x + m[4] * y) / w;\n  out[1] = (m[1] * x + m[5] * y) / w;\n  return out;\n}\nexport function vec3_transformMat4AsVector(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n  return out;\n}\nexport function vec3_transformMat2(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  out[2] = a[2];\n  return out;\n}\nexport function vec4_transformMat2(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\nexport function vec4_transformMat3(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  out[0] = m[0] * x + m[3] * y + m[6] * z;\n  out[1] = m[1] * x + m[4] * y + m[7] * z;\n  out[2] = m[2] * x + m[5] * y + m[8] * z;\n  out[3] = a[3];\n  return out;\n}","import \"core-js/modules/es6.typed.float32-array\";\n\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import setPrototypeOf from \"./setPrototypeOf\";\n\nfunction isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import \"core-js/modules/es6.array.fill\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport MathArray from './math-array';\nimport { checkNumber } from '../../lib/validators';\nimport { config } from '../../lib/common';\n\nvar Matrix = function (_MathArray) {\n  _inherits(Matrix, _MathArray);\n\n  function Matrix() {\n    _classCallCheck(this, Matrix);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Matrix).apply(this, arguments));\n  }\n\n  _createClass(Matrix, [{\n    key: \"toString\",\n    value: function toString() {\n      var string = '[';\n\n      if (config.printRowMajor) {\n        string += 'row-major:';\n\n        for (var row = 0; row < this.RANK; ++row) {\n          for (var col = 0; col < this.RANK; ++col) {\n            string += \" \".concat(this[col * this.RANK + row]);\n          }\n        }\n      } else {\n        string += 'column-major:';\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          string += \" \".concat(this[i]);\n        }\n      }\n\n      string += ']';\n      return string;\n    }\n  }, {\n    key: \"getElementIndex\",\n    value: function getElementIndex(row, col) {\n      return col * this.RANK + row;\n    }\n  }, {\n    key: \"getElement\",\n    value: function getElement(row, col) {\n      return this[col * this.RANK + row];\n    }\n  }, {\n    key: \"setElement\",\n    value: function setElement(row, col, value) {\n      this[col * this.RANK + row] = checkNumber(value);\n      return this;\n    }\n  }, {\n    key: \"getColumn\",\n    value: function getColumn(columnIndex) {\n      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Array(this.RANK).fill(-0);\n      var firstIndex = columnIndex * this.RANK;\n\n      for (var i = 0; i < this.RANK; ++i) {\n        result[i] = this[firstIndex + i];\n      }\n\n      return result;\n    }\n  }, {\n    key: \"setColumn\",\n    value: function setColumn(columnIndex, columnVector) {\n      var firstIndex = columnIndex * this.RANK;\n\n      for (var i = 0; i < this.RANK; ++i) {\n        this[firstIndex + i] = columnVector[i];\n      }\n\n      return this;\n    }\n  }]);\n\n  return Matrix;\n}(MathArray);\n\nexport { Matrix as default };","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import \"core-js/modules/es6.array.is-array\";\nimport \"core-js/modules/es6.object.freeze\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { checkVector, deprecated } from '../lib/validators';\nimport Matrix from './base/matrix';\nimport { vec2_transformMat4AsVector, vec3_transformMat4AsVector } from '../lib/gl-matrix-extras';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport * as vec4 from 'gl-matrix/vec4';\nvar IDENTITY = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\nvar ZERO = Object.freeze([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nvar INDICES = Object.freeze({\n  COL0ROW0: 0,\n  COL0ROW1: 1,\n  COL0ROW2: 2,\n  COL0ROW3: 3,\n  COL1ROW0: 4,\n  COL1ROW1: 5,\n  COL1ROW2: 6,\n  COL1ROW3: 7,\n  COL2ROW0: 8,\n  COL2ROW1: 9,\n  COL2ROW2: 10,\n  COL2ROW3: 11,\n  COL3ROW0: 12,\n  COL3ROW1: 13,\n  COL3ROW2: 14,\n  COL3ROW3: 15\n});\nvar constants = {};\n\nvar Matrix4 = function (_Matrix) {\n  _inherits(Matrix4, _Matrix);\n\n  _createClass(Matrix4, [{\n    key: \"INDICES\",\n    get: function get() {\n      return INDICES;\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 16;\n    }\n  }, {\n    key: \"RANK\",\n    get: function get() {\n      return 4;\n    }\n  }], [{\n    key: \"IDENTITY\",\n    get: function get() {\n      constants.IDENTITY = constants.IDENTITY || Object.freeze(new Matrix4(IDENTITY));\n      return constants.IDENTITY;\n    }\n  }, {\n    key: \"ZERO\",\n    get: function get() {\n      constants.ZERO = constants.ZERO || Object.freeze(new Matrix4(ZERO));\n      return constants.ZERO;\n    }\n  }]);\n\n  function Matrix4(array) {\n    var _this;\n\n    _classCallCheck(this, Matrix4);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Matrix4).call(this, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0));\n\n    if (arguments.length === 1 && Array.isArray(array)) {\n      _this.copy(array);\n    } else {\n      _this.identity();\n    }\n\n    return _this;\n  }\n\n  _createClass(Matrix4, [{\n    key: \"copy\",\n    value: function copy(array) {\n      this[0] = array[0];\n      this[1] = array[1];\n      this[2] = array[2];\n      this[3] = array[3];\n      this[4] = array[4];\n      this[5] = array[5];\n      this[6] = array[6];\n      this[7] = array[7];\n      this[8] = array[8];\n      this[9] = array[9];\n      this[10] = array[10];\n      this[11] = array[11];\n      this[12] = array[12];\n      this[13] = array[13];\n      this[14] = array[14];\n      this[15] = array[15];\n      return this.check();\n    }\n  }, {\n    key: \"set\",\n    value: function set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m30;\n      this[4] = m01;\n      this[5] = m11;\n      this[6] = m21;\n      this[7] = m31;\n      this[8] = m02;\n      this[9] = m12;\n      this[10] = m22;\n      this[11] = m32;\n      this[12] = m03;\n      this[13] = m13;\n      this[14] = m23;\n      this[15] = m33;\n      return this.check();\n    }\n  }, {\n    key: \"setRowMajor\",\n    value: function setRowMajor(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m30;\n      this[4] = m01;\n      this[5] = m11;\n      this[6] = m21;\n      this[7] = m31;\n      this[8] = m02;\n      this[9] = m12;\n      this[10] = m22;\n      this[11] = m32;\n      this[12] = m03;\n      this[13] = m13;\n      this[14] = m23;\n      this[15] = m33;\n      return this.check();\n    }\n  }, {\n    key: \"toRowMajor\",\n    value: function toRowMajor(result) {\n      result[0] = this[0];\n      result[1] = this[4];\n      result[2] = this[8];\n      result[3] = this[12];\n      result[4] = this[1];\n      result[5] = this[5];\n      result[6] = this[9];\n      result[7] = this[13];\n      result[8] = this[2];\n      result[9] = this[6];\n      result[10] = this[10];\n      result[11] = this[14];\n      result[12] = this[3];\n      result[13] = this[7];\n      result[14] = this[11];\n      result[15] = this[15];\n      return result;\n    }\n  }, {\n    key: \"identity\",\n    value: function identity() {\n      return this.copy(IDENTITY);\n    }\n  }, {\n    key: \"fromQuaternion\",\n    value: function fromQuaternion(q) {\n      mat4.fromQuat(this, q);\n      return this.check();\n    }\n  }, {\n    key: \"frustum\",\n    value: function frustum(_ref) {\n      var left = _ref.left,\n          right = _ref.right,\n          bottom = _ref.bottom,\n          top = _ref.top,\n          near = _ref.near,\n          far = _ref.far;\n\n      if (far === Infinity) {\n        Matrix4._computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);\n      } else {\n        mat4.frustum(this, left, right, bottom, top, near, far);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lookAt\",\n    value: function lookAt(eye, center, up) {\n      if (arguments.length === 1) {\n        var _eye = eye;\n        eye = _eye.eye;\n        center = _eye.center;\n        up = _eye.up;\n      }\n\n      center = center || [0, 0, 0];\n      up = up || [0, 1, 0];\n      mat4.lookAt(this, eye, center, up);\n      return this.check();\n    }\n  }, {\n    key: \"ortho\",\n    value: function ortho(_ref2) {\n      var left = _ref2.left,\n          right = _ref2.right,\n          bottom = _ref2.bottom,\n          top = _ref2.top,\n          _ref2$near = _ref2.near,\n          near = _ref2$near === void 0 ? 0.1 : _ref2$near,\n          _ref2$far = _ref2.far,\n          far = _ref2$far === void 0 ? 500 : _ref2$far;\n      mat4.ortho(this, left, right, bottom, top, near, far);\n      return this.check();\n    }\n  }, {\n    key: \"orthographic\",\n    value: function orthographic(_ref3) {\n      var _ref3$fovy = _ref3.fovy,\n          fovy = _ref3$fovy === void 0 ? 45 * Math.PI / 180 : _ref3$fovy,\n          _ref3$aspect = _ref3.aspect,\n          aspect = _ref3$aspect === void 0 ? 1 : _ref3$aspect,\n          _ref3$focalDistance = _ref3.focalDistance,\n          focalDistance = _ref3$focalDistance === void 0 ? 1 : _ref3$focalDistance,\n          _ref3$near = _ref3.near,\n          near = _ref3$near === void 0 ? 0.1 : _ref3$near,\n          _ref3$far = _ref3.far,\n          far = _ref3$far === void 0 ? 500 : _ref3$far;\n\n      if (fovy > Math.PI * 2) {\n        throw Error('radians');\n      }\n\n      var halfY = fovy / 2;\n      var top = focalDistance * Math.tan(halfY);\n      var right = top * aspect;\n      return new Matrix4().ortho({\n        left: -right,\n        right: right,\n        bottom: -top,\n        top: top,\n        near: near,\n        far: far\n      });\n    }\n  }, {\n    key: \"perspective\",\n    value: function perspective() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          fovy = _ref4.fovy,\n          _ref4$fov = _ref4.fov,\n          fov = _ref4$fov === void 0 ? 45 * Math.PI / 180 : _ref4$fov,\n          _ref4$aspect = _ref4.aspect,\n          aspect = _ref4$aspect === void 0 ? 1 : _ref4$aspect,\n          _ref4$near = _ref4.near,\n          near = _ref4$near === void 0 ? 0.1 : _ref4$near,\n          _ref4$far = _ref4.far,\n          far = _ref4$far === void 0 ? 500 : _ref4$far;\n\n      fovy = fovy || fov;\n\n      if (fovy > Math.PI * 2) {\n        throw Error('radians');\n      }\n\n      mat4.perspective(this, fovy, aspect, near, far);\n      return this.check();\n    }\n  }, {\n    key: \"determinant\",\n    value: function determinant() {\n      return mat4.determinant(this);\n    }\n  }, {\n    key: \"getScale\",\n    value: function getScale() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n      result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);\n      result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);\n      result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);\n      return result;\n    }\n  }, {\n    key: \"getTranslation\",\n    value: function getTranslation() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n      result[0] = this[12];\n      result[1] = this[13];\n      result[2] = this[14];\n      return result;\n    }\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n      var scaleResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var scale = this.getScale(scaleResult || [-0, -0, -0]);\n      var inverseScale0 = 1 / scale[0];\n      var inverseScale1 = 1 / scale[1];\n      var inverseScale2 = 1 / scale[2];\n      result[0] = this[0] * inverseScale0;\n      result[1] = this[1] * inverseScale1;\n      result[2] = this[2] * inverseScale2;\n      result[3] = 0;\n      result[4] = this[4] * inverseScale0;\n      result[5] = this[5] * inverseScale1;\n      result[6] = this[6] * inverseScale2;\n      result[7] = 0;\n      result[8] = this[8] * inverseScale0;\n      result[9] = this[9] * inverseScale1;\n      result[10] = this[10] * inverseScale2;\n      result[11] = 0;\n      result[12] = 0;\n      result[13] = 0;\n      result[14] = 0;\n      result[15] = 1;\n      return result;\n    }\n  }, {\n    key: \"getRotationMatrix3\",\n    value: function getRotationMatrix3() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0, -0, -0, -0, -0, -0, -0];\n      var scaleResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var scale = this.getScale(scaleResult || [-0, -0, -0]);\n      var inverseScale0 = 1 / scale[0];\n      var inverseScale1 = 1 / scale[1];\n      var inverseScale2 = 1 / scale[2];\n      result[0] = this[0] * inverseScale0;\n      result[1] = this[1] * inverseScale1;\n      result[2] = this[2] * inverseScale2;\n      result[3] = this[4] * inverseScale0;\n      result[4] = this[5] * inverseScale1;\n      result[5] = this[6] * inverseScale2;\n      result[6] = this[8] * inverseScale0;\n      result[7] = this[9] * inverseScale1;\n      result[8] = this[10] * inverseScale2;\n      return result;\n    }\n  }, {\n    key: \"transpose\",\n    value: function transpose() {\n      mat4.transpose(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      mat4.invert(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyLeft\",\n    value: function multiplyLeft(a) {\n      mat4.multiply(this, a, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyRight\",\n    value: function multiplyRight(a) {\n      mat4.multiply(this, this, a);\n      return this.check();\n    }\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(radians) {\n      mat4.rotateX(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(radians) {\n      mat4.rotateY(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateZ\",\n    value: function rotateZ(radians) {\n      mat4.rotateZ(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateXYZ\",\n    value: function rotateXYZ(_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 3),\n          rx = _ref6[0],\n          ry = _ref6[1],\n          rz = _ref6[2];\n\n      return this.rotateX(rx).rotateY(ry).rotateZ(rz);\n    }\n  }, {\n    key: \"rotateAxis\",\n    value: function rotateAxis(radians, axis) {\n      mat4.rotate(this, this, radians, axis);\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(factor) {\n      if (Array.isArray(factor)) {\n        mat4.scale(this, this, factor);\n      } else {\n        mat4.scale(this, this, [factor, factor, factor]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(vec) {\n      mat4.translate(this, this, vec);\n      return this.check();\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(vector, result) {\n      if (vector.length === 4) {\n        result = vec4.transformMat4(result || [-0, -0, -0, -0], vector, this);\n        checkVector(result, 4);\n        return result;\n      }\n\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformAsPoint\",\n    value: function transformAsPoint(vector, result) {\n      var length = vector.length;\n\n      switch (length) {\n        case 2:\n          result = vec2.transformMat4(result || [-0, -0], vector, this);\n          break;\n\n        case 3:\n          result = vec3.transformMat4(result || [-0, -0, -0], vector, this);\n          break;\n\n        default:\n          throw new Error('Illegal vector');\n      }\n\n      checkVector(result, vector.length);\n      return result;\n    }\n  }, {\n    key: \"transformAsVector\",\n    value: function transformAsVector(vector, result) {\n      switch (vector.length) {\n        case 2:\n          result = vec2_transformMat4AsVector(result || [-0, -0], vector, this);\n          break;\n\n        case 3:\n          result = vec3_transformMat4AsVector(result || [-0, -0, -0], vector, this);\n          break;\n\n        default:\n          throw new Error('Illegal vector');\n      }\n\n      checkVector(result, vector.length);\n      return result;\n    }\n  }, {\n    key: \"makeRotationX\",\n    value: function makeRotationX(radians) {\n      return this.identity().rotateX(radians);\n    }\n  }, {\n    key: \"makeTranslation\",\n    value: function makeTranslation(x, y, z) {\n      return this.identity().translate([x, y, z]);\n    }\n  }, {\n    key: \"transformPoint\",\n    value: function transformPoint(vector, result) {\n      deprecated('Matrix4.transformPoint', '3.0');\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformVector\",\n    value: function transformVector(vector, result) {\n      deprecated('Matrix4.transformVector', '3.0');\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformDirection\",\n    value: function transformDirection(vector, result) {\n      deprecated('Matrix4.transformDirection', '3.0');\n      return this.transformAsVector(vector, result);\n    }\n  }], [{\n    key: \"_computeInfinitePerspectiveOffCenter\",\n    value: function _computeInfinitePerspectiveOffCenter(result, left, right, bottom, top, near) {\n      var column0Row0 = 2.0 * near / (right - left);\n      var column1Row1 = 2.0 * near / (top - bottom);\n      var column2Row0 = (right + left) / (right - left);\n      var column2Row1 = (top + bottom) / (top - bottom);\n      var column2Row2 = -1.0;\n      var column2Row3 = -1.0;\n      var column3Row2 = -2.0 * near;\n      result[0] = column0Row0;\n      result[1] = 0.0;\n      result[2] = 0.0;\n      result[3] = 0.0;\n      result[4] = 0.0;\n      result[5] = column1Row1;\n      result[6] = 0.0;\n      result[7] = 0.0;\n      result[8] = column2Row0;\n      result[9] = column2Row1;\n      result[10] = column2Row2;\n      result[11] = column2Row3;\n      result[12] = 0.0;\n      result[13] = 0.0;\n      result[14] = column3Row2;\n      result[15] = 0.0;\n      return result;\n    }\n  }]);\n\n  return Matrix4;\n}(Matrix);\n\nexport { Matrix4 as default };"],"sourceRoot":""}