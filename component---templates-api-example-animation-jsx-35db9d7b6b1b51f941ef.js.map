{"version":3,"sources":["webpack:///../node_modules/math.gl/dist/esm/lib/validators.js","webpack:///../node_modules/math.gl/dist/esm/lib/assert.js","webpack:///../modules/engine/src/animation/timeline.js","webpack:///../node_modules/gl-matrix/esm/vec4.js","webpack:///../modules/engine/src/geometries/cube-geometry.js","webpack:///./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack:///../node_modules/gl-matrix/esm/vec3.js","webpack:///./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///../modules/engine/src/geometry/geometry.js","webpack:///../modules/shadertools/src/modules/project/project.js","webpack:///../modules/shadertools/src/modules/dirlight/dirlight.js","webpack:///./node_modules/@babel/runtime/helpers/esm/construct.js","webpack:///../node_modules/math.gl/dist/esm/classes/base/matrix.js","webpack:///../node_modules/gl-matrix/esm/mat4.js","webpack:///../node_modules/gl-matrix/esm/vec2.js","webpack:///../node_modules/math.gl/dist/esm/classes/matrix4.js","webpack:///../examples/utils/index.js","webpack:///../modules/engine/src/animation/key-frames.js","webpack:///../examples/api/animation/app.js","webpack:///./templates/api/example-animation.jsx","webpack:///./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack:///../node_modules/math.gl/dist/esm/lib/common.js","webpack:///./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack:///../node_modules/math.gl/dist/esm/lib/gl-matrix-extras.js","webpack:///../node_modules/gl-matrix/esm/common.js","webpack:///./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","webpack:///./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","webpack:///../node_modules/math.gl/dist/esm/classes/base/math-array.js"],"names":["checkNumber","value","Number","isFinite","Error","concat","checkVector","v","length","callerName","debug","i","validateVector","map","deprecated","method","version","console","warn","assert","condition","message","channelHandles","animationHandles","Timeline","this","time","channels","animations","playing","lastEngineTime","addChannel","props","delay","duration","rate","handle","channel","repeat","_setChannelTime","set","removeChannel","delete","animationHandle","animation","detachAnimation","isFinished","get","getTime","setTime","Math","animationData","play","pause","reset","attachAnimation","channelHandle","update","engineTime","offsetTime","clone","a","out","fromValues","x","y","z","w","copy","add","b","scale","sqrt","squaredLength","normalize","len","dot","lerp","t","ax","ay","az","aw","transformMat4","m","transformQuat","q","qx","qy","qz","qw","ix","iy","iz","iw","exactEquals","equals","a0","a1","a2","a3","b0","b1","b2","b3","abs","max","vec","Float32Array","CUBE_INDICES","Uint16Array","CUBE_POSITIONS","CUBE_NORMALS","CUBE_TEX_COORDS","ATTRIBUTES","POSITION","size","NORMAL","TEXCOORD_0","CubeGeometry","id","uid","indices","attributes","Geometry","_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","writable","configurable","cross","bx","by","bz","transformMat3","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","rotateX","c","p","r","cos","sin","rotateY","rotateZ","angle","tempA","tempB","cosine","PI","acos","_slicedToArray","arr","Array","isArray","Symbol","iterator","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","DRAW_MODE","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","drawMode","vertexCount","userData","_setAttributes","_calculateVertexCount","getVertexCount","getAttributes","_print","ArrayBuffer","attribute","attributeName","isIndexed","IDENTITY_MATRIX","DEFAULT_MODULE_OPTIONS","modelMatrix","viewMatrix","projectionMatrix","cameraPositionWorld","name","getUniforms","opts","prevUniforms","uniforms","vs","common","fs","lightDirection","dependencies","project","_construct","Parent","args","Class","Reflect","construct","sham","Proxy","Date","e","isNativeReflectConstruct","apply","instance","Function","bind","arguments","_MathArray","Matrix","key","string","printRowMajor","row","RANK","col","ELEMENTS","columnIndex","result","fill","firstIndex","columnVector","multiply","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","fovy","aspect","near","far","nf","f","tan","Infinity","eye","center","up","x0","x1","x2","y0","y1","y2","z0","z1","z2","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","identity","IDENTITY","freeze","ZERO","INDICES","COL0ROW0","COL0ROW1","COL0ROW2","COL0ROW3","COL1ROW0","COL1ROW1","COL1ROW2","COL1ROW3","COL2ROW0","COL2ROW1","COL2ROW2","COL2ROW3","COL3ROW0","COL3ROW1","COL3ROW2","COL3ROW3","constants","_Matrix","Matrix4","array","_this","check","m00","m10","m20","m30","m01","m11","m21","m31","m02","m12","m22","m32","m03","m13","m23","m33","xx","yx","yy","zx","zy","zz","wx","wy","wz","_ref","left","right","bottom","top","_computeInfinitePerspectiveOffCenter","rl","tb","_eye","_ref2","_ref2$near","_ref2$far","lr","bt","_ref3","_ref3$fovy","_ref3$aspect","_ref3$focalDistance","focalDistance","_ref3$near","_ref3$far","halfY","ortho","_ref4","_ref4$fov","fov","_ref4$aspect","_ref4$near","_ref4$far","scaleResult","getScale","inverseScale0","inverseScale1","inverseScale2","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","radians","rad","s","_ref5","_ref6","rx","ry","rz","axis","b12","b20","b21","b22","factor","vector","vec4","transformAsPoint","vec3","translate","transformAsVector","column0Row0","column1Row1","column2Row0","column2Row1","column3Row2","MiniAnimationLoop","start","stop","_setDisplay","_getCanvas","canvas","document","dpr","window","_getContainer","container","parent","width","height","style","position","appendChild","_removeContainer","removeChild","getRandom","n","KeyFrames","_lastTime","startIndex","endIndex","times","values","setKeyFrames","keyFrames","numKeys","_calculateKeys","getStartTime","getEndTime","getStartData","getEndData","index","startTime","endTime","random","AppAnimationLoop","getInfo","onInitialize","gl","_animationLoop","setParameters","clearColor","clearDepth","depthTest","depthFunc","LEQUAL","playButton","pauseButton","timeSlider","event","parseFloat","translations","rotations","colors","attachTimeline","timeline","POSITIVE_INFINITY","keyFrameData","cubes","translation","rotation","model","modules","geometry","uProjection","uView","uColor","onRender","animationProps","cube","startRotation","endRotation","rotationX","rotationY","rotationZ","uModel","onFinalize","AnimationLoop","animationLoop","Example","render","exampleConfig","pageContext","React","Component","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","DEGREES_TO_RADIANS","config","formatValue","_ref$precision","precision","round","EPSILON","toPrecision","isView","func","degrees","epsilon","oldEpsilon","printTypes","printDegrees","_possibleConstructorReturn","self","ReferenceError","_setPrototypeOf","vec2_transformMat4AsVector","vec3_transformMat4AsVector","vec3_transformMat2","ARRAY_TYPE","RANDOM","_cache","Map","fn","indexOf","has","Wrapper","enumerable","_Array","MathArray","arrayOrObject","fromObject","offset","toArray","toObject","target","to","formatString","ai","min","minVector","maxVector","_len","vectors","_key","_vectors","_len2","_key2","_i2","_vectors2","_scale","subtract","addScalar","scalar","validate","valid"],"mappings":"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","file":"component---templates-api-example-animation-jsx-35db9d7b6b1b51f941ef.js","sourcesContent":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-finite\";\nimport { config } from './common';\nexport function validateVector(v, length) {\n  if (v.length !== length) {\n    return false;\n  }\n\n  for (var i = 0; i < v.length; ++i) {\n    if (!Number.isFinite(v[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function checkNumber(value) {\n  if (!Number.isFinite(value)) {\n    throw new Error(\"Invalid number \".concat(value));\n  }\n\n  return value;\n}\nexport function checkVector(v, length, callerName) {\n  if (config.debug && !validateVector(v, length)) {\n    throw new Error(\"math.gl: \".concat(callerName | '', \" some fields set to invalid numbers'\"));\n  }\n\n  return v;\n}\nvar map = {};\nexport function deprecated(method, version) {\n  if (!map[method]) {\n    map[method] = true;\n    console.warn(\"\".concat(method, \" has been removed in version \").concat(version, \", see upgrade guide for more information\"));\n  }\n}","export default function assert(condition, message) {\n  if (!condition) {\n    throw new Error(\"math.gl assertion \".concat(message));\n  }\n}","let channelHandles = 1;\nlet animationHandles = 1;\n\nexport class Timeline {\n  constructor() {\n    this.time = 0;\n    this.channels = new Map();\n    this.animations = new Map();\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  addChannel(props) {\n    const {delay = 0, duration = Number.POSITIVE_INFINITY, rate = 1, repeat = 1} = props;\n\n    const handle = channelHandles++;\n    const channel = {\n      time: 0,\n      delay,\n      duration,\n      rate,\n      repeat\n    };\n    this._setChannelTime(channel, this.time);\n    this.channels.set(handle, channel);\n\n    return handle;\n  }\n\n  removeChannel(handle) {\n    this.channels.delete(handle);\n\n    for (const [animationHandle, animation] of this.animations) {\n      if (animation.channel === handle) {\n        this.detachAnimation(animationHandle);\n      }\n    }\n  }\n\n  isFinished(handle) {\n    const channel = this.channels.get(handle);\n    if (channel === undefined) {\n      return false;\n    }\n\n    return this.time >= channel.delay + channel.duration * channel.repeat;\n  }\n\n  getTime(handle) {\n    if (handle === undefined) {\n      return this.time;\n    }\n\n    const channel = this.channels.get(handle);\n\n    if (channel === undefined) {\n      return -1;\n    }\n\n    return channel.time;\n  }\n\n  setTime(time) {\n    this.time = Math.max(0, time);\n\n    const channels = this.channels.values();\n    for (const channel of channels) {\n      this._setChannelTime(channel, this.time);\n    }\n\n    const animations = this.animations.values();\n    for (const animationData of animations) {\n      const {animation, channel} = animationData;\n      animation.setTime(this.getTime(channel));\n    }\n  }\n\n  play() {\n    this.playing = true;\n  }\n\n  pause() {\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  reset() {\n    this.setTime(0);\n  }\n\n  attachAnimation(animation, channelHandle) {\n    const animationHandle = animationHandles++;\n\n    this.animations.set(animationHandle, {\n      animation,\n      channel: channelHandle\n    });\n\n    animation.setTime(this.getTime(channelHandle));\n\n    return animationHandle;\n  }\n\n  detachAnimation(handle) {\n    this.animations.delete(handle);\n  }\n\n  update(engineTime) {\n    if (this.playing) {\n      if (this.lastEngineTime === -1) {\n        this.lastEngineTime = engineTime;\n      }\n      this.setTime(this.time + (engineTime - this.lastEngineTime));\n      this.lastEngineTime = engineTime;\n    }\n  }\n\n  _setChannelTime(channel, time) {\n    const offsetTime = time - channel.delay;\n    const totalDuration = channel.duration * channel.repeat;\n    // Note(Tarek): Don't loop on final repeat.\n    if (offsetTime >= totalDuration) {\n      channel.time = channel.duration * channel.rate;\n    } else {\n      channel.time = Math.max(0, offsetTime) % channel.duration;\n      channel.time *= channel.rate;\n    }\n  }\n}\n","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import Geometry from '../geometry/geometry';\nimport {uid} from '@luma.gl/webgl';\n\n// prettier-ignore\nconst CUBE_INDICES = new Uint16Array([\n  0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13,\n  14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23\n]);\n\n// prettier-ignore\nconst CUBE_POSITIONS = new Float32Array([\n  -1,  -1,  1, 1,  -1,  1,  1,  1,  1,  -1,  1,  1,\n  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1,  -1,\n  -1,  1,  -1,  -1,  1,  1,  1,  1,  1,  1,  1,  -1,\n  -1,  -1,  -1,  1,  -1,  -1,  1,  -1,  1,  -1,  -1,  1,\n  1,  -1,  -1,  1,  1,  -1,  1,  1,  1,  1,  -1,  1,\n  -1,  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1\n]);\n\n// TODO - could be Uint8\n// prettier-ignore\nconst CUBE_NORMALS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,\n  // Back face\n  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,\n  // Top face\n  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,\n  // Bottom face\n  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,\n  // Right face\n  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,\n  // Left face\n  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0\n]);\n\n// prettier-ignore\nconst CUBE_TEX_COORDS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  1,  1,  0,  1,\n  // Back face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Top face\n  0,  1,  0,  0,  1,  0,  1,  1,\n  // Bottom face\n  1,  1,  0,  1,  0,  0,  1,  0,\n  // Right face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Left face\n  0,  0,  1,  0,  1,  1,  0,  1\n]);\n\nconst ATTRIBUTES = {\n  POSITION: {size: 3, value: new Float32Array(CUBE_POSITIONS)},\n  NORMAL: {size: 3, value: new Float32Array(CUBE_NORMALS)},\n  TEXCOORD_0: {size: 2, value: new Float32Array(CUBE_TEX_COORDS)}\n};\n\nexport default class CubeGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('cube-geometry')} = props;\n    super({\n      ...props,\n      id,\n      indices: {size: 1, value: new Uint16Array(CUBE_INDICES)},\n      attributes: {...ATTRIBUTES, ...props.attributes}\n    });\n  }\n}\n","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import {uid, assert} from '@luma.gl/webgl';\n\n// Rendering primitives - specify how to extract primitives from vertices.\n// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants\nexport const DRAW_MODE = {\n  POINTS: 0x0000, // draw single points.\n  LINES: 0x0001, // draw lines. Each vertex connects to the one after it.\n  LINE_LOOP: 0x0002, // draw lines. Each set of two vertices is treated as a separate line segment.\n  LINE_STRIP: 0x0003, // draw a connected group of line segments from the first vertex to the last\n  TRIANGLES: 0x0004, // draw triangles. Each set of three vertices creates a separate triangle.\n  TRIANGLE_STRIP: 0x0005, // draw a connected group of triangles.\n  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.\n  // Each vertex connects to the previous and the first vertex in the fan.\n};\n\nexport default class Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n\n  constructor(props = {}) {\n    const {\n      id = uid('geometry'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n\n    // stubRemovedMethods(this, [\n    //   'setNeedsRedraw', 'needsRedraw', 'setAttributes'\n    // ], 'Immutable');\n\n    // stubRemovedMethods(this, [\n    //   'hasAttribute', 'getAttribute', 'getArray'\n    // ], 'Use geometry.attributes and geometry.indices');\n\n    // deprecateMethods(this, ['getAttributes'])\n  }\n\n  get mode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  // Return an object with all attributes plus indices added as a field.\n  getAttributes() {\n    return this.indices ? {indices: this.indices, ...this.attributes} : this.attributes;\n  }\n\n  // PRIVATE\n\n  _print(attributeName) {\n    return `Geometry ${this.id} attribute ${attributeName}`;\n  }\n\n  // Attribute\n  // value: typed array\n  // type: indices, vertices, uvs\n  // size: elements per vertex\n  // target: WebGL buffer type (string or constant)\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {value: indices, size: 1} : indices;\n    }\n\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n\n      // Wrap \"unwrapped\" arrays and try to autodetect their type\n      attribute = ArrayBuffer.isView(attribute) ? {value: attribute} : attribute;\n\n      assert(\n        ArrayBuffer.isView(attribute.value),\n        `${this._print(attributeName)}: must be typed array or object with value as typed array`\n      );\n\n      if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n        attribute.size = 3;\n      }\n\n      // Move indices to separate field\n      if (attributeName === 'indices') {\n        assert(!this.indices);\n        this.indices = attribute;\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n\n    if (this.indices && this.indices.isIndexed !== undefined) {\n      this.indices = Object.assign({}, this.indices);\n      delete this.indices.isIndexed;\n    }\n\n    return this;\n  }\n\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n    let vertexCount = Infinity;\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {value, size, constant} = attribute;\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n\n    assert(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n}\n","import {Matrix4} from 'math.gl';\n\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\nconst DEFAULT_MODULE_OPTIONS = {\n  modelMatrix: IDENTITY_MATRIX,\n  viewMatrix: IDENTITY_MATRIX,\n  projectionMatrix: IDENTITY_MATRIX,\n  cameraPositionWorld: [0, 0, 0]\n};\n\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS, prevUniforms = {}) {\n  // const viewProjectionInverse = viewProjection.invert();\n  // viewInverseMatrix: view.invert(),\n  // viewProjectionInverseMatrix: viewProjectionInverse\n\n  const uniforms = {};\n  if (opts.modelMatrix !== undefined) {\n    uniforms.modelMatrix = opts.modelMatrix;\n  }\n  if (opts.viewMatrix !== undefined) {\n    uniforms.viewMatrix = opts.viewMatrix;\n  }\n  if (opts.projectionMatrix !== undefined) {\n    uniforms.projectionMatrix = opts.projectionMatrix;\n  }\n  if (opts.cameraPositionWorld !== undefined) {\n    uniforms.cameraPositionWorld = opts.cameraPositionWorld;\n  }\n\n  // COMPOSITE UNIFORMS\n  if (opts.projectionMatrix !== undefined || opts.viewMatrix !== undefined) {\n    uniforms.viewProjectionMatrix = new Matrix4(opts.projectionMatrix).multiplyRight(\n      opts.viewMatrix\n    );\n  }\n\n  return uniforms;\n}\n\nconst common = `\\\nvarying vec4 project_vPositionWorld;\nvarying vec3 project_vNormalWorld;\n\nvec4 project_getPosition_World() {\n  return project_vPositionWorld;\n}\n\nvec3 project_getNormal_World() {\n  return project_vNormalWorld;\n}\n`;\n\nconst vs = `\\\n${common}\n\n// Unprefixed uniforms\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewProjectionMatrix;\nuniform vec3 cameraPositionWorld;\n\nstruct World {\n  vec3 position;\n  vec3 normal;\n};\n\nWorld world;\n\nvoid project_setPosition(vec4 position) {\n  project_vPositionWorld = position;\n}\n\nvoid project_setNormal(vec3 normal) {\n  project_vNormalWorld = normal;\n}\n\nvoid project_setPositionAndNormal_World(vec3 position, vec3 normal) {\n  world.position = position;\n  world.normal = normal;\n}\n\nvoid project_setPositionAndNormal_Model(vec3 position, vec3 normal) {\n  world.position = (modelMatrix * vec4(position, 1.)).xyz;\n  world.normal = mat3(modelMatrix) * normal;\n}\n\nvec4 project_model_to_clipspace(vec4 position) {\n  return viewProjectionMatrix * modelMatrix * position;\n}\n\nvec4 project_model_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * modelMatrix * vec4(position, 1.);\n}\n\nvec4 project_world_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_view_to_clipspace(vec3 position) {\n  return projectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n`;\n\nconst fs = `\n${common}\\\n`;\n\nexport default {\n  name: 'project',\n  getUniforms,\n  vs,\n  fs\n};\n","// Cheap lighting - single directional light, single dot product, one uniform\n\nimport project from '../project/project';\n\n/* eslint-disable camelcase */\nconst DEFAULT_LIGHT_DIRECTION = new Float32Array([1, 1, 2]);\n\nconst DEFAULT_MODULE_OPTIONS = {\n  lightDirection: DEFAULT_LIGHT_DIRECTION\n};\n\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS) {\n  const uniforms = {};\n  if (opts.lightDirection) {\n    uniforms.dirlight_uLightDirection = opts.lightDirection;\n  }\n  return uniforms;\n}\n\n// TODO - reuse normal from geometry module\nconst vs = null;\n\nconst fs = `\\\nuniform vec3 dirlight_uLightDirection;\n\n/*\n * Returns color attenuated by angle from light source\n */\nvec4 dirlight_filterColor(vec4 color) {\n  vec3 normal = project_getNormal_World();\n  float d = abs(dot(normalize(normal), normalize(dirlight_uLightDirection)));\n  return vec4(color.rgb * d, color.a);\n}\n`;\n\nexport default {\n  name: 'dirlight',\n  vs,\n  fs,\n  getUniforms,\n  dependencies: [project]\n};\n","import setPrototypeOf from \"./setPrototypeOf\";\n\nfunction isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import \"core-js/modules/es6.array.fill\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport MathArray from './math-array';\nimport { checkNumber } from '../../lib/validators';\nimport { config } from '../../lib/common';\n\nvar Matrix = function (_MathArray) {\n  _inherits(Matrix, _MathArray);\n\n  function Matrix() {\n    _classCallCheck(this, Matrix);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Matrix).apply(this, arguments));\n  }\n\n  _createClass(Matrix, [{\n    key: \"toString\",\n    value: function toString() {\n      var string = '[';\n\n      if (config.printRowMajor) {\n        string += 'row-major:';\n\n        for (var row = 0; row < this.RANK; ++row) {\n          for (var col = 0; col < this.RANK; ++col) {\n            string += \" \".concat(this[col * this.RANK + row]);\n          }\n        }\n      } else {\n        string += 'column-major:';\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          string += \" \".concat(this[i]);\n        }\n      }\n\n      string += ']';\n      return string;\n    }\n  }, {\n    key: \"getElementIndex\",\n    value: function getElementIndex(row, col) {\n      return col * this.RANK + row;\n    }\n  }, {\n    key: \"getElement\",\n    value: function getElement(row, col) {\n      return this[col * this.RANK + row];\n    }\n  }, {\n    key: \"setElement\",\n    value: function setElement(row, col, value) {\n      this[col * this.RANK + row] = checkNumber(value);\n      return this;\n    }\n  }, {\n    key: \"getColumn\",\n    value: function getColumn(columnIndex) {\n      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Array(this.RANK).fill(-0);\n      var firstIndex = columnIndex * this.RANK;\n\n      for (var i = 0; i < this.RANK; ++i) {\n        result[i] = this[firstIndex + i];\n      }\n\n      return result;\n    }\n  }, {\n    key: \"setColumn\",\n    value: function setColumn(columnIndex, columnVector) {\n      var firstIndex = columnIndex * this.RANK;\n\n      for (var i = 0; i < this.RANK; ++i) {\n        this[firstIndex + i] = columnVector[i];\n      }\n\n      return this;\n    }\n  }]);\n\n  return Matrix;\n}(MathArray);\n\nexport { Matrix as default };","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import \"core-js/modules/es6.array.is-array\";\nimport \"core-js/modules/es6.object.freeze\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { checkVector, deprecated } from '../lib/validators';\nimport Matrix from './base/matrix';\nimport { vec2_transformMat4AsVector, vec3_transformMat4AsVector } from '../lib/gl-matrix-extras';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport * as vec4 from 'gl-matrix/vec4';\nvar IDENTITY = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\nvar ZERO = Object.freeze([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nvar INDICES = Object.freeze({\n  COL0ROW0: 0,\n  COL0ROW1: 1,\n  COL0ROW2: 2,\n  COL0ROW3: 3,\n  COL1ROW0: 4,\n  COL1ROW1: 5,\n  COL1ROW2: 6,\n  COL1ROW3: 7,\n  COL2ROW0: 8,\n  COL2ROW1: 9,\n  COL2ROW2: 10,\n  COL2ROW3: 11,\n  COL3ROW0: 12,\n  COL3ROW1: 13,\n  COL3ROW2: 14,\n  COL3ROW3: 15\n});\nvar constants = {};\n\nvar Matrix4 = function (_Matrix) {\n  _inherits(Matrix4, _Matrix);\n\n  _createClass(Matrix4, [{\n    key: \"INDICES\",\n    get: function get() {\n      return INDICES;\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 16;\n    }\n  }, {\n    key: \"RANK\",\n    get: function get() {\n      return 4;\n    }\n  }], [{\n    key: \"IDENTITY\",\n    get: function get() {\n      constants.IDENTITY = constants.IDENTITY || Object.freeze(new Matrix4(IDENTITY));\n      return constants.IDENTITY;\n    }\n  }, {\n    key: \"ZERO\",\n    get: function get() {\n      constants.ZERO = constants.ZERO || Object.freeze(new Matrix4(ZERO));\n      return constants.ZERO;\n    }\n  }]);\n\n  function Matrix4(array) {\n    var _this;\n\n    _classCallCheck(this, Matrix4);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Matrix4).call(this, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0));\n\n    if (arguments.length === 1 && Array.isArray(array)) {\n      _this.copy(array);\n    } else {\n      _this.identity();\n    }\n\n    return _this;\n  }\n\n  _createClass(Matrix4, [{\n    key: \"copy\",\n    value: function copy(array) {\n      this[0] = array[0];\n      this[1] = array[1];\n      this[2] = array[2];\n      this[3] = array[3];\n      this[4] = array[4];\n      this[5] = array[5];\n      this[6] = array[6];\n      this[7] = array[7];\n      this[8] = array[8];\n      this[9] = array[9];\n      this[10] = array[10];\n      this[11] = array[11];\n      this[12] = array[12];\n      this[13] = array[13];\n      this[14] = array[14];\n      this[15] = array[15];\n      return this.check();\n    }\n  }, {\n    key: \"set\",\n    value: function set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m30;\n      this[4] = m01;\n      this[5] = m11;\n      this[6] = m21;\n      this[7] = m31;\n      this[8] = m02;\n      this[9] = m12;\n      this[10] = m22;\n      this[11] = m32;\n      this[12] = m03;\n      this[13] = m13;\n      this[14] = m23;\n      this[15] = m33;\n      return this.check();\n    }\n  }, {\n    key: \"setRowMajor\",\n    value: function setRowMajor(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m30;\n      this[4] = m01;\n      this[5] = m11;\n      this[6] = m21;\n      this[7] = m31;\n      this[8] = m02;\n      this[9] = m12;\n      this[10] = m22;\n      this[11] = m32;\n      this[12] = m03;\n      this[13] = m13;\n      this[14] = m23;\n      this[15] = m33;\n      return this.check();\n    }\n  }, {\n    key: \"toRowMajor\",\n    value: function toRowMajor(result) {\n      result[0] = this[0];\n      result[1] = this[4];\n      result[2] = this[8];\n      result[3] = this[12];\n      result[4] = this[1];\n      result[5] = this[5];\n      result[6] = this[9];\n      result[7] = this[13];\n      result[8] = this[2];\n      result[9] = this[6];\n      result[10] = this[10];\n      result[11] = this[14];\n      result[12] = this[3];\n      result[13] = this[7];\n      result[14] = this[11];\n      result[15] = this[15];\n      return result;\n    }\n  }, {\n    key: \"identity\",\n    value: function identity() {\n      return this.copy(IDENTITY);\n    }\n  }, {\n    key: \"fromQuaternion\",\n    value: function fromQuaternion(q) {\n      mat4.fromQuat(this, q);\n      return this.check();\n    }\n  }, {\n    key: \"frustum\",\n    value: function frustum(_ref) {\n      var left = _ref.left,\n          right = _ref.right,\n          bottom = _ref.bottom,\n          top = _ref.top,\n          near = _ref.near,\n          far = _ref.far;\n\n      if (far === Infinity) {\n        Matrix4._computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);\n      } else {\n        mat4.frustum(this, left, right, bottom, top, near, far);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lookAt\",\n    value: function lookAt(eye, center, up) {\n      if (arguments.length === 1) {\n        var _eye = eye;\n        eye = _eye.eye;\n        center = _eye.center;\n        up = _eye.up;\n      }\n\n      center = center || [0, 0, 0];\n      up = up || [0, 1, 0];\n      mat4.lookAt(this, eye, center, up);\n      return this.check();\n    }\n  }, {\n    key: \"ortho\",\n    value: function ortho(_ref2) {\n      var left = _ref2.left,\n          right = _ref2.right,\n          bottom = _ref2.bottom,\n          top = _ref2.top,\n          _ref2$near = _ref2.near,\n          near = _ref2$near === void 0 ? 0.1 : _ref2$near,\n          _ref2$far = _ref2.far,\n          far = _ref2$far === void 0 ? 500 : _ref2$far;\n      mat4.ortho(this, left, right, bottom, top, near, far);\n      return this.check();\n    }\n  }, {\n    key: \"orthographic\",\n    value: function orthographic(_ref3) {\n      var _ref3$fovy = _ref3.fovy,\n          fovy = _ref3$fovy === void 0 ? 45 * Math.PI / 180 : _ref3$fovy,\n          _ref3$aspect = _ref3.aspect,\n          aspect = _ref3$aspect === void 0 ? 1 : _ref3$aspect,\n          _ref3$focalDistance = _ref3.focalDistance,\n          focalDistance = _ref3$focalDistance === void 0 ? 1 : _ref3$focalDistance,\n          _ref3$near = _ref3.near,\n          near = _ref3$near === void 0 ? 0.1 : _ref3$near,\n          _ref3$far = _ref3.far,\n          far = _ref3$far === void 0 ? 500 : _ref3$far;\n\n      if (fovy > Math.PI * 2) {\n        throw Error('radians');\n      }\n\n      var halfY = fovy / 2;\n      var top = focalDistance * Math.tan(halfY);\n      var right = top * aspect;\n      return new Matrix4().ortho({\n        left: -right,\n        right: right,\n        bottom: -top,\n        top: top,\n        near: near,\n        far: far\n      });\n    }\n  }, {\n    key: \"perspective\",\n    value: function perspective() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          fovy = _ref4.fovy,\n          _ref4$fov = _ref4.fov,\n          fov = _ref4$fov === void 0 ? 45 * Math.PI / 180 : _ref4$fov,\n          _ref4$aspect = _ref4.aspect,\n          aspect = _ref4$aspect === void 0 ? 1 : _ref4$aspect,\n          _ref4$near = _ref4.near,\n          near = _ref4$near === void 0 ? 0.1 : _ref4$near,\n          _ref4$far = _ref4.far,\n          far = _ref4$far === void 0 ? 500 : _ref4$far;\n\n      fovy = fovy || fov;\n\n      if (fovy > Math.PI * 2) {\n        throw Error('radians');\n      }\n\n      mat4.perspective(this, fovy, aspect, near, far);\n      return this.check();\n    }\n  }, {\n    key: \"determinant\",\n    value: function determinant() {\n      return mat4.determinant(this);\n    }\n  }, {\n    key: \"getScale\",\n    value: function getScale() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n      result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);\n      result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);\n      result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);\n      return result;\n    }\n  }, {\n    key: \"getTranslation\",\n    value: function getTranslation() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n      result[0] = this[12];\n      result[1] = this[13];\n      result[2] = this[14];\n      return result;\n    }\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n      var scaleResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var scale = this.getScale(scaleResult || [-0, -0, -0]);\n      var inverseScale0 = 1 / scale[0];\n      var inverseScale1 = 1 / scale[1];\n      var inverseScale2 = 1 / scale[2];\n      result[0] = this[0] * inverseScale0;\n      result[1] = this[1] * inverseScale1;\n      result[2] = this[2] * inverseScale2;\n      result[3] = 0;\n      result[4] = this[4] * inverseScale0;\n      result[5] = this[5] * inverseScale1;\n      result[6] = this[6] * inverseScale2;\n      result[7] = 0;\n      result[8] = this[8] * inverseScale0;\n      result[9] = this[9] * inverseScale1;\n      result[10] = this[10] * inverseScale2;\n      result[11] = 0;\n      result[12] = 0;\n      result[13] = 0;\n      result[14] = 0;\n      result[15] = 1;\n      return result;\n    }\n  }, {\n    key: \"getRotationMatrix3\",\n    value: function getRotationMatrix3() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0, -0, -0, -0, -0, -0, -0];\n      var scaleResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var scale = this.getScale(scaleResult || [-0, -0, -0]);\n      var inverseScale0 = 1 / scale[0];\n      var inverseScale1 = 1 / scale[1];\n      var inverseScale2 = 1 / scale[2];\n      result[0] = this[0] * inverseScale0;\n      result[1] = this[1] * inverseScale1;\n      result[2] = this[2] * inverseScale2;\n      result[3] = this[4] * inverseScale0;\n      result[4] = this[5] * inverseScale1;\n      result[5] = this[6] * inverseScale2;\n      result[6] = this[8] * inverseScale0;\n      result[7] = this[9] * inverseScale1;\n      result[8] = this[10] * inverseScale2;\n      return result;\n    }\n  }, {\n    key: \"transpose\",\n    value: function transpose() {\n      mat4.transpose(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      mat4.invert(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyLeft\",\n    value: function multiplyLeft(a) {\n      mat4.multiply(this, a, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyRight\",\n    value: function multiplyRight(a) {\n      mat4.multiply(this, this, a);\n      return this.check();\n    }\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(radians) {\n      mat4.rotateX(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(radians) {\n      mat4.rotateY(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateZ\",\n    value: function rotateZ(radians) {\n      mat4.rotateZ(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateXYZ\",\n    value: function rotateXYZ(_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 3),\n          rx = _ref6[0],\n          ry = _ref6[1],\n          rz = _ref6[2];\n\n      return this.rotateX(rx).rotateY(ry).rotateZ(rz);\n    }\n  }, {\n    key: \"rotateAxis\",\n    value: function rotateAxis(radians, axis) {\n      mat4.rotate(this, this, radians, axis);\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(factor) {\n      if (Array.isArray(factor)) {\n        mat4.scale(this, this, factor);\n      } else {\n        mat4.scale(this, this, [factor, factor, factor]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(vec) {\n      mat4.translate(this, this, vec);\n      return this.check();\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(vector, result) {\n      if (vector.length === 4) {\n        result = vec4.transformMat4(result || [-0, -0, -0, -0], vector, this);\n        checkVector(result, 4);\n        return result;\n      }\n\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformAsPoint\",\n    value: function transformAsPoint(vector, result) {\n      var length = vector.length;\n\n      switch (length) {\n        case 2:\n          result = vec2.transformMat4(result || [-0, -0], vector, this);\n          break;\n\n        case 3:\n          result = vec3.transformMat4(result || [-0, -0, -0], vector, this);\n          break;\n\n        default:\n          throw new Error('Illegal vector');\n      }\n\n      checkVector(result, vector.length);\n      return result;\n    }\n  }, {\n    key: \"transformAsVector\",\n    value: function transformAsVector(vector, result) {\n      switch (vector.length) {\n        case 2:\n          result = vec2_transformMat4AsVector(result || [-0, -0], vector, this);\n          break;\n\n        case 3:\n          result = vec3_transformMat4AsVector(result || [-0, -0, -0], vector, this);\n          break;\n\n        default:\n          throw new Error('Illegal vector');\n      }\n\n      checkVector(result, vector.length);\n      return result;\n    }\n  }, {\n    key: \"makeRotationX\",\n    value: function makeRotationX(radians) {\n      return this.identity().rotateX(radians);\n    }\n  }, {\n    key: \"makeTranslation\",\n    value: function makeTranslation(x, y, z) {\n      return this.identity().translate([x, y, z]);\n    }\n  }, {\n    key: \"transformPoint\",\n    value: function transformPoint(vector, result) {\n      deprecated('Matrix4.transformPoint', '3.0');\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformVector\",\n    value: function transformVector(vector, result) {\n      deprecated('Matrix4.transformVector', '3.0');\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformDirection\",\n    value: function transformDirection(vector, result) {\n      deprecated('Matrix4.transformDirection', '3.0');\n      return this.transformAsVector(vector, result);\n    }\n  }], [{\n    key: \"_computeInfinitePerspectiveOffCenter\",\n    value: function _computeInfinitePerspectiveOffCenter(result, left, right, bottom, top, near) {\n      var column0Row0 = 2.0 * near / (right - left);\n      var column1Row1 = 2.0 * near / (top - bottom);\n      var column2Row0 = (right + left) / (right - left);\n      var column2Row1 = (top + bottom) / (top - bottom);\n      var column2Row2 = -1.0;\n      var column2Row3 = -1.0;\n      var column3Row2 = -2.0 * near;\n      result[0] = column0Row0;\n      result[1] = 0.0;\n      result[2] = 0.0;\n      result[3] = 0.0;\n      result[4] = 0.0;\n      result[5] = column1Row1;\n      result[6] = 0.0;\n      result[7] = 0.0;\n      result[8] = column2Row0;\n      result[9] = column2Row1;\n      result[10] = column2Row2;\n      result[11] = column2Row3;\n      result[12] = 0.0;\n      result[13] = 0.0;\n      result[14] = column3Row2;\n      result[15] = 0.0;\n      return result;\n    }\n  }]);\n\n  return Matrix4;\n}(Matrix);\n\nexport { Matrix4 as default };","/* global window, document */\n\n// Light class implementing the AnimationLoop interface\n// use by examples w/o creating a gl context\nexport class MiniAnimationLoop {\n  static getInfo() {\n    return '';\n  }\n\n  start() {}\n\n  stop() {}\n\n  delete() {}\n\n  _setDisplay() {}\n\n  _getCanvas(props = {}) {\n    let canvas;\n    if (props.canvas) {\n      canvas = document.getElementById(props.canvas);\n      const dpr = window.devicePixelRatio || 1;\n      canvas.height = canvas.clientHeight * dpr;\n      canvas.width = canvas.clientWidth * dpr;\n    } else {\n      canvas = document.createElement('canvas');\n      canvas.width = 800;\n      canvas.height = 600;\n      document.body.appendChild(canvas);\n    }\n\n    return canvas;\n  }\n\n  _getContainer(props = {}) {\n    if (this.container) {\n      return this.container;\n    }\n\n    let width;\n    let height;\n\n    this.container = document.createElement('div');\n\n    if (props.canvas) {\n      const canvas = document.getElementById(props.canvas);\n      this.parent = canvas.parentElement;\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n      this.container.style.position = 'relative';\n      this.container.style.top = `-${height}px`;\n    } else {\n      this.parent = document.body;\n      width = 800;\n      height = 800;\n    }\n\n    this.container.style.width = `${width}px`;\n    this.container.style.height = `${height}px`;\n    this.parent.appendChild(this.container);\n\n    return this.container;\n  }\n\n  _removeContainer(props = {}) {\n    this.parent.removeChild(this.container);\n  }\n}\n\n// Create a deterministic pseudorandom number generator\nexport function getRandom() {\n  let s = 1;\n  let c = 1;\n  return () => {\n    s = Math.sin(c * 17.23);\n    c = Math.cos(s * 27.92);\n    return fract(Math.abs(s * c) * 1432.71);\n  };\n}\n\nfunction fract(n) {\n  return n - Math.floor(n);\n}\n","export class KeyFrames {\n  constructor(keyFrames) {\n    this._lastTime = -1;\n    this.startIndex = -1;\n    this.endIndex = -1;\n    this.factor = 0;\n    this.times = [];\n    this.values = [];\n    this.setKeyFrames(keyFrames);\n    this.setTime(0);\n  }\n\n  setKeyFrames(keyFrames) {\n    const numKeys = keyFrames.length;\n    this.times.length = numKeys;\n    this.values.length = numKeys;\n\n    for (let i = 0; i < numKeys; ++i) {\n      this.times[i] = keyFrames[i][0];\n      this.values[i] = keyFrames[i][1];\n    }\n\n    this._calculateKeys(this._lastTime);\n  }\n\n  setTime(time) {\n    time = Math.max(0, time);\n\n    if (time !== this._lastTime) {\n      this._calculateKeys(time);\n      this._lastTime = time;\n    }\n  }\n\n  getStartTime() {\n    return this.times[this.startIndex];\n  }\n\n  getEndTime() {\n    return this.times[this.endIndex];\n  }\n\n  getStartData() {\n    return this.values[this.startIndex];\n  }\n\n  getEndData() {\n    return this.values[this.endIndex];\n  }\n\n  _calculateKeys(time) {\n    let index = 0;\n    const numKeys = this.times.length;\n\n    for (index = 0; index < numKeys - 2; ++index) {\n      if (this.times[index + 1] > time) {\n        break;\n      }\n    }\n\n    this.startIndex = index;\n    this.endIndex = index + 1;\n\n    const startTime = this.times[this.startIndex];\n    const endTime = this.times[this.endIndex];\n    this.factor = Math.min(Math.max(0, (time - startTime) / (endTime - startTime)), 1);\n  }\n}\n","/* global document */\n\nimport {AnimationLoop, CubeGeometry, Timeline, KeyFrames, Model} from '@luma.gl/engine';\nimport {setParameters} from '@luma.gl/gltools';\nimport {dirlight} from '@luma.gl/shadertools';\nimport {Matrix4, radians} from 'math.gl';\nimport {getRandom} from '../../utils';\n\nconst random = getRandom();\n\nconst INFO_HTML = `\nKey frame animation based on multiple hierarchical timelines.\n<button id=\"play\">Play</button>\n<button id=\"pause\">Pause</button><BR>\nTime: <input type=\"range\" id=\"time\" min=\"0\" max=\"30000\" step=\"1\"><BR>\n`;\n\nconst vs = `\\\nattribute vec3 positions;\nattribute vec3 normals;\n\nuniform vec3 uColor;\nuniform mat4 uModel;\nuniform mat4 uView;\nuniform mat4 uProjection;\n\nvarying vec3 color;\n\nvoid main(void) {\n  vec3 normal = vec3(uModel * vec4(normals, 0.0));\n\n  // Set up data for modules\n  color = uColor;\n  project_setNormal(normal);\n  gl_Position = uProjection * uView * uModel * vec4(positions, 1.0);\n}\n`;\n\nconst fs = `\\\nprecision highp float;\n\nvarying vec3 color;\n\nvoid main(void) {\n  gl_FragColor = vec4(color, 1.);\n  gl_FragColor = dirlight_filterColor(gl_FragColor);\n}\n`;\n\nexport default class AppAnimationLoop extends AnimationLoop {\n  constructor() {\n    super({debug: true});\n  }\n\n  static getInfo() {\n    return INFO_HTML;\n  }\n\n  onInitialize({gl, _animationLoop, aspect}) {\n    setParameters(gl, {\n      clearColor: [0, 0, 0, 1],\n      clearDepth: 1,\n      depthTest: true,\n      depthFunc: gl.LEQUAL\n    });\n\n    const playButton = document.getElementById('play');\n    const pauseButton = document.getElementById('pause');\n    const timeSlider = document.getElementById('time');\n\n    if (playButton) {\n      playButton.addEventListener('click', () => {\n        this.timeline.play();\n      });\n\n      pauseButton.addEventListener('click', () => {\n        this.timeline.pause();\n      });\n\n      timeSlider.addEventListener('input', event => {\n        this.timeline.setTime(parseFloat(event.target.value));\n      });\n    }\n\n    const translations = [[2, -2, 0], [2, 2, 0], [-2, 2, 0], [-2, -2, 0]];\n\n    const rotations = [\n      [random(), random(), random()],\n      [random(), random(), random()],\n      [random(), random(), random()],\n      [random(), random(), random()]\n    ];\n\n    const colors = [[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 0]];\n\n    this.attachTimeline(new Timeline());\n    this.timeline.play();\n\n    const channels = [\n      this.timeline.addChannel({\n        delay: 2000,\n        rate: 0.5,\n        duration: 8000,\n        repeat: 2\n      }),\n      this.timeline.addChannel({\n        delay: 10000,\n        rate: 0.2,\n        duration: 20000,\n        repeat: 1\n      }),\n      this.timeline.addChannel({\n        delay: 7000,\n        rate: 1,\n        duration: 4000,\n        repeat: 8\n      }),\n      this.timeline.addChannel({\n        delay: 0,\n        rate: 0.8,\n        duration: 5000,\n        repeat: Number.POSITIVE_INFINITY\n      })\n    ];\n\n    const keyFrameData = [\n      [0, 0],\n      [1000, 2 * Math.PI],\n      [2000, Math.PI],\n      [3000, 2 * Math.PI],\n      [4000, 0]\n    ];\n\n    const keyFrames = [\n      new KeyFrames(keyFrameData),\n      new KeyFrames(keyFrameData),\n      new KeyFrames(keyFrameData),\n      new KeyFrames(keyFrameData)\n    ];\n\n    this.cubes = new Array(4);\n\n    for (let i = 0; i < 4; ++i) {\n      this.timeline.attachAnimation(keyFrames[i], channels[i]);\n\n      this.cubes[i] = {\n        translation: translations[i],\n        rotation: rotations[i],\n        keyFrames: keyFrames[i],\n        model: new Model(gl, {\n          vs,\n          fs,\n          modules: [dirlight],\n          geometry: new CubeGeometry(),\n          uniforms: {\n            uProjection: new Matrix4().perspective({fov: radians(60), aspect, near: 1, far: 20.0}),\n            uView: new Matrix4().lookAt({\n              center: [0, 0, 0],\n              eye: [0, 0, -8]\n            }),\n            uColor: colors[i]\n          }\n        })\n      };\n    }\n\n    return {timeSlider};\n  }\n\n  onRender(animationProps) {\n    const {gl, timeSlider} = animationProps;\n\n    if (timeSlider) {\n      timeSlider.value = this.timeline.getTime();\n    }\n\n    const modelMatrix = new Matrix4();\n\n    // Draw the cubes\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    for (let i = 0; i < 4; ++i) {\n      const cube = this.cubes[i];\n      const startRotation = cube.keyFrames.getStartData();\n      const endRotation = cube.keyFrames.getEndData();\n      const rotation = startRotation + cube.keyFrames.factor * (endRotation - startRotation);\n      const rotationX = cube.rotation[0] + rotation;\n      const rotationY = cube.rotation[1] + rotation;\n      const rotationZ = cube.rotation[2];\n      modelMatrix\n        .identity()\n        .translate(cube.translation)\n        .rotateXYZ([rotationX, rotationY, rotationZ]);\n      cube.model\n        .setUniforms({\n          uModel: modelMatrix\n        })\n        .draw();\n    }\n  }\n\n  onFinalize({gl}) {\n    for (let i = 0; i < 4; ++i) {\n      this.cubes[i].model.delete();\n    }\n  }\n}\n\n/* global window */\nif (typeof window !== 'undefined' && !window.website) {\n  const animationLoop = new AppAnimationLoop();\n  animationLoop.start();\n}\n","import React from 'react';\nimport AnimationLoopExamplePage from '../../src/components/animation-loop-example-page';\nimport AnimationLoop from '../../../examples/api/animation/app';\n\nexport default class Example extends React.Component {\n  render() {\n    return (\n      <AnimationLoopExamplePage AnimationLoop={AnimationLoop} exampleConfig={this.props.pageContext.exampleConfig} />\n    );\n  }\n}\n","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.array.is-array\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _construct from \"@babel/runtime/helpers/esm/construct\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport assert from './assert';\nvar RADIANS_TO_DEGREES = 1 / Math.PI * 180;\nvar DEGREES_TO_RADIANS = 1 / 180 * Math.PI;\nvar config = {};\nconfig.EPSILON = 1e-12;\nconfig.debug = false;\nconfig.precision = 4;\nconfig.printTypes = false;\nconfig.printDegrees = false;\nconfig.printRowMajor = true;\nexport { config };\nexport function configure() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  for (var key in options) {\n    assert(key in config);\n    config[key] = options[key];\n  }\n\n  return config;\n}\n\nfunction round(value) {\n  return Math.round(value / config.EPSILON) * config.EPSILON;\n}\n\nexport function formatValue(value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$precision = _ref.precision,\n      precision = _ref$precision === void 0 ? config.precision || 4 : _ref$precision;\n\n  value = round(value);\n  return \"\".concat(parseFloat(value.toPrecision(precision)));\n}\nexport function isArray(value) {\n  return Array.isArray(value) || ArrayBuffer.isView(value) && value.length !== undefined;\n}\n\nfunction duplicateArray(array) {\n  return array.clone ? array.clone() : new Array(array.length);\n}\n\nexport function clone(array) {\n  return array.clone ? array.clone() : _construct(Array, _toConsumableArray(array));\n}\n\nfunction map(value, func, result) {\n  if (isArray(value)) {\n    result = result || duplicateArray(value);\n\n    for (var i = 0; i < result.length && i < value.length; ++i) {\n      result[i] = func(value[i], i, result);\n    }\n\n    return result;\n  }\n\n  return func(value);\n}\n\nexport function toRadians(degrees) {\n  return radians(degrees);\n}\nexport function toDegrees(radians) {\n  return degrees(radians);\n}\nexport function radians(degrees, result) {\n  return map(degrees, function (degrees) {\n    return degrees * DEGREES_TO_RADIANS;\n  }, result);\n}\nexport function degrees(radians, result) {\n  return map(radians, function (radians) {\n    return radians * RADIANS_TO_DEGREES;\n  }, result);\n}\nexport function sin(radians) {\n  return map(radians, function (angle) {\n    return Math.sin(angle);\n  });\n}\nexport function cos(radians) {\n  return map(radians, function (angle) {\n    return Math.cos(angle);\n  });\n}\nexport function tan(radians) {\n  return map(radians, function (angle) {\n    return Math.tan(angle);\n  });\n}\nexport function asin(radians) {\n  return map(radians, function (angle) {\n    return Math.asin(angle);\n  });\n}\nexport function acos(radians) {\n  return map(radians, function (angle) {\n    return Math.acos(angle);\n  });\n}\nexport function atan(radians) {\n  return map(radians, function (angle) {\n    return Math.atan(angle);\n  });\n}\nexport function clamp(value, min, max) {\n  return map(value, function (value) {\n    return Math.max(min, Math.min(max, value));\n  });\n}\nexport function lerp(a, b, t) {\n  if (isArray(a)) {\n    return a.map(function (ai, i) {\n      return lerp(ai, b[i], t);\n    });\n  }\n\n  return t * b + (1 - t) * a;\n}\nexport function equals(a, b, epsilon) {\n  var oldEpsilon = config.EPSILON;\n\n  if (epsilon) {\n    config.EPSILON = epsilon;\n  }\n\n  try {\n    if (a === b) {\n      return true;\n    }\n\n    if (isArray(a) && isArray(b)) {\n      if (a.length !== b.length) {\n        return false;\n      }\n\n      for (var i = 0; i < a.length; ++i) {\n        if (!equals(a[i], b[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    if (a && _typeof(a) === 'object' && a.equals) {\n      return a.equals(b);\n    }\n\n    if (b && _typeof(b) === 'object' && b.equals) {\n      return b.equals(a);\n    }\n\n    return Math.abs(a - b) <= config.EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n  } finally {\n    config.EPSILON = oldEpsilon;\n  }\n}\nexport function exactEquals(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a && _typeof(a) === 'object' && b && _typeof(b) === 'object') {\n    if (a.constructor !== b.constructor) {\n      return false;\n    }\n\n    if (a.exactEquals) {\n      return a.exactEquals(b);\n    }\n  }\n\n  if (isArray(a) && isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; ++i) {\n      if (!exactEquals(a[i], b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\nexport function withEpsilon(EPSILON, func) {\n  var oldPrecision = config.EPSILON;\n  config.EPSILON = EPSILON;\n  var value;\n\n  try {\n    value = func();\n  } finally {\n    config.EPSILON = oldPrecision;\n  }\n\n  return value;\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","export function vec2_transformMat4AsVector(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  var w = m[3] * x + m[7] * y || 1.0;\n  out[0] = (m[0] * x + m[4] * y) / w;\n  out[1] = (m[1] * x + m[5] * y) / w;\n  return out;\n}\nexport function vec3_transformMat4AsVector(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n  return out;\n}\nexport function vec3_transformMat2(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  out[2] = a[2];\n  return out;\n}\nexport function vec4_transformMat2(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\nexport function vec4_transformMat3(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  out[0] = m[0] * x + m[3] * y + m[6] * z;\n  out[1] = m[1] * x + m[4] * y + m[7] * z;\n  out[2] = m[2] * x + m[5] * y + m[8] * z;\n  out[3] = a[3];\n  return out;\n}","import \"core-js/modules/es6.typed.float32-array\";\n\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","import getPrototypeOf from \"./getPrototypeOf\";\nimport setPrototypeOf from \"./setPrototypeOf\";\nimport isNativeFunction from \"./isNativeFunction\";\nimport construct from \"./construct\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-finite\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.typed.float32-array\";\nimport \"core-js/modules/es6.array.is-array\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport { config, formatValue, equals as _equals, isArray } from '../../lib/common';\n\nvar MathArray = function (_Array) {\n  _inherits(MathArray, _Array);\n\n  function MathArray() {\n    _classCallCheck(this, MathArray);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MathArray).apply(this, arguments));\n  }\n\n  _createClass(MathArray, [{\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor().copy(this);\n    }\n  }, {\n    key: \"from\",\n    value: function from(arrayOrObject) {\n      return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : this.fromObject(arrayOrObject);\n    }\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(array) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = array[i + offset];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"to\",\n    value: function to(arrayOrObject) {\n      if (arrayOrObject === this) {\n        return this;\n      }\n\n      return isArray(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);\n    }\n  }, {\n    key: \"toTarget\",\n    value: function toTarget(target) {\n      return target ? this.to(target) : this;\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        array[offset + i] = this[i];\n      }\n\n      return array;\n    }\n  }, {\n    key: \"toFloat32Array\",\n    value: function toFloat32Array() {\n      return new Float32Array(this);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.formatString(config);\n    }\n  }, {\n    key: \"formatString\",\n    value: function formatString(opts) {\n      var string = '';\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        string += (i > 0 ? ', ' : '') + formatValue(this[i], opts);\n      }\n\n      return \"\".concat(opts.printTypes ? this.constructor.name : '', \"[\").concat(string, \"]\");\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(array) {\n      if (!array || this.length !== array.length) {\n        return false;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        if (!_equals(this[i], array[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"exactEquals\",\n    value: function exactEquals(array) {\n      if (!array || this.length !== array.length) {\n        return false;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        if (this[i] !== array[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = -this[i];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lerp\",\n    value: function lerp(a, b, t) {\n      if (t === undefined) {\n        t = b;\n        b = a;\n        a = this;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        var ai = a[i];\n        this[i] = ai + t * (b[i] - ai);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"min\",\n    value: function min(vector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(vector[i], this[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"max\",\n    value: function max(vector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.max(vector[i], this[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"clamp\",\n    value: function clamp(minVector, maxVector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(Math.max(this[i], minVector[i]), maxVector[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"add\",\n    value: function add() {\n      for (var _len = arguments.length, vectors = new Array(_len), _key = 0; _key < _len; _key++) {\n        vectors[_key] = arguments[_key];\n      }\n\n      for (var _i = 0, _vectors = vectors; _i < _vectors.length; _i++) {\n        var vector = _vectors[_i];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] += vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract() {\n      for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        vectors[_key2] = arguments[_key2];\n      }\n\n      for (var _i2 = 0, _vectors2 = vectors; _i2 < _vectors2.length; _i2++) {\n        var vector = _vectors2[_i2];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] -= vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(_scale) {\n      if (Array.isArray(_scale)) {\n        return this.multiply(_scale);\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= _scale;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(a) {\n      return this.subtract(a);\n    }\n  }, {\n    key: \"setScalar\",\n    value: function setScalar(a) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = a;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"addScalar\",\n    value: function addScalar(a) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] += a;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"subScalar\",\n    value: function subScalar(a) {\n      return this.addScalar(-a);\n    }\n  }, {\n    key: \"multiplyScalar\",\n    value: function multiplyScalar(scalar) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= scalar;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"divideScalar\",\n    value: function divideScalar(a) {\n      return this.scale(1 / a);\n    }\n  }, {\n    key: \"clampScalar\",\n    value: function clampScalar(min, max) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(Math.max(this[i], min), max);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"multiplyByScalar\",\n    value: function multiplyByScalar(scalar) {\n      return this.scale(scalar);\n    }\n  }, {\n    key: \"check\",\n    value: function check() {\n      if (config.debug && !this.validate(this)) {\n        throw new Error(\"math.gl: \".concat(this.constructor.name, \" some fields set to invalid numbers'\"));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      var valid = this.length === this.ELEMENTS;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        valid = valid && Number.isFinite(this[i]);\n      }\n\n      return valid;\n    }\n  }, {\n    key: \"elements\",\n    get: function get() {\n      return this;\n    }\n  }]);\n\n  return MathArray;\n}(_wrapNativeSuper(Array));\n\nexport { MathArray as default };"],"sourceRoot":""}