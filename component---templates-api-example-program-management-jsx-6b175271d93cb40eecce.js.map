{"version":3,"sources":["webpack:///../node_modules/math.gl/dist/esm/index.js","webpack:///../node_modules/@math.gl/core/dist/esm/lib/assert.js","webpack:///../examples/api/program-management/app.js","webpack:///./templates/api/example-program-management.jsx","webpack:///../node_modules/gl-matrix/esm/vec4.js","webpack:///../modules/engine/src/geometries/cube-geometry.js","webpack:///./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack:///../node_modules/gl-matrix/esm/vec3.js","webpack:///./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///../modules/engine/src/geometry/geometry.js","webpack:///../node_modules/gl-matrix/esm/mat3.js","webpack:///../node_modules/gl-matrix/esm/quat.js","webpack:///../node_modules/@math.gl/core/dist/esm/classes/quaternion.js","webpack:///../modules/shadertools/src/modules/project/project.js","webpack:///../modules/shadertools/src/modules/dirlight/dirlight.js","webpack:///./node_modules/@babel/runtime/helpers/esm/construct.js","webpack:///../node_modules/@math.gl/core/dist/esm/classes/base/vector.js","webpack:///../node_modules/@math.gl/core/dist/esm/classes/vector3.js","webpack:///../node_modules/@math.gl/core/dist/esm/index.js","webpack:///../examples/utils/index.js","webpack:///./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","webpack:///./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","webpack:///../node_modules/@math.gl/core/dist/esm/classes/base/math-array.js","webpack:///../node_modules/@math.gl/core/dist/esm/lib/validators.js","webpack:///./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack:///../node_modules/@math.gl/core/dist/esm/classes/base/matrix.js","webpack:///../node_modules/gl-matrix/esm/mat4.js","webpack:///../node_modules/gl-matrix/esm/vec2.js","webpack:///../node_modules/@math.gl/core/dist/esm/classes/matrix4.js","webpack:///./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack:///../node_modules/@math.gl/core/dist/esm/lib/gl-matrix-extras.js","webpack:///../node_modules/gl-matrix/esm/common.js","webpack:///../node_modules/@math.gl/core/dist/esm/lib/common.js"],"names":["assert","condition","message","Error","concat","random","getRandom","vs","fs","dirlight","Object","inject","AppAnimationLoop","debug","getInfo","onInitialize","gl","aspect","setParameters","clearColor","clearDepth","depthTest","depthFunc","LEQUAL","programManager","translations","rotations","colors","this","cubes","Array","i","translation","rotation","model","modules","geometry","uniforms","uProjection","fov","radians","near","far","uView","center","eye","uColor","onRender","animationProps","tick","even","setProgram","Number","modelMatrix","cube","uModel","onFinalize","delete","AnimationLoop","window","animationLoop","Example","render","exampleConfig","props","pageContext","React","Component","clone","a","out","fromValues","x","y","z","w","copy","set","add","b","scale","length","Math","sqrt","squaredLength","normalize","len","dot","lerp","t","ax","ay","az","aw","transformMat4","m","transformQuat","q","qx","qy","qz","qw","ix","iy","iz","iw","exactEquals","equals","a0","a1","a2","a3","b0","b1","b2","b3","abs","max","vec","Float32Array","CUBE_INDICES","Uint16Array","CUBE_POSITIONS","CUBE_NORMALS","CUBE_TEX_COORDS","ATTRIBUTES","POSITION","size","value","NORMAL","TEXCOORD_0","CubeGeometry","id","uid","indices","attributes","Geometry","_inherits","subClass","superClass","TypeError","prototype","create","constructor","writable","configurable","cross","bx","by","bz","transformMat3","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","rotateX","c","p","r","cos","sin","rotateY","rotateZ","angle","tempA","tempB","cosine","PI","acos","_slicedToArray","arr","isArray","Symbol","iterator","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","DRAW_MODE","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","drawMode","vertexCount","userData","_setAttributes","_calculateVertexCount","getVertexCount","getAttributes","_print","ArrayBuffer","attribute","attributeName","isIndexed","setAxisAngle","axis","rad","s","bw","omega","cosom","sinom","scale0","scale1","fromMat3","fRoot","fTrace","j","k","vec4","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","vec3","IDENTITY_QUATERNION","_MathArray","Quaternion","_this","arguments","key","array","check","fromAxisRotation","vectorA","vectorB","invDot","l","start","target","ratio","_arguments$","_arguments$$start","_arguments","slice","vector","result","lengthSquared","multiplyLeft","multiplyRight","get","IDENTITY_MATRIX","DEFAULT_MODULE_OPTIONS","viewMatrix","projectionMatrix","cameraPositionWorld","name","getUniforms","opts","prevUniforms","common","lightDirection","dependencies","project","isNativeReflectConstruct","Reflect","construct","sham","Proxy","Date","e","_construct","Parent","args","Class","apply","instance","Function","bind","Vector","ELEMENTS","mathArray","distanceSquared","dist","product","magnitude","_len","vectors","_key","_vectors","_len2","_key2","_i2","_vectors2","distance","subtract","multiply","multiplyScalar","ORIGIN","_Vector","Vector3","object","_ref","_ref$origin","origin","_ref2","_ref2$origin","_ref3","_ref3$origin","matrix4","transformAsPoint","matrix3","matrix2","quaternion","globals","self","global","mathgl","config","MiniAnimationLoop","stop","waitForRender","Promise","_setDisplay","_getCanvas","canvas","document","dpr","_getContainer","container","parent","width","height","style","position","top","appendChild","_removeContainer","removeChild","n","_cache","Map","fn","indexOf","has","Wrapper","getPrototypeOf","enumerable","setPrototypeOf","_Array","MathArray","arrayOrObject","fromObject","offset","toArray","toObject","to","formatString","string","printTypes","ai","min","minVector","maxVector","_scale","addScalar","scalar","validate","valid","isFinite","checkNumber","checkVector","v","callerName","validateVector","map","deprecated","method","version","console","warn","_getPrototypeOf","o","__proto__","Matrix","printRowMajor","row","RANK","col","columnIndex","fill","firstIndex","columnVector","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","fovy","nf","f","tan","Infinity","up","x0","x1","x2","y0","y1","y2","z0","z1","z2","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","identity","IDENTITY","freeze","ZERO","INDICES","COL0ROW0","COL0ROW1","COL0ROW2","COL0ROW3","COL1ROW0","COL1ROW1","COL1ROW2","COL1ROW3","COL2ROW0","COL2ROW1","COL2ROW2","COL2ROW3","COL3ROW0","COL3ROW1","COL3ROW2","COL3ROW3","constants","_Matrix","Matrix4","m00","m10","m20","m30","m01","m11","m21","m31","m02","m12","m22","m32","m03","m13","m23","m33","xx","yx","yy","zx","zy","zz","wx","wy","wz","left","right","bottom","_computeInfinitePerspectiveOffCenter","rl","tb","_eye","_ref2$near","_ref2$far","lr","bt","_ref3$fovy","_ref3$aspect","_ref3$focalDistance","focalDistance","_ref3$near","_ref3$far","halfY","ortho","_ref4","_ref4$fov","_ref4$aspect","_ref4$near","_ref4$far","scaleResult","getScale","inverseScale0","inverseScale1","inverseScale2","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","_ref5","_ref6","rx","ry","rz","b12","b20","b21","b22","factor","translate","transformAsVector","column0Row0","column1Row1","column2Row0","column2Row1","column3Row2","_possibleConstructorReturn","ReferenceError","_setPrototypeOf","vec2_transformMat4AsVector","vec3_transformMat4AsVector","vec3_transformMat2","EPSILON","ARRAY_TYPE","RANDOM","DEGREES_TO_RADIANS","round","formatValue","_ref$precision","precision","parseFloat","toPrecision","isView","func","degrees","epsilon","oldEpsilon","printDegrees"],"mappings":"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","file":"component---templates-api-example-program-management-jsx-6b175271d93cb40eecce.js","sourcesContent":["export * from '@math.gl/core';","export default function assert(condition, message) {\n  if (!condition) {\n    throw new Error(\"math.gl assertion \".concat(message));\n  }\n}","import {AnimationLoop, Model, ProgramManager} from '@luma.gl/core';\nimport {setParameters} from '@luma.gl/gltools';\nimport {dirlight as dirlightBase} from '@luma.gl/shadertools';\nimport {CubeGeometry} from '@luma.gl/engine';\nimport {Matrix4, radians} from 'math.gl';\nimport {getRandom} from '../../utils';\n\nconst random = getRandom();\n\nconst INFO_HTML = `\nUsing a ProgramManager to cache and share programs between models.\n`;\n\nconst vs = `\\\nattribute vec3 positions;\nattribute vec3 normals;\n\nuniform vec3 uColor;\nuniform mat4 uModel;\nuniform mat4 uView;\nuniform mat4 uProjection;\n\nvarying vec3 color;\n\nvoid main(void) {\n  vec3 normal = vec3(uModel * vec4(normals, 0.0));\n\n  // Set up data for modules\n  color = uColor;\n  LUMAGL_normal(normal);\n  gl_Position = uProjection * uView * uModel * vec4(positions, 1.0);\n}\n`;\n\nconst fs = `\\\nprecision highp float;\n\nvarying vec3 color;\n\nvoid main(void) {\n  gl_FragColor = vec4(color, 1.);\n  LUMAGL_fragmentColor(gl_FragColor);\n}\n`;\n\n// Create a new version of module with injections\nconst dirlight = Object.assign(\n  {\n    inject: {\n      'vs:LUMAGL_normal': 'project_setNormal(normal);',\n      'fs:LUMAGL_fragmentColor': 'color = dirlight_filterColor(color);'\n    }\n  },\n  dirlightBase\n);\n\nexport default class AppAnimationLoop extends AnimationLoop {\n  constructor() {\n    super({debug: true});\n  }\n\n  static getInfo() {\n    return INFO_HTML;\n  }\n\n  onInitialize({gl, aspect}) {\n    setParameters(gl, {\n      clearColor: [0, 0, 0, 1],\n      clearDepth: 1,\n      depthTest: true,\n      depthFunc: gl.LEQUAL\n    });\n\n    const programManager = new ProgramManager(gl);\n    programManager.addShaderHook('vs:LUMAGL_normal(inout vec3 normal)');\n    programManager.addShaderHook('fs:LUMAGL_fragmentColor(inout vec4 color)');\n\n    const translations = [[2, -2, 0], [2, 2, 0], [-2, 2, 0], [-2, -2, 0]];\n\n    const rotations = [\n      [random(), random(), random()],\n      [random(), random(), random()],\n      [random(), random(), random()],\n      [random(), random(), random()]\n    ];\n\n    const colors = [[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 0]];\n\n    this.cubes = new Array(4);\n\n    for (let i = 0; i < 4; ++i) {\n      this.cubes[i] = {\n        translation: translations[i],\n        rotation: rotations[i],\n        model: new Model(gl, {\n          programManager,\n          vs,\n          fs,\n          modules: i % 2 === 0 ? [] : [dirlight],\n          geometry: new CubeGeometry(),\n          uniforms: {\n            uProjection: new Matrix4().perspective({fov: radians(60), aspect, near: 1, far: 20.0}),\n            uView: new Matrix4().lookAt({\n              center: [0, 0, 0],\n              eye: [0, 0, -8]\n            }),\n            uColor: colors[i]\n          }\n        })\n      };\n    }\n\n    return {programManager};\n  }\n\n  onRender(animationProps) {\n    const {gl, tick, programManager} = animationProps;\n\n    if (tick % 240 === 0) {\n      if (tick % 480 === 0) {\n        programManager.removeDefaultModule(dirlight);\n      } else {\n        programManager.addDefaultModule(dirlight);\n      }\n    }\n\n    if (tick % 120 === 0) {\n      const even = tick % 240 === 0;\n      for (let i = 0; i < 4; ++i) {\n        this.cubes[i].model.setProgram({\n          vs,\n          fs,\n          modules: i % 2 === Number(even) ? [] : [dirlight]\n        });\n      }\n    }\n\n    const modelMatrix = new Matrix4();\n\n    // Draw the cubes\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    for (let i = 0; i < 4; ++i) {\n      const cube = this.cubes[i];\n\n      cube.rotation[0] += 0.01;\n      cube.rotation[1] += 0.01;\n      cube.rotation[2] += 0.01;\n\n      modelMatrix\n        .identity()\n        .translate(cube.translation)\n        .rotateXYZ(cube.rotation);\n\n      cube.model\n        .setUniforms({\n          uModel: modelMatrix\n        })\n        .draw();\n    }\n  }\n\n  onFinalize({gl}) {\n    for (let i = 0; i < 4; ++i) {\n      this.cubes[i].model.delete();\n    }\n  }\n}\n\n/* global window */\nif (typeof window !== 'undefined' && !window.website) {\n  const animationLoop = new AppAnimationLoop();\n  animationLoop.start();\n}\n","import React from 'react';\nimport AnimationLoopExamplePage from '../../src/components/animation-loop-example-page';\nimport AnimationLoop from '../../../examples/api/program-management/app';\n\nexport default class Example extends React.Component {\n  render() {\n    return (\n      <AnimationLoopExamplePage AnimationLoop={AnimationLoop} exampleConfig={this.props.pageContext.exampleConfig} />\n    );\n  }\n}\n","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import Geometry from '../geometry/geometry';\nimport {uid} from '@luma.gl/webgl';\n\n// prettier-ignore\nconst CUBE_INDICES = new Uint16Array([\n  0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13,\n  14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23\n]);\n\n// prettier-ignore\nconst CUBE_POSITIONS = new Float32Array([\n  -1,  -1,  1, 1,  -1,  1,  1,  1,  1,  -1,  1,  1,\n  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1,  -1,\n  -1,  1,  -1,  -1,  1,  1,  1,  1,  1,  1,  1,  -1,\n  -1,  -1,  -1,  1,  -1,  -1,  1,  -1,  1,  -1,  -1,  1,\n  1,  -1,  -1,  1,  1,  -1,  1,  1,  1,  1,  -1,  1,\n  -1,  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1\n]);\n\n// TODO - could be Uint8\n// prettier-ignore\nconst CUBE_NORMALS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,\n  // Back face\n  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,\n  // Top face\n  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,\n  // Bottom face\n  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,\n  // Right face\n  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,\n  // Left face\n  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0\n]);\n\n// prettier-ignore\nconst CUBE_TEX_COORDS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  1,  1,  0,  1,\n  // Back face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Top face\n  0,  1,  0,  0,  1,  0,  1,  1,\n  // Bottom face\n  1,  1,  0,  1,  0,  0,  1,  0,\n  // Right face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Left face\n  0,  0,  1,  0,  1,  1,  0,  1\n]);\n\nconst ATTRIBUTES = {\n  POSITION: {size: 3, value: new Float32Array(CUBE_POSITIONS)},\n  NORMAL: {size: 3, value: new Float32Array(CUBE_NORMALS)},\n  TEXCOORD_0: {size: 2, value: new Float32Array(CUBE_TEX_COORDS)}\n};\n\nexport default class CubeGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('cube-geometry')} = props;\n    super({\n      ...props,\n      id,\n      indices: {size: 1, value: new Uint16Array(CUBE_INDICES)},\n      attributes: {...ATTRIBUTES, ...props.attributes}\n    });\n  }\n}\n","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import {uid, assert} from '@luma.gl/webgl';\n\n// Rendering primitives - specify how to extract primitives from vertices.\n// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants\nexport const DRAW_MODE = {\n  POINTS: 0x0000, // draw single points.\n  LINES: 0x0001, // draw lines. Each vertex connects to the one after it.\n  LINE_LOOP: 0x0002, // draw lines. Each set of two vertices is treated as a separate line segment.\n  LINE_STRIP: 0x0003, // draw a connected group of line segments from the first vertex to the last\n  TRIANGLES: 0x0004, // draw triangles. Each set of three vertices creates a separate triangle.\n  TRIANGLE_STRIP: 0x0005, // draw a connected group of triangles.\n  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.\n  // Each vertex connects to the previous and the first vertex in the fan.\n};\n\nexport default class Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n\n  constructor(props = {}) {\n    const {\n      id = uid('geometry'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n\n    // stubRemovedMethods(this, [\n    //   'setNeedsRedraw', 'needsRedraw', 'setAttributes'\n    // ], 'Immutable');\n\n    // stubRemovedMethods(this, [\n    //   'hasAttribute', 'getAttribute', 'getArray'\n    // ], 'Use geometry.attributes and geometry.indices');\n\n    // deprecateMethods(this, ['getAttributes'])\n  }\n\n  get mode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  // Return an object with all attributes plus indices added as a field.\n  getAttributes() {\n    return this.indices ? {indices: this.indices, ...this.attributes} : this.attributes;\n  }\n\n  // PRIVATE\n\n  _print(attributeName) {\n    return `Geometry ${this.id} attribute ${attributeName}`;\n  }\n\n  // Attribute\n  // value: typed array\n  // type: indices, vertices, uvs\n  // size: elements per vertex\n  // target: WebGL buffer type (string or constant)\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {value: indices, size: 1} : indices;\n    }\n\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n\n      // Wrap \"unwrapped\" arrays and try to autodetect their type\n      attribute = ArrayBuffer.isView(attribute) ? {value: attribute} : attribute;\n\n      assert(\n        ArrayBuffer.isView(attribute.value),\n        `${this._print(attributeName)}: must be typed array or object with value as typed array`\n      );\n\n      if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n        attribute.size = 3;\n      }\n\n      // Move indices to separate field\n      if (attributeName === 'indices') {\n        assert(!this.indices);\n        this.indices = attribute;\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n\n    if (this.indices && this.indices.isIndexed !== undefined) {\n      this.indices = Object.assign({}, this.indices);\n      delete this.indices.isIndexed;\n    }\n\n    return this;\n  }\n\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n    let vertexCount = Infinity;\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {value, size, constant} = attribute;\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n\n    assert(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n}\n","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n;\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import \"core-js/modules/es6.array.is-array\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport MathArray from './base/math-array';\nimport { checkNumber, checkVector } from '../lib/validators';\nimport assert from '../lib/assert';\nimport * as quat from 'gl-matrix/quat';\nimport * as vec4 from 'gl-matrix/vec4';\nvar IDENTITY_QUATERNION = [0, 0, 0, 1];\n\nvar Quaternion = function (_MathArray) {\n  _inherits(Quaternion, _MathArray);\n\n  function Quaternion() {\n    var _this;\n\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n    _classCallCheck(this, Quaternion);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Quaternion).call(this, -0, -0, -0, -0));\n\n    if (Array.isArray(x) && arguments.length === 1) {\n      _this.copy(x);\n    } else {\n      _this.set(x, y, z, w);\n    }\n\n    return _this;\n  }\n\n  _createClass(Quaternion, [{\n    key: \"copy\",\n    value: function copy(array) {\n      this[0] = array[0];\n      this[1] = array[1];\n      this[2] = array[2];\n      this[3] = array[3];\n      return this.check();\n    }\n  }, {\n    key: \"set\",\n    value: function set(x, y, z, w) {\n      this[0] = x;\n      this[1] = y;\n      this[2] = z;\n      this[3] = w;\n      return this.check();\n    }\n  }, {\n    key: \"fromMatrix3\",\n    value: function fromMatrix3(m) {\n      quat.fromMat3(this, m);\n      return this.check();\n    }\n  }, {\n    key: \"identity\",\n    value: function identity() {\n      quat.identity(this);\n      return this.check();\n    }\n  }, {\n    key: \"fromAxisRotation\",\n    value: function fromAxisRotation(axis, rad) {\n      quat.setAxisAngle(this, axis, rad);\n      return this.check();\n    }\n  }, {\n    key: \"setAxisAngle\",\n    value: function setAxisAngle(axis, rad) {\n      return this.fromAxisRotation(axis, rad);\n    }\n  }, {\n    key: \"len\",\n    value: function len() {\n      return quat.length(this);\n    }\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared(a) {\n      return quat.squaredLength(this);\n    }\n  }, {\n    key: \"dot\",\n    value: function dot(a, b) {\n      if (b !== undefined) {\n        throw new Error('Quaternion.dot only takes one argument');\n      }\n\n      return quat.dot(this, a);\n    }\n  }, {\n    key: \"rotationTo\",\n    value: function rotationTo(vectorA, vectorB) {\n      quat.rotationTo(this, vectorA, vectorB);\n      return this.check();\n    }\n  }, {\n    key: \"add\",\n    value: function add(a, b) {\n      if (b !== undefined) {\n        throw new Error('Quaternion.add only takes one argument');\n      }\n\n      quat.add(this, this, a);\n      return this.check();\n    }\n  }, {\n    key: \"calculateW\",\n    value: function calculateW() {\n      quat.calculateW(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"conjugate\",\n    value: function conjugate() {\n      quat.conjugate(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      quat.invert(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"lerp\",\n    value: function lerp(a, b, t) {\n      quat.lerp(this, a, b, t);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyRight\",\n    value: function multiplyRight(a, b) {\n      assert(!b);\n      quat.multiply(this, this, a);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyLeft\",\n    value: function multiplyLeft(a, b) {\n      assert(!b);\n      quat.multiply(this, a, this);\n      return this.check();\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      var length = this.len();\n      var l = length > 0 ? 1 / length : 0;\n      this[0] = this[0] * l;\n      this[1] = this[1] * l;\n      this[2] = this[2] * l;\n      this[3] = this[3] * l;\n\n      if (length === 0) {\n        this[3] = 1;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(rad) {\n      quat.rotateX(this, this, rad);\n      return this.check();\n    }\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(rad) {\n      quat.rotateY(this, this, rad);\n      return this.check();\n    }\n  }, {\n    key: \"rotateZ\",\n    value: function rotateZ(rad) {\n      quat.rotateZ(this, this, rad);\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(b) {\n      quat.scale(this, this, b);\n      return this.check();\n    }\n  }, {\n    key: \"slerp\",\n    value: function slerp(start, target, ratio) {\n      switch (arguments.length) {\n        case 1:\n          var _arguments$ = arguments[0];\n          var _arguments$$start = _arguments$.start;\n          start = _arguments$$start === void 0 ? IDENTITY_QUATERNION : _arguments$$start;\n          target = _arguments$.target;\n          ratio = _arguments$.ratio;\n          break;\n\n        case 2:\n          var _arguments = Array.prototype.slice.call(arguments);\n\n          target = _arguments[0];\n          ratio = _arguments[1];\n          start = this;\n          break;\n\n        default:\n      }\n\n      quat.slerp(this, start, target, ratio);\n      return this.check();\n    }\n  }, {\n    key: \"transformVector4\",\n    value: function transformVector4(vector) {\n      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : vector;\n      vec4.transformQuat(result, vector, this);\n      return checkVector(result, 4);\n    }\n  }, {\n    key: \"lengthSq\",\n    value: function lengthSq() {\n      return this.lengthSquared();\n    }\n  }, {\n    key: \"setFromAxisAngle\",\n    value: function setFromAxisAngle(axis, rad) {\n      return this.setAxisAngle(axis, rad);\n    }\n  }, {\n    key: \"premultiply\",\n    value: function premultiply(a, b) {\n      return this.multiplyLeft(a, b);\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(a, b) {\n      return this.multiplyRight(a, b);\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 4;\n    }\n  }, {\n    key: \"x\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      return this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      return this[1] = checkNumber(value);\n    }\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      return this[2] = checkNumber(value);\n    }\n  }, {\n    key: \"w\",\n    get: function get() {\n      return this[3];\n    },\n    set: function set(value) {\n      return this[3] = checkNumber(value);\n    }\n  }]);\n\n  return Quaternion;\n}(MathArray);\n\nexport { Quaternion as default };","import {Matrix4} from 'math.gl';\n\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\nconst DEFAULT_MODULE_OPTIONS = {\n  modelMatrix: IDENTITY_MATRIX,\n  viewMatrix: IDENTITY_MATRIX,\n  projectionMatrix: IDENTITY_MATRIX,\n  cameraPositionWorld: [0, 0, 0]\n};\n\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS, prevUniforms = {}) {\n  // const viewProjectionInverse = viewProjection.invert();\n  // viewInverseMatrix: view.invert(),\n  // viewProjectionInverseMatrix: viewProjectionInverse\n\n  const uniforms = {};\n  if (opts.modelMatrix !== undefined) {\n    uniforms.modelMatrix = opts.modelMatrix;\n  }\n  if (opts.viewMatrix !== undefined) {\n    uniforms.viewMatrix = opts.viewMatrix;\n  }\n  if (opts.projectionMatrix !== undefined) {\n    uniforms.projectionMatrix = opts.projectionMatrix;\n  }\n  if (opts.cameraPositionWorld !== undefined) {\n    uniforms.cameraPositionWorld = opts.cameraPositionWorld;\n  }\n\n  // COMPOSITE UNIFORMS\n  if (opts.projectionMatrix !== undefined || opts.viewMatrix !== undefined) {\n    uniforms.viewProjectionMatrix = new Matrix4(opts.projectionMatrix).multiplyRight(\n      opts.viewMatrix\n    );\n  }\n\n  return uniforms;\n}\n\nconst common = `\\\nvarying vec4 project_vPositionWorld;\nvarying vec3 project_vNormalWorld;\n\nvec4 project_getPosition_World() {\n  return project_vPositionWorld;\n}\n\nvec3 project_getNormal_World() {\n  return project_vNormalWorld;\n}\n`;\n\nconst vs = `\\\n${common}\n\n// Unprefixed uniforms\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewProjectionMatrix;\nuniform vec3 cameraPositionWorld;\n\nstruct World {\n  vec3 position;\n  vec3 normal;\n};\n\nWorld world;\n\nvoid project_setPosition(vec4 position) {\n  project_vPositionWorld = position;\n}\n\nvoid project_setNormal(vec3 normal) {\n  project_vNormalWorld = normal;\n}\n\nvoid project_setPositionAndNormal_World(vec3 position, vec3 normal) {\n  world.position = position;\n  world.normal = normal;\n}\n\nvoid project_setPositionAndNormal_Model(vec3 position, vec3 normal) {\n  world.position = (modelMatrix * vec4(position, 1.)).xyz;\n  world.normal = mat3(modelMatrix) * normal;\n}\n\nvec4 project_model_to_clipspace(vec4 position) {\n  return viewProjectionMatrix * modelMatrix * position;\n}\n\nvec4 project_model_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * modelMatrix * vec4(position, 1.);\n}\n\nvec4 project_world_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_view_to_clipspace(vec3 position) {\n  return projectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n`;\n\nconst fs = `\n${common}\\\n`;\n\nexport default {\n  name: 'project',\n  getUniforms,\n  vs,\n  fs\n};\n","// Cheap lighting - single directional light, single dot product, one uniform\n\nimport project from '../project/project';\n\n/* eslint-disable camelcase */\nconst DEFAULT_LIGHT_DIRECTION = new Float32Array([1, 1, 2]);\n\nconst DEFAULT_MODULE_OPTIONS = {\n  lightDirection: DEFAULT_LIGHT_DIRECTION\n};\n\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS) {\n  const uniforms = {};\n  if (opts.lightDirection) {\n    uniforms.dirlight_uLightDirection = opts.lightDirection;\n  }\n  return uniforms;\n}\n\n// TODO - reuse normal from geometry module\nconst vs = null;\n\nconst fs = `\\\nuniform vec3 dirlight_uLightDirection;\n\n/*\n * Returns color attenuated by angle from light source\n */\nvec4 dirlight_filterColor(vec4 color) {\n  vec3 normal = project_getNormal_World();\n  float d = abs(dot(normalize(normal), normalize(dirlight_uLightDirection)));\n  return vec4(color.rgb * d, color.a);\n}\n`;\n\nexport default {\n  name: 'dirlight',\n  vs,\n  fs,\n  getUniforms,\n  dependencies: [project]\n};\n","import setPrototypeOf from \"./setPrototypeOf\";\n\nfunction isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport MathArray from './math-array';\nimport { checkNumber } from '../../lib/validators';\nimport assert from '../../lib/assert';\n\nvar Vector = function (_MathArray) {\n  _inherits(Vector, _MathArray);\n\n  function Vector() {\n    _classCallCheck(this, Vector);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Vector).apply(this, arguments));\n  }\n\n  _createClass(Vector, [{\n    key: \"len\",\n    value: function len() {\n      return Math.sqrt(this.lengthSquared());\n    }\n  }, {\n    key: \"magnitude\",\n    value: function magnitude() {\n      return this.len();\n    }\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared() {\n      var length = 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        length += this[i] * this[i];\n      }\n\n      return length;\n    }\n  }, {\n    key: \"magnitudeSquared\",\n    value: function magnitudeSquared() {\n      return this.lengthSquared();\n    }\n  }, {\n    key: \"distance\",\n    value: function distance(mathArray) {\n      return Math.sqrt(this.distanceSquared(mathArray));\n    }\n  }, {\n    key: \"distanceSquared\",\n    value: function distanceSquared(mathArray) {\n      var length = 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        var dist = this[i] - mathArray[i];\n        length += dist * dist;\n      }\n\n      return checkNumber(length);\n    }\n  }, {\n    key: \"dot\",\n    value: function dot(mathArray) {\n      var product = 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        product += this[i] * mathArray[i];\n      }\n\n      return checkNumber(product);\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      var length = this.magnitude();\n\n      if (length !== 0) {\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] /= length;\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply() {\n      for (var _len = arguments.length, vectors = new Array(_len), _key = 0; _key < _len; _key++) {\n        vectors[_key] = arguments[_key];\n      }\n\n      for (var _i = 0, _vectors = vectors; _i < _vectors.length; _i++) {\n        var vector = _vectors[_i];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] *= vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"divide\",\n    value: function divide() {\n      for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        vectors[_key2] = arguments[_key2];\n      }\n\n      for (var _i2 = 0, _vectors2 = vectors; _i2 < _vectors2.length; _i2++) {\n        var vector = _vectors2[_i2];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] /= vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lengthSq\",\n    value: function lengthSq() {\n      return this.lengthSquared();\n    }\n  }, {\n    key: \"distanceTo\",\n    value: function distanceTo(vector) {\n      return this.distance(vector);\n    }\n  }, {\n    key: \"distanceToSquared\",\n    value: function distanceToSquared(vector) {\n      return this.distanceSquared(vector);\n    }\n  }, {\n    key: \"getComponent\",\n    value: function getComponent(i) {\n      assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n      return checkNumber(this[i]);\n    }\n  }, {\n    key: \"setComponent\",\n    value: function setComponent(i, value) {\n      assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n      this[i] = value;\n      return this.check();\n    }\n  }, {\n    key: \"addVectors\",\n    value: function addVectors(a, b) {\n      return this.copy(a).add(b);\n    }\n  }, {\n    key: \"subVectors\",\n    value: function subVectors(a, b) {\n      return this.copy(a).subtract(b);\n    }\n  }, {\n    key: \"multiplyVectors\",\n    value: function multiplyVectors(a, b) {\n      return this.copy(a).multiply(b);\n    }\n  }, {\n    key: \"addScaledVector\",\n    value: function addScaledVector(a, b) {\n      return this.add(new this.constructor(a).multiplyScalar(b));\n    }\n  }, {\n    key: \"x\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      return this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      return this[1] = checkNumber(value);\n    }\n  }]);\n\n  return Vector;\n}(MathArray);\n\nexport { Vector as default };","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport Vector from './base/vector';\nimport { config, isArray } from '../lib/common';\nimport { checkNumber } from '../lib/validators';\nimport * as vec3 from 'gl-matrix/vec3';\nimport { vec3_transformMat2, vec3_transformMat4AsVector } from '../lib/gl-matrix-extras';\nvar ORIGIN = [0, 0, 0];\n\nvar Vector3 = function (_Vector) {\n  _inherits(Vector3, _Vector);\n\n  function Vector3() {\n    var _this;\n\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    _classCallCheck(this, Vector3);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Vector3).call(this, -0, -0, -0));\n\n    if (arguments.length === 1 && isArray(x)) {\n      _this.copy(x);\n    } else {\n      if (config.debug) {\n        checkNumber(x);\n        checkNumber(y);\n        checkNumber(z);\n      }\n\n      _this[0] = x;\n      _this[1] = y;\n      _this[2] = z;\n    }\n\n    return _this;\n  }\n\n  _createClass(Vector3, [{\n    key: \"set\",\n    value: function set(x, y, z) {\n      this[0] = x;\n      this[1] = y;\n      this[2] = z;\n      return this.check();\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(array) {\n      this[0] = array[0];\n      this[1] = array[1];\n      this[2] = array[2];\n      return this.check();\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(object) {\n      if (config.debug) {\n        checkNumber(object.x);\n        checkNumber(object.y);\n        checkNumber(object.z);\n      }\n\n      this[0] = object.x;\n      this[1] = object.y;\n      this[2] = object.z;\n      return this.check();\n    }\n  }, {\n    key: \"toObject\",\n    value: function toObject(object) {\n      object.x = this[0];\n      object.y = this[1];\n      object.z = this[2];\n      return object;\n    }\n  }, {\n    key: \"angle\",\n    value: function angle(vector) {\n      return vec3.angle(this, vector);\n    }\n  }, {\n    key: \"cross\",\n    value: function cross(vector) {\n      vec3.cross(this, this, vector);\n      return this.check();\n    }\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(_ref) {\n      var radians = _ref.radians,\n          _ref$origin = _ref.origin,\n          origin = _ref$origin === void 0 ? ORIGIN : _ref$origin;\n      vec3.rotateX(this, this, origin, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(_ref2) {\n      var radians = _ref2.radians,\n          _ref2$origin = _ref2.origin,\n          origin = _ref2$origin === void 0 ? ORIGIN : _ref2$origin;\n      vec3.rotateY(this, this, origin, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateZ\",\n    value: function rotateZ(_ref3) {\n      var radians = _ref3.radians,\n          _ref3$origin = _ref3.origin,\n          origin = _ref3$origin === void 0 ? ORIGIN : _ref3$origin;\n      vec3.rotateZ(this, this, origin, radians);\n      return this.check();\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(matrix4) {\n      return this.transformAsPoint(matrix4);\n    }\n  }, {\n    key: \"transformAsPoint\",\n    value: function transformAsPoint(matrix4) {\n      vec3.transformMat4(this, this, matrix4);\n      return this.check();\n    }\n  }, {\n    key: \"transformAsVector\",\n    value: function transformAsVector(matrix4) {\n      vec3_transformMat4AsVector(this, this, matrix4);\n      return this.check();\n    }\n  }, {\n    key: \"transformByMatrix3\",\n    value: function transformByMatrix3(matrix3) {\n      vec3.transformMat3(this, this, matrix3);\n      return this.check();\n    }\n  }, {\n    key: \"transformByMatrix2\",\n    value: function transformByMatrix2(matrix2) {\n      vec3_transformMat2(this, this, matrix2);\n      return this.check();\n    }\n  }, {\n    key: \"transformByQuaternion\",\n    value: function transformByQuaternion(quaternion) {\n      vec3.transformQuat(this, this, quaternion);\n      return this.check();\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 3;\n    }\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      return this[2] = checkNumber(value);\n    }\n  }]);\n\n  return Vector3;\n}(Vector);\n\nexport { Vector3 as default };","import { config } from 'math.gl';\nexport { default as Vector2 } from './classes/vector2';\nexport { default as Vector3 } from './classes/vector3';\nexport { default as Vector4 } from './classes/vector4';\nexport { default as Matrix3 } from './classes/matrix3';\nexport { default as Matrix4 } from './classes/matrix4';\nexport { default as Quaternion } from './classes/quaternion';\nexport { config, configure, formatValue, isArray, clone, equals, exactEquals, toRadians, toDegrees, radians, degrees, sin, cos, tan, asin, acos, atan, clamp, lerp, withEpsilon as _withEpsilon } from './lib/common';\nexport { checkNumber } from './lib/validators';\nexport { default as _MathUtils } from './lib/math-utils';\nexport { default as _SphericalCoordinates } from './classes/spherical-coordinates';\nexport { default as _Pose } from './classes/pose';\nexport { default as _Euler } from './classes/euler';\nexport { default as _Polygon } from './addons/polygon';\nexport { default as assert } from './lib/assert';\nvar globals = {\n  self: typeof self !== 'undefined' && self,\n  window: typeof window !== 'undefined' && window,\n  global: typeof global !== 'undefined' && global\n};\nvar global_ = globals.global || globals.self || globals.window;\nglobal_.mathgl = {\n  config: config\n};","/* global window, document */\n\n// Light class implementing the AnimationLoop interface\n// use by examples w/o creating a gl context\nexport class MiniAnimationLoop {\n  static getInfo() {\n    return '';\n  }\n\n  start() {}\n\n  stop() {}\n\n  delete() {}\n\n  onFinalize() {}\n\n  waitForRender() {\n    return Promise.resolve();\n  }\n\n  _setDisplay() {}\n\n  _getCanvas(props = {}) {\n    let canvas;\n    if (props.canvas) {\n      canvas = document.getElementById(props.canvas);\n      const dpr = window.devicePixelRatio || 1;\n      canvas.height = canvas.clientHeight * dpr;\n      canvas.width = canvas.clientWidth * dpr;\n    } else {\n      canvas = document.createElement('canvas');\n      canvas.width = 800;\n      canvas.height = 600;\n      document.body.appendChild(canvas);\n    }\n\n    return canvas;\n  }\n\n  _getContainer(props = {}) {\n    if (this.container) {\n      return this.container;\n    }\n\n    let width;\n    let height;\n\n    this.container = document.createElement('div');\n\n    if (props.canvas) {\n      const canvas = document.getElementById(props.canvas);\n      this.parent = canvas.parentElement;\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n      this.container.style.position = 'relative';\n      this.container.style.top = `-${height}px`;\n    } else {\n      this.parent = document.body;\n      width = 800;\n      height = 800;\n    }\n\n    this.container.style.width = `${width}px`;\n    this.container.style.height = `${height}px`;\n    this.parent.appendChild(this.container);\n\n    return this.container;\n  }\n\n  _removeContainer(props = {}) {\n    this.parent.removeChild(this.container);\n  }\n}\n\n// Create a deterministic pseudorandom number generator\nexport function getRandom() {\n  let s = 1;\n  let c = 1;\n  return () => {\n    s = Math.sin(c * 17.23);\n    c = Math.cos(s * 27.92);\n    return fract(Math.abs(s * c) * 1432.71);\n  };\n}\n\nfunction fract(n) {\n  return n - Math.floor(n);\n}\n","import getPrototypeOf from \"./getPrototypeOf\";\nimport setPrototypeOf from \"./setPrototypeOf\";\nimport isNativeFunction from \"./isNativeFunction\";\nimport construct from \"./construct\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-finite\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.typed.float32-array\";\nimport \"core-js/modules/es6.array.is-array\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport { config, formatValue, equals as _equals, isArray } from '../../lib/common';\n\nvar MathArray = function (_Array) {\n  _inherits(MathArray, _Array);\n\n  function MathArray() {\n    _classCallCheck(this, MathArray);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MathArray).apply(this, arguments));\n  }\n\n  _createClass(MathArray, [{\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor().copy(this);\n    }\n  }, {\n    key: \"from\",\n    value: function from(arrayOrObject) {\n      return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : this.fromObject(arrayOrObject);\n    }\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(array) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = array[i + offset];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"to\",\n    value: function to(arrayOrObject) {\n      if (arrayOrObject === this) {\n        return this;\n      }\n\n      return isArray(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);\n    }\n  }, {\n    key: \"toTarget\",\n    value: function toTarget(target) {\n      return target ? this.to(target) : this;\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        array[offset + i] = this[i];\n      }\n\n      return array;\n    }\n  }, {\n    key: \"toFloat32Array\",\n    value: function toFloat32Array() {\n      return new Float32Array(this);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.formatString(config);\n    }\n  }, {\n    key: \"formatString\",\n    value: function formatString(opts) {\n      var string = '';\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        string += (i > 0 ? ', ' : '') + formatValue(this[i], opts);\n      }\n\n      return \"\".concat(opts.printTypes ? this.constructor.name : '', \"[\").concat(string, \"]\");\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(array) {\n      if (!array || this.length !== array.length) {\n        return false;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        if (!_equals(this[i], array[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"exactEquals\",\n    value: function exactEquals(array) {\n      if (!array || this.length !== array.length) {\n        return false;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        if (this[i] !== array[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = -this[i];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lerp\",\n    value: function lerp(a, b, t) {\n      if (t === undefined) {\n        t = b;\n        b = a;\n        a = this;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        var ai = a[i];\n        this[i] = ai + t * (b[i] - ai);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"min\",\n    value: function min(vector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(vector[i], this[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"max\",\n    value: function max(vector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.max(vector[i], this[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"clamp\",\n    value: function clamp(minVector, maxVector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(Math.max(this[i], minVector[i]), maxVector[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"add\",\n    value: function add() {\n      for (var _len = arguments.length, vectors = new Array(_len), _key = 0; _key < _len; _key++) {\n        vectors[_key] = arguments[_key];\n      }\n\n      for (var _i = 0, _vectors = vectors; _i < _vectors.length; _i++) {\n        var vector = _vectors[_i];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] += vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract() {\n      for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        vectors[_key2] = arguments[_key2];\n      }\n\n      for (var _i2 = 0, _vectors2 = vectors; _i2 < _vectors2.length; _i2++) {\n        var vector = _vectors2[_i2];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] -= vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(_scale) {\n      if (Array.isArray(_scale)) {\n        return this.multiply(_scale);\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= _scale;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(a) {\n      return this.subtract(a);\n    }\n  }, {\n    key: \"setScalar\",\n    value: function setScalar(a) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = a;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"addScalar\",\n    value: function addScalar(a) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] += a;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"subScalar\",\n    value: function subScalar(a) {\n      return this.addScalar(-a);\n    }\n  }, {\n    key: \"multiplyScalar\",\n    value: function multiplyScalar(scalar) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= scalar;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"divideScalar\",\n    value: function divideScalar(a) {\n      return this.scale(1 / a);\n    }\n  }, {\n    key: \"clampScalar\",\n    value: function clampScalar(min, max) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(Math.max(this[i], min), max);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"multiplyByScalar\",\n    value: function multiplyByScalar(scalar) {\n      return this.scale(scalar);\n    }\n  }, {\n    key: \"check\",\n    value: function check() {\n      if (config.debug && !this.validate(this)) {\n        throw new Error(\"math.gl: \".concat(this.constructor.name, \" some fields set to invalid numbers'\"));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      var valid = this.length === this.ELEMENTS;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        valid = valid && Number.isFinite(this[i]);\n      }\n\n      return valid;\n    }\n  }, {\n    key: \"elements\",\n    get: function get() {\n      return this;\n    }\n  }]);\n\n  return MathArray;\n}(_wrapNativeSuper(Array));\n\nexport { MathArray as default };","import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-finite\";\nimport { config } from './common';\nexport function validateVector(v, length) {\n  if (v.length !== length) {\n    return false;\n  }\n\n  for (var i = 0; i < v.length; ++i) {\n    if (!Number.isFinite(v[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function checkNumber(value) {\n  if (!Number.isFinite(value)) {\n    throw new Error(\"Invalid number \".concat(value));\n  }\n\n  return value;\n}\nexport function checkVector(v, length, callerName) {\n  if (config.debug && !validateVector(v, length)) {\n    throw new Error(\"math.gl: \".concat(callerName | '', \" some fields set to invalid numbers'\"));\n  }\n\n  return v;\n}\nvar map = {};\nexport function deprecated(method, version) {\n  if (!map[method]) {\n    map[method] = true;\n    console.warn(\"\".concat(method, \" has been removed in version \").concat(version, \", see upgrade guide for more information\"));\n  }\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import \"core-js/modules/es6.array.fill\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport MathArray from './math-array';\nimport { checkNumber } from '../../lib/validators';\nimport { config } from '../../lib/common';\n\nvar Matrix = function (_MathArray) {\n  _inherits(Matrix, _MathArray);\n\n  function Matrix() {\n    _classCallCheck(this, Matrix);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Matrix).apply(this, arguments));\n  }\n\n  _createClass(Matrix, [{\n    key: \"toString\",\n    value: function toString() {\n      var string = '[';\n\n      if (config.printRowMajor) {\n        string += 'row-major:';\n\n        for (var row = 0; row < this.RANK; ++row) {\n          for (var col = 0; col < this.RANK; ++col) {\n            string += \" \".concat(this[col * this.RANK + row]);\n          }\n        }\n      } else {\n        string += 'column-major:';\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          string += \" \".concat(this[i]);\n        }\n      }\n\n      string += ']';\n      return string;\n    }\n  }, {\n    key: \"getElementIndex\",\n    value: function getElementIndex(row, col) {\n      return col * this.RANK + row;\n    }\n  }, {\n    key: \"getElement\",\n    value: function getElement(row, col) {\n      return this[col * this.RANK + row];\n    }\n  }, {\n    key: \"setElement\",\n    value: function setElement(row, col, value) {\n      this[col * this.RANK + row] = checkNumber(value);\n      return this;\n    }\n  }, {\n    key: \"getColumn\",\n    value: function getColumn(columnIndex) {\n      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Array(this.RANK).fill(-0);\n      var firstIndex = columnIndex * this.RANK;\n\n      for (var i = 0; i < this.RANK; ++i) {\n        result[i] = this[firstIndex + i];\n      }\n\n      return result;\n    }\n  }, {\n    key: \"setColumn\",\n    value: function setColumn(columnIndex, columnVector) {\n      var firstIndex = columnIndex * this.RANK;\n\n      for (var i = 0; i < this.RANK; ++i) {\n        this[firstIndex + i] = columnVector[i];\n      }\n\n      return this;\n    }\n  }]);\n\n  return Matrix;\n}(MathArray);\n\nexport { Matrix as default };","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import \"core-js/modules/es6.array.is-array\";\nimport \"core-js/modules/es6.object.freeze\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { checkVector, deprecated } from '../lib/validators';\nimport Matrix from './base/matrix';\nimport { vec2_transformMat4AsVector, vec3_transformMat4AsVector } from '../lib/gl-matrix-extras';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport * as vec4 from 'gl-matrix/vec4';\nvar IDENTITY = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\nvar ZERO = Object.freeze([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nvar INDICES = Object.freeze({\n  COL0ROW0: 0,\n  COL0ROW1: 1,\n  COL0ROW2: 2,\n  COL0ROW3: 3,\n  COL1ROW0: 4,\n  COL1ROW1: 5,\n  COL1ROW2: 6,\n  COL1ROW3: 7,\n  COL2ROW0: 8,\n  COL2ROW1: 9,\n  COL2ROW2: 10,\n  COL2ROW3: 11,\n  COL3ROW0: 12,\n  COL3ROW1: 13,\n  COL3ROW2: 14,\n  COL3ROW3: 15\n});\nvar constants = {};\n\nvar Matrix4 = function (_Matrix) {\n  _inherits(Matrix4, _Matrix);\n\n  _createClass(Matrix4, [{\n    key: \"INDICES\",\n    get: function get() {\n      return INDICES;\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 16;\n    }\n  }, {\n    key: \"RANK\",\n    get: function get() {\n      return 4;\n    }\n  }], [{\n    key: \"IDENTITY\",\n    get: function get() {\n      constants.IDENTITY = constants.IDENTITY || Object.freeze(new Matrix4(IDENTITY));\n      return constants.IDENTITY;\n    }\n  }, {\n    key: \"ZERO\",\n    get: function get() {\n      constants.ZERO = constants.ZERO || Object.freeze(new Matrix4(ZERO));\n      return constants.ZERO;\n    }\n  }]);\n\n  function Matrix4(array) {\n    var _this;\n\n    _classCallCheck(this, Matrix4);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Matrix4).call(this, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0));\n\n    if (arguments.length === 1 && Array.isArray(array)) {\n      _this.copy(array);\n    } else {\n      _this.identity();\n    }\n\n    return _this;\n  }\n\n  _createClass(Matrix4, [{\n    key: \"copy\",\n    value: function copy(array) {\n      this[0] = array[0];\n      this[1] = array[1];\n      this[2] = array[2];\n      this[3] = array[3];\n      this[4] = array[4];\n      this[5] = array[5];\n      this[6] = array[6];\n      this[7] = array[7];\n      this[8] = array[8];\n      this[9] = array[9];\n      this[10] = array[10];\n      this[11] = array[11];\n      this[12] = array[12];\n      this[13] = array[13];\n      this[14] = array[14];\n      this[15] = array[15];\n      return this.check();\n    }\n  }, {\n    key: \"set\",\n    value: function set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m30;\n      this[4] = m01;\n      this[5] = m11;\n      this[6] = m21;\n      this[7] = m31;\n      this[8] = m02;\n      this[9] = m12;\n      this[10] = m22;\n      this[11] = m32;\n      this[12] = m03;\n      this[13] = m13;\n      this[14] = m23;\n      this[15] = m33;\n      return this.check();\n    }\n  }, {\n    key: \"setRowMajor\",\n    value: function setRowMajor(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m30;\n      this[4] = m01;\n      this[5] = m11;\n      this[6] = m21;\n      this[7] = m31;\n      this[8] = m02;\n      this[9] = m12;\n      this[10] = m22;\n      this[11] = m32;\n      this[12] = m03;\n      this[13] = m13;\n      this[14] = m23;\n      this[15] = m33;\n      return this.check();\n    }\n  }, {\n    key: \"toRowMajor\",\n    value: function toRowMajor(result) {\n      result[0] = this[0];\n      result[1] = this[4];\n      result[2] = this[8];\n      result[3] = this[12];\n      result[4] = this[1];\n      result[5] = this[5];\n      result[6] = this[9];\n      result[7] = this[13];\n      result[8] = this[2];\n      result[9] = this[6];\n      result[10] = this[10];\n      result[11] = this[14];\n      result[12] = this[3];\n      result[13] = this[7];\n      result[14] = this[11];\n      result[15] = this[15];\n      return result;\n    }\n  }, {\n    key: \"identity\",\n    value: function identity() {\n      return this.copy(IDENTITY);\n    }\n  }, {\n    key: \"fromQuaternion\",\n    value: function fromQuaternion(q) {\n      mat4.fromQuat(this, q);\n      return this.check();\n    }\n  }, {\n    key: \"frustum\",\n    value: function frustum(_ref) {\n      var left = _ref.left,\n          right = _ref.right,\n          bottom = _ref.bottom,\n          top = _ref.top,\n          near = _ref.near,\n          far = _ref.far;\n\n      if (far === Infinity) {\n        Matrix4._computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);\n      } else {\n        mat4.frustum(this, left, right, bottom, top, near, far);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lookAt\",\n    value: function lookAt(eye, center, up) {\n      if (arguments.length === 1) {\n        var _eye = eye;\n        eye = _eye.eye;\n        center = _eye.center;\n        up = _eye.up;\n      }\n\n      center = center || [0, 0, 0];\n      up = up || [0, 1, 0];\n      mat4.lookAt(this, eye, center, up);\n      return this.check();\n    }\n  }, {\n    key: \"ortho\",\n    value: function ortho(_ref2) {\n      var left = _ref2.left,\n          right = _ref2.right,\n          bottom = _ref2.bottom,\n          top = _ref2.top,\n          _ref2$near = _ref2.near,\n          near = _ref2$near === void 0 ? 0.1 : _ref2$near,\n          _ref2$far = _ref2.far,\n          far = _ref2$far === void 0 ? 500 : _ref2$far;\n      mat4.ortho(this, left, right, bottom, top, near, far);\n      return this.check();\n    }\n  }, {\n    key: \"orthographic\",\n    value: function orthographic(_ref3) {\n      var _ref3$fovy = _ref3.fovy,\n          fovy = _ref3$fovy === void 0 ? 45 * Math.PI / 180 : _ref3$fovy,\n          _ref3$aspect = _ref3.aspect,\n          aspect = _ref3$aspect === void 0 ? 1 : _ref3$aspect,\n          _ref3$focalDistance = _ref3.focalDistance,\n          focalDistance = _ref3$focalDistance === void 0 ? 1 : _ref3$focalDistance,\n          _ref3$near = _ref3.near,\n          near = _ref3$near === void 0 ? 0.1 : _ref3$near,\n          _ref3$far = _ref3.far,\n          far = _ref3$far === void 0 ? 500 : _ref3$far;\n\n      if (fovy > Math.PI * 2) {\n        throw Error('radians');\n      }\n\n      var halfY = fovy / 2;\n      var top = focalDistance * Math.tan(halfY);\n      var right = top * aspect;\n      return new Matrix4().ortho({\n        left: -right,\n        right: right,\n        bottom: -top,\n        top: top,\n        near: near,\n        far: far\n      });\n    }\n  }, {\n    key: \"perspective\",\n    value: function perspective() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          fovy = _ref4.fovy,\n          _ref4$fov = _ref4.fov,\n          fov = _ref4$fov === void 0 ? 45 * Math.PI / 180 : _ref4$fov,\n          _ref4$aspect = _ref4.aspect,\n          aspect = _ref4$aspect === void 0 ? 1 : _ref4$aspect,\n          _ref4$near = _ref4.near,\n          near = _ref4$near === void 0 ? 0.1 : _ref4$near,\n          _ref4$far = _ref4.far,\n          far = _ref4$far === void 0 ? 500 : _ref4$far;\n\n      fovy = fovy || fov;\n\n      if (fovy > Math.PI * 2) {\n        throw Error('radians');\n      }\n\n      mat4.perspective(this, fovy, aspect, near, far);\n      return this.check();\n    }\n  }, {\n    key: \"determinant\",\n    value: function determinant() {\n      return mat4.determinant(this);\n    }\n  }, {\n    key: \"getScale\",\n    value: function getScale() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n      result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);\n      result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);\n      result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);\n      return result;\n    }\n  }, {\n    key: \"getTranslation\",\n    value: function getTranslation() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n      result[0] = this[12];\n      result[1] = this[13];\n      result[2] = this[14];\n      return result;\n    }\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n      var scaleResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var scale = this.getScale(scaleResult || [-0, -0, -0]);\n      var inverseScale0 = 1 / scale[0];\n      var inverseScale1 = 1 / scale[1];\n      var inverseScale2 = 1 / scale[2];\n      result[0] = this[0] * inverseScale0;\n      result[1] = this[1] * inverseScale1;\n      result[2] = this[2] * inverseScale2;\n      result[3] = 0;\n      result[4] = this[4] * inverseScale0;\n      result[5] = this[5] * inverseScale1;\n      result[6] = this[6] * inverseScale2;\n      result[7] = 0;\n      result[8] = this[8] * inverseScale0;\n      result[9] = this[9] * inverseScale1;\n      result[10] = this[10] * inverseScale2;\n      result[11] = 0;\n      result[12] = 0;\n      result[13] = 0;\n      result[14] = 0;\n      result[15] = 1;\n      return result;\n    }\n  }, {\n    key: \"getRotationMatrix3\",\n    value: function getRotationMatrix3() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0, -0, -0, -0, -0, -0, -0];\n      var scaleResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var scale = this.getScale(scaleResult || [-0, -0, -0]);\n      var inverseScale0 = 1 / scale[0];\n      var inverseScale1 = 1 / scale[1];\n      var inverseScale2 = 1 / scale[2];\n      result[0] = this[0] * inverseScale0;\n      result[1] = this[1] * inverseScale1;\n      result[2] = this[2] * inverseScale2;\n      result[3] = this[4] * inverseScale0;\n      result[4] = this[5] * inverseScale1;\n      result[5] = this[6] * inverseScale2;\n      result[6] = this[8] * inverseScale0;\n      result[7] = this[9] * inverseScale1;\n      result[8] = this[10] * inverseScale2;\n      return result;\n    }\n  }, {\n    key: \"transpose\",\n    value: function transpose() {\n      mat4.transpose(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      mat4.invert(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyLeft\",\n    value: function multiplyLeft(a) {\n      mat4.multiply(this, a, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyRight\",\n    value: function multiplyRight(a) {\n      mat4.multiply(this, this, a);\n      return this.check();\n    }\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(radians) {\n      mat4.rotateX(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(radians) {\n      mat4.rotateY(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateZ\",\n    value: function rotateZ(radians) {\n      mat4.rotateZ(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateXYZ\",\n    value: function rotateXYZ(_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 3),\n          rx = _ref6[0],\n          ry = _ref6[1],\n          rz = _ref6[2];\n\n      return this.rotateX(rx).rotateY(ry).rotateZ(rz);\n    }\n  }, {\n    key: \"rotateAxis\",\n    value: function rotateAxis(radians, axis) {\n      mat4.rotate(this, this, radians, axis);\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(factor) {\n      if (Array.isArray(factor)) {\n        mat4.scale(this, this, factor);\n      } else {\n        mat4.scale(this, this, [factor, factor, factor]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(vec) {\n      mat4.translate(this, this, vec);\n      return this.check();\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(vector, result) {\n      if (vector.length === 4) {\n        result = vec4.transformMat4(result || [-0, -0, -0, -0], vector, this);\n        checkVector(result, 4);\n        return result;\n      }\n\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformAsPoint\",\n    value: function transformAsPoint(vector, result) {\n      var length = vector.length;\n\n      switch (length) {\n        case 2:\n          result = vec2.transformMat4(result || [-0, -0], vector, this);\n          break;\n\n        case 3:\n          result = vec3.transformMat4(result || [-0, -0, -0], vector, this);\n          break;\n\n        default:\n          throw new Error('Illegal vector');\n      }\n\n      checkVector(result, vector.length);\n      return result;\n    }\n  }, {\n    key: \"transformAsVector\",\n    value: function transformAsVector(vector, result) {\n      switch (vector.length) {\n        case 2:\n          result = vec2_transformMat4AsVector(result || [-0, -0], vector, this);\n          break;\n\n        case 3:\n          result = vec3_transformMat4AsVector(result || [-0, -0, -0], vector, this);\n          break;\n\n        default:\n          throw new Error('Illegal vector');\n      }\n\n      checkVector(result, vector.length);\n      return result;\n    }\n  }, {\n    key: \"makeRotationX\",\n    value: function makeRotationX(radians) {\n      return this.identity().rotateX(radians);\n    }\n  }, {\n    key: \"makeTranslation\",\n    value: function makeTranslation(x, y, z) {\n      return this.identity().translate([x, y, z]);\n    }\n  }, {\n    key: \"transformPoint\",\n    value: function transformPoint(vector, result) {\n      deprecated('Matrix4.transformPoint', '3.0');\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformVector\",\n    value: function transformVector(vector, result) {\n      deprecated('Matrix4.transformVector', '3.0');\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformDirection\",\n    value: function transformDirection(vector, result) {\n      deprecated('Matrix4.transformDirection', '3.0');\n      return this.transformAsVector(vector, result);\n    }\n  }], [{\n    key: \"_computeInfinitePerspectiveOffCenter\",\n    value: function _computeInfinitePerspectiveOffCenter(result, left, right, bottom, top, near) {\n      var column0Row0 = 2.0 * near / (right - left);\n      var column1Row1 = 2.0 * near / (top - bottom);\n      var column2Row0 = (right + left) / (right - left);\n      var column2Row1 = (top + bottom) / (top - bottom);\n      var column2Row2 = -1.0;\n      var column2Row3 = -1.0;\n      var column3Row2 = -2.0 * near;\n      result[0] = column0Row0;\n      result[1] = 0.0;\n      result[2] = 0.0;\n      result[3] = 0.0;\n      result[4] = 0.0;\n      result[5] = column1Row1;\n      result[6] = 0.0;\n      result[7] = 0.0;\n      result[8] = column2Row0;\n      result[9] = column2Row1;\n      result[10] = column2Row2;\n      result[11] = column2Row3;\n      result[12] = 0.0;\n      result[13] = 0.0;\n      result[14] = column3Row2;\n      result[15] = 0.0;\n      return result;\n    }\n  }]);\n\n  return Matrix4;\n}(Matrix);\n\nexport { Matrix4 as default };","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","export function vec2_transformMat4AsVector(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  var w = m[3] * x + m[7] * y || 1.0;\n  out[0] = (m[0] * x + m[4] * y) / w;\n  out[1] = (m[1] * x + m[5] * y) / w;\n  return out;\n}\nexport function vec3_transformMat4AsVector(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n  return out;\n}\nexport function vec3_transformMat2(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  out[2] = a[2];\n  return out;\n}\nexport function vec4_transformMat2(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\nexport function vec4_transformMat3(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  out[0] = m[0] * x + m[3] * y + m[6] * z;\n  out[1] = m[1] * x + m[4] * y + m[7] * z;\n  out[2] = m[2] * x + m[5] * y + m[8] * z;\n  out[3] = a[3];\n  return out;\n}","import \"core-js/modules/es6.typed.float32-array\";\n\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-finite\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.array.is-array\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _construct from \"@babel/runtime/helpers/esm/construct\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport assert from './assert';\nvar RADIANS_TO_DEGREES = 1 / Math.PI * 180;\nvar DEGREES_TO_RADIANS = 1 / 180 * Math.PI;\nvar config = {};\nconfig.EPSILON = 1e-12;\nconfig.debug = false;\nconfig.precision = 4;\nconfig.printTypes = false;\nconfig.printDegrees = false;\nconfig.printRowMajor = true;\nexport { config };\nexport function configure() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  for (var key in options) {\n    assert(key in config);\n    config[key] = options[key];\n  }\n\n  return config;\n}\n\nfunction round(value) {\n  return Math.round(value / config.EPSILON) * config.EPSILON;\n}\n\nexport function formatValue(value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$precision = _ref.precision,\n      precision = _ref$precision === void 0 ? config.precision || 4 : _ref$precision;\n\n  value = round(value);\n  return \"\".concat(parseFloat(value.toPrecision(precision)));\n}\nexport function isArray(value) {\n  return Array.isArray(value) || ArrayBuffer.isView(value) && value.length !== undefined;\n}\n\nfunction duplicateArray(array) {\n  return array.clone ? array.clone() : new Array(array.length);\n}\n\nexport function clone(array) {\n  return array.clone ? array.clone() : _construct(Array, _toConsumableArray(array));\n}\n\nfunction map(value, func, result) {\n  if (isArray(value)) {\n    result = result || duplicateArray(value);\n\n    for (var i = 0; i < result.length && i < value.length; ++i) {\n      result[i] = func(value[i], i, result);\n    }\n\n    return result;\n  }\n\n  return func(value);\n}\n\nexport function toRadians(degrees) {\n  return radians(degrees);\n}\nexport function toDegrees(radians) {\n  return degrees(radians);\n}\nexport function radians(degrees, result) {\n  return map(degrees, function (degrees) {\n    return degrees * DEGREES_TO_RADIANS;\n  }, result);\n}\nexport function degrees(radians, result) {\n  return map(radians, function (radians) {\n    return radians * RADIANS_TO_DEGREES;\n  }, result);\n}\nexport function sin(radians) {\n  return map(radians, function (angle) {\n    return Math.sin(angle);\n  });\n}\nexport function cos(radians) {\n  return map(radians, function (angle) {\n    return Math.cos(angle);\n  });\n}\nexport function tan(radians) {\n  return map(radians, function (angle) {\n    return Math.tan(angle);\n  });\n}\nexport function asin(radians) {\n  return map(radians, function (angle) {\n    return Math.asin(angle);\n  });\n}\nexport function acos(radians) {\n  return map(radians, function (angle) {\n    return Math.acos(angle);\n  });\n}\nexport function atan(radians) {\n  return map(radians, function (angle) {\n    return Math.atan(angle);\n  });\n}\nexport function clamp(value, min, max) {\n  return map(value, function (value) {\n    return Math.max(min, Math.min(max, value));\n  });\n}\nexport function lerp(a, b, t) {\n  if (isArray(a)) {\n    return a.map(function (ai, i) {\n      return lerp(ai, b[i], t);\n    });\n  }\n\n  return t * b + (1 - t) * a;\n}\nexport function equals(a, b, epsilon) {\n  var oldEpsilon = config.EPSILON;\n\n  if (epsilon) {\n    config.EPSILON = epsilon;\n  }\n\n  try {\n    if (a === b) {\n      return true;\n    }\n\n    if (isArray(a) && isArray(b)) {\n      if (a.length !== b.length) {\n        return false;\n      }\n\n      for (var i = 0; i < a.length; ++i) {\n        if (!equals(a[i], b[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    if (a && a.equals) {\n      return a.equals(b);\n    }\n\n    if (b && b.equals) {\n      return b.equals(a);\n    }\n\n    if (Number.isFinite(a) && Number.isFinite(b)) {\n      return Math.abs(a - b) <= config.EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n    }\n\n    return false;\n  } finally {\n    config.EPSILON = oldEpsilon;\n  }\n}\nexport function exactEquals(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a && _typeof(a) === 'object' && b && _typeof(b) === 'object') {\n    if (a.constructor !== b.constructor) {\n      return false;\n    }\n\n    if (a.exactEquals) {\n      return a.exactEquals(b);\n    }\n  }\n\n  if (isArray(a) && isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; ++i) {\n      if (!exactEquals(a[i], b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\nexport function withEpsilon(EPSILON, func) {\n  var oldPrecision = config.EPSILON;\n  config.EPSILON = EPSILON;\n  var value;\n\n  try {\n    value = func();\n  } finally {\n    config.EPSILON = oldPrecision;\n  }\n\n  return value;\n}"],"sourceRoot":""}