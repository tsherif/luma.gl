{"version":3,"sources":["webpack:///../examples/api/program-management/app.js","webpack:///./templates/api/example-program-management.jsx","webpack:///../modules/engine/src/geometries/cube-geometry.js","webpack:///../modules/engine/src/geometry/geometry.js","webpack:///../modules/shadertools/src/modules/project/project.js","webpack:///../modules/shadertools/src/modules/dirlight/dirlight.js","webpack:///../examples/utils/index.js"],"names":["random","getRandom","vs","fs","AppAnimationLoop","debug","getInfo","onInitialize","gl","aspect","setParameters","clearColor","clearDepth","depthTest","depthFunc","LEQUAL","programManager","hook","injection","translations","rotations","colors","this","cubes","Array","i","translation","rotation","model","modules","geometry","uniforms","uProjection","fov","radians","near","far","uView","center","eye","uColor","onRender","animationProps","tick","even","setProgram","Number","dirlight","modelMatrix","cube","uModel","onFinalize","delete","AnimationLoop","window","animationLoop","Example","render","exampleConfig","props","pageContext","React","Component","CUBE_INDICES","Uint16Array","CUBE_POSITIONS","Float32Array","CUBE_NORMALS","CUBE_TEX_COORDS","ATTRIBUTES","POSITION","size","value","NORMAL","TEXCOORD_0","CubeGeometry","id","uid","indices","attributes","Geometry","DRAW_MODE","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","drawMode","vertexCount","userData","_setAttributes","_calculateVertexCount","getVertexCount","getAttributes","_print","ArrayBuffer","attribute","assert","attributeName","isIndexed","Object","Math","IDENTITY_MATRIX","DEFAULT_MODULE_OPTIONS","viewMatrix","projectionMatrix","cameraPositionWorld","name","getUniforms","opts","prevUniforms","common","lightDirection","dependencies","project","MiniAnimationLoop","start","stop","_setDisplay","_getCanvas","canvas","document","dpr","s","c","n"],"mappings":"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","file":"component---templates-api-example-program-management-jsx-7b41bd2fd92d806a6965.js","sourcesContent":["import {AnimationLoop, Model, ProgramManager} from '@luma.gl/core';\nimport {setParameters} from '@luma.gl/gltools';\nimport {dirlight} from '@luma.gl/shadertools';\nimport {CubeGeometry} from '@luma.gl/engine';\nimport {Matrix4, radians} from 'math.gl';\nimport {getRandom} from '../../utils';\n\nconst random = getRandom();\n\nconst INFO_HTML = `\nUsing a ProgramManager to cache and share programs between models.\n`;\n\nconst vs = `\\\nattribute vec3 positions;\nattribute vec3 normals;\n\nuniform vec3 uColor;\nuniform mat4 uModel;\nuniform mat4 uView;\nuniform mat4 uProjection;\n\nvarying vec3 color;\n\nvoid main(void) {\n  vec3 normal = vec3(uModel * vec4(normals, 0.0));\n\n  // Set up data for modules\n  color = uColor;\n  LUMAGL_normal(normal);\n  gl_Position = uProjection * uView * uModel * vec4(positions, 1.0);\n}\n`;\n\nconst fs = `\\\nprecision highp float;\n\nvarying vec3 color;\n\nvoid main(void) {\n  gl_FragColor = vec4(color, 1.);\n  LUMAGL_fragmentColor(gl_FragColor);\n}\n`;\n\nexport default class AppAnimationLoop extends AnimationLoop {\n  constructor() {\n    super({debug: true});\n  }\n\n  static getInfo() {\n    return INFO_HTML;\n  }\n\n  onInitialize({gl, aspect}) {\n    setParameters(gl, {\n      clearColor: [0, 0, 0, 1],\n      clearDepth: 1,\n      depthTest: true,\n      depthFunc: gl.LEQUAL\n    });\n\n    const programManager = new ProgramManager(gl);\n    programManager.addShaderHook('vs:LUMAGL_normal(inout vec3 normal)');\n    programManager.addShaderHook('fs:LUMAGL_fragmentColor(inout vec4 color)');\n    programManager.addModuleInjection(dirlight, {\n      hook: 'vs:LUMAGL_normal',\n      injection: 'project_setNormal(normal);'\n    });\n    programManager.addModuleInjection(dirlight, {\n      hook: 'fs:LUMAGL_fragmentColor',\n      injection: 'color = dirlight_filterColor(color);'\n    });\n\n    const translations = [[2, -2, 0], [2, 2, 0], [-2, 2, 0], [-2, -2, 0]];\n\n    const rotations = [\n      [random(), random(), random()],\n      [random(), random(), random()],\n      [random(), random(), random()],\n      [random(), random(), random()]\n    ];\n\n    const colors = [[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 0]];\n\n    this.cubes = new Array(4);\n\n    for (let i = 0; i < 4; ++i) {\n      this.cubes[i] = {\n        translation: translations[i],\n        rotation: rotations[i],\n        model: new Model(gl, {\n          programManager,\n          vs,\n          fs,\n          modules: i % 2 === 0 ? [] : [dirlight],\n          geometry: new CubeGeometry(),\n          uniforms: {\n            uProjection: new Matrix4().perspective({fov: radians(60), aspect, near: 1, far: 20.0}),\n            uView: new Matrix4().lookAt({\n              center: [0, 0, 0],\n              eye: [0, 0, -8]\n            }),\n            uColor: colors[i]\n          }\n        })\n      };\n    }\n\n    return {programManager};\n  }\n\n  onRender(animationProps) {\n    const {gl, tick, programManager} = animationProps;\n\n    if (tick % 240 === 0) {\n      if (tick % 480 === 0) {\n        programManager.removeDefaultModule(dirlight);\n      } else {\n        programManager.addDefaultModule(dirlight);\n      }\n    }\n\n    if (tick % 120 === 0) {\n      const even = tick % 240 === 0;\n      for (let i = 0; i < 4; ++i) {\n        this.cubes[i].model.setProgram({\n          vs,\n          fs,\n          modules: i % 2 === Number(even) ? [] : [dirlight]\n        });\n      }\n    }\n\n    const modelMatrix = new Matrix4();\n\n    // Draw the cubes\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    for (let i = 0; i < 4; ++i) {\n      const cube = this.cubes[i];\n\n      cube.rotation[0] += 0.01;\n      cube.rotation[1] += 0.01;\n      cube.rotation[2] += 0.01;\n\n      modelMatrix\n        .identity()\n        .translate(cube.translation)\n        .rotateXYZ(cube.rotation);\n\n      cube.model\n        .setUniforms({\n          uModel: modelMatrix\n        })\n        .draw();\n    }\n  }\n\n  onFinalize({gl}) {\n    for (let i = 0; i < 4; ++i) {\n      this.cubes[i].model.delete();\n    }\n  }\n}\n\n/* global window */\nif (typeof window !== 'undefined' && !window.website) {\n  const animationLoop = new AppAnimationLoop();\n  animationLoop.start();\n}\n","import React from 'react';\nimport AnimationLoopExamplePage from '../../src/components/animation-loop-example-page';\nimport AnimationLoop from '../../../examples/api/program-management/app';\n\nexport default class Example extends React.Component {\n  render() {\n    return (\n      <AnimationLoopExamplePage AnimationLoop={AnimationLoop} exampleConfig={this.props.pageContext.exampleConfig} />\n    );\n  }\n}\n","import Geometry from '../geometry/geometry';\nimport {uid} from '@luma.gl/webgl';\n\n// prettier-ignore\nconst CUBE_INDICES = new Uint16Array([\n  0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13,\n  14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23\n]);\n\n// prettier-ignore\nconst CUBE_POSITIONS = new Float32Array([\n  -1,  -1,  1, 1,  -1,  1,  1,  1,  1,  -1,  1,  1,\n  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1,  -1,\n  -1,  1,  -1,  -1,  1,  1,  1,  1,  1,  1,  1,  -1,\n  -1,  -1,  -1,  1,  -1,  -1,  1,  -1,  1,  -1,  -1,  1,\n  1,  -1,  -1,  1,  1,  -1,  1,  1,  1,  1,  -1,  1,\n  -1,  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1\n]);\n\n// TODO - could be Uint8\n// prettier-ignore\nconst CUBE_NORMALS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,\n  // Back face\n  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,\n  // Top face\n  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,\n  // Bottom face\n  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,\n  // Right face\n  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,\n  // Left face\n  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0\n]);\n\n// prettier-ignore\nconst CUBE_TEX_COORDS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  1,  1,  0,  1,\n  // Back face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Top face\n  0,  1,  0,  0,  1,  0,  1,  1,\n  // Bottom face\n  1,  1,  0,  1,  0,  0,  1,  0,\n  // Right face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Left face\n  0,  0,  1,  0,  1,  1,  0,  1\n]);\n\nconst ATTRIBUTES = {\n  POSITION: {size: 3, value: new Float32Array(CUBE_POSITIONS)},\n  NORMAL: {size: 3, value: new Float32Array(CUBE_NORMALS)},\n  TEXCOORD_0: {size: 2, value: new Float32Array(CUBE_TEX_COORDS)}\n};\n\nexport default class CubeGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('cube-geometry')} = props;\n    super({\n      ...props,\n      id,\n      indices: {size: 1, value: new Uint16Array(CUBE_INDICES)},\n      attributes: {...ATTRIBUTES, ...props.attributes}\n    });\n  }\n}\n","import {uid, assert} from '@luma.gl/webgl';\n\n// Rendering primitives - specify how to extract primitives from vertices.\n// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants\nexport const DRAW_MODE = {\n  POINTS: 0x0000, // draw single points.\n  LINES: 0x0001, // draw lines. Each vertex connects to the one after it.\n  LINE_LOOP: 0x0002, // draw lines. Each set of two vertices is treated as a separate line segment.\n  LINE_STRIP: 0x0003, // draw a connected group of line segments from the first vertex to the last\n  TRIANGLES: 0x0004, // draw triangles. Each set of three vertices creates a separate triangle.\n  TRIANGLE_STRIP: 0x0005, // draw a connected group of triangles.\n  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.\n  // Each vertex connects to the previous and the first vertex in the fan.\n};\n\nexport default class Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n\n  constructor(props = {}) {\n    const {\n      id = uid('geometry'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n\n    // stubRemovedMethods(this, [\n    //   'setNeedsRedraw', 'needsRedraw', 'setAttributes'\n    // ], 'Immutable');\n\n    // stubRemovedMethods(this, [\n    //   'hasAttribute', 'getAttribute', 'getArray'\n    // ], 'Use geometry.attributes and geometry.indices');\n\n    // deprecateMethods(this, ['getAttributes'])\n  }\n\n  get mode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  // Return an object with all attributes plus indices added as a field.\n  getAttributes() {\n    return this.indices ? {indices: this.indices, ...this.attributes} : this.attributes;\n  }\n\n  // PRIVATE\n\n  _print(attributeName) {\n    return `Geometry ${this.id} attribute ${attributeName}`;\n  }\n\n  // Attribute\n  // value: typed array\n  // type: indices, vertices, uvs\n  // size: elements per vertex\n  // target: WebGL buffer type (string or constant)\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {value: indices, size: 1} : indices;\n    }\n\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n\n      // Wrap \"unwrapped\" arrays and try to autodetect their type\n      attribute = ArrayBuffer.isView(attribute) ? {value: attribute} : attribute;\n\n      assert(\n        ArrayBuffer.isView(attribute.value),\n        `${this._print(attributeName)}: must be typed array or object with value as typed array`\n      );\n\n      if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n        attribute.size = 3;\n      }\n\n      // Move indices to separate field\n      if (attributeName === 'indices') {\n        assert(!this.indices);\n        this.indices = attribute;\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n\n    if (this.indices && this.indices.isIndexed !== undefined) {\n      this.indices = Object.assign({}, this.indices);\n      delete this.indices.isIndexed;\n    }\n\n    return this;\n  }\n\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n    let vertexCount = Infinity;\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {value, size, constant} = attribute;\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n\n    assert(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n}\n","import {Matrix4} from 'math.gl';\n\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\nconst DEFAULT_MODULE_OPTIONS = {\n  modelMatrix: IDENTITY_MATRIX,\n  viewMatrix: IDENTITY_MATRIX,\n  projectionMatrix: IDENTITY_MATRIX,\n  cameraPositionWorld: [0, 0, 0]\n};\n\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS, prevUniforms = {}) {\n  // const viewProjectionInverse = viewProjection.invert();\n  // viewInverseMatrix: view.invert(),\n  // viewProjectionInverseMatrix: viewProjectionInverse\n\n  const uniforms = {};\n  if (opts.modelMatrix !== undefined) {\n    uniforms.modelMatrix = opts.modelMatrix;\n  }\n  if (opts.viewMatrix !== undefined) {\n    uniforms.viewMatrix = opts.viewMatrix;\n  }\n  if (opts.projectionMatrix !== undefined) {\n    uniforms.projectionMatrix = opts.projectionMatrix;\n  }\n  if (opts.cameraPositionWorld !== undefined) {\n    uniforms.cameraPositionWorld = opts.cameraPositionWorld;\n  }\n\n  // COMPOSITE UNIFORMS\n  if (opts.projectionMatrix !== undefined || opts.viewMatrix !== undefined) {\n    uniforms.viewProjectionMatrix = new Matrix4(opts.projectionMatrix).multiplyRight(\n      opts.viewMatrix\n    );\n  }\n\n  return uniforms;\n}\n\nconst common = `\\\nvarying vec4 project_vPositionWorld;\nvarying vec3 project_vNormalWorld;\n\nvec4 project_getPosition_World() {\n  return project_vPositionWorld;\n}\n\nvec3 project_getNormal_World() {\n  return project_vNormalWorld;\n}\n`;\n\nconst vs = `\\\n${common}\n\n// Unprefixed uniforms\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewProjectionMatrix;\nuniform vec3 cameraPositionWorld;\n\nstruct World {\n  vec3 position;\n  vec3 normal;\n};\n\nWorld world;\n\nvoid project_setPosition(vec4 position) {\n  project_vPositionWorld = position;\n}\n\nvoid project_setNormal(vec3 normal) {\n  project_vNormalWorld = normal;\n}\n\nvoid project_setPositionAndNormal_World(vec3 position, vec3 normal) {\n  world.position = position;\n  world.normal = normal;\n}\n\nvoid project_setPositionAndNormal_Model(vec3 position, vec3 normal) {\n  world.position = (modelMatrix * vec4(position, 1.)).xyz;\n  world.normal = mat3(modelMatrix) * normal;\n}\n\nvec4 project_model_to_clipspace(vec4 position) {\n  return viewProjectionMatrix * modelMatrix * position;\n}\n\nvec4 project_model_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * modelMatrix * vec4(position, 1.);\n}\n\nvec4 project_world_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_view_to_clipspace(vec3 position) {\n  return projectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n`;\n\nconst fs = `\n${common}\\\n`;\n\nexport default {\n  name: 'project',\n  getUniforms,\n  vs,\n  fs\n};\n","// Cheap lighting - single directional light, single dot product, one uniform\n\nimport project from '../project/project';\n\n/* eslint-disable camelcase */\nconst DEFAULT_LIGHT_DIRECTION = new Float32Array([1, 1, 2]);\n\nconst DEFAULT_MODULE_OPTIONS = {\n  lightDirection: DEFAULT_LIGHT_DIRECTION\n};\n\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS) {\n  const uniforms = {};\n  if (opts.lightDirection) {\n    uniforms.dirlight_uLightDirection = opts.lightDirection;\n  }\n  return uniforms;\n}\n\n// TODO - reuse normal from geometry module\nconst vs = null;\n\nconst fs = `\\\nuniform vec3 dirlight_uLightDirection;\n\n/*\n * Returns color attenuated by angle from light source\n */\nvec4 dirlight_filterColor(vec4 color) {\n  vec3 normal = project_getNormal_World();\n  float d = abs(dot(normalize(normal), normalize(dirlight_uLightDirection)));\n  return vec4(color.rgb * d, color.a);\n}\n`;\n\nexport default {\n  name: 'dirlight',\n  vs,\n  fs,\n  getUniforms,\n  dependencies: [project]\n};\n","/* global window, document */\n\n// Light class implementing the AnimationLoop interface\n// use by examples w/o creating a gl context\nexport class MiniAnimationLoop {\n  static getInfo() {\n    return '';\n  }\n\n  start() {}\n\n  stop() {}\n\n  delete() {}\n\n  _setDisplay() {}\n\n  _getCanvas(props = {}) {\n    let canvas;\n    if (props.canvas) {\n      canvas = document.getElementById(props.canvas);\n      const dpr = window.devicePixelRatio || 1;\n      canvas.height = canvas.clientHeight * dpr;\n      canvas.width = canvas.clientWidth * dpr;\n    } else {\n      canvas = document.createElement('canvas');\n      canvas.width = 800;\n      canvas.height = 600;\n      document.body.appendChild(canvas);\n    }\n\n    return canvas;\n  }\n}\n\n// Create a deterministic pseudorandom number generator\nexport function getRandom() {\n  let s = 1;\n  let c = 1;\n  return () => {\n    s = Math.sin(c * 17.23);\n    c = Math.cos(s * 27.92);\n    return fract(Math.abs(s * c) * 1432.71);\n  };\n}\n\nfunction fract(n) {\n  return n - Math.floor(n);\n}\n"],"sourceRoot":""}