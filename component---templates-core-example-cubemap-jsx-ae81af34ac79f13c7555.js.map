{"version":3,"sources":["webpack:///../examples/core/cubemap/app.js","webpack:///./templates/core/example-cubemap.jsx","webpack:///../modules/core/src/geometries/cube-geometry.js"],"names":["RoomCube","Object","geometry","fs","vs","Model","Prism","AppAnimationLoop","getInfo","onInitialize","gl","canvas","setParameters","clearColor","clearDepth","depthTest","depthFunc","GL","LEQUAL","cubemap","data","getFaceTextures","size","cube","uniforms","uTextureCube","uModel","prism","_animationLoop","tick","onRender","animationProps","aspect","view","eye","projection","fov","radians","document","uReflect","uRefract","reflectionElement","refractionElement","parseFloat","readHTMLControls","uView","uProjection","AnimationLoop","signs","textures","pos","neg","face","OffscreenCanvas","ctx","axis","sign","drawTexture","TextureCube","color","window","animationLoop","Example","render","exampleConfig","this","props","pageContext","React","Component","CUBE_INDICES","Uint16Array","CUBE_POSITIONS","Float32Array","CUBE_NORMALS","CUBE_TEX_COORDS","ATTRIBUTES","POSITION","value","NORMAL","TEXCOORD_0","CubeGeometry","id","uid","indices","attributes","Geometry"],"mappings":"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","file":"component---templates-core-example-cubemap-jsx-ae81af34ac79f13c7555.js","sourcesContent":["import GL from '@luma.gl/constants';\nimport {AnimationLoop, TextureCube, setParameters, Model, CubeGeometry} from '@luma.gl/core';\nimport {Matrix4, radians} from 'math.gl';\n\nconst INFO_HTML = `\n<p>\nA <code>cubemapped</code> prism within a larger cubemapped cube\n<p>\nUses a luma.gl <code>TextureCube</code> and\nthe GLSL <code>reflect</code> and <code>refract</code> builtin functions\nto calculate reflection and refraction directions from the prism normals\n</p>\n<div>\n  Reflection\n  <input id=\"reflection\"\n    type=\"range\" min=\"0.0\" max=\"1.0\" value=\"1.0\" step=\"0.01\">\n  <br>\n  Refraction\n  <input id=\"refraction\"\n    type=\"range\" min=\"0.0\" max=\"1.0\" value=\"1.0\" step=\"0.01\">\n  <br>\n</div>\n`;\n\nfunction readHTMLControls() {\n  /* global document */\n  if (typeof document === 'undefined') {\n    return {uReflect: 1, uRefract: 1};\n  }\n  const reflectionElement = document.getElementById('reflection');\n  const refractionElement = document.getElementById('refraction');\n\n  const uReflect = reflectionElement ? parseFloat(reflectionElement.value) : 1;\n  const uRefract = refractionElement ? parseFloat(refractionElement.value) : 1;\n\n  return {uReflect, uRefract};\n}\n\nclass RoomCube extends Model {\n  constructor(gl, props) {\n    const vs = `\\\nattribute vec3 positions;\n\nuniform mat4 uModel;\nuniform mat4 uView;\nuniform mat4 uProjection;\n\nvarying vec3 vPosition;\n\nvoid main(void) {\n  gl_Position = uProjection * uView * uModel * vec4(positions, 1.0);\n  vPosition = positions;\n}\n`;\n    const fs = `\\\nprecision highp float;\n\nuniform samplerCube uTextureCube;\nvarying vec3 vPosition;\n\nvoid main(void) {\n  // The outer cube just samples the texture cube directly\n  gl_FragColor = textureCube(uTextureCube, normalize(vPosition) * vec3(-1.0, 1.0, 1.0));\n}\n`;\n\n    super(gl, Object.assign({geometry: new CubeGeometry()}, props, {fs, vs}));\n  }\n}\n\nclass Prism extends Model {\n  constructor(gl, props) {\n    const vs = `\\\nattribute vec3 positions;\nattribute vec3 normals;\n\nuniform mat4 uModel;\nuniform mat4 uView;\nuniform mat4 uProjection;\n\nvarying vec3 vPosition;\nvarying vec3 vNormal;\n\nvoid main(void) {\n  gl_Position = uProjection * uView * uModel * vec4(positions, 1.0);\n  vPosition = vec3(uModel * vec4(positions,1));\n  vNormal = vec3(uModel * vec4(normals, 1));\n}\n`;\n    const fs = `\\\nprecision highp float;\n\nuniform samplerCube uTextureCube;\nuniform float uReflect;\nuniform float uRefract;\n\nvarying vec3 vPosition;\nvarying vec3 vNormal;\n\nvoid main(void) {\n  vec4 color = vec4(1, 0, 0, 1); // Prism color is red\n\n  vec3 offsetPosition = vPosition - vec3(0, 0, 2.5);\n\n  // The inner prism samples the texture cube in refract and reflect directions\n  vec3 reflectedDir = normalize(reflect(offsetPosition, vNormal));\n  vec3 refractedDir = normalize(refract(offsetPosition, vNormal, 0.75));\n  vec4 reflectedColor = mix(color, textureCube(uTextureCube, reflectedDir), uReflect);\n  vec4 refractedColor = mix(color, textureCube(uTextureCube, refractedDir), uRefract);\n\n  // Mix and multiply to keep it red\n  gl_FragColor = color * mix(reflectedColor, refractedColor, 0.5);\n}\n`;\n    super(gl, Object.assign({geometry: new CubeGeometry()}, props, {vs, fs}));\n  }\n}\n\nexport default class AppAnimationLoop extends AnimationLoop {\n  static getInfo() {\n    return INFO_HTML;\n  }\n\n  onInitialize({gl, canvas}) {\n    setParameters(gl, {\n      clearColor: [0, 0, 0, 1],\n      clearDepth: 1,\n      depthTest: true,\n      depthFunc: GL.LEQUAL\n    });\n\n    const cubemap = new TextureCube(gl, {data: getFaceTextures({size: 512})});\n\n    return {\n      cube: new RoomCube(gl, {\n        uniforms: {\n          uTextureCube: cubemap,\n          uModel: new Matrix4().scale([5, 5, 5])\n        }\n      }),\n      prism: new Prism(gl, {\n        _animationLoop: this,\n        uniforms: {\n          uTextureCube: cubemap,\n          uModel: ({tick}) => new Matrix4().rotateX(tick * 0.01).rotateY(tick * 0.013)\n        }\n      })\n    };\n  }\n\n  onRender(animationProps) {\n    const {gl, aspect, cube, prism} = animationProps;\n\n    const view = new Matrix4().lookAt({eye: [0, 0, -1]}).translate([0, 0, 4]);\n    const projection = new Matrix4().perspective({fov: radians(75), aspect});\n\n    const {uReflect, uRefract} = readHTMLControls();\n\n    gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n\n    cube.draw({\n      uniforms: {\n        uView: view,\n        uProjection: projection\n      }\n    });\n\n    prism.draw({\n      uniforms: {\n        uView: view,\n        uProjection: projection,\n        uReflect,\n        uRefract\n      }\n    });\n  }\n}\n\n// Create six textures for the cube map sides\nfunction getFaceTextures({size}) {\n  /* global document, OffscreenCanvas */\n  const signs = ['pos', 'neg'];\n  const axes = ['x', 'y', 'z'];\n  const textures = {\n    pos: {},\n    neg: {}\n  };\n\n  let face = 0;\n  const canvas =\n    typeof document === 'undefined'\n      ? new OffscreenCanvas(size, size)\n      : document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n\n  for (const axis of axes) {\n    for (const sign of signs) {\n      // reset canvas\n      canvas.width = size;\n      canvas.height = size;\n      drawTexture({ctx, sign, axis, size});\n      textures[TextureCube.FACES[face++]] = ctx.getImageData(0, 0, size, size);\n    }\n  }\n  return textures;\n}\n\n// Use canvas API to generate a texture for each side\nfunction drawTexture({ctx, sign, axis, size}) {\n  const color = 'rgb(0,64,128)';\n  ctx.fillStyle = color;\n  ctx.fillRect(0, 0, size, size);\n  ctx.fillStyle = 'white';\n  ctx.fillRect(8, 8, size - 16, size - 16);\n  ctx.fillStyle = color;\n  ctx.font = `${size / 4}px serif`;\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n  ctx.fillText(`${sign}-${axis}`, size / 2, size / 2);\n  ctx.strokeStyle = color;\n  ctx.strokeRect(0, 0, size, size);\n}\n\n/* global window */\nif (typeof window !== 'undefined' && !window.website) {\n  const animationLoop = new AppAnimationLoop();\n  animationLoop.start();\n}\n","import React from 'react';\nimport AnimationLoopExamplePage from '../../src/components/animation-loop-example-page';\nimport AnimationLoop from '../../../examples/core/cubemap/app';\n\nexport default class Example extends React.Component {\n  render() {\n    return (\n      <AnimationLoopExamplePage AnimationLoop={AnimationLoop} exampleConfig={this.props.pageContext.exampleConfig} />\n    );\n  }\n}\n","import Geometry from '../geometry/geometry';\nimport {uid} from '../utils';\n\n// prettier-ignore\nconst CUBE_INDICES = new Uint16Array([\n  0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13,\n  14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23\n]);\n\n// prettier-ignore\nconst CUBE_POSITIONS = new Float32Array([\n  -1,  -1,  1, 1,  -1,  1,  1,  1,  1,  -1,  1,  1,\n  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1,  -1,\n  -1,  1,  -1,  -1,  1,  1,  1,  1,  1,  1,  1,  -1,\n  -1,  -1,  -1,  1,  -1,  -1,  1,  -1,  1,  -1,  -1,  1,\n  1,  -1,  -1,  1,  1,  -1,  1,  1,  1,  1,  -1,  1,\n  -1,  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1\n]);\n\n// TODO - could be Uint8\n// prettier-ignore\nconst CUBE_NORMALS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,\n  // Back face\n  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,\n  // Top face\n  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,\n  // Bottom face\n  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,\n  // Right face\n  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,\n  // Left face\n  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0\n]);\n\n// prettier-ignore\nconst CUBE_TEX_COORDS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  1,  1,  0,  1,\n  // Back face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Top face\n  0,  1,  0,  0,  1,  0,  1,  1,\n  // Bottom face\n  1,  1,  0,  1,  0,  0,  1,  0,\n  // Right face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Left face\n  0,  0,  1,  0,  1,  1,  0,  1\n]);\n\nconst ATTRIBUTES = {\n  POSITION: {size: 3, value: new Float32Array(CUBE_POSITIONS)},\n  NORMAL: {size: 3, value: new Float32Array(CUBE_NORMALS)},\n  TEXCOORD_0: {size: 2, value: new Float32Array(CUBE_TEX_COORDS)}\n};\n\nexport default class CubeGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('cube-geometry')} = props;\n    super({\n      ...props,\n      id,\n      indices: {size: 1, value: new Uint16Array(CUBE_INDICES)},\n      attributes: {...ATTRIBUTES, ...props.attributes}\n    });\n  }\n}\n"],"sourceRoot":""}