{"version":3,"sources":["webpack:///../modules/webgl/src/classes/uniform-buffer-layout.js","webpack:///../examples/core/dof/app.js","webpack:///./templates/core/example-dof.jsx","webpack:///../modules/core/src/geometry/geometry.js","webpack:///../node_modules/seer/dist/index.js","webpack:///../modules/core/src/geometries/cube-geometry.js"],"names":["GL_FLOAT","GL_INT","GL_UNSIGNED_INT","UniformBufferLayout","layout","_this$typedArray","key","this","size","_addUniform","data","Float32Array","typedArray","Int32Array","buffer","Uint32Array","getBytes","getData","getSubData","offset","undefined","index","begin","offsets","end","sizes","subarray","setUniforms","values","_setValue","assert","type","typeAndComponents","decomposeCompositeGLType","uniformType","count","components","_alignTo","QUAD_VERTS","focalLength","focusDistance","fStop","texelOffset","InstancedCube","gl","props","_this","xforms","Array","matrices","matrixBuffer","byteLength","_Model","call","Object","assign","geometry","cube_geometry","vs","fs","isInstanced","instanceCount","uniforms","uTexture","attributes","modelMatCol1","stride","divisor","modelMatCol2","modelMatCol3","modelMatCol4","updateMatrixBuffer","setData","Model","AppAnimationLoop","_this2","_AnimationLoop","isDemoSupported","getInfo","onInitialize","_parameters","_parameters2","_attachments","_parameters3","_ref","_animationLoop","isWebGL2","setParameters","depthTest","depthFunc","GL","LEQUAL","projMat","matrix4","viewMat","lookAt","eye","dofUniformsLayout","uniform_buffer_layout_UniformBufferLayout","uDepthRange","FLOAT_VEC2","uFocusDistance","FLOAT","uBlurCoefficient","uPPM","dofUniforms","target","UNIFORM_BUFFER","accessor","dofProgram","program","id","sceneFramebuffer","framebuffer","width","drawingBufferWidth","height","drawingBufferHeight","attachments","COLOR_ATTACHMENT0","texture_2d","format","RGBA","UNSIGNED_BYTE","mipmaps","parameters","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","DEPTH_ATTACHMENT","DEPTH_COMPONENT16","UNSIGNED_SHORT","dataFormat","DEPTH_COMPONENT","NEAREST","dofFramebuffer","depth","focalLengthInput","document","focusDistanceInput","fStopInput","parseFloat","texture","LINEAR_MIPMAP_NEAREST","instancedCubes","app_InstancedCube","CUBES_PER_ROW","cubeI","j","rowOffset","Math","NUM_ROWS","i","scale","rotate","random","PI","translate","matrix","rotateXYZ","quadVertexArray","vertex_array","aPosition","onRender","_ref2","aspect","tick","magnification","blurCoefficient","ppm","clear","color","fov","radians","near","far","center","up","box","uProjection","uView","uTexelOffset","uColor","uDepth","vertexArray","drawMode","TRIANGLE_STRIP","vertexCount","isSupported","getAltText","AnimationLoop","window","website","app_AppAnimationLoop","animationLoop","Example","render","react_default","a","createElement","animation_loop_example_page","exampleConfig","pageContext","React","Component","DRAW_MODE","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_FAN","Geometry","_props","_props$id","uid","_props$drawMode","_props$attributes","_props$indices","indices","_props$vertexCount","userData","_setAttributes","_calculateVertexCount","getVertexCount","getAttributes","_print","attributeName","ArrayBuffer","isView","value","attribute","isIndexed","length","Infinity","constant","Number","__webpack_require__","defineProperty","exports","_typeof","Symbol","iterator","obj","constructor","prototype","isBrowser","addEventListener","timers","Map","isReady","__SEER_INITIALIZED__","throttle","delay","time","get","now","Date","set","send","arguments","seen","Set","payload","JSON","stringify","has","add","toString","slice","includes","replacer","postMessage","source","e","console","log","listeners","listener","message","_message$data","typeListeners","forEach","cb","init","__SEER_LISTENER__","list","listItem","itemKey","updateItem","path","multiUpdate","array","deleteItem","addLog","msg","listenFor","Error","push","removeListener","filter","l","clean","removeEventListener","CUBE_INDICES","Uint16Array","CUBE_POSITIONS","CUBE_NORMALS","CUBE_TEX_COORDS","ATTRIBUTES","POSITION","NORMAL","TEXCOORD_0","CubeGeometry","_Geometry"],"mappings":"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","file":"component---templates-core-example-dof-jsx-76d9001c79913b546716.js","sourcesContent":["/* eslint-disable camelcase */\nimport {decomposeCompositeGLType} from '../webgl-utils/attribute-utils';\nimport {assert} from '../utils';\n\nconst ERR_ARGUMENT = 'UniformBufferLayout illegal argument';\n\n// Local constants - these will \"collapse\" during minification\nconst GL_FLOAT = 0x1406;\nconst GL_INT = 0x1404;\nconst GL_UNSIGNED_INT = 0x1405;\n\n// Std140 layout for uniforms\nexport default class UniformBufferLayout {\n  constructor(layout) {\n    this.layout = {};\n    this.size = 0;\n\n    // Add layout (type, size and offset) definitions for each uniform in the layout\n    for (const key in layout) {\n      this._addUniform(key, layout[key]);\n    }\n\n    this.size += (4 - (this.size % 4)) % 4;\n\n    // Allocate three typed arrays pointing at same memory\n    const data = new Float32Array(this.size);\n    this.typedArray = {\n      [GL_FLOAT]: data,\n      [GL_INT]: new Int32Array(data.buffer),\n      [GL_UNSIGNED_INT]: new Uint32Array(data.buffer)\n    };\n  }\n\n  // Get number of bytes needed for buffer allocation\n  getBytes() {\n    return this.size * 4;\n  }\n\n  // Get the current data as Float32Array, for bufferSubData\n  getData() {\n    return this.typedArray[GL_FLOAT];\n  }\n\n  // Get offset and data for one object (for bufferSubData)\n  getSubData(index) {\n    let data;\n    let offset;\n    if (index === undefined) {\n      data = this.data;\n      offset = 0;\n    } else {\n      const begin = this.offsets[index];\n      const end = begin + this.sizes[index];\n      data = this.data.subarray(begin, end);\n      offset = begin * 4;\n    }\n    return {data, offset};\n  }\n\n  // Set a map of values\n  setUniforms(values) {\n    for (const key in values) {\n      this._setValue(key, values[key]);\n    }\n    return this;\n  }\n\n  _setValue(key, value) {\n    const layout = this.layout[key];\n    assert(layout, 'UniformLayoutStd140 illegal argument');\n    const typedArray = this.typedArray[layout.type];\n    if (layout.size === 1) {\n      // single value -> just set it\n      typedArray[layout.offset] = value;\n    } else {\n      // vector/matrix -> copy the supplied (typed) array, starting from offset\n      typedArray.set(value, layout.offset);\n    }\n  }\n\n  _addUniform(key, uniformType) {\n    const typeAndComponents = decomposeCompositeGLType(uniformType);\n    assert(typeAndComponents, ERR_ARGUMENT);\n    const {type, components: count} = typeAndComponents;\n\n    // First, align (bump) current offset to an even multiple of current object (1, 2, 4)\n    this.size = this._alignTo(this.size, count);\n    // Use the aligned size as the offset of the current uniform.\n    const offset = this.size;\n    // Then, add our object's padded size ((1, 2, multiple of 4) to the current offset\n    this.size += count;\n\n    this.layout[key] = {type, size: count, offset};\n  }\n\n  // Align offset to 1, 2 or 4 elements (4, 8 or 16 bytes)\n  _alignTo(size, count) {\n    switch (count) {\n      case 1:\n        return size; // Pad upwards to even multiple of 2\n      case 2:\n        return size + (size % 2); // Pad upwards to even multiple of 2\n      default:\n        return size + ((4 - (size % 4)) % 4); // Pad upwards to even multiple of 4\n    }\n  }\n}\n","import GL from '@luma.gl/constants';\nimport {\n  AnimationLoop,\n  Framebuffer,\n  setParameters,\n  clear,\n  Program,\n  Texture2D,\n  VertexArray,\n  UniformBufferLayout,\n  Buffer,\n  isWebGL2,\n  Model,\n  CubeGeometry\n} from '@luma.gl/core';\nimport {Matrix4, radians} from 'math.gl';\n/* eslint-disable spaced-comment */\n/* global document */\n\n/*\n  Based on: https://github.com/tsherif/picogl.js/blob/master/examples/dof.html\n  Original algorithm: http://www.nutty.ca/?page_id=352&link=depth_of_field\n*/\n\nconst INFO_HTML = `\n<p>\n  <b>Depth of Field</b>.\n<p>\nSeveral instanced luma.gl <code>Cubes</code> rendered with a Depth of Field\npost-processing effect.\n\n<div>\n  Focal Length: <input type=\"range\" id=\"focal-length\" min=\"0.1\" max=\"10.0\" step=\"0.1\">\n</div>\n<div>\n  Focus Distance: <input type=\"range\" id=\"focus-distance\" min=\"0.1\" max=\"10.0\" step=\"0.1\">\n</div>\n<div>\n  F-Stop: <input type=\"range\" id=\"f-stop\" min=\"0.1\" max=\"10.0\" step=\"0.1\">\n</div>\n\n`;\n\nconst ALT_TEXT = \"THIS DEMO REQUIRES WEBLG2, BUT YOUR BROWSER DOESN'T SUPPORT IT\";\n\nconst QUAD_VERTS = [1, 1, 0, -1, 1, 0, 1, -1, 0, -1, -1, 0]; // eslint-disable-line\nconst NUM_ROWS = 5;\nconst CUBES_PER_ROW = 20;\nconst NUM_CUBES = CUBES_PER_ROW * NUM_ROWS;\nconst NEAR = 0.1;\nconst FAR = 30.0;\n\nlet focalLength = 2.0;\nlet focusDistance = 3.0;\nlet fStop = 2.8;\nconst texelOffset = new Float32Array(2);\n\nclass InstancedCube extends Model {\n  constructor(gl, props) {\n    const count = props.count;\n    const xforms = new Array(count);\n    const matrices = new Float32Array(count * 16);\n    const matrixBuffer = new Buffer(gl, matrices.byteLength);\n\n    const vs = `\\\n#version 300 es\n#define SHADER_NAME scene.vs\n\nin vec3 positions;\nin vec3 normals;\nin vec2 texCoords;\nin vec4 modelMatCol1;\nin vec4 modelMatCol2;\nin vec4 modelMatCol3;\nin vec4 modelMatCol4;\n\nuniform mat4 uView;\nuniform mat4 uProjection;\nout vec3 vNormal;\nout vec2 vUV;\n\nvoid main(void) {\n  mat4 modelMat = mat4(\n    modelMatCol1,\n    modelMatCol2,\n    modelMatCol3,\n    modelMatCol4\n  );\n  gl_Position = uProjection * uView * modelMat * vec4(positions, 1.0);\n  vNormal = vec3(modelMat * vec4(normals, 0.0));\n  vUV = texCoords;\n}\n`;\n    const fs = `\\\n#version 300 es\nprecision highp float;\n#define SHADER_NAME scene.fs\n\nin vec3 vNormal;\nin vec2 vUV;\nuniform sampler2D uTexture;\n\nout vec4 fragColor;\nvoid main(void) {\n  float d = clamp(dot(normalize(vNormal), normalize(vec3(1.0, 1.0, 0.2))), 0.0, 1.0);\n  fragColor.rgb = texture(uTexture, vUV).rgb * (d + 0.1);\n  fragColor.a = 1.0;\n}\n`;\n\n    super(\n      gl,\n      Object.assign({geometry: new CubeGeometry()}, props, {\n        vs,\n        fs,\n        isInstanced: 1,\n        instanceCount: count,\n        uniforms: {\n          uTexture: props.uniforms.uTexture\n        },\n        attributes: {\n          // Attributes are limited to 4 components,\n          // So we have to split the matrices across\n          // 4 attributes. They're reconstructed in\n          // the vertex shader.\n          modelMatCol1: {\n            buffer: matrixBuffer,\n            size: 4,\n            stride: 64,\n            offset: 0,\n            divisor: 1\n          },\n          modelMatCol2: {\n            buffer: matrixBuffer,\n            size: 4,\n            stride: 64,\n            offset: 16,\n            divisor: 1\n          },\n          modelMatCol3: {\n            buffer: matrixBuffer,\n            size: 4,\n            stride: 64,\n            offset: 32,\n            divisor: 1\n          },\n          modelMatCol4: {\n            buffer: matrixBuffer,\n            size: 4,\n            stride: 64,\n            offset: 48,\n            divisor: 1\n          }\n        }\n      })\n    );\n\n    this.count = count;\n    this.xforms = xforms;\n    this.matrices = matrices;\n    this.matrixBuffer = matrixBuffer;\n  }\n\n  updateMatrixBuffer() {\n    this.matrixBuffer.setData(this.matrices);\n  }\n}\n\nconst DOF_VERTEX = `\\\n#version 300 es\n#define SHADER_NAME quad.vs\n\nlayout(location=0) in vec3 aPosition;\n\nvoid main() {\n    gl_Position = vec4(aPosition, 1.0);\n}\n`;\n\nconst DOF_FRAGMENT = `\\\n#version 300 es\nprecision highp float;\n#define SHADER_NAME dof.fs\n\n#define MAX_BLUR 20.0\n\nuniform DOFUniforms {\n  vec2  uDepthRange;\n  float uFocusDistance;\n  float uBlurCoefficient;\n  float uPPM;\n};\n\nuniform vec2 uTexelOffset;\n\nuniform sampler2D uColor;\nuniform sampler2D uDepth;\n\nout vec4 fragColor;\n\nvoid main() {\n    ivec2 fragCoord = ivec2(gl_FragCoord.xy);\n    ivec2 resolution = textureSize(uColor, 0) - 1;\n\n    // Convert to linear depth\n    float ndc = 2.0 * texelFetch(uDepth, fragCoord, 0).r - 1.0;\n    float depth = -(2.0 * uDepthRange.y * uDepthRange.x) / (ndc * (uDepthRange.y - uDepthRange.x) - uDepthRange.y - uDepthRange.x);\n    float deltaDepth = abs(uFocusDistance - depth);\n\n    // Blur more quickly in the foreground.\n    float xdd = depth < uFocusDistance ? abs(uFocusDistance - deltaDepth) : abs(uFocusDistance + deltaDepth);\n    float blurRadius = min(floor(uBlurCoefficient * (deltaDepth / xdd) * uPPM), MAX_BLUR);\n\n    vec4 color = vec4(0.0);\n    if (blurRadius > 1.0) {\n        float halfBlur = blurRadius * 0.5;\n\n        float count = 0.0;\n\n        for (float i = 0.0; i <= MAX_BLUR; ++i) {\n            if (i > blurRadius) {\n                break;\n            }\n\n            // texelFetch outside texture gives vec4(0.0) (undefined in ES 3)\n            ivec2 sampleCoord = clamp(fragCoord + ivec2(((i - halfBlur) * uTexelOffset)), ivec2(0), resolution);\n            color += texelFetch(uColor, sampleCoord, 0);\n\n            ++count;\n        }\n\n        color /= count;\n    } else {\n        color = texelFetch(uColor, fragCoord, 0);\n    }\n\n    fragColor = color;\n}\n`;\n\nexport default class AppAnimationLoop extends AnimationLoop {\n  static getInfo() {\n    return INFO_HTML;\n  }\n\n  constructor(props = {}) {\n    super(props);\n    // Default value is true, so GL context is always created to verify wheter it is WebGL2 or not.\n    this.isDemoSupported = true;\n  }\n\n  onInitialize({gl, _animationLoop}) {\n    this.isDemoSupported = isWebGL2(gl);\n    if (!this.isDemoSupported) {\n      return {};\n    }\n\n    setParameters(gl, {\n      depthTest: true,\n      depthFunc: GL.LEQUAL\n    });\n\n    const projMat = new Matrix4();\n    const viewMat = new Matrix4().lookAt({eye: [0, 0, 8]});\n\n    ///////////////////////////////////////\n    // Create postprocessing pass program.\n    ///////////////////////////////////////\n\n    const dofUniformsLayout = new UniformBufferLayout({\n      uDepthRange: gl.FLOAT_VEC2,\n      uFocusDistance: gl.FLOAT,\n      uBlurCoefficient: gl.FLOAT,\n      uPPM: gl.FLOAT\n    }).setUniforms({\n      uDepthRange: [NEAR, FAR]\n    });\n\n    const dofUniforms = new Buffer(gl, {\n      target: GL.UNIFORM_BUFFER,\n      data: dofUniformsLayout.getData(),\n      accessor: {\n        index: 0\n      }\n    });\n\n    const dofProgram = new Program(gl, {\n      id: 'DOF_PROGRAM',\n      vs: DOF_VERTEX,\n      fs: DOF_FRAGMENT\n    });\n\n    dofProgram.uniformBlockBinding(dofProgram.getUniformBlockIndex('DOFUniforms'), 0);\n\n    //////////////////////\n    // Set up frambuffers.\n    //////////////////////\n\n    // Need to ensure both color and depth targets can be sampled.\n    const sceneFramebuffer = new Framebuffer(gl, {\n      width: gl.drawingBufferWidth,\n      height: gl.drawingBufferHeight,\n      attachments: {\n        [GL.COLOR_ATTACHMENT0]: new Texture2D(gl, {\n          format: GL.RGBA,\n          type: GL.UNSIGNED_BYTE,\n          width: gl.drawingBufferWidth,\n          height: gl.drawingBufferHeight,\n          mipmaps: false,\n          parameters: {\n            [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n            [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n            [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n            [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n          }\n        }),\n        [GL.DEPTH_ATTACHMENT]: new Texture2D(gl, {\n          format: GL.DEPTH_COMPONENT16,\n          type: GL.UNSIGNED_SHORT,\n          dataFormat: GL.DEPTH_COMPONENT,\n          width: gl.drawingBufferWidth,\n          height: gl.drawingBufferHeight,\n          mipmaps: false,\n          parameters: {\n            [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n            [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n            [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n            [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n          }\n        })\n      }\n    });\n\n    // Postprocessing FBO doesn't need a depth attachment.\n    const dofFramebuffer = new Framebuffer(gl, {\n      width: gl.drawingBufferWidth,\n      height: gl.drawingBufferHeight,\n      depth: false\n    });\n\n    /////////////////////\n    // Input handlers.\n    /////////////////////\n\n    const focalLengthInput = document.getElementById('focal-length');\n    const focusDistanceInput = document.getElementById('focus-distance');\n    const fStopInput = document.getElementById('f-stop');\n\n    if (focalLengthInput) {\n      focalLengthInput.value = focalLength;\n      focalLengthInput.addEventListener('input', () => {\n        focalLength = parseFloat(focalLengthInput.value);\n      });\n\n      focusDistanceInput.value = focusDistance;\n      focusDistanceInput.addEventListener('input', () => {\n        focusDistance = parseFloat(focusDistanceInput.value);\n      });\n\n      fStopInput.value = fStop;\n      fStopInput.addEventListener('input', () => {\n        fStop = parseFloat(fStopInput.value);\n      });\n    }\n\n    const texture = new Texture2D(gl, {\n      data: 'webgl-logo.png',\n      mipmaps: true,\n      parameters: {\n        [gl.TEXTURE_MAG_FILTER]: gl.LINEAR,\n        [gl.TEXTURE_MIN_FILTER]: gl.LINEAR_MIPMAP_NEAREST\n      }\n    });\n\n    /////////////////////////////////////////////////////\n    // Create instanced model and initialize transform matrices.\n    /////////////////////////////////////////////////////\n\n    const instancedCubes = new InstancedCube(gl, {\n      count: NUM_CUBES,\n      uniforms: {\n        uTexture: texture\n      }\n    });\n\n    let cubeI = 0;\n    for (let j = 0; j < NUM_ROWS; ++j) {\n      const rowOffset = j - Math.floor(NUM_ROWS / 2);\n      for (let i = 0; i < CUBES_PER_ROW; ++i) {\n        const scale = [0.4, 0.4, 0.4];\n        const rotate = [-Math.random() * Math.PI, 0, Math.random() * Math.PI];\n        const translate = [-i + 2 - rowOffset, 0, -i + 2 + rowOffset];\n        instancedCubes.xforms[cubeI] = {\n          scale,\n          translate,\n          rotate,\n          matrix: new Matrix4()\n            .translate(translate)\n            .rotateXYZ(rotate)\n            .scale(scale)\n        };\n\n        instancedCubes.matrices.set(instancedCubes.xforms[cubeI].matrix, cubeI * 16);\n        ++cubeI;\n      }\n    }\n\n    instancedCubes.updateMatrixBuffer();\n\n    /////////////////////////////////////////////\n    // Full-screen quad VAO for postprocessing\n    // passes.\n    /////////////////////////////////////////////\n\n    const quadVertexArray = new VertexArray(gl, {\n      program: dofProgram,\n      attributes: {\n        aPosition: new Buffer(gl, new Float32Array(QUAD_VERTS))\n      }\n    });\n\n    return {\n      projMat,\n      viewMat,\n      instancedCubes,\n      sceneFramebuffer,\n      dofFramebuffer,\n      quadVertexArray,\n      dofProgram,\n      dofUniforms,\n      dofUniformsLayout\n    };\n  }\n\n  onRender({\n    gl,\n    tick,\n    width,\n    height,\n    aspect,\n    projMat,\n    viewMat,\n    instancedCubes,\n    sceneFramebuffer,\n    dofFramebuffer,\n    quadVertexArray,\n    dofProgram,\n    dofUniforms,\n    dofUniformsLayout\n  }) {\n    if (!this.isDemoSupported) {\n      return;\n    }\n\n    sceneFramebuffer.resize(gl.drawingBufferWidth, gl.drawingBufferHeight);\n    dofFramebuffer.resize(gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n    const magnification = focalLength / Math.max(0.1, Math.abs(focusDistance - focalLength));\n    const blurCoefficient = (focalLength * magnification) / fStop;\n    const ppm =\n      Math.sqrt(\n        gl.drawingBufferWidth * gl.drawingBufferWidth +\n          gl.drawingBufferHeight * gl.drawingBufferHeight\n      ) / 35;\n\n    clear(gl, {color: [0, 0, 0, 1], depth: true, framebuffer: sceneFramebuffer});\n\n    projMat.perspective({fov: radians(75), aspect, near: NEAR, far: FAR});\n    viewMat.lookAt({eye: [3, 1.5, 3], center: [0, 0, 0], up: [0, 1, 0]});\n\n    ////////////////////////////////////////\n    // Update model matrix data and then\n    // update the attribute buffer.\n    ////////////////////////////////////////\n\n    for (let i = 0; i < NUM_CUBES; ++i) {\n      const box = instancedCubes.xforms[i];\n      box.rotate[0] += 0.01;\n      box.rotate[1] += 0.02;\n      box.matrix\n        .identity()\n        .translate(box.translate)\n        .rotateXYZ(box.rotate)\n        .scale(box.scale);\n      instancedCubes.matrices.set(box.matrix, i * 16);\n    }\n\n    instancedCubes.updateMatrixBuffer();\n\n    ////////////////////////////////////\n    // Draw cubes to scene framebuffer.\n    ////////////////////////////////////\n\n    instancedCubes.draw({\n      uniforms: {\n        uProjection: projMat,\n        uView: viewMat\n      },\n      framebuffer: sceneFramebuffer\n    });\n\n    /////////////////\n    // Apply DOF\n    /////////////////\n\n    // Horizontal DOF blur\n    clear(gl, {color: [0, 0, 0, 1], framebuffer: dofFramebuffer});\n\n    // texelOffset determines the direction of the blur\n    texelOffset[0] = 1;\n    texelOffset[1] = 0;\n\n    dofUniformsLayout.setUniforms({\n      uFocusDistance: focusDistance,\n      uBlurCoefficient: blurCoefficient,\n      uPPM: ppm\n    });\n\n    dofUniforms.setData(dofUniformsLayout.getData());\n\n    dofUniforms.bind();\n\n    dofProgram.setUniforms({\n      uTexelOffset: texelOffset,\n      uColor: sceneFramebuffer.color,\n      uDepth: sceneFramebuffer.depth\n    });\n\n    dofProgram.draw({\n      vertexArray: quadVertexArray,\n      drawMode: gl.TRIANGLE_STRIP,\n      vertexCount: 4,\n      framebuffer: dofFramebuffer\n    });\n\n    // Vertical DOF blur\n    clear(gl, {color: [0, 0, 0, 1]});\n\n    texelOffset[0] = 0;\n    texelOffset[1] = 1;\n\n    dofProgram.setUniforms({\n      uTexelOffset: texelOffset,\n      uColor: sceneFramebuffer.color,\n      uDepth: sceneFramebuffer.depth\n    });\n\n    dofProgram.draw({\n      vertexArray: quadVertexArray,\n      drawMode: gl.TRIANGLE_STRIP,\n      vertexCount: 4\n    });\n\n    dofUniforms.unbind();\n  }\n\n  isSupported() {\n    return this.isDemoSupported;\n  }\n\n  getAltText() {\n    return ALT_TEXT;\n  }\n}\n\n/* global window */\nif (typeof window !== 'undefined' && !window.website) {\n  const animationLoop = new AppAnimationLoop();\n  animationLoop.start();\n}\n","import React from 'react';\nimport AnimationLoopExamplePage from '../../src/components/animation-loop-example-page';\nimport AnimationLoop from '../../../examples/core/dof/app';\n\nexport default class Example extends React.Component {\n\n  render() {\n    return (\n      <AnimationLoopExamplePage AnimationLoop={AnimationLoop} exampleConfig={this.props.pageContext.exampleConfig} />\n    );\n  }\n}\n","import {uid, assert} from '../utils';\n\n// Rendering primitives - specify how to extract primitives from vertices.\n// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants\nexport const DRAW_MODE = {\n  POINTS: 0x0000, // draw single points.\n  LINES: 0x0001, // draw lines. Each vertex connects to the one after it.\n  LINE_LOOP: 0x0002, // draw lines. Each set of two vertices is treated as a separate line segment.\n  LINE_STRIP: 0x0003, // draw a connected group of line segments from the first vertex to the last\n  TRIANGLES: 0x0004, // draw triangles. Each set of three vertices creates a separate triangle.\n  TRIANGLE_STRIP: 0x0005, // draw a connected group of triangles.\n  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.\n  // Each vertex connects to the previous and the first vertex in the fan.\n};\n\nexport default class Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n\n  constructor(props = {}) {\n    const {\n      id = uid('geometry'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n\n    // stubRemovedMethods(this, [\n    //   'setNeedsRedraw', 'needsRedraw', 'setAttributes'\n    // ], 'Immutable');\n\n    // stubRemovedMethods(this, [\n    //   'hasAttribute', 'getAttribute', 'getArray'\n    // ], 'Use geometry.attributes and geometry.indices');\n\n    // deprecateMethods(this, ['getAttributes'])\n  }\n\n  get mode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  // Return an object with all attributes plus indices added as a field.\n  getAttributes() {\n    return this.indices ? {indices: this.indices, ...this.attributes} : this.attributes;\n  }\n\n  // PRIVATE\n\n  _print(attributeName) {\n    return `Geometry ${this.id} attribute ${attributeName}`;\n  }\n\n  // Attribute\n  // value: typed array\n  // type: indices, vertices, uvs\n  // size: elements per vertex\n  // target: WebGL buffer type (string or constant)\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {value: indices, size: 1} : indices;\n    }\n\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n\n      // Wrap \"unwrapped\" arrays and try to autodetect their type\n      attribute = ArrayBuffer.isView(attribute) ? {value: attribute} : attribute;\n\n      assert(\n        ArrayBuffer.isView(attribute.value),\n        `${this._print(attributeName)}: must be typed array or object with value as typed array`\n      );\n\n      if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n        attribute.size = 3;\n      }\n\n      // Move indices to separate field\n      if (attributeName === 'indices') {\n        assert(!this.indices);\n        this.indices = attribute;\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n\n    if (this.indices && this.indices.isIndexed !== undefined) {\n      this.indices = Object.assign({}, this.indices);\n      delete this.indices.isIndexed;\n    }\n\n    return this;\n  }\n\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n    let vertexCount = Infinity;\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {value, size, constant} = attribute;\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n\n    assert(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n}\n","'use strict';\n\nrequire(\"core-js/modules/es6.array.filter\");\n\nrequire(\"core-js/modules/es6.array.for-each\");\n\nrequire(\"core-js/modules/es6.set\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es7.array.includes\");\n\nrequire(\"core-js/modules/es6.string.includes\");\n\nrequire(\"core-js/modules/es6.date.now\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.string.iterator\");\n\nrequire(\"core-js/modules/es6.map\");\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n}; // Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nvar isBrowser = typeof window !== 'undefined' && window.addEventListener;\nvar timers = new Map();\n/**\n * Ready check for Seer initialization\n *\n * @returns {Boolean}\n */\n\nvar isReady = function isReady() {\n  return isBrowser && window.__SEER_INITIALIZED__;\n};\n/**\n * Utility method allowing to throttle a user action based on a key and a minimun delay.\n *\n * @param key {String} A unique key\n * @param delay {Number} The minimal delay to throttle\n * @returns {Boolean}\n */\n\n\nvar throttle = function throttle(key, delay) {\n  var time = timers.get(key);\n  var now = Date.now();\n\n  if (time && now - time < delay) {\n    return true;\n  }\n\n  timers.set(key, now);\n  return false;\n};\n\nvar replacer = function replacer(seen) {\n  return function (key, value) {\n    if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && seen.has(value)) {\n      return;\n    }\n\n    seen.add(value);\n    var isArray = Object.prototype.toString.call(value).slice(8, -1).includes('Array');\n\n    if (isArray) {\n      return Array.prototype.slice.call(value, 0, 20);\n    }\n\n    return value;\n  };\n};\n/**\n * Low-level api leveraging window.postMessage\n *\n * @param type {String} The action type\n * @param payload {Any} The action payload\n */\n\n\nvar send = function send(type) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isBrowser || !isReady()) {\n    return;\n  }\n\n  var seen = new Set();\n  var payload = JSON.stringify(data, replacer(seen));\n\n  try {\n    window.postMessage({\n      type: type,\n      payload: payload,\n      source: 'seer-agent'\n    }, '*');\n  } catch (e) {\n    if (throttle('seer-log', 2E3)) {\n      return;\n    }\n\n    console.log(e); // eslint-disable-line\n  }\n};\n\nvar listeners = new Map();\n\nvar listener = function listener(message) {\n  if (!message || !message.data || message.data.source !== 'seer-core') {\n    return;\n  }\n\n  var _message$data = message.data,\n      type = _message$data.type,\n      payload = _message$data.payload;\n  var typeListeners = listeners.get(type);\n\n  if (typeListeners) {\n    typeListeners.forEach(function (cb) {\n      return cb(payload);\n    });\n  }\n};\n/**\n * Initilize window listener. There will be only one for the whole process\n * to prevent too many registrations.\n *\n * This method will be called automatically if you use the `listenFor` method.\n */\n\n\nvar init = function init() {\n  if (!isBrowser || window.__SEER_LISTENER__) {\n    return;\n  }\n\n  window.addEventListener('message', listener);\n  window.__SEER_LISTENER__ = true;\n};\n/**\n * Clean listener. Can be useful in case you want to unregister upcoming events\n * or liberate memory.\n */\n\n\nvar clean = function clean() {\n  if (!isBrowser || !window.__SEER_LISTENER__) {\n    return;\n  }\n\n  window.removeEventListener('message', listener);\n  delete window.__SEER_LISTENER__;\n};\n/**\n * Create a listener that will be called upon events of the given key.\n *\n * @param key {String} The unique tab key\n * @param cb {Function} A callback that will receive the message payload\n */\n\n\nvar listenFor = function listenFor(type, cb) {\n  if (!isBrowser) {\n    return;\n  }\n\n  if (!type || !cb) {\n    throw new Error('Please provide a type and callback');\n  }\n\n  if (!listeners.has(type)) {\n    listeners.set(type, []);\n  }\n\n  if (!window.__SEER_LISTENER__) {\n    init();\n  }\n\n  listeners.get(type).push(cb);\n};\n/**\n * Remove an identity listener\n *\n * @param cb {Function} The callback to remove\n */\n\n\nvar removeListener = function removeListener(cb) {\n  listeners.forEach(function (typeListeners, key) {\n    listeners.set(key, typeListeners.filter(function (l) {\n      return l !== cb;\n    }));\n  });\n};\n/**\n * Creates a new indexed list.\n * It works by index to get O(1) accessing and performance.\n *\n * @param key {String} The key of the tab\n * @param data {Object} The indexed object\n */\n\n\nvar list = function list(key, data) {\n  return send('LIST', {\n    key: key,\n    data: data\n  });\n};\n/**\n * Creates an element in the indexed list, based on the itemKey.\n *\n * @param key {String} The key of the tab\n * @param itemKey {String} The key of the item\n * @param data {Any} The value of the item\n */\n\n\nvar listItem = function listItem(key, itemKey) {\n  var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return send('LIST_ITEM', {\n    key: key,\n    itemKey: itemKey,\n    data: data\n  });\n};\n/**\n * Update an item property, can be deeply nested.\n *\n * @param key {String} The key of the tab\n * @param itemKey {String} The key of the item\n * @param path {String} The path of the variable you want to update\n * @param data {Object} The new value\n */\n\n\nvar updateItem = function updateItem(key, itemKey, path, data) {\n  return send('UPDATE_ITEM', {\n    key: key,\n    itemKey: itemKey,\n    path: path,\n    data: data\n  });\n};\n/**\n * Similar to updateItem, but allows to pass an array with {path,data} pairs for\n * multiple update of the same item without having to send multiple messages.\n *\n * @param key {String} The key of the tab\n * @param itemKey {String} The key of the item\n * @param array {Array} The array of updates\n * @param array.path {String} The path for this update\n * @param array.data {Object} The value of this update\n */\n\n\nvar multiUpdate = function multiUpdate(key, itemKey, array) {\n  return send('MULTI_UPDATE_ITEM', {\n    key: key,\n    itemKey: itemKey,\n    array: array\n  });\n};\n/**\n * Remove a specific item in a specific tab.\n *\n * @param key {String} They key of the tab\n * @param itemKey {String} The key of the item\n */\n\n\nvar deleteItem = function deleteItem(key, itemKey) {\n  return send('DELETE_ITEM', {\n    key: key,\n    itemKey: itemKey\n  });\n};\n/**\n * Will create a log message to an item, that will be displayde with the current time.\n *\n * @param key {String} The key of the tab\n * @param itemKey {String} The key of the item\n * @param msg {String} The message to display\n */\n\n\nvar addLog = function addLog(key, itemKey, msg) {\n  return send('ADD_LOG', {\n    key: key,\n    itemKey: itemKey,\n    msg: msg\n  });\n};\n\nexports[\"default\"] = {\n  send: send,\n  throttle: throttle,\n  isReady: isReady,\n  list: list,\n  listItem: listItem,\n  updateItem: updateItem,\n  multiUpdate: multiUpdate,\n  deleteItem: deleteItem,\n  addLog: addLog,\n  listeners: listeners,\n  listenFor: listenFor,\n  removeListener: removeListener,\n  init: init,\n  clean: clean\n};","import Geometry from '../geometry/geometry';\nimport {uid} from '../utils';\n\n// prettier-ignore\nconst CUBE_INDICES = new Uint16Array([\n  0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13,\n  14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23\n]);\n\n// prettier-ignore\nconst CUBE_POSITIONS = new Float32Array([\n  -1,  -1,  1, 1,  -1,  1,  1,  1,  1,  -1,  1,  1,\n  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1,  -1,\n  -1,  1,  -1,  -1,  1,  1,  1,  1,  1,  1,  1,  -1,\n  -1,  -1,  -1,  1,  -1,  -1,  1,  -1,  1,  -1,  -1,  1,\n  1,  -1,  -1,  1,  1,  -1,  1,  1,  1,  1,  -1,  1,\n  -1,  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1\n]);\n\n// TODO - could be Uint8\n// prettier-ignore\nconst CUBE_NORMALS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,\n  // Back face\n  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,\n  // Top face\n  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,\n  // Bottom face\n  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,\n  // Right face\n  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,\n  // Left face\n  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0\n]);\n\n// prettier-ignore\nconst CUBE_TEX_COORDS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  1,  1,  0,  1,\n  // Back face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Top face\n  0,  1,  0,  0,  1,  0,  1,  1,\n  // Bottom face\n  1,  1,  0,  1,  0,  0,  1,  0,\n  // Right face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Left face\n  0,  0,  1,  0,  1,  1,  0,  1\n]);\n\nconst ATTRIBUTES = {\n  POSITION: {size: 3, value: new Float32Array(CUBE_POSITIONS)},\n  NORMAL: {size: 3, value: new Float32Array(CUBE_NORMALS)},\n  TEXCOORD_0: {size: 2, value: new Float32Array(CUBE_TEX_COORDS)}\n};\n\nexport default class CubeGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('cube-geometry')} = props;\n    super({\n      ...props,\n      id,\n      indices: {size: 1, value: new Uint16Array(CUBE_INDICES)},\n      attributes: {...ATTRIBUTES, ...props.attributes}\n    });\n  }\n}\n"],"sourceRoot":""}