{"version":3,"sources":["webpack:///../examples/core/fragment/concentrics-demo.js","webpack:///../examples/core/fragment/app.js","webpack:///./templates/core/example-fragment.jsx","webpack:///../modules/core/src/lib/clip-space.js"],"names":["AppAnimationLoop","onInitialize","gl","clipSpace","fs","uniforms","uTime","onRender","animationProps","getInfo","AnimationLoop","window","Example","render","exampleConfig","this","props","pageContext","React","Component","CLIPSPACE_VERTEX_SHADER","POSITIONS","ClipSpace","TEX_COORDS","coord","Object","vs","geometry","drawMode","GL","vertexCount","attributes","aClipSpacePosition","size","value","Float32Array","aTexCoord","aCoordinate","Model"],"mappings":"gJAEA,IAsBqBA,E,wLACnBC,yBAAoB,IAANC,EAAK,EAALA,GACZ,MAAO,CACLC,UAAW,IAAI,EAAJ,IAAkB,CAC3BC,GAlBR,2QAmBQC,SAAU,CACRC,MAAO,mC,EAMfC,qBACEC,iBAA8B,CAACA,oB,EAG1BC,QAAP,WACE,MAvCJ,6K,GAsB8CC,KCpB9C,IAGA,oBAAWC,SACTA,gBAAkB,YACM,IAAtB,GADoC,U,4CCJnBC,E,gLACnBC,kBACE,OACE,uBAA0BH,cAA1B,EAAwDI,cAAeC,KAAKC,MAAMC,YAAYH,iB,GAH/DI,IAAMC,Y,oHCC3C,IAAMC,EAAN,kUAkBMC,EAAY,mBAAlB,GAEqBC,E,oBACnB,gBAAuB,IAAD,EACdC,EAAaF,EAAA,KAAc,SAAAG,GAAK,OAAKA,QAAL,KADlB,OAGpB,gBAEEC,OAAA,YAAwB,CACtBC,GADsB,EAEtBC,SAAU,IAAI,EAAJ,EAAa,CACrBC,SAAUC,IADW,eAErBC,YAFqB,EAGrBC,WAAY,CACVC,mBAAoB,CAACC,KAAD,EAAUC,MAAO,IAAIC,aAAad,IACtDe,UAAW,CAACH,KAAD,EAAUC,MAAO,IAAIC,aAAaZ,IAC7Cc,YAAa,CAACJ,KAAD,EAAUC,MAAO,IAAIC,aAAaZ,WAVvD,MAeA,kBAlBoB,E,iGADee","file":"component---templates-core-example-fragment-jsx-a7785555d28d7f4c848c.js","sourcesContent":["import {AnimationLoop, ClipSpace} from '@luma.gl/core';\n\nconst INFO_HTML = `\n<p>\n  Fragment shader based rendering.\n<p>\nA luma.gl <code>ClipSpace</code> rendering 3 lines of fragment shader code,\nusing a single uniform <code>uTime</code>.\n`;\n\nconst CONCENTRICS_FRAGMENT_SHADER = `\\\nprecision highp float;\n\nuniform float uTime;\n\nvarying vec2 position;\n\nvoid main(void) {\n  float d = length(position * 64.0);\n  d = 0.5 * sin(d * sin(uTime)) + 0.5 * sin(position.x * 64.0) * sin(position.y * 64.0);\n  gl_FragColor = vec4(1.0-d,0,d, 1);\n}\n`;\n\nexport default class AppAnimationLoop extends AnimationLoop {\n  onInitialize({gl}) {\n    return {\n      clipSpace: new ClipSpace(gl, {\n        fs: CONCENTRICS_FRAGMENT_SHADER,\n        uniforms: {\n          uTime: ({tick}) => tick * 0.01\n        }\n      })\n    };\n  }\n\n  onRender(animationProps) {\n    animationProps.clipSpace.draw({animationProps});\n  }\n\n  static getInfo() {\n    return INFO_HTML;\n  }\n}\n","import {default as AppAnimationLoop} from './concentrics-demo';\n// import randomNoiseAnimationLoop from './random-noise-demo';\n\n// Pick one to fit with demo framework (until it can handle multiple exports)\nexport default AppAnimationLoop;\n\n/* global window */\nif (typeof window !== 'undefined') {\n  window.startApp = function startApp() {\n    const animationLoop = new AppAnimationLoop();\n    animationLoop.start();\n    // randomNoiseAnimationLoop.start();\n  };\n}\n","import React from 'react';\nimport AnimationLoopExamplePage from '../../src/components/animation-loop-example-page';\nimport AnimationLoop from '../../../examples/core/fragment/app';\n\nexport default class Example extends React.Component {\n  render() {\n    return (\n      <AnimationLoopExamplePage AnimationLoop={AnimationLoop} exampleConfig={this.props.pageContext.exampleConfig} />\n    );\n  }\n}\n","// ClipSpace\nimport GL from '@luma.gl/constants';\nimport Model from '../lib/model';\nimport Geometry from '../geometry/geometry';\n\nconst CLIPSPACE_VERTEX_SHADER = `\\\nattribute vec2 aClipSpacePosition;\nattribute vec2 aTexCoord;\nattribute vec2 aCoordinate;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main(void) {\n  gl_Position = vec4(aClipSpacePosition, 0., 1.);\n  position = aClipSpacePosition;\n  coordinate = aCoordinate;\n  uv = aTexCoord;\n}\n`;\n\n/* eslint-disable indent, no-multi-spaces */\nconst POSITIONS = [-1, -1, 1, -1, -1, 1, 1, 1];\n\nexport default class ClipSpace extends Model {\n  constructor(gl, opts) {\n    const TEX_COORDS = POSITIONS.map(coord => (coord === -1 ? 0 : coord));\n\n    super(\n      gl,\n      Object.assign({}, opts, {\n        vs: CLIPSPACE_VERTEX_SHADER,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_STRIP,\n          vertexCount: 4,\n          attributes: {\n            aClipSpacePosition: {size: 2, value: new Float32Array(POSITIONS)},\n            aTexCoord: {size: 2, value: new Float32Array(TEX_COORDS)},\n            aCoordinate: {size: 2, value: new Float32Array(TEX_COORDS)}\n          }\n        })\n      })\n    );\n    this.setVertexCount(4);\n  }\n}\n"],"sourceRoot":""}