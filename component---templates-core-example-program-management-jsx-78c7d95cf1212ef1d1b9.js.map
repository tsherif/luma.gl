{"version":3,"sources":["webpack:///../examples/core/program-management/app.js","webpack:///./templates/core/example-program-management.jsx","webpack:///../modules/core/src/geometries/cube-geometry.js","webpack:///../modules/shadertools/src/modules/project/project.js","webpack:///../modules/shadertools/src/modules/dirlight/dirlight.js"],"names":["vs","fs","AppAnimationLoop","debug","getInfo","onInitialize","gl","aspect","setParameters","clearColor","clearDepth","depthTest","depthFunc","LEQUAL","programManager","hook","injection","translations","rotations","Math","colors","this","cubes","Array","i","translation","rotation","model","modules","geometry","uniforms","uProjection","fov","radians","near","far","uView","center","eye","uColor","onRender","animationProps","tick","even","setProgram","Number","dirlight","modelMatrix","cube","uModel","onFinalize","delete","AnimationLoop","window","animationLoop","Example","render","exampleConfig","props","pageContext","React","Component","CUBE_INDICES","Uint16Array","CUBE_POSITIONS","Float32Array","CUBE_NORMALS","CUBE_TEX_COORDS","ATTRIBUTES","POSITION","size","value","NORMAL","TEXCOORD_0","CubeGeometry","id","uid","indices","attributes","Geometry","IDENTITY_MATRIX","DEFAULT_MODULE_OPTIONS","viewMatrix","projectionMatrix","cameraPositionWorld","name","getUniforms","opts","prevUniforms","common","lightDirection","dependencies","project"],"mappings":"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","file":"component---templates-core-example-program-management-jsx-78c7d95cf1212ef1d1b9.js","sourcesContent":["import {\n  AnimationLoop,\n  setParameters,\n  Model,\n  dirlight,\n  CubeGeometry,\n  ProgramManager\n} from '@luma.gl/core';\nimport {Matrix4, radians} from 'math.gl';\n\nconst INFO_HTML = `\nUsing a ProgramManager to cache and share programs between models.\n`;\n\nconst vs = `\\\nattribute vec3 positions;\nattribute vec3 normals;\n\nuniform vec3 uColor;\nuniform mat4 uModel;\nuniform mat4 uView;\nuniform mat4 uProjection;\n\nvarying vec3 color;\n\nvoid main(void) {\n  vec3 normal = vec3(uModel * vec4(normals, 0.0));\n\n  // Set up data for modules\n  color = uColor;\n  LUMAGL_normal(normal);\n  gl_Position = uProjection * uView * uModel * vec4(positions, 1.0);\n}\n`;\n\nconst fs = `\\\nprecision highp float;\n\nvarying vec3 color;\n\nvoid main(void) {\n  gl_FragColor = vec4(color, 1.);\n  LUMAGL_fragmentColor(gl_FragColor);\n}\n`;\n\nexport default class AppAnimationLoop extends AnimationLoop {\n  constructor() {\n    super({debug: true});\n  }\n\n  static getInfo() {\n    return INFO_HTML;\n  }\n\n  onInitialize({gl, aspect}) {\n    setParameters(gl, {\n      clearColor: [0, 0, 0, 1],\n      clearDepth: 1,\n      depthTest: true,\n      depthFunc: gl.LEQUAL\n    });\n\n    const programManager = new ProgramManager(gl);\n    programManager.addShaderHook('vs:LUMAGL_normal(inout vec3 normal)');\n    programManager.addShaderHook('fs:LUMAGL_fragmentColor(inout vec4 color)');\n    programManager.addModuleInjection(dirlight, {\n      hook: 'vs:LUMAGL_normal',\n      injection: 'project_setNormal(normal);'\n    });\n    programManager.addModuleInjection(dirlight, {\n      hook: 'fs:LUMAGL_fragmentColor',\n      injection: 'color = dirlight_filterColor(color);'\n    });\n\n    const translations = [[2, -2, 0], [2, 2, 0], [-2, 2, 0], [-2, -2, 0]];\n\n    const rotations = [\n      [Math.random(), Math.random(), Math.random()],\n      [Math.random(), Math.random(), Math.random()],\n      [Math.random(), Math.random(), Math.random()],\n      [Math.random(), Math.random(), Math.random()]\n    ];\n\n    const colors = [[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 0]];\n\n    this.cubes = new Array(4);\n\n    for (let i = 0; i < 4; ++i) {\n      this.cubes[i] = {\n        translation: translations[i],\n        rotation: rotations[i],\n        model: new Model(gl, {\n          programManager,\n          vs,\n          fs,\n          modules: i % 2 === 0 ? [] : [dirlight],\n          geometry: new CubeGeometry(),\n          uniforms: {\n            uProjection: new Matrix4().perspective({fov: radians(60), aspect, near: 1, far: 20.0}),\n            uView: new Matrix4().lookAt({\n              center: [0, 0, 0],\n              eye: [0, 0, -8]\n            }),\n            uColor: colors[i]\n          }\n        })\n      };\n    }\n\n    return {programManager};\n  }\n\n  onRender(animationProps) {\n    const {gl, tick, programManager} = animationProps;\n\n    if (tick % 240 === 0) {\n      if (tick % 480 === 0) {\n        programManager.removeDefaultModule(dirlight);\n      } else {\n        programManager.addDefaultModule(dirlight);\n      }\n    }\n\n    if (tick % 120 === 0) {\n      const even = tick % 240 === 0;\n      for (let i = 0; i < 4; ++i) {\n        this.cubes[i].model.setProgram({\n          vs,\n          fs,\n          modules: i % 2 === Number(even) ? [] : [dirlight]\n        });\n      }\n    }\n\n    const modelMatrix = new Matrix4();\n\n    // Draw the cubes\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    for (let i = 0; i < 4; ++i) {\n      const cube = this.cubes[i];\n\n      cube.rotation[0] += 0.01;\n      cube.rotation[1] += 0.01;\n      cube.rotation[2] += 0.01;\n\n      modelMatrix\n        .identity()\n        .translate(cube.translation)\n        .rotateXYZ(cube.rotation);\n\n      cube.model\n        .setUniforms({\n          uModel: modelMatrix\n        })\n        .draw();\n    }\n  }\n\n  onFinalize({gl}) {\n    for (let i = 0; i < 4; ++i) {\n      this.cubes[i].model.delete();\n    }\n  }\n}\n\n/* global window */\nif (typeof window !== 'undefined' && !window.website) {\n  const animationLoop = new AppAnimationLoop();\n  animationLoop.start();\n}\n","import React from 'react';\nimport AnimationLoopExamplePage from '../../src/components/animation-loop-example-page';\nimport AnimationLoop from '../../../examples/core/program-management/app';\n\nexport default class Example extends React.Component {\n  render() {\n    return (\n      <AnimationLoopExamplePage AnimationLoop={AnimationLoop} exampleConfig={this.props.pageContext.exampleConfig} />\n    );\n  }\n}\n","import Geometry from '../geometry/geometry';\nimport {uid} from '../utils';\n\n// prettier-ignore\nconst CUBE_INDICES = new Uint16Array([\n  0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13,\n  14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23\n]);\n\n// prettier-ignore\nconst CUBE_POSITIONS = new Float32Array([\n  -1,  -1,  1, 1,  -1,  1,  1,  1,  1,  -1,  1,  1,\n  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1,  -1,\n  -1,  1,  -1,  -1,  1,  1,  1,  1,  1,  1,  1,  -1,\n  -1,  -1,  -1,  1,  -1,  -1,  1,  -1,  1,  -1,  -1,  1,\n  1,  -1,  -1,  1,  1,  -1,  1,  1,  1,  1,  -1,  1,\n  -1,  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1\n]);\n\n// TODO - could be Uint8\n// prettier-ignore\nconst CUBE_NORMALS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,\n  // Back face\n  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,\n  // Top face\n  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,\n  // Bottom face\n  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,\n  // Right face\n  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,\n  // Left face\n  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0\n]);\n\n// prettier-ignore\nconst CUBE_TEX_COORDS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  1,  1,  0,  1,\n  // Back face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Top face\n  0,  1,  0,  0,  1,  0,  1,  1,\n  // Bottom face\n  1,  1,  0,  1,  0,  0,  1,  0,\n  // Right face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Left face\n  0,  0,  1,  0,  1,  1,  0,  1\n]);\n\nconst ATTRIBUTES = {\n  POSITION: {size: 3, value: new Float32Array(CUBE_POSITIONS)},\n  NORMAL: {size: 3, value: new Float32Array(CUBE_NORMALS)},\n  TEXCOORD_0: {size: 2, value: new Float32Array(CUBE_TEX_COORDS)}\n};\n\nexport default class CubeGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('cube-geometry')} = props;\n    super({\n      ...props,\n      id,\n      indices: {size: 1, value: new Uint16Array(CUBE_INDICES)},\n      attributes: {...ATTRIBUTES, ...props.attributes}\n    });\n  }\n}\n","import {Matrix4} from 'math.gl';\n\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\nconst DEFAULT_MODULE_OPTIONS = {\n  modelMatrix: IDENTITY_MATRIX,\n  viewMatrix: IDENTITY_MATRIX,\n  projectionMatrix: IDENTITY_MATRIX,\n  cameraPositionWorld: [0, 0, 0]\n};\n\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS, prevUniforms = {}) {\n  // const viewProjectionInverse = viewProjection.invert();\n  // viewInverseMatrix: view.invert(),\n  // viewProjectionInverseMatrix: viewProjectionInverse\n\n  const uniforms = {};\n  if (opts.modelMatrix !== undefined) {\n    uniforms.modelMatrix = opts.modelMatrix;\n  }\n  if (opts.viewMatrix !== undefined) {\n    uniforms.viewMatrix = opts.viewMatrix;\n  }\n  if (opts.projectionMatrix !== undefined) {\n    uniforms.projectionMatrix = opts.projectionMatrix;\n  }\n  if (opts.cameraPositionWorld !== undefined) {\n    uniforms.cameraPositionWorld = opts.cameraPositionWorld;\n  }\n\n  // COMPOSITE UNIFORMS\n  if (opts.projectionMatrix !== undefined || opts.viewMatrix !== undefined) {\n    uniforms.viewProjectionMatrix = new Matrix4(opts.projectionMatrix).multiplyRight(\n      opts.viewMatrix\n    );\n  }\n\n  return uniforms;\n}\n\nconst common = `\\\nvarying vec4 project_vPositionWorld;\nvarying vec3 project_vNormalWorld;\n\nvec4 project_getPosition_World() {\n  return project_vPositionWorld;\n}\n\nvec3 project_getNormal_World() {\n  return project_vNormalWorld;\n}\n`;\n\nconst vs = `\\\n${common}\n\n// Unprefixed uniforms\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewProjectionMatrix;\nuniform vec3 cameraPositionWorld;\n\nstruct World {\n  vec3 position;\n  vec3 normal;\n};\n\nWorld world;\n\nvoid project_setPosition(vec4 position) {\n  project_vPositionWorld = position;\n}\n\nvoid project_setNormal(vec3 normal) {\n  project_vNormalWorld = normal;\n}\n\nvoid project_setPositionAndNormal_World(vec3 position, vec3 normal) {\n  world.position = position;\n  world.normal = normal;\n}\n\nvoid project_setPositionAndNormal_Model(vec3 position, vec3 normal) {\n  world.position = (modelMatrix * vec4(position, 1.)).xyz;\n  world.normal = mat3(modelMatrix) * normal;\n}\n\nvec4 project_model_to_clipspace(vec4 position) {\n  return viewProjectionMatrix * modelMatrix * position;\n}\n\nvec4 project_model_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * modelMatrix * vec4(position, 1.);\n}\n\nvec4 project_world_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_view_to_clipspace(vec3 position) {\n  return projectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n`;\n\nconst fs = `\n${common}\\\n`;\n\nexport default {\n  name: 'project',\n  getUniforms,\n  vs,\n  fs\n};\n","// Cheap lighting - single directional light, single dot product, one uniform\n\nimport project from '../project/project';\n\n/* eslint-disable camelcase */\nconst DEFAULT_LIGHT_DIRECTION = new Float32Array([1, 1, 2]);\n\nconst DEFAULT_MODULE_OPTIONS = {\n  lightDirection: DEFAULT_LIGHT_DIRECTION\n};\n\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS) {\n  const uniforms = {};\n  if (opts.lightDirection) {\n    uniforms.dirlight_uLightDirection = opts.lightDirection;\n  }\n  return uniforms;\n}\n\n// TODO - reuse normal from geometry module\nconst vs = null;\n\nconst fs = `\\\nuniform vec3 dirlight_uLightDirection;\n\n/*\n * Returns color attenuated by angle from light source\n */\nvec4 dirlight_filterColor(vec4 color) {\n  vec3 normal = project_getNormal_World();\n  float d = abs(dot(normalize(normal), normalize(dirlight_uLightDirection)));\n  return vec4(color.rgb * d, color.a);\n}\n`;\n\nexport default {\n  name: 'dirlight',\n  vs,\n  fs,\n  getUniforms,\n  dependencies: [project]\n};\n"],"sourceRoot":""}