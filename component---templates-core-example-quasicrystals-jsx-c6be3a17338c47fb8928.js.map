{"version":3,"sources":["webpack:///../examples/core/quasicrystals/app.js","webpack:///./templates/core/example-quasicrystals.jsx","webpack:///../modules/core/src/lib/clip-space.js"],"names":["AppAnimationLoop","onInitialize","gl","clipSpace","fs","onRender","canvas","time","uRatio","document","wavefronts","parseFloat","readHTMLControls","uniforms","uTime","Math","getInfo","AnimationLoop","window","animationLoop","Example","render","exampleConfig","this","props","pageContext","React","Component","CLIPSPACE_VERTEX_SHADER","POSITIONS","ClipSpace","TEX_COORDS","coord","Object","vs","geometry","drawMode","GL","vertexCount","attributes","aClipSpacePosition","size","value","Float32Array","aTexCoord","aCoordinate","Model"],"mappings":"qJA+DqBA,E,wLACnBC,yBAAoB,IAANC,EAAK,EAALA,GACZ,MAAO,CAACC,UAAW,IAAI,EAAJ,IAAkB,CAACC,GAhD1C,6vB,EAmDEC,qBAAwC,EAA9BH,GAA8B,EAA1BI,OAA2B,IAAnBC,EAAkB,EAAlBA,KAAMJ,EAAY,EAAZA,UACnBK,EAjBX,WAEE,uBAAWC,SACT,MAAO,CAACD,OAAQ,GAElB,IAAME,EAAaD,wBAAnB,cAGA,MAAO,CAACD,OADOE,EAAaC,WAAWD,EAAd,OAAzB,GAUmBE,GADqB,OAEtCT,OAAe,CACbU,SAAU,CACRC,MAAQP,EAAD,KADC,EACeQ,SACvBP,a,EAKCQ,QAAP,WACE,MA7EJ,wc,GA6D8CC,KAqB1C,oBAAOC,QAA2BA,OAAtC,UACwB,IAAtB,GACAC,Q,4CClFmBC,E,gLACnBC,kBACE,OACE,uBAA0BJ,cAA1B,EAAwDK,cAAeC,KAAKC,MAAMC,YAAYH,iB,GAH/DI,IAAMC,Y,oHCC3C,IAAMC,EAAN,kUAkBMC,EAAY,mBAAlB,GAEqBC,E,oBACnB,gBAAuB,IAAD,EACdC,EAAaF,EAAA,KAAc,SAAAG,GAAK,OAAKA,QAAL,KADlB,OAGpB,gBAEEC,OAAA,YAAwB,CACtBC,GADsB,EAEtBC,SAAU,IAAI,EAAJ,EAAa,CACrBC,SAAUC,IADW,eAErBC,YAFqB,EAGrBC,WAAY,CACVC,mBAAoB,CAACC,KAAD,EAAUC,MAAO,IAAIC,aAAad,IACtDe,UAAW,CAACH,KAAD,EAAUC,MAAO,IAAIC,aAAaZ,IAC7Cc,YAAa,CAACJ,KAAD,EAAUC,MAAO,IAAIC,aAAaZ,WAVvD,MAeA,kBAlBoB,E,iGADee","file":"component---templates-core-example-quasicrystals-jsx-c6be3a17338c47fb8928.js","sourcesContent":["import {AnimationLoop, ClipSpace} from '@luma.gl/core';\n\nconst INFO_HTML = `\n<p>\n  <code>Animating Quasicrystals</code>\n<p>\n  Crystal patterns generated by wavefront interference patterns.\n  Rendered by a custom fragment shader in a luma.gl <code>ClipSpace</code> model.\n  A luma.gl port (of the PhiloGL port) of the work of\n  <a href=\"http://www.jasondavies.com/animated-quasicrystals/\">Jason Davies</a>\n</p>\n<div>\n  Wavefronts\n  <input id=\"wavefronts\" type=\"range\" value=\"7.0\" min=\"1\" max=\"10\" step=\"0.1\">\n</div>\n`;\n\nconst FRAGMENT_SHADER = `\\\nprecision highp float;\n\n#define PI 3.1415926535\n\nuniform float uTime;\nuniform float uRatio;\n\nvarying vec2 position;\n\nvoid main(void) {\n  vec2 defpixel = (position - vec2( 0.5 ) ) * 170.;\n\n  float step = PI / uRatio;\n\n  // Sum up total of all waves\n  float total;\n  for (float i = 0.; i < 100.; i++) {\n    if ( i < uRatio ) {\n      float value = i * step;\n      float s = sin( value );\n      float c = cos( value );\n      total += ( cos( c * defpixel.x + s * defpixel.y + uTime ) + 1. ) / 2.;\n    }\n  }\n\n  float v = mod(total, 1.);\n  float k = total - v;\n  total = ( mod( abs( k ), 2. ) ) <= 0.0001 ? v : 1. - v;\n\n  gl_FragColor =\n    vec4( total * (1. - (uRatio / 20.)), total * (uRatio / 10.), total * (uRatio / 5.), 1. );\n}\n`;\n\nfunction readHTMLControls() {\n  /* global document */\n  if (typeof document === 'undefined') {\n    return {uRatio: 7.0};\n  }\n  const wavefronts = document.getElementById('wavefronts');\n\n  const uRatio = wavefronts ? parseFloat(wavefronts.value) : 7.0;\n  return {uRatio};\n}\n\nexport default class AppAnimationLoop extends AnimationLoop {\n  onInitialize({gl}) {\n    return {clipSpace: new ClipSpace(gl, {fs: FRAGMENT_SHADER})};\n  }\n\n  onRender({gl, canvas, time, clipSpace}) {\n    const {uRatio} = readHTMLControls();\n    clipSpace.draw({\n      uniforms: {\n        uTime: (time / 600) % (Math.PI * 2),\n        uRatio\n      }\n    });\n  }\n\n  static getInfo() {\n    return INFO_HTML;\n  }\n}\n\n/* global window */\nif (typeof window !== 'undefined' && !window.website) {\n  const animationLoop = new AppAnimationLoop();\n  animationLoop.start();\n}\n","import React from 'react';\nimport AnimationLoopExamplePage from '../../src/components/animation-loop-example-page';\nimport AnimationLoop from '../../../examples/core/quasicrystals/app';\n\nexport default class Example extends React.Component {\n  render() {\n    return (\n      <AnimationLoopExamplePage AnimationLoop={AnimationLoop} exampleConfig={this.props.pageContext.exampleConfig} />\n    );\n  }\n}\n","// ClipSpace\nimport GL from '@luma.gl/constants';\nimport Model from '../lib/model';\nimport Geometry from '../geometry/geometry';\n\nconst CLIPSPACE_VERTEX_SHADER = `\\\nattribute vec2 aClipSpacePosition;\nattribute vec2 aTexCoord;\nattribute vec2 aCoordinate;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main(void) {\n  gl_Position = vec4(aClipSpacePosition, 0., 1.);\n  position = aClipSpacePosition;\n  coordinate = aCoordinate;\n  uv = aTexCoord;\n}\n`;\n\n/* eslint-disable indent, no-multi-spaces */\nconst POSITIONS = [-1, -1, 1, -1, -1, 1, 1, 1];\n\nexport default class ClipSpace extends Model {\n  constructor(gl, opts) {\n    const TEX_COORDS = POSITIONS.map(coord => (coord === -1 ? 0 : coord));\n\n    super(\n      gl,\n      Object.assign({}, opts, {\n        vs: CLIPSPACE_VERTEX_SHADER,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_STRIP,\n          vertexCount: 4,\n          attributes: {\n            aClipSpacePosition: {size: 2, value: new Float32Array(POSITIONS)},\n            aTexCoord: {size: 2, value: new Float32Array(TEX_COORDS)},\n            aCoordinate: {size: 2, value: new Float32Array(TEX_COORDS)}\n          }\n        })\n      })\n    );\n    this.setVertexCount(4);\n  }\n}\n"],"sourceRoot":""}