{"version":3,"sources":["webpack:///../node_modules/math.gl/dist/esm/lib/validators.js","webpack:///../examples/getting-started/instanced-transform/app.js","webpack:///./templates/getting-started/example-instanced-transform.jsx","webpack:///../node_modules/math.gl/dist/esm/lib/assert.js","webpack:///../node_modules/gl-matrix/esm/vec4.js","webpack:///../modules/engine/src/geometries/cube-geometry.js","webpack:///./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack:///../modules/shadertools/src/utils/shader-utils.js","webpack:///../modules/engine/src/transform/buffer-transform.js","webpack:///../modules/webgl/src/glsl-utils/get-shader-version.js","webpack:///../modules/shadertools/src/modules/transform/transform.js","webpack:///../modules/engine/src/transform/transform-shader-utils.js","webpack:///../modules/engine/src/transform/texture-transform.js","webpack:///../modules/engine/src/transform/transform.js","webpack:///../node_modules/gl-matrix/esm/vec3.js","webpack:///./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///../modules/engine/src/geometry/geometry.js","webpack:///./node_modules/@babel/runtime/helpers/esm/construct.js","webpack:///../node_modules/math.gl/dist/esm/classes/base/matrix.js","webpack:///../node_modules/gl-matrix/esm/mat4.js","webpack:///../node_modules/gl-matrix/esm/vec2.js","webpack:///../node_modules/math.gl/dist/esm/classes/matrix4.js","webpack:///../modules/shadertools/src/modules/phong-lighting/phong-lighting.glsl.js","webpack:///../modules/shadertools/src/modules/phong-lighting/phong-lighting.js","webpack:///../examples/utils/index.js","webpack:///./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack:///../node_modules/math.gl/dist/esm/lib/common.js","webpack:///./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack:///../modules/shadertools/src/modules/lights/lights.glsl.js","webpack:///../modules/shadertools/src/modules/lights/lights.js","webpack:///../node_modules/math.gl/dist/esm/lib/gl-matrix-extras.js","webpack:///../node_modules/gl-matrix/esm/common.js","webpack:///./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","webpack:///./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","webpack:///../node_modules/math.gl/dist/esm/classes/base/math-array.js"],"names":["checkNumber","value","Number","isFinite","Error","concat","checkVector","v","length","callerName","debug","i","validateVector","map","deprecated","method","version","console","warn","PI2","Math","random","getRandom","AppAnimationLoop","getInfo","onInitialize","gl","this","isDemoSupported","isWebGL2","setParameters","depthTest","depthFunc","LEQUAL","offsetBuffer","Float32Array","axisBufferData","vi","x","y","z","l","axisBuffer","rotationBuffer","texture","data","eyePosition","viewMatrix","eye","projectionMatrix","transform","vs","sourceBuffers","rotations","feedbackMap","elementCount","model","fs","geometry","attributes","offsets","divisor","axes","uniforms","uTexture","uEyePosition","uView","modules","moduleSettings","material","specularColor","lights","type","color","position","instanceCount","onRender","aspect","fov","clear","depth","uProjection","onFinalize","AnimationLoop","window","animationLoop","Example","render","pageContext","exampleConfig","React","Component","assert","condition","message","clone","a","out","fromValues","w","copy","set","add","b","scale","sqrt","squaredLength","normalize","len","dot","lerp","t","ax","ay","az","aw","transformMat4","m","transformQuat","q","qx","qy","qz","qw","ix","iy","iz","iw","exactEquals","equals","a0","a1","a2","a3","b0","b1","b2","b3","abs","max","vec","CUBE_INDICES","Uint16Array","CUBE_POSITIONS","CUBE_NORMALS","CUBE_TEX_COORDS","ATTRIBUTES","POSITION","size","NORMAL","TEXCOORD_0","CubeGeometry","props","id","uid","indices","Geometry","_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","writable","configurable","FS100","FS_GLES","FS300","getQualifierDetails","line","qualifiers","Array","words","qualifier","definition","name","getPassthroughFS","input","inputType","output","outputValue","variable","convertToVec4","BufferTransform","currentIndex","varyings","bindings","resources","_initialize","setupResources","binding","_setupTransformFeedback","updateModelProps","getDrawOptions","opts","transformFeedback","swap","update","_setupBuffers","getBuffer","feedbackBuffers","bufferOrParams","varyingName","getData","buffer","delete","_getFeedbackBuffers","feedbackName","sourceName","bufferOrRef","sourceBuffer","byteLength","usage","accessor","_createNewBuffer","bufferName","_updateBindings","program","buffers","_updateBinding","_swapBuffers","nextIndex","dstName","_getNextIndex","getShaderVersion","source","parseInt","SAMPLER_UNIFORM_PREFIX","SIZE_UNIFORM_PREFIX","VS_POS_VARIABLE","updateForTextures","sourceTextureMap","targetTextureVarying","targetTexture","sourceCount","targetTextureType","samplerTextureMap","updatedVs","finalInject","vsLines","updateVsLines","updated","attributeData","getAttributeDefinition","textureMap","updatedLine","textureName","samplerName","sizeName","uniformDeclerations","getSamplerDeclerations","channels","typeToChannelSuffix","sampleInstruction","inject","processAttributeDefinition","combineInjects","qualaiferDetails","getVaryingType","SRC_TEX_PARAMETER_OVERRIDES","GL","TextureTransform","_swapTexture","updatedModelProps","_processVertexShader","sourceTextures","framebuffer","parameters","discard","hasSourceTextures","sizeUniforms","width","height","getSizeUniforms","_setupTextures","getTargetTexture","packed","pixels","readPixelsToArray","ArrayType","channelCount","typeToChannelCount","packedPixels","packCount","j","getFramebuffer","ownTexture","elementIDBuffer","_targetTextureVarying","hasTargetTexture","_createTargetTexture","textureOrReference","refTexture","_targetRefTexName","_sourceTextures","_targetTexture","_updateElementIDBuffer","elementIds","array","setData","_swapTextures","attachments","resizeAttachments","_setSourceTextureParameters","index","_createNewTexture","cloneTextureFrom","pixelStore","combinedInject","Transform","bufferTransform","textureTransform","isSupported","run","clearRenderTarget","updatedOpts","_updateDrawOptions","swapped","resourceTransform","setVertexCount","_buildResourceTransforms","_updateModelProps","drawMode","vertexCount","updatedProps","isObjectEmpty","canCreateBufferTransform","canCreateTextureTransform","cross","bx","by","bz","transformMat3","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","rotateX","c","p","r","cos","sin","rotateY","rotateZ","angle","tempA","tempB","cosine","PI","acos","_slicedToArray","arr","isArray","Symbol","iterator","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","DRAW_MODE","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","userData","_setAttributes","_calculateVertexCount","getVertexCount","getAttributes","_print","ArrayBuffer","attribute","attributeName","isIndexed","_construct","Parent","args","Class","Reflect","construct","sham","Proxy","Date","e","isNativeReflectConstruct","apply","instance","Function","bind","arguments","_MathArray","Matrix","key","string","printRowMajor","row","RANK","col","ELEMENTS","columnIndex","result","fill","firstIndex","columnVector","multiply","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","fovy","near","far","nf","f","tan","Infinity","center","up","x0","x1","x2","y0","y1","y2","z0","z1","z2","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","identity","IDENTITY","freeze","ZERO","INDICES","COL0ROW0","COL0ROW1","COL0ROW2","COL0ROW3","COL1ROW0","COL1ROW1","COL1ROW2","COL1ROW3","COL2ROW0","COL2ROW1","COL2ROW2","COL2ROW3","COL3ROW0","COL3ROW1","COL3ROW2","COL3ROW3","constants","_Matrix","Matrix4","_this","get","check","m00","m10","m20","m30","m01","m11","m21","m31","m02","m12","m22","m32","m03","m13","m23","m33","xx","yx","yy","zx","zy","zz","wx","wy","wz","_ref","left","right","bottom","top","_computeInfinitePerspectiveOffCenter","rl","tb","_eye","_ref2","_ref2$near","_ref2$far","lr","bt","_ref3","_ref3$fovy","_ref3$aspect","_ref3$focalDistance","focalDistance","_ref3$near","_ref3$far","halfY","ortho","_ref4","_ref4$fov","_ref4$aspect","_ref4$near","_ref4$far","scaleResult","getScale","inverseScale0","inverseScale1","inverseScale2","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","radians","rad","s","_ref5","_ref6","rx","ry","rz","axis","b12","b20","b21","b22","factor","vector","vec4","transformAsPoint","vec3","translate","transformAsVector","column0Row0","column1Row1","column2Row0","column2Row1","column3Row2","phongLighting","dependencies","defines","LIGHTING_FRAGMENT","getUniforms","INITIAL_MODULE_OPTIONS","ambient","diffuse","shininess","lighting_uAmbient","lighting_uDiffuse","lighting_uShininess","lighting_uSpecularColor","getMaterialUniforms","lighting_uEnabled","MiniAnimationLoop","start","stop","_setDisplay","_getCanvas","canvas","document","dpr","_getContainer","container","parent","style","appendChild","_removeContainer","removeChild","n","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","DEGREES_TO_RADIANS","config","formatValue","_ref$precision","precision","round","EPSILON","parseFloat","toPrecision","isView","func","degrees","epsilon","oldEpsilon","printTypes","printDegrees","_possibleConstructorReturn","self","ReferenceError","_setPrototypeOf","ambientLight","pointLights","directionalLights","lightSourceUniforms","convertColor","pointLight","directionalLight","getLightSourceUniforms","lightSources","light","MAX_LIGHTS","intensity","component","vec2_transformMat4AsVector","vec3_transformMat4AsVector","vec3_transformMat2","ARRAY_TYPE","RANDOM","_cache","Map","fn","indexOf","has","Wrapper","enumerable","_Array","MathArray","arrayOrObject","fromObject","offset","toArray","toObject","target","to","formatString","ai","min","minVector","maxVector","_len","vectors","_key","_vectors","_len2","_key2","_i2","_vectors2","_scale","subtract","addScalar","scalar","validate","valid"],"mappings":"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","file":"component---templates-getting-started-example-instanced-transform-jsx-12471ed5640e79fd1b21.js","sourcesContent":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-finite\";\nimport { config } from './common';\nexport function validateVector(v, length) {\n  if (v.length !== length) {\n    return false;\n  }\n\n  for (var i = 0; i < v.length; ++i) {\n    if (!Number.isFinite(v[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function checkNumber(value) {\n  if (!Number.isFinite(value)) {\n    throw new Error(\"Invalid number \".concat(value));\n  }\n\n  return value;\n}\nexport function checkVector(v, length, callerName) {\n  if (config.debug && !validateVector(v, length)) {\n    throw new Error(\"math.gl: \".concat(callerName | '', \" some fields set to invalid numbers'\"));\n  }\n\n  return v;\n}\nvar map = {};\nexport function deprecated(method, version) {\n  if (!map[method]) {\n    map[method] = true;\n    console.warn(\"\".concat(method, \" has been removed in version \").concat(version, \", see upgrade guide for more information\"));\n  }\n}","import {AnimationLoop, Model, Transform, CubeGeometry} from '@luma.gl/engine';\nimport {Buffer, Texture2D, clear} from '@luma.gl/webgl';\nimport {setParameters, isWebGL2} from '@luma.gl/gltools';\nimport {phongLighting} from '@luma.gl/shadertools';\nimport {Matrix4} from 'math.gl';\nimport {getRandom} from '../../utils';\n\nconst INFO_HTML = `\n<p>\nTransform feedback on an instanced cube\n</p>\n`;\n\nconst PI2 = Math.PI * 2;\n\nconst random = getRandom();\n\nconst transformVs = `\n  attribute float rotations;\n\n  varying float vRotation;\n\n  void main() {\n    vRotation = rotations + 0.01;\n  }\n`;\n\nconst vs = `\\\n  attribute vec3 positions;\n  attribute vec3 normals;\n  attribute vec2 texCoords;\n  attribute vec2 offsets;\n  attribute vec3 axes;\n  attribute float rotations;\n\n  uniform mat4 uView;\n  uniform mat4 uProjection;\n\n  varying vec3 vPosition;\n  varying vec3 vNormal;\n  varying vec2 vUV;\n\n  void main(void) {\n    float s = sin(rotations);\n    float c = cos(rotations);\n    float t = 1.0 - c;\n    float xt = axes.x * t;\n    float yt = axes.y * t;\n    float zt = axes.z * t;\n    float xs = axes.x * s;\n    float ys = axes.y * s;\n    float zs = axes.z * s;\n\n    mat3 rotationMat = mat3(\n        axes.x * xt + c,\n        axes.y * xt + zs,\n        axes.z * xt - ys,\n        axes.x * yt - zs,\n        axes.y * yt + c,\n        axes.z * yt + xs,\n        axes.x * zt + ys,\n        axes.y * zt - xs,\n        axes.z * zt + c\n    );\n\n    vPosition = rotationMat * positions;\n    vPosition.xy += offsets;\n    vNormal = rotationMat * normals;\n    vUV = texCoords;\n    gl_Position = uProjection * uView * vec4(vPosition, 1.0);\n  }\n`;\n\nconst fs = `\\\n  precision highp float;\n\n  uniform sampler2D uTexture;\n  uniform vec3 uEyePosition;\n\n  varying vec3 vPosition;\n  varying vec3 vNormal;\n  varying vec2 vUV;\n\n  void main(void) {\n    vec3 materialColor = texture2D(uTexture, vec2(vUV.x, 1.0 - vUV.y)).rgb;\n    vec3 surfaceColor = lighting_getLightColor(materialColor, uEyePosition, vPosition, normalize(vNormal));\n\n    gl_FragColor = vec4(surfaceColor, 1.0);\n  }\n`;\n\nexport default class AppAnimationLoop extends AnimationLoop {\n  static getInfo() {\n    return INFO_HTML;\n  }\n\n  onInitialize({gl}) {\n    this.isDemoSupported = isWebGL2(gl);\n    if (!this.isDemoSupported) {\n      return {};\n    }\n\n    setParameters(gl, {\n      depthTest: true,\n      depthFunc: gl.LEQUAL\n    });\n\n    const offsetBuffer = new Buffer(gl, new Float32Array([3, 3, -3, 3, 3, -3, -3, -3]));\n\n    // Create a buffer consisting of 4 normalized vectors\n    const axisBufferData = new Float32Array(12);\n    for (let i = 0; i < 4; ++i) {\n      const vi = i * 3;\n      const x = random();\n      const y = random();\n      const z = random();\n      const l = Math.sqrt(x * x + y * y + z * z);\n\n      axisBufferData[vi] = x / l;\n      axisBufferData[vi + 1] = y / l;\n      axisBufferData[vi + 2] = z / l;\n    }\n    const axisBuffer = new Buffer(gl, axisBufferData);\n\n    const rotationBuffer = new Buffer(\n      gl,\n      new Float32Array([random() * PI2, random() * PI2, random() * PI2, random() * PI2])\n    );\n\n    const texture = new Texture2D(gl, {\n      data: 'vis-logo.png'\n    });\n\n    const eyePosition = [0, 0, 10];\n    const viewMatrix = new Matrix4().lookAt({eye: eyePosition});\n    const projectionMatrix = new Matrix4();\n\n    const transform = new Transform(gl, {\n      vs: transformVs,\n      sourceBuffers: {\n        rotations: rotationBuffer\n      },\n      feedbackMap: {\n        rotations: 'vRotation'\n      },\n      elementCount: 4\n    });\n\n    const model = new Model(gl, {\n      vs,\n      fs,\n      geometry: new CubeGeometry(),\n      attributes: {\n        offsets: [offsetBuffer, {divisor: 1}],\n        axes: [axisBuffer, {divisor: 1}],\n        rotations: [rotationBuffer, {divisor: 1}]\n      },\n      uniforms: {\n        uTexture: texture,\n        uEyePosition: eyePosition,\n        uView: viewMatrix\n      },\n      modules: [phongLighting],\n      moduleSettings: {\n        material: {\n          specularColor: [255, 255, 255]\n        },\n        lights: [\n          {\n            type: 'ambient',\n            color: [255, 255, 255]\n          },\n          {\n            type: 'point',\n            color: [255, 255, 255],\n            position: [4, 8, 4]\n          }\n        ]\n      },\n      instanceCount: 4\n    });\n\n    return {\n      model,\n      transform,\n      projectionMatrix\n    };\n  }\n\n  onRender({gl, aspect, model, transform, projectionMatrix}) {\n    if (!this.isDemoSupported) {\n      return;\n    }\n\n    projectionMatrix.perspective({fov: Math.PI / 3, aspect});\n\n    transform.run();\n\n    clear(gl, {color: [0, 0, 0, 1], depth: true});\n    model\n      .setAttributes({rotations: [transform.getBuffer('vRotation'), {divisor: 1}]})\n      .setUniforms({uProjection: projectionMatrix})\n      .draw();\n\n    transform.swap();\n  }\n\n  onFinalize({model, transform}) {\n    if (!this.isDemoSupported) {\n      return;\n    }\n    transform.delete();\n    model.delete();\n  }\n}\n\n/* global window */\nif (typeof window !== 'undefined' && !window.website) {\n  const animationLoop = new AppAnimationLoop();\n  animationLoop.start();\n}\n","import React from 'react';\nimport AnimationLoopExamplePage from '../../src/components/animation-loop-example-page';\nimport AnimationLoop from '../../../examples/getting-started/instanced-transform/app';\n\nexport default class Example extends React.Component {\n  render() {\n    const { pageContext } = this.props;\n    const exampleConfig = (pageContext && pageContext.exampleConfig) || {};\n    return (\n      <AnimationLoopExamplePage AnimationLoop={AnimationLoop} exampleConfig={exampleConfig} />\n    );\n  }\n}\n","export default function assert(condition, message) {\n  if (!condition) {\n    throw new Error(\"math.gl assertion \".concat(message));\n  }\n}","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import Geometry from '../geometry/geometry';\nimport {uid} from '@luma.gl/webgl';\n\n// prettier-ignore\nconst CUBE_INDICES = new Uint16Array([\n  0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13,\n  14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23\n]);\n\n// prettier-ignore\nconst CUBE_POSITIONS = new Float32Array([\n  -1,  -1,  1, 1,  -1,  1,  1,  1,  1,  -1,  1,  1,\n  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1,  -1,\n  -1,  1,  -1,  -1,  1,  1,  1,  1,  1,  1,  1,  -1,\n  -1,  -1,  -1,  1,  -1,  -1,  1,  -1,  1,  -1,  -1,  1,\n  1,  -1,  -1,  1,  1,  -1,  1,  1,  1,  1,  -1,  1,\n  -1,  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1\n]);\n\n// TODO - could be Uint8\n// prettier-ignore\nconst CUBE_NORMALS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,\n  // Back face\n  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,\n  // Top face\n  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,\n  // Bottom face\n  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,\n  // Right face\n  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,\n  // Left face\n  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0\n]);\n\n// prettier-ignore\nconst CUBE_TEX_COORDS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  1,  1,  0,  1,\n  // Back face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Top face\n  0,  1,  0,  0,  1,  0,  1,  1,\n  // Bottom face\n  1,  1,  0,  1,  0,  0,  1,  0,\n  // Right face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Left face\n  0,  0,  1,  0,  1,  1,  0,  1\n]);\n\nconst ATTRIBUTES = {\n  POSITION: {size: 3, value: new Float32Array(CUBE_POSITIONS)},\n  NORMAL: {size: 3, value: new Float32Array(CUBE_NORMALS)},\n  TEXCOORD_0: {size: 2, value: new Float32Array(CUBE_TEX_COORDS)}\n};\n\nexport default class CubeGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('cube-geometry')} = props;\n    super({\n      ...props,\n      id,\n      indices: {size: 1, value: new Uint16Array(CUBE_INDICES)},\n      attributes: {...ATTRIBUTES, ...props.attributes}\n    });\n  }\n}\n","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import {assert} from '../utils';\nconst FS100 = `void main() {gl_FragColor = vec4(0);}`;\nconst FS_GLES = `\\\nout vec4 transform_output;\nvoid main() {\n  transform_output = vec4(0);\n}`;\nconst FS300 = `#version 300 es\\n${FS_GLES}`;\n\n// Prase given glsl line and return qualifier details or null\nexport function getQualifierDetails(line, qualifiers) {\n  qualifiers = Array.isArray(qualifiers) ? qualifiers : [qualifiers];\n  const words = line.replace(/^\\s+/, '').split(/\\s+/);\n  // TODO add support for precession qualifiers (highp, mediump and lowp)\n  const [qualifier, type, definition] = words;\n  if (!qualifiers.includes(qualifier) || !type || !definition) {\n    return null;\n  }\n  const name = definition.split(';')[0];\n  return {qualifier, type, name};\n}\n\n// Given the shader version, input and output variable names,\n// builds and return a pass through fragment shader.\nexport function getPassthroughFS({version = 100, input, inputType, output} = {}) {\n  if (!input) {\n    if (version === 300) {\n      // Fast-path for WebGL 2.0\n      return FS300;\n    } else if (version > 300) {\n      // Use the supplied version for OpenGL/ES 3.2+\n      return `#version ${version}\\n${FS_GLES}`;\n    }\n    // Fast-path for WebGL 1.0\n    return FS100;\n  }\n  const outputValue = convertToVec4(input, inputType);\n  if (version >= 300) {\n    // If version is 300, assume WebGL 2.0\n    return `\\\n#version ${version} ${version === 300 ? 'es' : ''}\nin ${inputType} ${input};\nout vec4 ${output};\nvoid main() {\n  ${output} = ${outputValue};\n}`;\n  }\n  // WebGL 1.0\n  return `\\\nvarying ${inputType} ${input};\nvoid main() {\n  gl_FragColor = ${outputValue};\n}`;\n}\n\n// convert glsl type to suffix\nexport function typeToChannelSuffix(type) {\n  switch (type) {\n    case 'float':\n      return 'x';\n    case 'vec2':\n      return 'xy';\n    case 'vec3':\n      return 'xyz';\n    case 'vec4':\n      return 'xyzw';\n    default:\n      assert(false);\n      return null;\n  }\n}\n\n// convert glsl type to channel count\nexport function typeToChannelCount(type) {\n  switch (type) {\n    case 'float':\n      return 1;\n    case 'vec2':\n      return 2;\n    case 'vec3':\n      return 3;\n    case 'vec4':\n      return 4;\n    default:\n      assert(false);\n      return null;\n  }\n}\n\n// Returns glsl instruction for converting to vec4\nexport function convertToVec4(variable, type) {\n  switch (type) {\n    case 'float':\n      return `vec4(${variable}, 0.0, 0.0, 1.0)`;\n    case 'vec2':\n      return `vec4(${variable}, 0.0, 1.0)`;\n    case 'vec3':\n      return `vec4(${variable}, 1.0)`;\n    case 'vec4':\n      return variable;\n    default:\n      assert(false);\n      return null;\n  }\n}\n","import {isWebGL2} from '@luma.gl/gltools';\nimport {Buffer, TransformFeedback} from '@luma.gl/webgl';\nimport {assert} from '@luma.gl/webgl';\n\nexport default class BufferTransform {\n  constructor(gl, props = {}) {\n    this.gl = gl;\n    this.currentIndex = 0;\n    this.feedbackMap = {};\n    this.varyings = null; // varyings array\n    this.bindings = []; // each element is an object : {sourceBuffers, feedbackBuffers, transformFeedback}\n\n    this.resources = {}; // resources to be deleted\n\n    this._initialize(props);\n    Object.seal(this);\n  }\n\n  setupResources(opts) {\n    for (const binding of this.bindings) {\n      this._setupTransformFeedback(binding, opts);\n    }\n  }\n\n  updateModelProps(props = {}) {\n    const {varyings} = this;\n    if (varyings.length > 0) {\n      props = Object.assign({}, props, {varyings});\n    }\n    return props;\n  }\n\n  getDrawOptions(opts = {}) {\n    const binding = this.bindings[this.currentIndex];\n    const {sourceBuffers, transformFeedback} = binding;\n    const attributes = Object.assign({}, sourceBuffers, opts.attributes);\n\n    return {attributes, transformFeedback};\n  }\n\n  swap() {\n    if (this.feedbackMap) {\n      this.currentIndex = this._getNextIndex();\n      return true;\n    }\n    return false;\n  }\n\n  // update source and/or feedbackBuffers\n  update(opts = {}) {\n    this._setupBuffers(opts);\n  }\n\n  // returns current feedbackBuffer of given name\n  getBuffer(varyingName) {\n    const {feedbackBuffers} = this.bindings[this.currentIndex];\n    const bufferOrParams = varyingName ? feedbackBuffers[varyingName] : null;\n    if (!bufferOrParams) {\n      return null;\n    }\n    return bufferOrParams instanceof Buffer ? bufferOrParams : bufferOrParams.buffer;\n  }\n\n  getData({varyingName} = {}) {\n    const buffer = this.getBuffer(varyingName);\n    if (buffer) {\n      return buffer.getData();\n    }\n    return null;\n  }\n\n  // Delete owned resources.\n  delete() {\n    for (const name in this.resources) {\n      this.resources[name].delete();\n    }\n  }\n\n  // Private\n\n  _initialize(props = {}) {\n    this._setupBuffers(props);\n    this.varyings = props.varyings || Object.keys(this.bindings[this.currentIndex].feedbackBuffers);\n    if (this.varyings.length > 0) {\n      // if writting to buffers make sure it is WebGL2\n      assert(isWebGL2(this.gl));\n    }\n  }\n\n  // auto create feedback buffers if requested\n  _getFeedbackBuffers(props) {\n    const {sourceBuffers = {}} = props;\n    const feedbackBuffers = {};\n    if (this.bindings[this.currentIndex]) {\n      // this gurantees a partial feedback buffer set doesn't update\n      // previously set buffers during auto creation mode.\n      Object.assign(feedbackBuffers, this.bindings[this.currentIndex].feedbackBuffers);\n    }\n    if (this.feedbackMap) {\n      // feedbackMap is defined as sourceBuffer as key and feedbackBuffer name as object\n      for (const sourceName in this.feedbackMap) {\n        const feedbackName = this.feedbackMap[sourceName];\n        if (sourceName in sourceBuffers) {\n          feedbackBuffers[feedbackName] = sourceName;\n        }\n      }\n    }\n    Object.assign(feedbackBuffers, props.feedbackBuffers);\n    for (const bufferName in feedbackBuffers) {\n      const bufferOrRef = feedbackBuffers[bufferName];\n      if (typeof bufferOrRef === 'string') {\n        // Create new buffer with same layout and settings as source buffer\n        const sourceBuffer = sourceBuffers[bufferOrRef];\n        const {byteLength, usage, accessor} = sourceBuffer;\n        feedbackBuffers[bufferName] = this._createNewBuffer(bufferName, {\n          byteLength,\n          usage,\n          accessor\n        });\n      }\n    }\n\n    return feedbackBuffers;\n  }\n\n  _setupBuffers(props = {}) {\n    const {sourceBuffers = null} = props;\n    Object.assign(this.feedbackMap, props.feedbackMap);\n    const feedbackBuffers = this._getFeedbackBuffers(props);\n    this._updateBindings({sourceBuffers, feedbackBuffers});\n  }\n\n  _setupTransformFeedback(binding, {model}) {\n    const {program} = model;\n    binding.transformFeedback = new TransformFeedback(this.gl, {\n      program,\n      buffers: binding.feedbackBuffers\n    });\n  }\n\n  _updateBindings(opts) {\n    this.bindings[this.currentIndex] = this._updateBinding(this.bindings[this.currentIndex], opts);\n    if (this.feedbackMap) {\n      const {sourceBuffers, feedbackBuffers} = this._swapBuffers(this.bindings[this.currentIndex]);\n      const nextIndex = this._getNextIndex();\n      this.bindings[nextIndex] = this._updateBinding(this.bindings[nextIndex], {\n        sourceBuffers,\n        feedbackBuffers\n      });\n    }\n  }\n\n  _updateBinding(binding, opts) {\n    if (!binding) {\n      return {\n        sourceBuffers: Object.assign({}, opts.sourceBuffers),\n        feedbackBuffers: Object.assign({}, opts.feedbackBuffers)\n      };\n    }\n    Object.assign(binding.sourceBuffers, opts.sourceBuffers);\n    Object.assign(binding.feedbackBuffers, opts.feedbackBuffers);\n    if (binding.transformFeedback) {\n      binding.transformFeedback.setBuffers(binding.feedbackBuffers);\n    }\n    return binding;\n  }\n\n  _swapBuffers(opts) {\n    if (!this.feedbackMap) {\n      return null;\n    }\n    const sourceBuffers = Object.assign({}, opts.sourceBuffers);\n    const feedbackBuffers = Object.assign({}, opts.feedbackBuffers);\n    for (const srcName in this.feedbackMap) {\n      const dstName = this.feedbackMap[srcName];\n      sourceBuffers[srcName] = opts.feedbackBuffers[dstName];\n      feedbackBuffers[dstName] = opts.sourceBuffers[srcName];\n\n      // make sure the new destination buffer is a Buffer object\n      assert(feedbackBuffers[dstName] instanceof Buffer);\n    }\n    return {sourceBuffers, feedbackBuffers};\n  }\n\n  // Create a buffer and add to list of buffers to be deleted.\n  _createNewBuffer(name, opts) {\n    const buffer = new Buffer(this.gl, opts);\n    if (this.resources[name]) {\n      this.resources[name].delete();\n    }\n    this.resources[name] = buffer;\n    return buffer;\n  }\n\n  _getNextIndex() {\n    return (this.currentIndex + 1) % 2;\n  }\n}\n","// returns GLSL shader version of given shader string\nexport default function getShaderVersion(source) {\n  let version = 100;\n  const words = source.match(/[^\\s]+/g);\n  if (words.length >= 2 && words[0] === '#version') {\n    const v = parseInt(words[1], 10);\n    if (Number.isFinite(v)) {\n      version = v;\n    }\n  }\n  return version;\n}\n","// Private shader module used by `Transform`\n\nconst vs = `\\\nattribute float transform_elementID;\n\n// returns half of pixel size, used to move the pixel position to center of the pixel.\nvec2 transform_getPixelSizeHalf(vec2 size) {\n  return vec2(1.) / (2. * size);\n}\n\n// returns current elements pixel indeces [x, y],\n// where x ranges in [0 to texSize-1] and y ranges in [0 to texSize-1]\nvec2 transform_getPixelIndices(vec2 texSize, vec2 pixelSizeHalf) {\n  // Add safe offset (half of pixel height) before doing floor\n  float yIndex = floor((transform_elementID / texSize[0]) + pixelSizeHalf[1]);\n  float xIndex = transform_elementID - (yIndex * texSize[0]);\n  return vec2(xIndex, yIndex);\n}\n\n// returns current elementID's texture co-ordianate\nvec2 transform_getTexCoord(vec2 size) {\n  vec2 pixelSizeHalf = transform_getPixelSizeHalf(size);\n  vec2 indices = transform_getPixelIndices(size, pixelSizeHalf);\n  vec2 coord = indices / size + pixelSizeHalf;\n  return coord;\n}\n\n// returns current elementID's position\nvec2 transform_getPos(vec2 size) {\n  vec2 texCoord = transform_getTexCoord(size);\n  // Change from [0 1] range to [-1 1]\n  vec2 pos = (texCoord * (2.0, 2.0)) - (1., 1.);\n  return pos;\n}\n\n// returns current elementID's pixel value\nvec4 transform_getInput(sampler2D texSampler, vec2 size) {\n  vec2 texCoord = transform_getTexCoord(size);\n  vec4 textureColor = texture2D(texSampler, texCoord);\n  return textureColor;\n}\n`;\n\nexport default {\n  name: 'transform',\n  vs,\n  fs: null\n};\n","import {assert} from '@luma.gl/webgl';\nimport {combineInjects, getQualifierDetails, typeToChannelSuffix} from '@luma.gl/shadertools';\n\nconst SAMPLER_UNIFORM_PREFIX = 'transform_uSampler_';\nconst SIZE_UNIFORM_PREFIX = 'transform_uSize_';\nconst VS_POS_VARIABLE = 'transform_position';\n\n// Scan provided vertex shader\n// for each texture attribute, inject sampler instructions and build uniforms for sampler\n// for texture target, get varying type and inject position instruction\nexport function updateForTextures({vs, sourceTextureMap, targetTextureVarying, targetTexture}) {\n  const texAttributeNames = Object.keys(sourceTextureMap);\n  let sourceCount = texAttributeNames.length;\n  let targetTextureType = null;\n  const samplerTextureMap = {};\n  let updatedVs = vs;\n  let finalInject = {};\n\n  if (sourceCount > 0 || targetTextureVarying) {\n    const vsLines = updatedVs.split('\\n');\n    const updateVsLines = vsLines.slice();\n    vsLines.forEach((line, index, lines) => {\n      // TODO add early exit\n      if (sourceCount > 0) {\n        const updated = processAttributeDefinition(line, sourceTextureMap);\n        if (updated) {\n          const {updatedLine, inject} = updated;\n          updateVsLines[index] = updatedLine;\n          // sampleInstructions.push(sampleInstruction);\n          finalInject = combineInjects([finalInject, inject]);\n          Object.assign(samplerTextureMap, updated.samplerTextureMap);\n          sourceCount--;\n        }\n      }\n      if (targetTextureVarying && !targetTextureType) {\n        targetTextureType = getVaryingType(line, targetTextureVarying);\n      }\n    });\n\n    if (targetTextureVarying) {\n      assert(targetTexture);\n      const sizeName = `${SIZE_UNIFORM_PREFIX}${targetTextureVarying}`;\n\n      const uniformDeclaration = `uniform vec2 ${sizeName};\\n`;\n      const posInstructions = `\\\n     vec2 ${VS_POS_VARIABLE} = transform_getPos(${sizeName});\n     gl_Position = vec4(${VS_POS_VARIABLE}, 0, 1.);\\n`;\n      const inject = {\n        'vs:#decl': uniformDeclaration,\n        'vs:#main-start': posInstructions\n      };\n      finalInject = combineInjects([finalInject, inject]);\n    }\n    updatedVs = updateVsLines.join('\\n');\n  }\n  return {\n    // updated vertex shader (commented texture attribute definition)\n    vs: updatedVs,\n    // type (float, vec2, vec3 of vec4) target texture varying\n    targetTextureType,\n    // required vertex and fragment shader injects\n    inject: finalInject,\n    // map of sampler name to texture name, can be used to set attributes\n    // usefull when swapping textures, as source and destination texture change when swap is called.\n    samplerTextureMap\n  };\n}\n\n// builds and returns an object contaning size uniform for each texture\nexport function getSizeUniforms({sourceTextureMap, targetTextureVarying, targetTexture}) {\n  const uniforms = {};\n  let width;\n  let height;\n  if (targetTextureVarying) {\n    ({width, height} = targetTexture);\n    uniforms[`${SIZE_UNIFORM_PREFIX}${targetTextureVarying}`] = [width, height];\n  }\n  for (const textureName in sourceTextureMap) {\n    ({width, height} = sourceTextureMap[textureName]);\n    uniforms[`${SIZE_UNIFORM_PREFIX}${textureName}`] = [width, height];\n  }\n  return uniforms;\n}\n\n// Checks if provided line is defining an attribute, if so returns details otherwise null\nfunction getAttributeDefinition(line) {\n  return getQualifierDetails(line, ['attribute', 'in']);\n}\n\nfunction getSamplerDeclerations(textureName) {\n  const samplerName = `${SAMPLER_UNIFORM_PREFIX}${textureName}`;\n  const sizeName = `${SIZE_UNIFORM_PREFIX}${textureName}`;\n  const uniformDeclerations = `\\\n  uniform sampler2D ${samplerName};\n  uniform vec2 ${sizeName};`;\n  return {samplerName, sizeName, uniformDeclerations};\n}\n\n// Return size (float, vec2 etc) of a given varying, null if doens't exist.\nexport function getVaryingType(line, varying) {\n  const qualaiferDetails = getQualifierDetails(line, ['varying', 'out']);\n  if (!qualaiferDetails) {\n    return null;\n  }\n  return qualaiferDetails.name === varying ? qualaiferDetails.type : null;\n}\n\n// build required definitions, sample instructions for each texture attribute\nexport function processAttributeDefinition(line, textureMap) {\n  const samplerTextureMap = {};\n  const attributeData = getAttributeDefinition(line);\n  if (!attributeData) {\n    return null;\n  }\n  const {type, name} = attributeData;\n  if (name && textureMap[name]) {\n    // eslint-disable-next-line no-useless-escape\n    const updatedLine = `\\// ${line} => Replaced by Transform with a sampler`;\n    const {samplerName, sizeName, uniformDeclerations} = getSamplerDeclerations(name);\n\n    const channels = typeToChannelSuffix(type);\n    const sampleInstruction = `  ${type} ${name} = transform_getInput(${samplerName}, ${sizeName}).${channels};\\n`;\n\n    samplerTextureMap[samplerName] = name;\n    const inject = {\n      'vs:#decl': uniformDeclerations,\n      'vs:#main-start': sampleInstruction\n    };\n\n    // samplerNameMap\n    return {\n      // update vertex shader line.\n      updatedLine,\n      // inject object with sampler instructions.\n      inject,\n      // sampler name to texture name map\n      samplerTextureMap\n    };\n  }\n  return null;\n}\n","import GL from '@luma.gl/constants';\nimport {\n  cloneTextureFrom,\n  readPixelsToArray,\n  getShaderVersion,\n  Buffer,\n  Texture2D,\n  Framebuffer\n} from '@luma.gl/webgl';\nimport {\n  _transform as transformModule,\n  getPassthroughFS,\n  typeToChannelCount,\n  combineInjects\n} from '@luma.gl/shadertools';\nimport {updateForTextures, getSizeUniforms} from './transform-shader-utils';\n\n// TODO: move these constants to transform-shader-utils\n// Texture parameters needed so sample can precisely pick pixel for given element id.\nconst SRC_TEX_PARAMETER_OVERRIDES = {\n  [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n  [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\nconst FS_OUTPUT_VARIABLE = 'transform_output';\n\nexport default class TextureTransform {\n  constructor(gl, props = {}) {\n    this.gl = gl;\n    this.currentIndex = 0;\n    this._swapTexture = null;\n    this.targetTextureVarying = null;\n    this.targetTextureType = null;\n    this.samplerTextureMap = null;\n    this.bindings = []; // each element is an object : {sourceTextures, targetTexture, framebuffer}\n\n    this.resources = {}; // resources to be deleted\n\n    this._initialize(props);\n    Object.seal(this);\n  }\n\n  updateModelProps(props = {}) {\n    const updatedModelProps = this._processVertexShader(props);\n    return Object.assign({}, props, updatedModelProps);\n  }\n\n  getDrawOptions(opts = {}) {\n    const {sourceTextures, framebuffer, targetTexture} = this.bindings[this.currentIndex];\n\n    const attributes = Object.assign({}, opts.attributes);\n    const uniforms = Object.assign({}, opts.uniforms);\n    const parameters = Object.assign({}, opts.parameters);\n    let discard = opts.discard;\n\n    if (this.hasSourceTextures || this.hasTargetTexture) {\n      attributes.transform_elementID = this.elementIDBuffer;\n\n      for (const sampler in this.samplerTextureMap) {\n        const textureName = this.samplerTextureMap[sampler];\n        uniforms[sampler] = sourceTextures[textureName];\n      }\n      this._setSourceTextureParameters();\n      // get texture size uniforms\n      const sizeUniforms = getSizeUniforms({\n        sourceTextureMap: sourceTextures,\n        targetTextureVarying: this.targetTextureVarying,\n        targetTexture\n      });\n      Object.assign(uniforms, sizeUniforms);\n    }\n\n    if (this.hasTargetTexture) {\n      discard = false;\n      parameters.viewport = [0, 0, framebuffer.width, framebuffer.height];\n    }\n\n    return {attributes, framebuffer, uniforms, discard, parameters};\n  }\n\n  swap() {\n    if (this._swapTexture) {\n      this.currentIndex = this._getNextIndex();\n      return true;\n    }\n    return false;\n  }\n\n  // update source and/or feedbackBuffers\n  update(opts = {}) {\n    this._setupTextures(opts);\n  }\n\n  // returns current target texture\n  getTargetTexture() {\n    const {targetTexture} = this.bindings[this.currentIndex];\n    return targetTexture;\n  }\n\n  getData({packed = false} = {}) {\n    const {framebuffer} = this.bindings[this.currentIndex];\n    const pixels = readPixelsToArray(framebuffer);\n\n    if (!packed) {\n      return pixels;\n    }\n\n    // readPixels returns 4 elements for each pixel, pack the elements when requested\n    const ArrayType = pixels.constructor;\n    const channelCount = typeToChannelCount(this.targetTextureType);\n    const packedPixels = new ArrayType((pixels.length * channelCount) / 4);\n    let packCount = 0;\n    for (let i = 0; i < pixels.length; i += 4) {\n      for (let j = 0; j < channelCount; j++) {\n        packedPixels[packCount++] = pixels[i + j];\n      }\n    }\n    return packedPixels;\n  }\n\n  // returns current framebuffer object that is being used.\n  getFramebuffer() {\n    const currentResources = this.bindings[this.currentIndex];\n    return currentResources.framebuffer;\n  }\n\n  // Delete owned resources.\n  delete() {\n    if (this.ownTexture) {\n      this.ownTexture.delete();\n    }\n    if (this.elementIDBuffer) {\n      this.elementIDBuffer.delete();\n    }\n  }\n\n  // Private\n\n  _initialize(props = {}) {\n    const {_targetTextureVarying, _swapTexture} = props;\n    this._swapTexture = _swapTexture;\n    this.targetTextureVarying = _targetTextureVarying;\n    this.hasTargetTexture = _targetTextureVarying;\n    this._setupTextures(props);\n  }\n\n  // auto create target texture if requested\n  _createTargetTexture(props) {\n    const {sourceTextures, textureOrReference} = props;\n    if (textureOrReference instanceof Texture2D) {\n      return textureOrReference;\n    }\n    // 'targetTexture' is a reference souce texture.\n    const refTexture = sourceTextures[textureOrReference];\n    if (!refTexture) {\n      return null;\n    }\n\n    // save reference texture name, when corresponding source texture is updated\n    // we also update target texture.\n    this._targetRefTexName = textureOrReference;\n\n    return this._createNewTexture(refTexture);\n  }\n\n  _setupTextures(props = {}) {\n    const {_sourceTextures = {}, _targetTexture} = props;\n    const targetTexture = this._createTargetTexture({\n      sourceTextures: _sourceTextures,\n      textureOrReference: _targetTexture\n    });\n    this.hasSourceTextures =\n      this.hasSourceTextures || (_sourceTextures && Object.keys(_sourceTextures).length > 0);\n    this._updateBindings({sourceTextures: _sourceTextures, targetTexture});\n    if ('elementCount' in props) {\n      this._updateElementIDBuffer(props.elementCount);\n    }\n  }\n\n  _updateElementIDBuffer(elementCount) {\n    if (typeof elementCount !== 'number' || this.elementCount >= elementCount) {\n      return;\n    }\n    // NOTE: using float so this will work with GLSL 1.0 shaders.\n    const elementIds = new Float32Array(elementCount);\n    elementIds.forEach((_, index, array) => {\n      array[index] = index;\n    });\n    if (!this.elementIDBuffer) {\n      this.elementIDBuffer = new Buffer(this.gl, {\n        data: elementIds,\n        accessor: {size: 1}\n      });\n    } else {\n      this.elementIDBuffer.setData({data: elementIds});\n    }\n    this.elementCount = elementCount;\n  }\n\n  _updateBindings(opts) {\n    this.bindings[this.currentIndex] = this._updateBinding(this.bindings[this.currentIndex], opts);\n    if (this._swapTexture) {\n      const {sourceTextures, targetTexture} = this._swapTextures(this.bindings[this.currentIndex]);\n      const nextIndex = this._getNextIndex();\n      this.bindings[nextIndex] = this._updateBinding(this.bindings[nextIndex], {\n        sourceTextures,\n        targetTexture\n      });\n    }\n  }\n\n  _updateBinding(binding, opts) {\n    const {sourceTextures, targetTexture} = opts;\n    if (!binding) {\n      binding = {\n        sourceTextures: {},\n        targetTexture: null\n      };\n    }\n    Object.assign(binding.sourceTextures, sourceTextures);\n    if (targetTexture) {\n      binding.targetTexture = targetTexture;\n\n      const {width, height} = targetTexture;\n      const {framebuffer} = binding;\n      if (framebuffer) {\n        // First update texture without re-sizing attachments\n        framebuffer.update({\n          attachments: {[GL.COLOR_ATTACHMENT0]: targetTexture},\n          resizeAttachments: false\n        });\n        // Resize to new taget texture size\n        framebuffer.resize({width, height});\n      } else {\n        binding.framebuffer = new Framebuffer(this.gl, {\n          id: `${this.id || 'transform'}-framebuffer`,\n          width,\n          height,\n          attachments: {\n            [GL.COLOR_ATTACHMENT0]: targetTexture\n          }\n        });\n      }\n    }\n    return binding;\n  }\n\n  // set texture filtering parameters on source textures.\n  _setSourceTextureParameters() {\n    const index = this.currentIndex;\n    const {sourceTextures} = this.bindings[index];\n    for (const name in sourceTextures) {\n      sourceTextures[name].setParameters(SRC_TEX_PARAMETER_OVERRIDES);\n    }\n  }\n\n  _swapTextures(opts) {\n    if (!this._swapTexture) {\n      return null;\n    }\n    const sourceTextures = Object.assign({}, opts.sourceTextures);\n    sourceTextures[this._swapTexture] = opts.targetTexture;\n\n    const targetTexture = opts.sourceTextures[this._swapTexture];\n\n    return {sourceTextures, targetTexture};\n  }\n\n  // Create a buffer and add to list of buffers to be deleted.\n  _createNewTexture(refTexture) {\n    const texture = cloneTextureFrom(refTexture, {\n      parameters: {\n        [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n        [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n      },\n      pixelStore: {\n        [GL.UNPACK_FLIP_Y_WEBGL]: false\n      }\n    });\n\n    // thre can only be one target texture\n    if (this.ownTexture) {\n      this.ownTexture.delete();\n    }\n    this.ownTexture = texture;\n\n    return texture;\n  }\n\n  _getNextIndex() {\n    return (this.currentIndex + 1) % 2;\n  }\n\n  // build and return shader releated parameters\n  _processVertexShader(props = {}) {\n    const {sourceTextures, targetTexture} = this.bindings[this.currentIndex];\n    const {vs, uniforms, targetTextureType, inject, samplerTextureMap} = updateForTextures({\n      vs: props.vs,\n      sourceTextureMap: sourceTextures,\n      targetTextureVarying: this.targetTextureVarying,\n      targetTexture\n    });\n    const combinedInject = combineInjects([props.inject || {}, inject]);\n    this.targetTextureType = targetTextureType;\n    this.samplerTextureMap = samplerTextureMap;\n    const fs =\n      props._fs ||\n      getPassthroughFS({\n        version: getShaderVersion(vs),\n        input: this.targetTextureVarying,\n        inputType: targetTextureType,\n        output: FS_OUTPUT_VARIABLE\n      });\n    const modules =\n      this.hasSourceTextures || this.targetTextureVarying\n        ? [transformModule].concat(props.modules || [])\n        : props.modules;\n    return {vs, fs, modules, uniforms, inject: combinedInject};\n  }\n}\n","import GL from '@luma.gl/constants';\nimport {getPassthroughFS} from '@luma.gl/shadertools';\nimport BufferTransform from './buffer-transform';\nimport TextureTransform from './texture-transform';\n\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {assert, isObjectEmpty, getShaderVersion} from '@luma.gl/webgl';\nimport Model from '../lib/model';\n\n// takes source and target buffers/textures and setsup the pipeline\nexport default class Transform {\n  static isSupported(gl) {\n    // TODO : differentiate writting to buffer vs not\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, props = {}) {\n    this.gl = gl;\n    this.model = null;\n    this.elementCount = 0;\n    this.bufferTransform = null;\n    this.textureTransform = null;\n    this.elementIDBuffer = null;\n    this._initialize(props);\n    Object.seal(this);\n  }\n\n  // Delete owned resources.\n  delete() {\n    const {model, bufferTransform, textureTransform} = this;\n    if (model) {\n      model.delete();\n    }\n    if (bufferTransform) {\n      bufferTransform.delete();\n    }\n    if (textureTransform) {\n      textureTransform.delete();\n    }\n  }\n\n  // Run one transform loop.\n  run(opts = {}) {\n    const {clearRenderTarget = true} = opts;\n\n    const updatedOpts = this._updateDrawOptions(opts);\n\n    if (clearRenderTarget && updatedOpts.framebuffer) {\n      updatedOpts.framebuffer.clear({color: true});\n    }\n\n    this.model.transform(updatedOpts);\n  }\n\n  // swap resources if a map is provided\n  swap() {\n    let swapped = false;\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n    for (const resourceTransform of resourceTransforms) {\n      swapped = swapped || resourceTransform.swap();\n    }\n    assert(swapped, 'Nothing to swap');\n  }\n\n  // Return Buffer object for given varying name.\n  getBuffer(varyingName = null) {\n    return this.bufferTransform && this.bufferTransform.getBuffer(varyingName);\n  }\n\n  // Return data either from Buffer or from Texture\n  getData(opts = {}) {\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n    for (const resourceTransform of resourceTransforms) {\n      const data = resourceTransform.getData(opts);\n      if (data) {\n        return data;\n      }\n    }\n    return null;\n  }\n\n  // Return framebuffer object if rendering to textures\n  getFramebuffer() {\n    return this.textureTransform && this.textureTransform.getFramebuffer();\n  }\n\n  // Update some or all buffer/texture bindings.\n  update(opts = {}) {\n    if ('elementCount' in opts) {\n      this.model.setVertexCount(opts.elementCount);\n    }\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n    for (const resourceTransform of resourceTransforms) {\n      resourceTransform.update(opts);\n    }\n  }\n\n  // Private\n\n  _initialize(props = {}) {\n    const {gl} = this;\n    this._buildResourceTransforms(gl, props);\n\n    props = this._updateModelProps(props);\n    this.model = new Model(\n      gl,\n      Object.assign({}, props, {\n        fs: props.fs || getPassthroughFS({version: getShaderVersion(props.vs)}),\n        id: props.id || 'transform-model',\n        drawMode: props.drawMode || GL.POINTS,\n        vertexCount: props.elementCount\n      })\n    );\n\n    /* eslint-disable no-unused-expressions */\n    this.bufferTransform && this.bufferTransform.setupResources({model: this.model});\n    /* eslint-enable no-unused-expressions */\n  }\n\n  _updateModelProps(props) {\n    let updatedProps = Object.assign({}, props);\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n    for (const resourceTransform of resourceTransforms) {\n      updatedProps = resourceTransform.updateModelProps(updatedProps);\n    }\n    return updatedProps;\n  }\n\n  _buildResourceTransforms(gl, props) {\n    if (canCreateBufferTransform(props)) {\n      this.bufferTransform = new BufferTransform(gl, props);\n    }\n    if (canCreateTextureTransform(props)) {\n      this.textureTransform = new TextureTransform(gl, props);\n    }\n    assert(\n      this.bufferTransform || this.textureTransform,\n      'must provide source/feedback buffers or source/target textures'\n    );\n  }\n\n  _updateDrawOptions(opts) {\n    let updatedOpts = Object.assign({}, opts);\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n    for (const resourceTransform of resourceTransforms) {\n      updatedOpts = Object.assign(updatedOpts, resourceTransform.getDrawOptions(updatedOpts));\n    }\n    return updatedOpts;\n  }\n}\n\n// Helper Methods\n\nfunction canCreateBufferTransform(props) {\n  if (\n    !isObjectEmpty(props.sourceBuffers) ||\n    !isObjectEmpty(props.feedbackBuffers) ||\n    (props.varyings && props.varyings.length > 0)\n  ) {\n    return true;\n  }\n  return false;\n}\n\nfunction canCreateTextureTransform(props) {\n  if (\n    !isObjectEmpty(props._sourceTextures) ||\n    props._targetTexture ||\n    props._targetTextureVarying\n  ) {\n    return true;\n  }\n\n  return false;\n}\n","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import {uid, assert} from '@luma.gl/webgl';\n\n// Rendering primitives - specify how to extract primitives from vertices.\n// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants\nexport const DRAW_MODE = {\n  POINTS: 0x0000, // draw single points.\n  LINES: 0x0001, // draw lines. Each vertex connects to the one after it.\n  LINE_LOOP: 0x0002, // draw lines. Each set of two vertices is treated as a separate line segment.\n  LINE_STRIP: 0x0003, // draw a connected group of line segments from the first vertex to the last\n  TRIANGLES: 0x0004, // draw triangles. Each set of three vertices creates a separate triangle.\n  TRIANGLE_STRIP: 0x0005, // draw a connected group of triangles.\n  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.\n  // Each vertex connects to the previous and the first vertex in the fan.\n};\n\nexport default class Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n\n  constructor(props = {}) {\n    const {\n      id = uid('geometry'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n\n    // stubRemovedMethods(this, [\n    //   'setNeedsRedraw', 'needsRedraw', 'setAttributes'\n    // ], 'Immutable');\n\n    // stubRemovedMethods(this, [\n    //   'hasAttribute', 'getAttribute', 'getArray'\n    // ], 'Use geometry.attributes and geometry.indices');\n\n    // deprecateMethods(this, ['getAttributes'])\n  }\n\n  get mode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  // Return an object with all attributes plus indices added as a field.\n  getAttributes() {\n    return this.indices ? {indices: this.indices, ...this.attributes} : this.attributes;\n  }\n\n  // PRIVATE\n\n  _print(attributeName) {\n    return `Geometry ${this.id} attribute ${attributeName}`;\n  }\n\n  // Attribute\n  // value: typed array\n  // type: indices, vertices, uvs\n  // size: elements per vertex\n  // target: WebGL buffer type (string or constant)\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {value: indices, size: 1} : indices;\n    }\n\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n\n      // Wrap \"unwrapped\" arrays and try to autodetect their type\n      attribute = ArrayBuffer.isView(attribute) ? {value: attribute} : attribute;\n\n      assert(\n        ArrayBuffer.isView(attribute.value),\n        `${this._print(attributeName)}: must be typed array or object with value as typed array`\n      );\n\n      if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n        attribute.size = 3;\n      }\n\n      // Move indices to separate field\n      if (attributeName === 'indices') {\n        assert(!this.indices);\n        this.indices = attribute;\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n\n    if (this.indices && this.indices.isIndexed !== undefined) {\n      this.indices = Object.assign({}, this.indices);\n      delete this.indices.isIndexed;\n    }\n\n    return this;\n  }\n\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n    let vertexCount = Infinity;\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {value, size, constant} = attribute;\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n\n    assert(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n}\n","import setPrototypeOf from \"./setPrototypeOf\";\n\nfunction isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import \"core-js/modules/es6.array.fill\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport MathArray from './math-array';\nimport { checkNumber } from '../../lib/validators';\nimport { config } from '../../lib/common';\n\nvar Matrix = function (_MathArray) {\n  _inherits(Matrix, _MathArray);\n\n  function Matrix() {\n    _classCallCheck(this, Matrix);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Matrix).apply(this, arguments));\n  }\n\n  _createClass(Matrix, [{\n    key: \"toString\",\n    value: function toString() {\n      var string = '[';\n\n      if (config.printRowMajor) {\n        string += 'row-major:';\n\n        for (var row = 0; row < this.RANK; ++row) {\n          for (var col = 0; col < this.RANK; ++col) {\n            string += \" \".concat(this[col * this.RANK + row]);\n          }\n        }\n      } else {\n        string += 'column-major:';\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          string += \" \".concat(this[i]);\n        }\n      }\n\n      string += ']';\n      return string;\n    }\n  }, {\n    key: \"getElementIndex\",\n    value: function getElementIndex(row, col) {\n      return col * this.RANK + row;\n    }\n  }, {\n    key: \"getElement\",\n    value: function getElement(row, col) {\n      return this[col * this.RANK + row];\n    }\n  }, {\n    key: \"setElement\",\n    value: function setElement(row, col, value) {\n      this[col * this.RANK + row] = checkNumber(value);\n      return this;\n    }\n  }, {\n    key: \"getColumn\",\n    value: function getColumn(columnIndex) {\n      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Array(this.RANK).fill(-0);\n      var firstIndex = columnIndex * this.RANK;\n\n      for (var i = 0; i < this.RANK; ++i) {\n        result[i] = this[firstIndex + i];\n      }\n\n      return result;\n    }\n  }, {\n    key: \"setColumn\",\n    value: function setColumn(columnIndex, columnVector) {\n      var firstIndex = columnIndex * this.RANK;\n\n      for (var i = 0; i < this.RANK; ++i) {\n        this[firstIndex + i] = columnVector[i];\n      }\n\n      return this;\n    }\n  }]);\n\n  return Matrix;\n}(MathArray);\n\nexport { Matrix as default };","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import \"core-js/modules/es6.array.is-array\";\nimport \"core-js/modules/es6.object.freeze\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { checkVector, deprecated } from '../lib/validators';\nimport Matrix from './base/matrix';\nimport { vec2_transformMat4AsVector, vec3_transformMat4AsVector } from '../lib/gl-matrix-extras';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport * as vec4 from 'gl-matrix/vec4';\nvar IDENTITY = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\nvar ZERO = Object.freeze([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nvar INDICES = Object.freeze({\n  COL0ROW0: 0,\n  COL0ROW1: 1,\n  COL0ROW2: 2,\n  COL0ROW3: 3,\n  COL1ROW0: 4,\n  COL1ROW1: 5,\n  COL1ROW2: 6,\n  COL1ROW3: 7,\n  COL2ROW0: 8,\n  COL2ROW1: 9,\n  COL2ROW2: 10,\n  COL2ROW3: 11,\n  COL3ROW0: 12,\n  COL3ROW1: 13,\n  COL3ROW2: 14,\n  COL3ROW3: 15\n});\nvar constants = {};\n\nvar Matrix4 = function (_Matrix) {\n  _inherits(Matrix4, _Matrix);\n\n  _createClass(Matrix4, [{\n    key: \"INDICES\",\n    get: function get() {\n      return INDICES;\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 16;\n    }\n  }, {\n    key: \"RANK\",\n    get: function get() {\n      return 4;\n    }\n  }], [{\n    key: \"IDENTITY\",\n    get: function get() {\n      constants.IDENTITY = constants.IDENTITY || Object.freeze(new Matrix4(IDENTITY));\n      return constants.IDENTITY;\n    }\n  }, {\n    key: \"ZERO\",\n    get: function get() {\n      constants.ZERO = constants.ZERO || Object.freeze(new Matrix4(ZERO));\n      return constants.ZERO;\n    }\n  }]);\n\n  function Matrix4(array) {\n    var _this;\n\n    _classCallCheck(this, Matrix4);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Matrix4).call(this, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0));\n\n    if (arguments.length === 1 && Array.isArray(array)) {\n      _this.copy(array);\n    } else {\n      _this.identity();\n    }\n\n    return _this;\n  }\n\n  _createClass(Matrix4, [{\n    key: \"copy\",\n    value: function copy(array) {\n      this[0] = array[0];\n      this[1] = array[1];\n      this[2] = array[2];\n      this[3] = array[3];\n      this[4] = array[4];\n      this[5] = array[5];\n      this[6] = array[6];\n      this[7] = array[7];\n      this[8] = array[8];\n      this[9] = array[9];\n      this[10] = array[10];\n      this[11] = array[11];\n      this[12] = array[12];\n      this[13] = array[13];\n      this[14] = array[14];\n      this[15] = array[15];\n      return this.check();\n    }\n  }, {\n    key: \"set\",\n    value: function set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m30;\n      this[4] = m01;\n      this[5] = m11;\n      this[6] = m21;\n      this[7] = m31;\n      this[8] = m02;\n      this[9] = m12;\n      this[10] = m22;\n      this[11] = m32;\n      this[12] = m03;\n      this[13] = m13;\n      this[14] = m23;\n      this[15] = m33;\n      return this.check();\n    }\n  }, {\n    key: \"setRowMajor\",\n    value: function setRowMajor(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m30;\n      this[4] = m01;\n      this[5] = m11;\n      this[6] = m21;\n      this[7] = m31;\n      this[8] = m02;\n      this[9] = m12;\n      this[10] = m22;\n      this[11] = m32;\n      this[12] = m03;\n      this[13] = m13;\n      this[14] = m23;\n      this[15] = m33;\n      return this.check();\n    }\n  }, {\n    key: \"toRowMajor\",\n    value: function toRowMajor(result) {\n      result[0] = this[0];\n      result[1] = this[4];\n      result[2] = this[8];\n      result[3] = this[12];\n      result[4] = this[1];\n      result[5] = this[5];\n      result[6] = this[9];\n      result[7] = this[13];\n      result[8] = this[2];\n      result[9] = this[6];\n      result[10] = this[10];\n      result[11] = this[14];\n      result[12] = this[3];\n      result[13] = this[7];\n      result[14] = this[11];\n      result[15] = this[15];\n      return result;\n    }\n  }, {\n    key: \"identity\",\n    value: function identity() {\n      return this.copy(IDENTITY);\n    }\n  }, {\n    key: \"fromQuaternion\",\n    value: function fromQuaternion(q) {\n      mat4.fromQuat(this, q);\n      return this.check();\n    }\n  }, {\n    key: \"frustum\",\n    value: function frustum(_ref) {\n      var left = _ref.left,\n          right = _ref.right,\n          bottom = _ref.bottom,\n          top = _ref.top,\n          near = _ref.near,\n          far = _ref.far;\n\n      if (far === Infinity) {\n        Matrix4._computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);\n      } else {\n        mat4.frustum(this, left, right, bottom, top, near, far);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lookAt\",\n    value: function lookAt(eye, center, up) {\n      if (arguments.length === 1) {\n        var _eye = eye;\n        eye = _eye.eye;\n        center = _eye.center;\n        up = _eye.up;\n      }\n\n      center = center || [0, 0, 0];\n      up = up || [0, 1, 0];\n      mat4.lookAt(this, eye, center, up);\n      return this.check();\n    }\n  }, {\n    key: \"ortho\",\n    value: function ortho(_ref2) {\n      var left = _ref2.left,\n          right = _ref2.right,\n          bottom = _ref2.bottom,\n          top = _ref2.top,\n          _ref2$near = _ref2.near,\n          near = _ref2$near === void 0 ? 0.1 : _ref2$near,\n          _ref2$far = _ref2.far,\n          far = _ref2$far === void 0 ? 500 : _ref2$far;\n      mat4.ortho(this, left, right, bottom, top, near, far);\n      return this.check();\n    }\n  }, {\n    key: \"orthographic\",\n    value: function orthographic(_ref3) {\n      var _ref3$fovy = _ref3.fovy,\n          fovy = _ref3$fovy === void 0 ? 45 * Math.PI / 180 : _ref3$fovy,\n          _ref3$aspect = _ref3.aspect,\n          aspect = _ref3$aspect === void 0 ? 1 : _ref3$aspect,\n          _ref3$focalDistance = _ref3.focalDistance,\n          focalDistance = _ref3$focalDistance === void 0 ? 1 : _ref3$focalDistance,\n          _ref3$near = _ref3.near,\n          near = _ref3$near === void 0 ? 0.1 : _ref3$near,\n          _ref3$far = _ref3.far,\n          far = _ref3$far === void 0 ? 500 : _ref3$far;\n\n      if (fovy > Math.PI * 2) {\n        throw Error('radians');\n      }\n\n      var halfY = fovy / 2;\n      var top = focalDistance * Math.tan(halfY);\n      var right = top * aspect;\n      return new Matrix4().ortho({\n        left: -right,\n        right: right,\n        bottom: -top,\n        top: top,\n        near: near,\n        far: far\n      });\n    }\n  }, {\n    key: \"perspective\",\n    value: function perspective() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          fovy = _ref4.fovy,\n          _ref4$fov = _ref4.fov,\n          fov = _ref4$fov === void 0 ? 45 * Math.PI / 180 : _ref4$fov,\n          _ref4$aspect = _ref4.aspect,\n          aspect = _ref4$aspect === void 0 ? 1 : _ref4$aspect,\n          _ref4$near = _ref4.near,\n          near = _ref4$near === void 0 ? 0.1 : _ref4$near,\n          _ref4$far = _ref4.far,\n          far = _ref4$far === void 0 ? 500 : _ref4$far;\n\n      fovy = fovy || fov;\n\n      if (fovy > Math.PI * 2) {\n        throw Error('radians');\n      }\n\n      mat4.perspective(this, fovy, aspect, near, far);\n      return this.check();\n    }\n  }, {\n    key: \"determinant\",\n    value: function determinant() {\n      return mat4.determinant(this);\n    }\n  }, {\n    key: \"getScale\",\n    value: function getScale() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n      result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);\n      result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);\n      result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);\n      return result;\n    }\n  }, {\n    key: \"getTranslation\",\n    value: function getTranslation() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n      result[0] = this[12];\n      result[1] = this[13];\n      result[2] = this[14];\n      return result;\n    }\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n      var scaleResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var scale = this.getScale(scaleResult || [-0, -0, -0]);\n      var inverseScale0 = 1 / scale[0];\n      var inverseScale1 = 1 / scale[1];\n      var inverseScale2 = 1 / scale[2];\n      result[0] = this[0] * inverseScale0;\n      result[1] = this[1] * inverseScale1;\n      result[2] = this[2] * inverseScale2;\n      result[3] = 0;\n      result[4] = this[4] * inverseScale0;\n      result[5] = this[5] * inverseScale1;\n      result[6] = this[6] * inverseScale2;\n      result[7] = 0;\n      result[8] = this[8] * inverseScale0;\n      result[9] = this[9] * inverseScale1;\n      result[10] = this[10] * inverseScale2;\n      result[11] = 0;\n      result[12] = 0;\n      result[13] = 0;\n      result[14] = 0;\n      result[15] = 1;\n      return result;\n    }\n  }, {\n    key: \"getRotationMatrix3\",\n    value: function getRotationMatrix3() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0, -0, -0, -0, -0, -0, -0];\n      var scaleResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var scale = this.getScale(scaleResult || [-0, -0, -0]);\n      var inverseScale0 = 1 / scale[0];\n      var inverseScale1 = 1 / scale[1];\n      var inverseScale2 = 1 / scale[2];\n      result[0] = this[0] * inverseScale0;\n      result[1] = this[1] * inverseScale1;\n      result[2] = this[2] * inverseScale2;\n      result[3] = this[4] * inverseScale0;\n      result[4] = this[5] * inverseScale1;\n      result[5] = this[6] * inverseScale2;\n      result[6] = this[8] * inverseScale0;\n      result[7] = this[9] * inverseScale1;\n      result[8] = this[10] * inverseScale2;\n      return result;\n    }\n  }, {\n    key: \"transpose\",\n    value: function transpose() {\n      mat4.transpose(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      mat4.invert(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyLeft\",\n    value: function multiplyLeft(a) {\n      mat4.multiply(this, a, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyRight\",\n    value: function multiplyRight(a) {\n      mat4.multiply(this, this, a);\n      return this.check();\n    }\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(radians) {\n      mat4.rotateX(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(radians) {\n      mat4.rotateY(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateZ\",\n    value: function rotateZ(radians) {\n      mat4.rotateZ(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateXYZ\",\n    value: function rotateXYZ(_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 3),\n          rx = _ref6[0],\n          ry = _ref6[1],\n          rz = _ref6[2];\n\n      return this.rotateX(rx).rotateY(ry).rotateZ(rz);\n    }\n  }, {\n    key: \"rotateAxis\",\n    value: function rotateAxis(radians, axis) {\n      mat4.rotate(this, this, radians, axis);\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(factor) {\n      if (Array.isArray(factor)) {\n        mat4.scale(this, this, factor);\n      } else {\n        mat4.scale(this, this, [factor, factor, factor]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(vec) {\n      mat4.translate(this, this, vec);\n      return this.check();\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(vector, result) {\n      if (vector.length === 4) {\n        result = vec4.transformMat4(result || [-0, -0, -0, -0], vector, this);\n        checkVector(result, 4);\n        return result;\n      }\n\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformAsPoint\",\n    value: function transformAsPoint(vector, result) {\n      var length = vector.length;\n\n      switch (length) {\n        case 2:\n          result = vec2.transformMat4(result || [-0, -0], vector, this);\n          break;\n\n        case 3:\n          result = vec3.transformMat4(result || [-0, -0, -0], vector, this);\n          break;\n\n        default:\n          throw new Error('Illegal vector');\n      }\n\n      checkVector(result, vector.length);\n      return result;\n    }\n  }, {\n    key: \"transformAsVector\",\n    value: function transformAsVector(vector, result) {\n      switch (vector.length) {\n        case 2:\n          result = vec2_transformMat4AsVector(result || [-0, -0], vector, this);\n          break;\n\n        case 3:\n          result = vec3_transformMat4AsVector(result || [-0, -0, -0], vector, this);\n          break;\n\n        default:\n          throw new Error('Illegal vector');\n      }\n\n      checkVector(result, vector.length);\n      return result;\n    }\n  }, {\n    key: \"makeRotationX\",\n    value: function makeRotationX(radians) {\n      return this.identity().rotateX(radians);\n    }\n  }, {\n    key: \"makeTranslation\",\n    value: function makeTranslation(x, y, z) {\n      return this.identity().translate([x, y, z]);\n    }\n  }, {\n    key: \"transformPoint\",\n    value: function transformPoint(vector, result) {\n      deprecated('Matrix4.transformPoint', '3.0');\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformVector\",\n    value: function transformVector(vector, result) {\n      deprecated('Matrix4.transformVector', '3.0');\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformDirection\",\n    value: function transformDirection(vector, result) {\n      deprecated('Matrix4.transformDirection', '3.0');\n      return this.transformAsVector(vector, result);\n    }\n  }], [{\n    key: \"_computeInfinitePerspectiveOffCenter\",\n    value: function _computeInfinitePerspectiveOffCenter(result, left, right, bottom, top, near) {\n      var column0Row0 = 2.0 * near / (right - left);\n      var column1Row1 = 2.0 * near / (top - bottom);\n      var column2Row0 = (right + left) / (right - left);\n      var column2Row1 = (top + bottom) / (top - bottom);\n      var column2Row2 = -1.0;\n      var column2Row3 = -1.0;\n      var column3Row2 = -2.0 * near;\n      result[0] = column0Row0;\n      result[1] = 0.0;\n      result[2] = 0.0;\n      result[3] = 0.0;\n      result[4] = 0.0;\n      result[5] = column1Row1;\n      result[6] = 0.0;\n      result[7] = 0.0;\n      result[8] = column2Row0;\n      result[9] = column2Row1;\n      result[10] = column2Row2;\n      result[11] = column2Row3;\n      result[12] = 0.0;\n      result[13] = 0.0;\n      result[14] = column3Row2;\n      result[15] = 0.0;\n      return result;\n    }\n  }]);\n\n  return Matrix4;\n}(Matrix);\n\nexport { Matrix4 as default };","export default `\\\n\nuniform float lighting_uAmbient;\nuniform float lighting_uDiffuse;\nuniform float lighting_uShininess;\nuniform vec3  lighting_uSpecularColor;\n\nvec3 lighting_getLightColor(vec3 surfaceColor, vec3 light_direction, vec3 view_direction, vec3 normal_worldspace, vec3 color) {\n    vec3 halfway_direction = normalize(light_direction + view_direction);\n    float lambertian = dot(light_direction, normal_worldspace);\n    float specular = 0.0;\n    if (lambertian > 0.0) {\n      float specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);\n      specular = pow(specular_angle, lighting_uShininess);\n    }\n    lambertian = max(lambertian, 0.0);\n    return (lambertian * lighting_uDiffuse * surfaceColor + specular * lighting_uSpecularColor) * color;\n}\n\nvec3 lighting_getLightColor(vec3 surfaceColor, vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {\n  vec3 lightColor = surfaceColor;\n\n  if (lighting_uEnabled) {\n    vec3 view_direction = normalize(cameraPosition - position_worldspace);\n    lightColor = lighting_uAmbient * surfaceColor * lighting_uAmbientLight.color;\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uPointLightCount) {\n        break;\n      }\n      PointLight pointLight = lighting_uPointLight[i];\n      vec3 light_position_worldspace = pointLight.position;\n      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);\n      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\n    }\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uDirectionalLightCount) {\n        break;\n      }\n      DirectionalLight directionalLight = lighting_uDirectionalLight[i];\n      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\n    }\n  }\n  return lightColor;\n}\n\nvec3 lighting_getSpecularLightColor(vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {\n  vec3 lightColor = vec3(0, 0, 0);\n  vec3 surfaceColor = vec3(0, 0, 0);\n\n  if (lighting_uEnabled) {\n    vec3 view_direction = normalize(cameraPosition - position_worldspace);\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uPointLightCount) {\n        break;\n      }\n      PointLight pointLight = lighting_uPointLight[i];\n      vec3 light_position_worldspace = pointLight.position;\n      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);\n      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\n    }\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uDirectionalLightCount) {\n        break;\n      }\n      DirectionalLight directionalLight = lighting_uDirectionalLight[i];\n      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\n    }\n  }\n  return lightColor;\n}\n`;\n","import lights from '../lights/lights';\nimport lightingShader from './phong-lighting.glsl';\n\nconst gouraudLighting = {\n  name: 'gouraud-lighting',\n  dependencies: [lights],\n  vs: lightingShader,\n  defines: {\n    LIGHTING_VERTEX: 1\n  },\n  getUniforms\n};\n\nconst phongLighting = {\n  name: 'phong-lighting',\n  dependencies: [lights],\n  fs: lightingShader,\n  defines: {\n    LIGHTING_FRAGMENT: 1\n  },\n  getUniforms\n};\n\nconst INITIAL_MODULE_OPTIONS = {};\n\nfunction getMaterialUniforms(material) {\n  const {ambient = 0.35, diffuse = 0.6, shininess = 32, specularColor = [30, 30, 30]} = material;\n\n  return {\n    lighting_uAmbient: ambient,\n    lighting_uDiffuse: diffuse,\n    lighting_uShininess: shininess,\n    lighting_uSpecularColor: specularColor.map(x => x / 255)\n  };\n}\n\nfunction getUniforms(opts = INITIAL_MODULE_OPTIONS) {\n  if (!('material' in opts)) {\n    return {};\n  }\n\n  const {material} = opts;\n\n  if (!material) {\n    return {lighting_uEnabled: false};\n  }\n\n  return getMaterialUniforms(material);\n}\n\nexport {gouraudLighting, phongLighting};\n","/* global window, document */\n\n// Light class implementing the AnimationLoop interface\n// use by examples w/o creating a gl context\nexport class MiniAnimationLoop {\n  static getInfo() {\n    return '';\n  }\n\n  start() {}\n\n  stop() {}\n\n  delete() {}\n\n  onFinalize() {}\n\n  _setDisplay() {}\n\n  _getCanvas(props = {}) {\n    let canvas;\n    if (props.canvas) {\n      canvas = document.getElementById(props.canvas);\n      const dpr = window.devicePixelRatio || 1;\n      canvas.height = canvas.clientHeight * dpr;\n      canvas.width = canvas.clientWidth * dpr;\n    } else {\n      canvas = document.createElement('canvas');\n      canvas.width = 800;\n      canvas.height = 600;\n      document.body.appendChild(canvas);\n    }\n\n    return canvas;\n  }\n\n  _getContainer(props = {}) {\n    if (this.container) {\n      return this.container;\n    }\n\n    let width;\n    let height;\n\n    this.container = document.createElement('div');\n\n    if (props.canvas) {\n      const canvas = document.getElementById(props.canvas);\n      this.parent = canvas.parentElement;\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n      this.container.style.position = 'relative';\n      this.container.style.top = `-${height}px`;\n    } else {\n      this.parent = document.body;\n      width = 800;\n      height = 800;\n    }\n\n    this.container.style.width = `${width}px`;\n    this.container.style.height = `${height}px`;\n    this.parent.appendChild(this.container);\n\n    return this.container;\n  }\n\n  _removeContainer(props = {}) {\n    this.parent.removeChild(this.container);\n  }\n}\n\n// Create a deterministic pseudorandom number generator\nexport function getRandom() {\n  let s = 1;\n  let c = 1;\n  return () => {\n    s = Math.sin(c * 17.23);\n    c = Math.cos(s * 27.92);\n    return fract(Math.abs(s * c) * 1432.71);\n  };\n}\n\nfunction fract(n) {\n  return n - Math.floor(n);\n}\n","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.array.is-array\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _construct from \"@babel/runtime/helpers/esm/construct\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport assert from './assert';\nvar RADIANS_TO_DEGREES = 1 / Math.PI * 180;\nvar DEGREES_TO_RADIANS = 1 / 180 * Math.PI;\nvar config = {};\nconfig.EPSILON = 1e-12;\nconfig.debug = false;\nconfig.precision = 4;\nconfig.printTypes = false;\nconfig.printDegrees = false;\nconfig.printRowMajor = true;\nexport { config };\nexport function configure() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  for (var key in options) {\n    assert(key in config);\n    config[key] = options[key];\n  }\n\n  return config;\n}\n\nfunction round(value) {\n  return Math.round(value / config.EPSILON) * config.EPSILON;\n}\n\nexport function formatValue(value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$precision = _ref.precision,\n      precision = _ref$precision === void 0 ? config.precision || 4 : _ref$precision;\n\n  value = round(value);\n  return \"\".concat(parseFloat(value.toPrecision(precision)));\n}\nexport function isArray(value) {\n  return Array.isArray(value) || ArrayBuffer.isView(value) && value.length !== undefined;\n}\n\nfunction duplicateArray(array) {\n  return array.clone ? array.clone() : new Array(array.length);\n}\n\nexport function clone(array) {\n  return array.clone ? array.clone() : _construct(Array, _toConsumableArray(array));\n}\n\nfunction map(value, func, result) {\n  if (isArray(value)) {\n    result = result || duplicateArray(value);\n\n    for (var i = 0; i < result.length && i < value.length; ++i) {\n      result[i] = func(value[i], i, result);\n    }\n\n    return result;\n  }\n\n  return func(value);\n}\n\nexport function toRadians(degrees) {\n  return radians(degrees);\n}\nexport function toDegrees(radians) {\n  return degrees(radians);\n}\nexport function radians(degrees, result) {\n  return map(degrees, function (degrees) {\n    return degrees * DEGREES_TO_RADIANS;\n  }, result);\n}\nexport function degrees(radians, result) {\n  return map(radians, function (radians) {\n    return radians * RADIANS_TO_DEGREES;\n  }, result);\n}\nexport function sin(radians) {\n  return map(radians, function (angle) {\n    return Math.sin(angle);\n  });\n}\nexport function cos(radians) {\n  return map(radians, function (angle) {\n    return Math.cos(angle);\n  });\n}\nexport function tan(radians) {\n  return map(radians, function (angle) {\n    return Math.tan(angle);\n  });\n}\nexport function asin(radians) {\n  return map(radians, function (angle) {\n    return Math.asin(angle);\n  });\n}\nexport function acos(radians) {\n  return map(radians, function (angle) {\n    return Math.acos(angle);\n  });\n}\nexport function atan(radians) {\n  return map(radians, function (angle) {\n    return Math.atan(angle);\n  });\n}\nexport function clamp(value, min, max) {\n  return map(value, function (value) {\n    return Math.max(min, Math.min(max, value));\n  });\n}\nexport function lerp(a, b, t) {\n  if (isArray(a)) {\n    return a.map(function (ai, i) {\n      return lerp(ai, b[i], t);\n    });\n  }\n\n  return t * b + (1 - t) * a;\n}\nexport function equals(a, b, epsilon) {\n  var oldEpsilon = config.EPSILON;\n\n  if (epsilon) {\n    config.EPSILON = epsilon;\n  }\n\n  try {\n    if (a === b) {\n      return true;\n    }\n\n    if (isArray(a) && isArray(b)) {\n      if (a.length !== b.length) {\n        return false;\n      }\n\n      for (var i = 0; i < a.length; ++i) {\n        if (!equals(a[i], b[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    if (a && _typeof(a) === 'object' && a.equals) {\n      return a.equals(b);\n    }\n\n    if (b && _typeof(b) === 'object' && b.equals) {\n      return b.equals(a);\n    }\n\n    return Math.abs(a - b) <= config.EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n  } finally {\n    config.EPSILON = oldEpsilon;\n  }\n}\nexport function exactEquals(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a && _typeof(a) === 'object' && b && _typeof(b) === 'object') {\n    if (a.constructor !== b.constructor) {\n      return false;\n    }\n\n    if (a.exactEquals) {\n      return a.exactEquals(b);\n    }\n  }\n\n  if (isArray(a) && isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; ++i) {\n      if (!exactEquals(a[i], b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\nexport function withEpsilon(EPSILON, func) {\n  var oldPrecision = config.EPSILON;\n  config.EPSILON = EPSILON;\n  var value;\n\n  try {\n    value = func();\n  } finally {\n    config.EPSILON = oldPrecision;\n  }\n\n  return value;\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","export default `\\\n#if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))\n\nstruct AmbientLight {\n vec3 color;\n};\n\nstruct PointLight {\n vec3 color;\n vec3 position;\n\n // Constant-Linear-Exponential\n vec3 attenuation;\n};\n\nstruct DirectionalLight {\n  vec3 color;\n  vec3 direction;\n};\n\nuniform AmbientLight lighting_uAmbientLight;\nuniform PointLight lighting_uPointLight[MAX_LIGHTS];\nuniform DirectionalLight lighting_uDirectionalLight[MAX_LIGHTS];\nuniform int lighting_uPointLightCount;\nuniform int lighting_uDirectionalLightCount;\n\nuniform bool lighting_uEnabled;\n\nfloat getPointLightAttenuation(PointLight pointLight, float distance) {\n  return pointLight.attenuation.x\n       + pointLight.attenuation.y * distance\n       + pointLight.attenuation.z * distance * distance;\n}\n\n#endif\n`;\n","import lightingShader from './lights.glsl';\n\nexport default {\n  name: 'lights',\n  vs: lightingShader,\n  fs: lightingShader,\n  getUniforms,\n  defines: {\n    MAX_LIGHTS: 3\n  }\n};\n\nconst INITIAL_MODULE_OPTIONS = {};\n\n// Take color 0-255 and intensity as input and output 0.0-1.0 range\nfunction convertColor({color = [0, 0, 0], intensity = 1.0} = {}) {\n  return color.map(component => (component * intensity) / 255.0);\n}\n\nfunction getLightSourceUniforms({ambientLight, pointLights = [], directionalLights = []}) {\n  const lightSourceUniforms = {};\n\n  if (ambientLight) {\n    lightSourceUniforms['lighting_uAmbientLight.color'] = convertColor(ambientLight);\n  } else {\n    lightSourceUniforms['lighting_uAmbientLight.color'] = [0, 0, 0];\n  }\n\n  pointLights.forEach((pointLight, index) => {\n    lightSourceUniforms[`lighting_uPointLight[${index}].color`] = convertColor(pointLight);\n    lightSourceUniforms[`lighting_uPointLight[${index}].position`] = pointLight.position;\n    lightSourceUniforms[`lighting_uPointLight[${index}].attenuation`] = pointLight.attenuation || [\n      1,\n      0,\n      0\n    ];\n  });\n  lightSourceUniforms.lighting_uPointLightCount = pointLights.length;\n\n  directionalLights.forEach((directionalLight, index) => {\n    lightSourceUniforms[`lighting_uDirectionalLight[${index}].color`] = convertColor(\n      directionalLight\n    );\n    lightSourceUniforms[`lighting_uDirectionalLight[${index}].direction`] =\n      directionalLight.direction;\n  });\n  lightSourceUniforms.lighting_uDirectionalLightCount = directionalLights.length;\n\n  return lightSourceUniforms;\n}\n\n// eslint-disable-next-line complexity\nfunction getUniforms(opts = INITIAL_MODULE_OPTIONS) {\n  // Specify lights separately\n  if ('lightSources' in opts) {\n    const {ambientLight, pointLights, directionalLights} = opts.lightSources || {};\n    const hasLights =\n      ambientLight ||\n      (pointLights && pointLights.length > 0) ||\n      (directionalLights && directionalLights.length > 0);\n\n    if (!hasLights) {\n      return {lighting_uEnabled: false};\n    }\n\n    return Object.assign(\n      {},\n      getLightSourceUniforms({ambientLight, pointLights, directionalLights}),\n      {\n        lighting_uEnabled: true\n      }\n    );\n  }\n\n  // Support for array of lights. Type of light is detected by type field\n  if ('lights' in opts) {\n    const lightSources = {pointLights: [], directionalLights: []};\n    for (const light of opts.lights || []) {\n      switch (light.type) {\n        case 'ambient':\n          // Note: Only uses last ambient light\n          // TODO - add ambient light sources on CPU?\n          lightSources.ambientLight = light;\n          break;\n        case 'directional':\n          lightSources.directionalLights.push(light);\n          break;\n        case 'point':\n          lightSources.pointLights.push(light);\n          break;\n        default:\n        // eslint-disable-next-line\n        // console.warn(light.type);\n      }\n    }\n\n    // Call the `opts.lightSources`` version\n    return getUniforms({lightSources});\n  }\n\n  return {};\n}\n","export function vec2_transformMat4AsVector(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  var w = m[3] * x + m[7] * y || 1.0;\n  out[0] = (m[0] * x + m[4] * y) / w;\n  out[1] = (m[1] * x + m[5] * y) / w;\n  return out;\n}\nexport function vec3_transformMat4AsVector(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n  return out;\n}\nexport function vec3_transformMat2(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  out[2] = a[2];\n  return out;\n}\nexport function vec4_transformMat2(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\nexport function vec4_transformMat3(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  out[0] = m[0] * x + m[3] * y + m[6] * z;\n  out[1] = m[1] * x + m[4] * y + m[7] * z;\n  out[2] = m[2] * x + m[5] * y + m[8] * z;\n  out[3] = a[3];\n  return out;\n}","import \"core-js/modules/es6.typed.float32-array\";\n\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","import getPrototypeOf from \"./getPrototypeOf\";\nimport setPrototypeOf from \"./setPrototypeOf\";\nimport isNativeFunction from \"./isNativeFunction\";\nimport construct from \"./construct\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-finite\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.typed.float32-array\";\nimport \"core-js/modules/es6.array.is-array\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport { config, formatValue, equals as _equals, isArray } from '../../lib/common';\n\nvar MathArray = function (_Array) {\n  _inherits(MathArray, _Array);\n\n  function MathArray() {\n    _classCallCheck(this, MathArray);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MathArray).apply(this, arguments));\n  }\n\n  _createClass(MathArray, [{\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor().copy(this);\n    }\n  }, {\n    key: \"from\",\n    value: function from(arrayOrObject) {\n      return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : this.fromObject(arrayOrObject);\n    }\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(array) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = array[i + offset];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"to\",\n    value: function to(arrayOrObject) {\n      if (arrayOrObject === this) {\n        return this;\n      }\n\n      return isArray(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);\n    }\n  }, {\n    key: \"toTarget\",\n    value: function toTarget(target) {\n      return target ? this.to(target) : this;\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        array[offset + i] = this[i];\n      }\n\n      return array;\n    }\n  }, {\n    key: \"toFloat32Array\",\n    value: function toFloat32Array() {\n      return new Float32Array(this);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.formatString(config);\n    }\n  }, {\n    key: \"formatString\",\n    value: function formatString(opts) {\n      var string = '';\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        string += (i > 0 ? ', ' : '') + formatValue(this[i], opts);\n      }\n\n      return \"\".concat(opts.printTypes ? this.constructor.name : '', \"[\").concat(string, \"]\");\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(array) {\n      if (!array || this.length !== array.length) {\n        return false;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        if (!_equals(this[i], array[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"exactEquals\",\n    value: function exactEquals(array) {\n      if (!array || this.length !== array.length) {\n        return false;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        if (this[i] !== array[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = -this[i];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lerp\",\n    value: function lerp(a, b, t) {\n      if (t === undefined) {\n        t = b;\n        b = a;\n        a = this;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        var ai = a[i];\n        this[i] = ai + t * (b[i] - ai);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"min\",\n    value: function min(vector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(vector[i], this[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"max\",\n    value: function max(vector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.max(vector[i], this[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"clamp\",\n    value: function clamp(minVector, maxVector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(Math.max(this[i], minVector[i]), maxVector[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"add\",\n    value: function add() {\n      for (var _len = arguments.length, vectors = new Array(_len), _key = 0; _key < _len; _key++) {\n        vectors[_key] = arguments[_key];\n      }\n\n      for (var _i = 0, _vectors = vectors; _i < _vectors.length; _i++) {\n        var vector = _vectors[_i];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] += vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract() {\n      for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        vectors[_key2] = arguments[_key2];\n      }\n\n      for (var _i2 = 0, _vectors2 = vectors; _i2 < _vectors2.length; _i2++) {\n        var vector = _vectors2[_i2];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] -= vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(_scale) {\n      if (Array.isArray(_scale)) {\n        return this.multiply(_scale);\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= _scale;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(a) {\n      return this.subtract(a);\n    }\n  }, {\n    key: \"setScalar\",\n    value: function setScalar(a) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = a;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"addScalar\",\n    value: function addScalar(a) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] += a;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"subScalar\",\n    value: function subScalar(a) {\n      return this.addScalar(-a);\n    }\n  }, {\n    key: \"multiplyScalar\",\n    value: function multiplyScalar(scalar) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= scalar;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"divideScalar\",\n    value: function divideScalar(a) {\n      return this.scale(1 / a);\n    }\n  }, {\n    key: \"clampScalar\",\n    value: function clampScalar(min, max) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(Math.max(this[i], min), max);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"multiplyByScalar\",\n    value: function multiplyByScalar(scalar) {\n      return this.scale(scalar);\n    }\n  }, {\n    key: \"check\",\n    value: function check() {\n      if (config.debug && !this.validate(this)) {\n        throw new Error(\"math.gl: \".concat(this.constructor.name, \" some fields set to invalid numbers'\"));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      var valid = this.length === this.ELEMENTS;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        valid = valid && Number.isFinite(this[i]);\n      }\n\n      return valid;\n    }\n  }, {\n    key: \"elements\",\n    get: function get() {\n      return this;\n    }\n  }]);\n\n  return MathArray;\n}(_wrapNativeSuper(Array));\n\nexport { MathArray as default };"],"sourceRoot":""}