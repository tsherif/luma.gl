{"version":3,"sources":["webpack:///../node_modules/math.gl/dist/esm/index.js","webpack:///../examples/getting-started/instanced-transform/app.js","webpack:///./templates/getting-started/example-instanced-transform.jsx","webpack:///../node_modules/@math.gl/core/dist/esm/lib/assert.js","webpack:///../node_modules/gl-matrix/esm/vec4.js","webpack:///../modules/engine/src/geometries/cube-geometry.js","webpack:///./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack:///../modules/shadertools/src/utils/shader-utils.js","webpack:///../modules/engine/src/transform/buffer-transform.js","webpack:///../modules/webgl/src/glsl-utils/get-shader-version.js","webpack:///../modules/shadertools/src/modules/transform/transform.js","webpack:///../modules/engine/src/transform/transform-shader-utils.js","webpack:///../modules/engine/src/transform/texture-transform.js","webpack:///../modules/engine/src/transform/transform.js","webpack:///../node_modules/gl-matrix/esm/vec3.js","webpack:///./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///../modules/engine/src/geometry/geometry.js","webpack:///../node_modules/gl-matrix/esm/mat3.js","webpack:///../node_modules/gl-matrix/esm/quat.js","webpack:///../node_modules/@math.gl/core/dist/esm/classes/quaternion.js","webpack:///./node_modules/@babel/runtime/helpers/esm/construct.js","webpack:///../node_modules/@math.gl/core/dist/esm/classes/base/vector.js","webpack:///../node_modules/@math.gl/core/dist/esm/classes/vector3.js","webpack:///../modules/shadertools/src/modules/phong-lighting/phong-lighting.glsl.js","webpack:///../modules/shadertools/src/modules/phong-lighting/phong-lighting.js","webpack:///../node_modules/@math.gl/core/dist/esm/index.js","webpack:///../examples/utils/index.js","webpack:///./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","webpack:///./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","webpack:///../node_modules/@math.gl/core/dist/esm/classes/base/math-array.js","webpack:///../node_modules/@math.gl/core/dist/esm/lib/validators.js","webpack:///./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack:///../node_modules/@math.gl/core/dist/esm/classes/base/matrix.js","webpack:///../node_modules/gl-matrix/esm/mat4.js","webpack:///../node_modules/gl-matrix/esm/vec2.js","webpack:///../node_modules/@math.gl/core/dist/esm/classes/matrix4.js","webpack:///./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack:///../node_modules/@math.gl/core/dist/esm/lib/gl-matrix-extras.js","webpack:///../modules/shadertools/src/modules/lights/lights.glsl.js","webpack:///../modules/shadertools/src/modules/lights/lights.js","webpack:///../node_modules/gl-matrix/esm/common.js","webpack:///../node_modules/@math.gl/core/dist/esm/lib/common.js"],"names":["PI2","Math","random","getRandom","AppAnimationLoop","getInfo","onInitialize","gl","this","demoNotSupported","isWebGL2","setParameters","depthTest","depthFunc","LEQUAL","offsetBuffer","Float32Array","axisBufferData","i","vi","x","y","z","l","axisBuffer","rotationBuffer","texture","data","eyePosition","viewMatrix","eye","projectionMatrix","transform","vs","sourceBuffers","rotations","feedbackMap","elementCount","model","fs","geometry","attributes","offsets","divisor","axes","uniforms","uTexture","uEyePosition","uView","modules","moduleSettings","material","specularColor","lights","type","color","position","instanceCount","onRender","aspect","fov","clear","depth","uProjection","onFinalize","getAltText","AnimationLoop","window","animationLoop","Example","render","pageContext","exampleConfig","React","Component","assert","condition","message","Error","concat","clone","a","out","fromValues","w","copy","set","add","b","scale","length","sqrt","squaredLength","normalize","len","dot","lerp","t","ax","ay","az","aw","transformMat4","m","transformQuat","q","qx","qy","qz","qw","ix","iy","iz","iw","exactEquals","equals","a0","a1","a2","a3","b0","b1","b2","b3","abs","max","vec","CUBE_INDICES","Uint16Array","CUBE_POSITIONS","CUBE_NORMALS","CUBE_TEX_COORDS","ATTRIBUTES","POSITION","size","value","NORMAL","TEXCOORD_0","CubeGeometry","props","id","uid","indices","Geometry","_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","writable","configurable","FS100","FS_GLES","FS300","getQualifierDetails","line","qualifiers","Array","words","qualifier","definition","name","getPassthroughFS","version","input","inputType","output","outputValue","variable","convertToVec4","BufferTransform","currentIndex","varyings","bindings","resources","_initialize","setupResources","binding","_setupTransformFeedback","updateModelProps","getDrawOptions","opts","transformFeedback","swap","update","_setupBuffers","getBuffer","feedbackBuffers","bufferOrParams","varyingName","getData","buffer","delete","_getFeedbackBuffers","feedbackName","sourceName","bufferOrRef","sourceBuffer","byteLength","usage","accessor","_createNewBuffer","bufferName","_updateBindings","program","buffers","_updateBinding","_swapBuffers","nextIndex","dstName","_getNextIndex","getShaderVersion","source","v","parseInt","Number","SAMPLER_UNIFORM_PREFIX","SIZE_UNIFORM_PREFIX","VS_POS_VARIABLE","updateForTextures","sourceTextureMap","targetTextureVarying","targetTexture","sourceCount","targetTextureType","samplerTextureMap","updatedVs","finalInject","vsLines","updateVsLines","updated","attributeData","getAttributeDefinition","textureMap","updatedLine","textureName","samplerName","sizeName","uniformDeclerations","getSamplerDeclerations","channels","typeToChannelSuffix","sampleInstruction","inject","processAttributeDefinition","combineInjects","qualaiferDetails","getVaryingType","SRC_TEX_PARAMETER_OVERRIDES","GL","TextureTransform","_swapTexture","updatedModelProps","_processVertexShader","sourceTextures","framebuffer","parameters","discard","hasSourceTextures","sizeUniforms","width","height","getSizeUniforms","_setupTextures","getTargetTexture","packed","pixels","readPixelsToArray","ArrayType","channelCount","typeToChannelCount","packedPixels","packCount","j","getFramebuffer","ownTexture","elementIDBuffer","_targetTextureVarying","hasTargetTexture","_createTargetTexture","textureOrReference","refTexture","_targetRefTexName","_sourceTextures","_targetTexture","_updateElementIDBuffer","elementIds","array","setData","_swapTextures","attachments","resizeAttachments","_setSourceTextureParameters","index","_createNewTexture","cloneTextureFrom","pixelStore","combinedInject","Transform","bufferTransform","textureTransform","isSupported","run","clearRenderTarget","updatedOpts","_updateDrawOptions","swapped","resourceTransform","setVertexCount","_buildResourceTransforms","_updateModelProps","drawMode","vertexCount","updatedProps","isObjectEmpty","canCreateBufferTransform","canCreateTextureTransform","cross","bx","by","bz","transformMat3","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","rotateX","c","p","r","cos","sin","rotateY","rotateZ","angle","tempA","tempB","cosine","PI","acos","_slicedToArray","arr","isArray","Symbol","iterator","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","DRAW_MODE","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","userData","_setAttributes","_calculateVertexCount","getVertexCount","getAttributes","_print","ArrayBuffer","attribute","attributeName","isIndexed","setAxisAngle","axis","rad","s","bw","omega","cosom","sinom","scale0","scale1","fromMat3","fRoot","fTrace","k","vec4","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","vec3","IDENTITY_QUATERNION","_MathArray","Quaternion","_this","arguments","key","check","fromAxisRotation","vectorA","vectorB","invDot","start","target","ratio","_arguments$","_arguments$$start","_arguments","slice","vector","result","lengthSquared","multiplyLeft","multiplyRight","get","_construct","Parent","args","Class","Reflect","construct","sham","Proxy","Date","e","isNativeReflectConstruct","apply","instance","Function","bind","Vector","ELEMENTS","mathArray","distanceSquared","dist","product","magnitude","_len","vectors","_key","_vectors","_len2","_key2","_i2","_vectors2","distance","subtract","multiply","multiplyScalar","ORIGIN","_Vector","Vector3","debug","object","_ref","radians","_ref$origin","origin","_ref2","_ref2$origin","_ref3","_ref3$origin","matrix4","transformAsPoint","matrix3","matrix2","quaternion","phongLighting","dependencies","defines","LIGHTING_FRAGMENT","getUniforms","INITIAL_MODULE_OPTIONS","ambient","diffuse","shininess","lighting_uAmbient","lighting_uDiffuse","lighting_uShininess","lighting_uSpecularColor","getMaterialUniforms","lighting_uEnabled","globals","self","global","mathgl","config","MiniAnimationLoop","stop","waitForRender","Promise","_setDisplay","_getCanvas","canvas","document","dpr","_getContainer","container","parent","style","top","appendChild","_removeContainer","removeChild","n","_cache","Map","fn","indexOf","has","Wrapper","getPrototypeOf","enumerable","setPrototypeOf","_Array","MathArray","arrayOrObject","fromObject","offset","toArray","toObject","to","formatString","string","printTypes","ai","min","minVector","maxVector","_scale","addScalar","scalar","validate","valid","isFinite","checkNumber","checkVector","callerName","validateVector","map","deprecated","method","console","warn","_getPrototypeOf","o","__proto__","Matrix","printRowMajor","row","RANK","col","columnIndex","fill","firstIndex","columnVector","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","fovy","near","far","nf","f","tan","Infinity","center","up","x0","x1","x2","y0","y1","y2","z0","z1","z2","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","identity","IDENTITY","freeze","ZERO","INDICES","COL0ROW0","COL0ROW1","COL0ROW2","COL0ROW3","COL1ROW0","COL1ROW1","COL1ROW2","COL1ROW3","COL2ROW0","COL2ROW1","COL2ROW2","COL2ROW3","COL3ROW0","COL3ROW1","COL3ROW2","COL3ROW3","constants","_Matrix","Matrix4","m00","m10","m20","m30","m01","m11","m21","m31","m02","m12","m22","m32","m03","m13","m23","m33","xx","yx","yy","zx","zy","zz","wx","wy","wz","left","right","bottom","_computeInfinitePerspectiveOffCenter","rl","tb","_eye","_ref2$near","_ref2$far","lr","bt","_ref3$fovy","_ref3$aspect","_ref3$focalDistance","focalDistance","_ref3$near","_ref3$far","halfY","ortho","_ref4","_ref4$fov","_ref4$aspect","_ref4$near","_ref4$far","scaleResult","getScale","inverseScale0","inverseScale1","inverseScale2","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","_ref5","_ref6","rx","ry","rz","b12","b20","b21","b22","factor","translate","transformAsVector","column0Row0","column1Row1","column2Row0","column2Row1","column3Row2","_possibleConstructorReturn","ReferenceError","_setPrototypeOf","vec2_transformMat4AsVector","vec3_transformMat4AsVector","vec3_transformMat2","ambientLight","pointLights","directionalLights","lightSourceUniforms","convertColor","pointLight","directionalLight","getLightSourceUniforms","lightSources","light","MAX_LIGHTS","intensity","component","EPSILON","ARRAY_TYPE","RANDOM","DEGREES_TO_RADIANS","formatValue","_ref$precision","precision","round","parseFloat","toPrecision","isView","func","degrees","epsilon","oldEpsilon","printDegrees"],"mappings":"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","file":"component---templates-getting-started-example-instanced-transform-jsx-a926641613f188e3b10e.js","sourcesContent":["export * from '@math.gl/core';","import {AnimationLoop, Model, Transform, CubeGeometry} from '@luma.gl/engine';\nimport {Buffer, Texture2D, clear} from '@luma.gl/webgl';\nimport {setParameters, isWebGL2} from '@luma.gl/gltools';\nimport {phongLighting} from '@luma.gl/shadertools';\nimport {Matrix4} from 'math.gl';\nimport {getRandom} from '../../utils';\n\nconst INFO_HTML = `\n<p>\nTransform feedback on an instanced cube\n</p>\n`;\n\nconst ALT_TEXT = \"THIS DEMO REQUIRES WEBGL 2, BUT YOUR BROWSER DOESN'T SUPPORT IT\";\n\nconst PI2 = Math.PI * 2;\n\nconst random = getRandom();\n\nconst transformVs = `\n  attribute float rotations;\n\n  varying float vRotation;\n\n  void main() {\n    vRotation = rotations + 0.01;\n  }\n`;\n\nconst vs = `\\\n  attribute vec3 positions;\n  attribute vec3 normals;\n  attribute vec2 texCoords;\n  attribute vec2 offsets;\n  attribute vec3 axes;\n  attribute float rotations;\n\n  uniform mat4 uView;\n  uniform mat4 uProjection;\n\n  varying vec3 vPosition;\n  varying vec3 vNormal;\n  varying vec2 vUV;\n\n  void main(void) {\n    float s = sin(rotations);\n    float c = cos(rotations);\n    float t = 1.0 - c;\n    float xt = axes.x * t;\n    float yt = axes.y * t;\n    float zt = axes.z * t;\n    float xs = axes.x * s;\n    float ys = axes.y * s;\n    float zs = axes.z * s;\n\n    mat3 rotationMat = mat3(\n        axes.x * xt + c,\n        axes.y * xt + zs,\n        axes.z * xt - ys,\n        axes.x * yt - zs,\n        axes.y * yt + c,\n        axes.z * yt + xs,\n        axes.x * zt + ys,\n        axes.y * zt - xs,\n        axes.z * zt + c\n    );\n\n    vPosition = rotationMat * positions;\n    vPosition.xy += offsets;\n    vNormal = rotationMat * normals;\n    vUV = texCoords;\n    gl_Position = uProjection * uView * vec4(vPosition, 1.0);\n  }\n`;\n\nconst fs = `\\\n  precision highp float;\n\n  uniform sampler2D uTexture;\n  uniform vec3 uEyePosition;\n\n  varying vec3 vPosition;\n  varying vec3 vNormal;\n  varying vec2 vUV;\n\n  void main(void) {\n    vec3 materialColor = texture2D(uTexture, vec2(vUV.x, 1.0 - vUV.y)).rgb;\n    vec3 surfaceColor = lighting_getLightColor(materialColor, uEyePosition, vPosition, normalize(vNormal));\n\n    gl_FragColor = vec4(surfaceColor, 1.0);\n  }\n`;\n\nexport default class AppAnimationLoop extends AnimationLoop {\n  static getInfo() {\n    return INFO_HTML;\n  }\n\n  onInitialize({gl}) {\n    this.demoNotSupported = !isWebGL2(gl);\n    if (this.demoNotSupported) {\n      return {};\n    }\n\n    setParameters(gl, {\n      depthTest: true,\n      depthFunc: gl.LEQUAL\n    });\n\n    const offsetBuffer = new Buffer(gl, new Float32Array([3, 3, -3, 3, 3, -3, -3, -3]));\n\n    // Create a buffer consisting of 4 normalized vectors\n    const axisBufferData = new Float32Array(12);\n    for (let i = 0; i < 4; ++i) {\n      const vi = i * 3;\n      const x = random();\n      const y = random();\n      const z = random();\n      const l = Math.sqrt(x * x + y * y + z * z);\n\n      axisBufferData[vi] = x / l;\n      axisBufferData[vi + 1] = y / l;\n      axisBufferData[vi + 2] = z / l;\n    }\n    const axisBuffer = new Buffer(gl, axisBufferData);\n\n    const rotationBuffer = new Buffer(\n      gl,\n      new Float32Array([random() * PI2, random() * PI2, random() * PI2, random() * PI2])\n    );\n\n    const texture = new Texture2D(gl, {\n      data: 'vis-logo.png'\n    });\n\n    const eyePosition = [0, 0, 10];\n    const viewMatrix = new Matrix4().lookAt({eye: eyePosition});\n    const projectionMatrix = new Matrix4();\n\n    const transform = new Transform(gl, {\n      vs: transformVs,\n      sourceBuffers: {\n        rotations: rotationBuffer\n      },\n      feedbackMap: {\n        rotations: 'vRotation'\n      },\n      elementCount: 4\n    });\n\n    const model = new Model(gl, {\n      vs,\n      fs,\n      geometry: new CubeGeometry(),\n      attributes: {\n        offsets: [offsetBuffer, {divisor: 1}],\n        axes: [axisBuffer, {divisor: 1}],\n        rotations: [rotationBuffer, {divisor: 1}]\n      },\n      uniforms: {\n        uTexture: texture,\n        uEyePosition: eyePosition,\n        uView: viewMatrix\n      },\n      modules: [phongLighting],\n      moduleSettings: {\n        material: {\n          specularColor: [255, 255, 255]\n        },\n        lights: [\n          {\n            type: 'ambient',\n            color: [255, 255, 255]\n          },\n          {\n            type: 'point',\n            color: [255, 255, 255],\n            position: [4, 8, 4]\n          }\n        ]\n      },\n      instanceCount: 4\n    });\n\n    return {\n      model,\n      transform,\n      projectionMatrix\n    };\n  }\n\n  onRender({gl, aspect, model, transform, projectionMatrix}) {\n    if (this.demoNotSupported) {\n      return;\n    }\n\n    projectionMatrix.perspective({fov: Math.PI / 3, aspect});\n\n    transform.run();\n\n    clear(gl, {color: [0, 0, 0, 1], depth: true});\n    model\n      .setAttributes({rotations: [transform.getBuffer('vRotation'), {divisor: 1}]})\n      .setUniforms({uProjection: projectionMatrix})\n      .draw();\n\n    transform.swap();\n  }\n\n  onFinalize({model, transform}) {\n    if (this.demoNotSupported) {\n      return;\n    }\n    transform.delete();\n    model.delete();\n  }\n\n  getAltText() {\n    return ALT_TEXT;\n  }\n}\n\n/* global window */\nif (typeof window !== 'undefined' && !window.website) {\n  const animationLoop = new AppAnimationLoop();\n  animationLoop.start();\n}\n","import React from 'react';\nimport AnimationLoopExamplePage from '../../src/components/animation-loop-example-page';\nimport AnimationLoop from '../../../examples/getting-started/instanced-transform/app';\n\nexport default class Example extends React.Component {\n  render() {\n    const { pageContext } = this.props;\n    const exampleConfig = (pageContext && pageContext.exampleConfig) || {};\n    return (\n      <AnimationLoopExamplePage AnimationLoop={AnimationLoop} exampleConfig={exampleConfig} />\n    );\n  }\n}\n","export default function assert(condition, message) {\n  if (!condition) {\n    throw new Error(\"math.gl assertion \".concat(message));\n  }\n}","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import Geometry from '../geometry/geometry';\nimport {uid} from '@luma.gl/webgl';\n\n// prettier-ignore\nconst CUBE_INDICES = new Uint16Array([\n  0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13,\n  14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23\n]);\n\n// prettier-ignore\nconst CUBE_POSITIONS = new Float32Array([\n  -1,  -1,  1, 1,  -1,  1,  1,  1,  1,  -1,  1,  1,\n  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1,  -1,\n  -1,  1,  -1,  -1,  1,  1,  1,  1,  1,  1,  1,  -1,\n  -1,  -1,  -1,  1,  -1,  -1,  1,  -1,  1,  -1,  -1,  1,\n  1,  -1,  -1,  1,  1,  -1,  1,  1,  1,  1,  -1,  1,\n  -1,  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1\n]);\n\n// TODO - could be Uint8\n// prettier-ignore\nconst CUBE_NORMALS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,\n  // Back face\n  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,\n  // Top face\n  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,\n  // Bottom face\n  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,\n  // Right face\n  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,\n  // Left face\n  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0\n]);\n\n// prettier-ignore\nconst CUBE_TEX_COORDS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  1,  1,  0,  1,\n  // Back face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Top face\n  0,  1,  0,  0,  1,  0,  1,  1,\n  // Bottom face\n  1,  1,  0,  1,  0,  0,  1,  0,\n  // Right face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Left face\n  0,  0,  1,  0,  1,  1,  0,  1\n]);\n\nconst ATTRIBUTES = {\n  POSITION: {size: 3, value: new Float32Array(CUBE_POSITIONS)},\n  NORMAL: {size: 3, value: new Float32Array(CUBE_NORMALS)},\n  TEXCOORD_0: {size: 2, value: new Float32Array(CUBE_TEX_COORDS)}\n};\n\nexport default class CubeGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('cube-geometry')} = props;\n    super({\n      ...props,\n      id,\n      indices: {size: 1, value: new Uint16Array(CUBE_INDICES)},\n      attributes: {...ATTRIBUTES, ...props.attributes}\n    });\n  }\n}\n","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import {assert} from '../utils';\nconst FS100 = `void main() {gl_FragColor = vec4(0);}`;\nconst FS_GLES = `\\\nout vec4 transform_output;\nvoid main() {\n  transform_output = vec4(0);\n}`;\nconst FS300 = `#version 300 es\\n${FS_GLES}`;\n\n// Prase given glsl line and return qualifier details or null\nexport function getQualifierDetails(line, qualifiers) {\n  qualifiers = Array.isArray(qualifiers) ? qualifiers : [qualifiers];\n  const words = line.replace(/^\\s+/, '').split(/\\s+/);\n  // TODO add support for precession qualifiers (highp, mediump and lowp)\n  const [qualifier, type, definition] = words;\n  if (!qualifiers.includes(qualifier) || !type || !definition) {\n    return null;\n  }\n  const name = definition.split(';')[0];\n  return {qualifier, type, name};\n}\n\n// Given the shader version, input and output variable names,\n// builds and return a pass through fragment shader.\nexport function getPassthroughFS({version = 100, input, inputType, output} = {}) {\n  if (!input) {\n    if (version === 300) {\n      // Fast-path for WebGL 2.0\n      return FS300;\n    } else if (version > 300) {\n      // Use the supplied version for OpenGL/ES 3.2+\n      return `#version ${version}\\n${FS_GLES}`;\n    }\n    // Fast-path for WebGL 1.0\n    return FS100;\n  }\n  const outputValue = convertToVec4(input, inputType);\n  if (version >= 300) {\n    // If version is 300, assume WebGL 2.0\n    return `\\\n#version ${version} ${version === 300 ? 'es' : ''}\nin ${inputType} ${input};\nout vec4 ${output};\nvoid main() {\n  ${output} = ${outputValue};\n}`;\n  }\n  // WebGL 1.0\n  return `\\\nvarying ${inputType} ${input};\nvoid main() {\n  gl_FragColor = ${outputValue};\n}`;\n}\n\n// convert glsl type to suffix\nexport function typeToChannelSuffix(type) {\n  switch (type) {\n    case 'float':\n      return 'x';\n    case 'vec2':\n      return 'xy';\n    case 'vec3':\n      return 'xyz';\n    case 'vec4':\n      return 'xyzw';\n    default:\n      assert(false);\n      return null;\n  }\n}\n\n// convert glsl type to channel count\nexport function typeToChannelCount(type) {\n  switch (type) {\n    case 'float':\n      return 1;\n    case 'vec2':\n      return 2;\n    case 'vec3':\n      return 3;\n    case 'vec4':\n      return 4;\n    default:\n      assert(false);\n      return null;\n  }\n}\n\n// Returns glsl instruction for converting to vec4\nexport function convertToVec4(variable, type) {\n  switch (type) {\n    case 'float':\n      return `vec4(${variable}, 0.0, 0.0, 1.0)`;\n    case 'vec2':\n      return `vec4(${variable}, 0.0, 1.0)`;\n    case 'vec3':\n      return `vec4(${variable}, 1.0)`;\n    case 'vec4':\n      return variable;\n    default:\n      assert(false);\n      return null;\n  }\n}\n","import {isWebGL2} from '@luma.gl/gltools';\nimport {Buffer, TransformFeedback} from '@luma.gl/webgl';\nimport {assert} from '@luma.gl/webgl';\n\nexport default class BufferTransform {\n  constructor(gl, props = {}) {\n    this.gl = gl;\n    this.currentIndex = 0;\n    this.feedbackMap = {};\n    this.varyings = null; // varyings array\n    this.bindings = []; // each element is an object : {sourceBuffers, feedbackBuffers, transformFeedback}\n\n    this.resources = {}; // resources to be deleted\n\n    this._initialize(props);\n    Object.seal(this);\n  }\n\n  setupResources(opts) {\n    for (const binding of this.bindings) {\n      this._setupTransformFeedback(binding, opts);\n    }\n  }\n\n  updateModelProps(props = {}) {\n    const {varyings} = this;\n    if (varyings.length > 0) {\n      props = Object.assign({}, props, {varyings});\n    }\n    return props;\n  }\n\n  getDrawOptions(opts = {}) {\n    const binding = this.bindings[this.currentIndex];\n    const {sourceBuffers, transformFeedback} = binding;\n    const attributes = Object.assign({}, sourceBuffers, opts.attributes);\n\n    return {attributes, transformFeedback};\n  }\n\n  swap() {\n    if (this.feedbackMap) {\n      this.currentIndex = this._getNextIndex();\n      return true;\n    }\n    return false;\n  }\n\n  // update source and/or feedbackBuffers\n  update(opts = {}) {\n    this._setupBuffers(opts);\n  }\n\n  // returns current feedbackBuffer of given name\n  getBuffer(varyingName) {\n    const {feedbackBuffers} = this.bindings[this.currentIndex];\n    const bufferOrParams = varyingName ? feedbackBuffers[varyingName] : null;\n    if (!bufferOrParams) {\n      return null;\n    }\n    return bufferOrParams instanceof Buffer ? bufferOrParams : bufferOrParams.buffer;\n  }\n\n  getData({varyingName} = {}) {\n    const buffer = this.getBuffer(varyingName);\n    if (buffer) {\n      return buffer.getData();\n    }\n    return null;\n  }\n\n  // Delete owned resources.\n  delete() {\n    for (const name in this.resources) {\n      this.resources[name].delete();\n    }\n  }\n\n  // Private\n\n  _initialize(props = {}) {\n    this._setupBuffers(props);\n    this.varyings = props.varyings || Object.keys(this.bindings[this.currentIndex].feedbackBuffers);\n    if (this.varyings.length > 0) {\n      // if writting to buffers make sure it is WebGL2\n      assert(isWebGL2(this.gl));\n    }\n  }\n\n  // auto create feedback buffers if requested\n  _getFeedbackBuffers(props) {\n    const {sourceBuffers = {}} = props;\n    const feedbackBuffers = {};\n    if (this.bindings[this.currentIndex]) {\n      // this gurantees a partial feedback buffer set doesn't update\n      // previously set buffers during auto creation mode.\n      Object.assign(feedbackBuffers, this.bindings[this.currentIndex].feedbackBuffers);\n    }\n    if (this.feedbackMap) {\n      // feedbackMap is defined as sourceBuffer as key and feedbackBuffer name as object\n      for (const sourceName in this.feedbackMap) {\n        const feedbackName = this.feedbackMap[sourceName];\n        if (sourceName in sourceBuffers) {\n          feedbackBuffers[feedbackName] = sourceName;\n        }\n      }\n    }\n    Object.assign(feedbackBuffers, props.feedbackBuffers);\n    for (const bufferName in feedbackBuffers) {\n      const bufferOrRef = feedbackBuffers[bufferName];\n      if (typeof bufferOrRef === 'string') {\n        // Create new buffer with same layout and settings as source buffer\n        const sourceBuffer = sourceBuffers[bufferOrRef];\n        const {byteLength, usage, accessor} = sourceBuffer;\n        feedbackBuffers[bufferName] = this._createNewBuffer(bufferName, {\n          byteLength,\n          usage,\n          accessor\n        });\n      }\n    }\n\n    return feedbackBuffers;\n  }\n\n  _setupBuffers(props = {}) {\n    const {sourceBuffers = null} = props;\n    Object.assign(this.feedbackMap, props.feedbackMap);\n    const feedbackBuffers = this._getFeedbackBuffers(props);\n    this._updateBindings({sourceBuffers, feedbackBuffers});\n  }\n\n  _setupTransformFeedback(binding, {model}) {\n    const {program} = model;\n    binding.transformFeedback = new TransformFeedback(this.gl, {\n      program,\n      buffers: binding.feedbackBuffers\n    });\n  }\n\n  _updateBindings(opts) {\n    this.bindings[this.currentIndex] = this._updateBinding(this.bindings[this.currentIndex], opts);\n    if (this.feedbackMap) {\n      const {sourceBuffers, feedbackBuffers} = this._swapBuffers(this.bindings[this.currentIndex]);\n      const nextIndex = this._getNextIndex();\n      this.bindings[nextIndex] = this._updateBinding(this.bindings[nextIndex], {\n        sourceBuffers,\n        feedbackBuffers\n      });\n    }\n  }\n\n  _updateBinding(binding, opts) {\n    if (!binding) {\n      return {\n        sourceBuffers: Object.assign({}, opts.sourceBuffers),\n        feedbackBuffers: Object.assign({}, opts.feedbackBuffers)\n      };\n    }\n    Object.assign(binding.sourceBuffers, opts.sourceBuffers);\n    Object.assign(binding.feedbackBuffers, opts.feedbackBuffers);\n    if (binding.transformFeedback) {\n      binding.transformFeedback.setBuffers(binding.feedbackBuffers);\n    }\n    return binding;\n  }\n\n  _swapBuffers(opts) {\n    if (!this.feedbackMap) {\n      return null;\n    }\n    const sourceBuffers = Object.assign({}, opts.sourceBuffers);\n    const feedbackBuffers = Object.assign({}, opts.feedbackBuffers);\n    for (const srcName in this.feedbackMap) {\n      const dstName = this.feedbackMap[srcName];\n      sourceBuffers[srcName] = opts.feedbackBuffers[dstName];\n      feedbackBuffers[dstName] = opts.sourceBuffers[srcName];\n\n      // make sure the new destination buffer is a Buffer object\n      assert(feedbackBuffers[dstName] instanceof Buffer);\n    }\n    return {sourceBuffers, feedbackBuffers};\n  }\n\n  // Create a buffer and add to list of buffers to be deleted.\n  _createNewBuffer(name, opts) {\n    const buffer = new Buffer(this.gl, opts);\n    if (this.resources[name]) {\n      this.resources[name].delete();\n    }\n    this.resources[name] = buffer;\n    return buffer;\n  }\n\n  _getNextIndex() {\n    return (this.currentIndex + 1) % 2;\n  }\n}\n","// returns GLSL shader version of given shader string\nexport default function getShaderVersion(source) {\n  let version = 100;\n  const words = source.match(/[^\\s]+/g);\n  if (words.length >= 2 && words[0] === '#version') {\n    const v = parseInt(words[1], 10);\n    if (Number.isFinite(v)) {\n      version = v;\n    }\n  }\n  return version;\n}\n","// Private shader module used by `Transform`\n\nconst vs = `\\\nattribute float transform_elementID;\n\n// returns half of pixel size, used to move the pixel position to center of the pixel.\nvec2 transform_getPixelSizeHalf(vec2 size) {\n  return vec2(1.) / (2. * size);\n}\n\n// returns current elements pixel indeces [x, y],\n// where x ranges in [0 to texSize-1] and y ranges in [0 to texSize-1]\nvec2 transform_getPixelIndices(vec2 texSize, vec2 pixelSizeHalf) {\n  // Add safe offset (half of pixel height) before doing floor\n  float yIndex = floor((transform_elementID / texSize[0]) + pixelSizeHalf[1]);\n  float xIndex = transform_elementID - (yIndex * texSize[0]);\n  return vec2(xIndex, yIndex);\n}\n\n// returns current elementID's texture co-ordianate\nvec2 transform_getTexCoord(vec2 size) {\n  vec2 pixelSizeHalf = transform_getPixelSizeHalf(size);\n  vec2 indices = transform_getPixelIndices(size, pixelSizeHalf);\n  vec2 coord = indices / size + pixelSizeHalf;\n  return coord;\n}\n\n// returns current elementID's position\nvec2 transform_getPos(vec2 size) {\n  vec2 texCoord = transform_getTexCoord(size);\n  // Change from [0 1] range to [-1 1]\n  vec2 pos = (texCoord * (2.0, 2.0)) - (1., 1.);\n  return pos;\n}\n\n// returns current elementID's pixel value\nvec4 transform_getInput(sampler2D texSampler, vec2 size) {\n  vec2 texCoord = transform_getTexCoord(size);\n  vec4 textureColor = texture2D(texSampler, texCoord);\n  return textureColor;\n}\n`;\n\nexport default {\n  name: 'transform',\n  vs,\n  fs: null\n};\n","import {assert} from '@luma.gl/webgl';\nimport {combineInjects, getQualifierDetails, typeToChannelSuffix} from '@luma.gl/shadertools';\n\nconst SAMPLER_UNIFORM_PREFIX = 'transform_uSampler_';\nconst SIZE_UNIFORM_PREFIX = 'transform_uSize_';\nconst VS_POS_VARIABLE = 'transform_position';\n\n// Scan provided vertex shader\n// for each texture attribute, inject sampler instructions and build uniforms for sampler\n// for texture target, get varying type and inject position instruction\nexport function updateForTextures({vs, sourceTextureMap, targetTextureVarying, targetTexture}) {\n  const texAttributeNames = Object.keys(sourceTextureMap);\n  let sourceCount = texAttributeNames.length;\n  let targetTextureType = null;\n  const samplerTextureMap = {};\n  let updatedVs = vs;\n  let finalInject = {};\n\n  if (sourceCount > 0 || targetTextureVarying) {\n    const vsLines = updatedVs.split('\\n');\n    const updateVsLines = vsLines.slice();\n    vsLines.forEach((line, index, lines) => {\n      // TODO add early exit\n      if (sourceCount > 0) {\n        const updated = processAttributeDefinition(line, sourceTextureMap);\n        if (updated) {\n          const {updatedLine, inject} = updated;\n          updateVsLines[index] = updatedLine;\n          // sampleInstructions.push(sampleInstruction);\n          finalInject = combineInjects([finalInject, inject]);\n          Object.assign(samplerTextureMap, updated.samplerTextureMap);\n          sourceCount--;\n        }\n      }\n      if (targetTextureVarying && !targetTextureType) {\n        targetTextureType = getVaryingType(line, targetTextureVarying);\n      }\n    });\n\n    if (targetTextureVarying) {\n      assert(targetTexture);\n      const sizeName = `${SIZE_UNIFORM_PREFIX}${targetTextureVarying}`;\n\n      const uniformDeclaration = `uniform vec2 ${sizeName};\\n`;\n      const posInstructions = `\\\n     vec2 ${VS_POS_VARIABLE} = transform_getPos(${sizeName});\n     gl_Position = vec4(${VS_POS_VARIABLE}, 0, 1.);\\n`;\n      const inject = {\n        'vs:#decl': uniformDeclaration,\n        'vs:#main-start': posInstructions\n      };\n      finalInject = combineInjects([finalInject, inject]);\n    }\n    updatedVs = updateVsLines.join('\\n');\n  }\n  return {\n    // updated vertex shader (commented texture attribute definition)\n    vs: updatedVs,\n    // type (float, vec2, vec3 of vec4) target texture varying\n    targetTextureType,\n    // required vertex and fragment shader injects\n    inject: finalInject,\n    // map of sampler name to texture name, can be used to set attributes\n    // usefull when swapping textures, as source and destination texture change when swap is called.\n    samplerTextureMap\n  };\n}\n\n// builds and returns an object contaning size uniform for each texture\nexport function getSizeUniforms({sourceTextureMap, targetTextureVarying, targetTexture}) {\n  const uniforms = {};\n  let width;\n  let height;\n  if (targetTextureVarying) {\n    ({width, height} = targetTexture);\n    uniforms[`${SIZE_UNIFORM_PREFIX}${targetTextureVarying}`] = [width, height];\n  }\n  for (const textureName in sourceTextureMap) {\n    ({width, height} = sourceTextureMap[textureName]);\n    uniforms[`${SIZE_UNIFORM_PREFIX}${textureName}`] = [width, height];\n  }\n  return uniforms;\n}\n\n// Checks if provided line is defining an attribute, if so returns details otherwise null\nfunction getAttributeDefinition(line) {\n  return getQualifierDetails(line, ['attribute', 'in']);\n}\n\nfunction getSamplerDeclerations(textureName) {\n  const samplerName = `${SAMPLER_UNIFORM_PREFIX}${textureName}`;\n  const sizeName = `${SIZE_UNIFORM_PREFIX}${textureName}`;\n  const uniformDeclerations = `\\\n  uniform sampler2D ${samplerName};\n  uniform vec2 ${sizeName};`;\n  return {samplerName, sizeName, uniformDeclerations};\n}\n\n// Return size (float, vec2 etc) of a given varying, null if doens't exist.\nexport function getVaryingType(line, varying) {\n  const qualaiferDetails = getQualifierDetails(line, ['varying', 'out']);\n  if (!qualaiferDetails) {\n    return null;\n  }\n  return qualaiferDetails.name === varying ? qualaiferDetails.type : null;\n}\n\n// build required definitions, sample instructions for each texture attribute\nexport function processAttributeDefinition(line, textureMap) {\n  const samplerTextureMap = {};\n  const attributeData = getAttributeDefinition(line);\n  if (!attributeData) {\n    return null;\n  }\n  const {type, name} = attributeData;\n  if (name && textureMap[name]) {\n    // eslint-disable-next-line no-useless-escape\n    const updatedLine = `\\// ${line} => Replaced by Transform with a sampler`;\n    const {samplerName, sizeName, uniformDeclerations} = getSamplerDeclerations(name);\n\n    const channels = typeToChannelSuffix(type);\n    const sampleInstruction = `  ${type} ${name} = transform_getInput(${samplerName}, ${sizeName}).${channels};\\n`;\n\n    samplerTextureMap[samplerName] = name;\n    const inject = {\n      'vs:#decl': uniformDeclerations,\n      'vs:#main-start': sampleInstruction\n    };\n\n    // samplerNameMap\n    return {\n      // update vertex shader line.\n      updatedLine,\n      // inject object with sampler instructions.\n      inject,\n      // sampler name to texture name map\n      samplerTextureMap\n    };\n  }\n  return null;\n}\n","import GL from '@luma.gl/constants';\nimport {\n  cloneTextureFrom,\n  readPixelsToArray,\n  getShaderVersion,\n  Buffer,\n  Texture2D,\n  Framebuffer\n} from '@luma.gl/webgl';\nimport {\n  _transform as transformModule,\n  getPassthroughFS,\n  typeToChannelCount,\n  combineInjects\n} from '@luma.gl/shadertools';\nimport {updateForTextures, getSizeUniforms} from './transform-shader-utils';\n\n// TODO: move these constants to transform-shader-utils\n// Texture parameters needed so sample can precisely pick pixel for given element id.\nconst SRC_TEX_PARAMETER_OVERRIDES = {\n  [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n  [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\nconst FS_OUTPUT_VARIABLE = 'transform_output';\n\nexport default class TextureTransform {\n  constructor(gl, props = {}) {\n    this.gl = gl;\n    this.currentIndex = 0;\n    this._swapTexture = null;\n    this.targetTextureVarying = null;\n    this.targetTextureType = null;\n    this.samplerTextureMap = null;\n    this.bindings = []; // each element is an object : {sourceTextures, targetTexture, framebuffer}\n\n    this.resources = {}; // resources to be deleted\n\n    this._initialize(props);\n    Object.seal(this);\n  }\n\n  updateModelProps(props = {}) {\n    const updatedModelProps = this._processVertexShader(props);\n    return Object.assign({}, props, updatedModelProps);\n  }\n\n  getDrawOptions(opts = {}) {\n    const {sourceTextures, framebuffer, targetTexture} = this.bindings[this.currentIndex];\n\n    const attributes = Object.assign({}, opts.attributes);\n    const uniforms = Object.assign({}, opts.uniforms);\n    const parameters = Object.assign({}, opts.parameters);\n    let discard = opts.discard;\n\n    if (this.hasSourceTextures || this.hasTargetTexture) {\n      attributes.transform_elementID = this.elementIDBuffer;\n\n      for (const sampler in this.samplerTextureMap) {\n        const textureName = this.samplerTextureMap[sampler];\n        uniforms[sampler] = sourceTextures[textureName];\n      }\n      this._setSourceTextureParameters();\n      // get texture size uniforms\n      const sizeUniforms = getSizeUniforms({\n        sourceTextureMap: sourceTextures,\n        targetTextureVarying: this.targetTextureVarying,\n        targetTexture\n      });\n      Object.assign(uniforms, sizeUniforms);\n    }\n\n    if (this.hasTargetTexture) {\n      discard = false;\n      parameters.viewport = [0, 0, framebuffer.width, framebuffer.height];\n    }\n\n    return {attributes, framebuffer, uniforms, discard, parameters};\n  }\n\n  swap() {\n    if (this._swapTexture) {\n      this.currentIndex = this._getNextIndex();\n      return true;\n    }\n    return false;\n  }\n\n  // update source and/or feedbackBuffers\n  update(opts = {}) {\n    this._setupTextures(opts);\n  }\n\n  // returns current target texture\n  getTargetTexture() {\n    const {targetTexture} = this.bindings[this.currentIndex];\n    return targetTexture;\n  }\n\n  getData({packed = false} = {}) {\n    const {framebuffer} = this.bindings[this.currentIndex];\n    const pixels = readPixelsToArray(framebuffer);\n\n    if (!packed) {\n      return pixels;\n    }\n\n    // readPixels returns 4 elements for each pixel, pack the elements when requested\n    const ArrayType = pixels.constructor;\n    const channelCount = typeToChannelCount(this.targetTextureType);\n    const packedPixels = new ArrayType((pixels.length * channelCount) / 4);\n    let packCount = 0;\n    for (let i = 0; i < pixels.length; i += 4) {\n      for (let j = 0; j < channelCount; j++) {\n        packedPixels[packCount++] = pixels[i + j];\n      }\n    }\n    return packedPixels;\n  }\n\n  // returns current framebuffer object that is being used.\n  getFramebuffer() {\n    const currentResources = this.bindings[this.currentIndex];\n    return currentResources.framebuffer;\n  }\n\n  // Delete owned resources.\n  delete() {\n    if (this.ownTexture) {\n      this.ownTexture.delete();\n    }\n    if (this.elementIDBuffer) {\n      this.elementIDBuffer.delete();\n    }\n  }\n\n  // Private\n\n  _initialize(props = {}) {\n    const {_targetTextureVarying, _swapTexture} = props;\n    this._swapTexture = _swapTexture;\n    this.targetTextureVarying = _targetTextureVarying;\n    this.hasTargetTexture = _targetTextureVarying;\n    this._setupTextures(props);\n  }\n\n  // auto create target texture if requested\n  _createTargetTexture(props) {\n    const {sourceTextures, textureOrReference} = props;\n    if (textureOrReference instanceof Texture2D) {\n      return textureOrReference;\n    }\n    // 'targetTexture' is a reference souce texture.\n    const refTexture = sourceTextures[textureOrReference];\n    if (!refTexture) {\n      return null;\n    }\n\n    // save reference texture name, when corresponding source texture is updated\n    // we also update target texture.\n    this._targetRefTexName = textureOrReference;\n\n    return this._createNewTexture(refTexture);\n  }\n\n  _setupTextures(props = {}) {\n    const {_sourceTextures = {}, _targetTexture} = props;\n    const targetTexture = this._createTargetTexture({\n      sourceTextures: _sourceTextures,\n      textureOrReference: _targetTexture\n    });\n    this.hasSourceTextures =\n      this.hasSourceTextures || (_sourceTextures && Object.keys(_sourceTextures).length > 0);\n    this._updateBindings({sourceTextures: _sourceTextures, targetTexture});\n    if ('elementCount' in props) {\n      this._updateElementIDBuffer(props.elementCount);\n    }\n  }\n\n  _updateElementIDBuffer(elementCount) {\n    if (typeof elementCount !== 'number' || this.elementCount >= elementCount) {\n      return;\n    }\n    // NOTE: using float so this will work with GLSL 1.0 shaders.\n    const elementIds = new Float32Array(elementCount);\n    elementIds.forEach((_, index, array) => {\n      array[index] = index;\n    });\n    if (!this.elementIDBuffer) {\n      this.elementIDBuffer = new Buffer(this.gl, {\n        data: elementIds,\n        accessor: {size: 1}\n      });\n    } else {\n      this.elementIDBuffer.setData({data: elementIds});\n    }\n    this.elementCount = elementCount;\n  }\n\n  _updateBindings(opts) {\n    this.bindings[this.currentIndex] = this._updateBinding(this.bindings[this.currentIndex], opts);\n    if (this._swapTexture) {\n      const {sourceTextures, targetTexture} = this._swapTextures(this.bindings[this.currentIndex]);\n      const nextIndex = this._getNextIndex();\n      this.bindings[nextIndex] = this._updateBinding(this.bindings[nextIndex], {\n        sourceTextures,\n        targetTexture\n      });\n    }\n  }\n\n  _updateBinding(binding, opts) {\n    const {sourceTextures, targetTexture} = opts;\n    if (!binding) {\n      binding = {\n        sourceTextures: {},\n        targetTexture: null\n      };\n    }\n    Object.assign(binding.sourceTextures, sourceTextures);\n    if (targetTexture) {\n      binding.targetTexture = targetTexture;\n\n      const {width, height} = targetTexture;\n      const {framebuffer} = binding;\n      if (framebuffer) {\n        // First update texture without re-sizing attachments\n        framebuffer.update({\n          attachments: {[GL.COLOR_ATTACHMENT0]: targetTexture},\n          resizeAttachments: false\n        });\n        // Resize to new taget texture size\n        framebuffer.resize({width, height});\n      } else {\n        binding.framebuffer = new Framebuffer(this.gl, {\n          id: `${this.id || 'transform'}-framebuffer`,\n          width,\n          height,\n          attachments: {\n            [GL.COLOR_ATTACHMENT0]: targetTexture\n          }\n        });\n      }\n    }\n    return binding;\n  }\n\n  // set texture filtering parameters on source textures.\n  _setSourceTextureParameters() {\n    const index = this.currentIndex;\n    const {sourceTextures} = this.bindings[index];\n    for (const name in sourceTextures) {\n      sourceTextures[name].setParameters(SRC_TEX_PARAMETER_OVERRIDES);\n    }\n  }\n\n  _swapTextures(opts) {\n    if (!this._swapTexture) {\n      return null;\n    }\n    const sourceTextures = Object.assign({}, opts.sourceTextures);\n    sourceTextures[this._swapTexture] = opts.targetTexture;\n\n    const targetTexture = opts.sourceTextures[this._swapTexture];\n\n    return {sourceTextures, targetTexture};\n  }\n\n  // Create a buffer and add to list of buffers to be deleted.\n  _createNewTexture(refTexture) {\n    const texture = cloneTextureFrom(refTexture, {\n      parameters: {\n        [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n        [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n      },\n      pixelStore: {\n        [GL.UNPACK_FLIP_Y_WEBGL]: false\n      }\n    });\n\n    // thre can only be one target texture\n    if (this.ownTexture) {\n      this.ownTexture.delete();\n    }\n    this.ownTexture = texture;\n\n    return texture;\n  }\n\n  _getNextIndex() {\n    return (this.currentIndex + 1) % 2;\n  }\n\n  // build and return shader releated parameters\n  _processVertexShader(props = {}) {\n    const {sourceTextures, targetTexture} = this.bindings[this.currentIndex];\n    const {vs, uniforms, targetTextureType, inject, samplerTextureMap} = updateForTextures({\n      vs: props.vs,\n      sourceTextureMap: sourceTextures,\n      targetTextureVarying: this.targetTextureVarying,\n      targetTexture\n    });\n    const combinedInject = combineInjects([props.inject || {}, inject]);\n    this.targetTextureType = targetTextureType;\n    this.samplerTextureMap = samplerTextureMap;\n    const fs =\n      props._fs ||\n      getPassthroughFS({\n        version: getShaderVersion(vs),\n        input: this.targetTextureVarying,\n        inputType: targetTextureType,\n        output: FS_OUTPUT_VARIABLE\n      });\n    const modules =\n      this.hasSourceTextures || this.targetTextureVarying\n        ? [transformModule].concat(props.modules || [])\n        : props.modules;\n    return {vs, fs, modules, uniforms, inject: combinedInject};\n  }\n}\n","import GL from '@luma.gl/constants';\nimport {getPassthroughFS} from '@luma.gl/shadertools';\nimport BufferTransform from './buffer-transform';\nimport TextureTransform from './texture-transform';\n\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {assert, isObjectEmpty, getShaderVersion} from '@luma.gl/webgl';\nimport Model from '../lib/model';\n\n// takes source and target buffers/textures and setsup the pipeline\nexport default class Transform {\n  static isSupported(gl) {\n    // TODO : differentiate writting to buffer vs not\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, props = {}) {\n    this.gl = gl;\n    this.model = null;\n    this.elementCount = 0;\n    this.bufferTransform = null;\n    this.textureTransform = null;\n    this.elementIDBuffer = null;\n    this._initialize(props);\n    Object.seal(this);\n  }\n\n  // Delete owned resources.\n  delete() {\n    const {model, bufferTransform, textureTransform} = this;\n    if (model) {\n      model.delete();\n    }\n    if (bufferTransform) {\n      bufferTransform.delete();\n    }\n    if (textureTransform) {\n      textureTransform.delete();\n    }\n  }\n\n  // Run one transform loop.\n  run(opts = {}) {\n    const {clearRenderTarget = true} = opts;\n\n    const updatedOpts = this._updateDrawOptions(opts);\n\n    if (clearRenderTarget && updatedOpts.framebuffer) {\n      updatedOpts.framebuffer.clear({color: true});\n    }\n\n    this.model.transform(updatedOpts);\n  }\n\n  // swap resources if a map is provided\n  swap() {\n    let swapped = false;\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n    for (const resourceTransform of resourceTransforms) {\n      swapped = swapped || resourceTransform.swap();\n    }\n    assert(swapped, 'Nothing to swap');\n  }\n\n  // Return Buffer object for given varying name.\n  getBuffer(varyingName = null) {\n    return this.bufferTransform && this.bufferTransform.getBuffer(varyingName);\n  }\n\n  // Return data either from Buffer or from Texture\n  getData(opts = {}) {\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n    for (const resourceTransform of resourceTransforms) {\n      const data = resourceTransform.getData(opts);\n      if (data) {\n        return data;\n      }\n    }\n    return null;\n  }\n\n  // Return framebuffer object if rendering to textures\n  getFramebuffer() {\n    return this.textureTransform && this.textureTransform.getFramebuffer();\n  }\n\n  // Update some or all buffer/texture bindings.\n  update(opts = {}) {\n    if ('elementCount' in opts) {\n      this.model.setVertexCount(opts.elementCount);\n    }\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n    for (const resourceTransform of resourceTransforms) {\n      resourceTransform.update(opts);\n    }\n  }\n\n  // Private\n\n  _initialize(props = {}) {\n    const {gl} = this;\n    this._buildResourceTransforms(gl, props);\n\n    props = this._updateModelProps(props);\n    this.model = new Model(\n      gl,\n      Object.assign({}, props, {\n        fs: props.fs || getPassthroughFS({version: getShaderVersion(props.vs)}),\n        id: props.id || 'transform-model',\n        drawMode: props.drawMode || GL.POINTS,\n        vertexCount: props.elementCount\n      })\n    );\n\n    /* eslint-disable no-unused-expressions */\n    this.bufferTransform && this.bufferTransform.setupResources({model: this.model});\n    /* eslint-enable no-unused-expressions */\n  }\n\n  _updateModelProps(props) {\n    let updatedProps = Object.assign({}, props);\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n    for (const resourceTransform of resourceTransforms) {\n      updatedProps = resourceTransform.updateModelProps(updatedProps);\n    }\n    return updatedProps;\n  }\n\n  _buildResourceTransforms(gl, props) {\n    if (canCreateBufferTransform(props)) {\n      this.bufferTransform = new BufferTransform(gl, props);\n    }\n    if (canCreateTextureTransform(props)) {\n      this.textureTransform = new TextureTransform(gl, props);\n    }\n    assert(\n      this.bufferTransform || this.textureTransform,\n      'must provide source/feedback buffers or source/target textures'\n    );\n  }\n\n  _updateDrawOptions(opts) {\n    let updatedOpts = Object.assign({}, opts);\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n    for (const resourceTransform of resourceTransforms) {\n      updatedOpts = Object.assign(updatedOpts, resourceTransform.getDrawOptions(updatedOpts));\n    }\n    return updatedOpts;\n  }\n}\n\n// Helper Methods\n\nfunction canCreateBufferTransform(props) {\n  if (\n    !isObjectEmpty(props.sourceBuffers) ||\n    !isObjectEmpty(props.feedbackBuffers) ||\n    (props.varyings && props.varyings.length > 0)\n  ) {\n    return true;\n  }\n  return false;\n}\n\nfunction canCreateTextureTransform(props) {\n  if (\n    !isObjectEmpty(props._sourceTextures) ||\n    props._targetTexture ||\n    props._targetTextureVarying\n  ) {\n    return true;\n  }\n\n  return false;\n}\n","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import {uid, assert} from '@luma.gl/webgl';\n\n// Rendering primitives - specify how to extract primitives from vertices.\n// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants\nexport const DRAW_MODE = {\n  POINTS: 0x0000, // draw single points.\n  LINES: 0x0001, // draw lines. Each vertex connects to the one after it.\n  LINE_LOOP: 0x0002, // draw lines. Each set of two vertices is treated as a separate line segment.\n  LINE_STRIP: 0x0003, // draw a connected group of line segments from the first vertex to the last\n  TRIANGLES: 0x0004, // draw triangles. Each set of three vertices creates a separate triangle.\n  TRIANGLE_STRIP: 0x0005, // draw a connected group of triangles.\n  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.\n  // Each vertex connects to the previous and the first vertex in the fan.\n};\n\nexport default class Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n\n  constructor(props = {}) {\n    const {\n      id = uid('geometry'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n\n    // stubRemovedMethods(this, [\n    //   'setNeedsRedraw', 'needsRedraw', 'setAttributes'\n    // ], 'Immutable');\n\n    // stubRemovedMethods(this, [\n    //   'hasAttribute', 'getAttribute', 'getArray'\n    // ], 'Use geometry.attributes and geometry.indices');\n\n    // deprecateMethods(this, ['getAttributes'])\n  }\n\n  get mode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  // Return an object with all attributes plus indices added as a field.\n  getAttributes() {\n    return this.indices ? {indices: this.indices, ...this.attributes} : this.attributes;\n  }\n\n  // PRIVATE\n\n  _print(attributeName) {\n    return `Geometry ${this.id} attribute ${attributeName}`;\n  }\n\n  // Attribute\n  // value: typed array\n  // type: indices, vertices, uvs\n  // size: elements per vertex\n  // target: WebGL buffer type (string or constant)\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {value: indices, size: 1} : indices;\n    }\n\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n\n      // Wrap \"unwrapped\" arrays and try to autodetect their type\n      attribute = ArrayBuffer.isView(attribute) ? {value: attribute} : attribute;\n\n      assert(\n        ArrayBuffer.isView(attribute.value),\n        `${this._print(attributeName)}: must be typed array or object with value as typed array`\n      );\n\n      if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n        attribute.size = 3;\n      }\n\n      // Move indices to separate field\n      if (attributeName === 'indices') {\n        assert(!this.indices);\n        this.indices = attribute;\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n\n    if (this.indices && this.indices.isIndexed !== undefined) {\n      this.indices = Object.assign({}, this.indices);\n      delete this.indices.isIndexed;\n    }\n\n    return this;\n  }\n\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n    let vertexCount = Infinity;\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {value, size, constant} = attribute;\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n\n    assert(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n}\n","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n;\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import \"core-js/modules/es6.array.is-array\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport MathArray from './base/math-array';\nimport { checkNumber, checkVector } from '../lib/validators';\nimport assert from '../lib/assert';\nimport * as quat from 'gl-matrix/quat';\nimport * as vec4 from 'gl-matrix/vec4';\nvar IDENTITY_QUATERNION = [0, 0, 0, 1];\n\nvar Quaternion = function (_MathArray) {\n  _inherits(Quaternion, _MathArray);\n\n  function Quaternion() {\n    var _this;\n\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n    _classCallCheck(this, Quaternion);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Quaternion).call(this, -0, -0, -0, -0));\n\n    if (Array.isArray(x) && arguments.length === 1) {\n      _this.copy(x);\n    } else {\n      _this.set(x, y, z, w);\n    }\n\n    return _this;\n  }\n\n  _createClass(Quaternion, [{\n    key: \"copy\",\n    value: function copy(array) {\n      this[0] = array[0];\n      this[1] = array[1];\n      this[2] = array[2];\n      this[3] = array[3];\n      return this.check();\n    }\n  }, {\n    key: \"set\",\n    value: function set(x, y, z, w) {\n      this[0] = x;\n      this[1] = y;\n      this[2] = z;\n      this[3] = w;\n      return this.check();\n    }\n  }, {\n    key: \"fromMatrix3\",\n    value: function fromMatrix3(m) {\n      quat.fromMat3(this, m);\n      return this.check();\n    }\n  }, {\n    key: \"identity\",\n    value: function identity() {\n      quat.identity(this);\n      return this.check();\n    }\n  }, {\n    key: \"fromAxisRotation\",\n    value: function fromAxisRotation(axis, rad) {\n      quat.setAxisAngle(this, axis, rad);\n      return this.check();\n    }\n  }, {\n    key: \"setAxisAngle\",\n    value: function setAxisAngle(axis, rad) {\n      return this.fromAxisRotation(axis, rad);\n    }\n  }, {\n    key: \"len\",\n    value: function len() {\n      return quat.length(this);\n    }\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared(a) {\n      return quat.squaredLength(this);\n    }\n  }, {\n    key: \"dot\",\n    value: function dot(a, b) {\n      if (b !== undefined) {\n        throw new Error('Quaternion.dot only takes one argument');\n      }\n\n      return quat.dot(this, a);\n    }\n  }, {\n    key: \"rotationTo\",\n    value: function rotationTo(vectorA, vectorB) {\n      quat.rotationTo(this, vectorA, vectorB);\n      return this.check();\n    }\n  }, {\n    key: \"add\",\n    value: function add(a, b) {\n      if (b !== undefined) {\n        throw new Error('Quaternion.add only takes one argument');\n      }\n\n      quat.add(this, this, a);\n      return this.check();\n    }\n  }, {\n    key: \"calculateW\",\n    value: function calculateW() {\n      quat.calculateW(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"conjugate\",\n    value: function conjugate() {\n      quat.conjugate(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      quat.invert(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"lerp\",\n    value: function lerp(a, b, t) {\n      quat.lerp(this, a, b, t);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyRight\",\n    value: function multiplyRight(a, b) {\n      assert(!b);\n      quat.multiply(this, this, a);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyLeft\",\n    value: function multiplyLeft(a, b) {\n      assert(!b);\n      quat.multiply(this, a, this);\n      return this.check();\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      var length = this.len();\n      var l = length > 0 ? 1 / length : 0;\n      this[0] = this[0] * l;\n      this[1] = this[1] * l;\n      this[2] = this[2] * l;\n      this[3] = this[3] * l;\n\n      if (length === 0) {\n        this[3] = 1;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(rad) {\n      quat.rotateX(this, this, rad);\n      return this.check();\n    }\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(rad) {\n      quat.rotateY(this, this, rad);\n      return this.check();\n    }\n  }, {\n    key: \"rotateZ\",\n    value: function rotateZ(rad) {\n      quat.rotateZ(this, this, rad);\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(b) {\n      quat.scale(this, this, b);\n      return this.check();\n    }\n  }, {\n    key: \"slerp\",\n    value: function slerp(start, target, ratio) {\n      switch (arguments.length) {\n        case 1:\n          var _arguments$ = arguments[0];\n          var _arguments$$start = _arguments$.start;\n          start = _arguments$$start === void 0 ? IDENTITY_QUATERNION : _arguments$$start;\n          target = _arguments$.target;\n          ratio = _arguments$.ratio;\n          break;\n\n        case 2:\n          var _arguments = Array.prototype.slice.call(arguments);\n\n          target = _arguments[0];\n          ratio = _arguments[1];\n          start = this;\n          break;\n\n        default:\n      }\n\n      quat.slerp(this, start, target, ratio);\n      return this.check();\n    }\n  }, {\n    key: \"transformVector4\",\n    value: function transformVector4(vector) {\n      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : vector;\n      vec4.transformQuat(result, vector, this);\n      return checkVector(result, 4);\n    }\n  }, {\n    key: \"lengthSq\",\n    value: function lengthSq() {\n      return this.lengthSquared();\n    }\n  }, {\n    key: \"setFromAxisAngle\",\n    value: function setFromAxisAngle(axis, rad) {\n      return this.setAxisAngle(axis, rad);\n    }\n  }, {\n    key: \"premultiply\",\n    value: function premultiply(a, b) {\n      return this.multiplyLeft(a, b);\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(a, b) {\n      return this.multiplyRight(a, b);\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 4;\n    }\n  }, {\n    key: \"x\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      return this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      return this[1] = checkNumber(value);\n    }\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      return this[2] = checkNumber(value);\n    }\n  }, {\n    key: \"w\",\n    get: function get() {\n      return this[3];\n    },\n    set: function set(value) {\n      return this[3] = checkNumber(value);\n    }\n  }]);\n\n  return Quaternion;\n}(MathArray);\n\nexport { Quaternion as default };","import setPrototypeOf from \"./setPrototypeOf\";\n\nfunction isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport MathArray from './math-array';\nimport { checkNumber } from '../../lib/validators';\nimport assert from '../../lib/assert';\n\nvar Vector = function (_MathArray) {\n  _inherits(Vector, _MathArray);\n\n  function Vector() {\n    _classCallCheck(this, Vector);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Vector).apply(this, arguments));\n  }\n\n  _createClass(Vector, [{\n    key: \"len\",\n    value: function len() {\n      return Math.sqrt(this.lengthSquared());\n    }\n  }, {\n    key: \"magnitude\",\n    value: function magnitude() {\n      return this.len();\n    }\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared() {\n      var length = 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        length += this[i] * this[i];\n      }\n\n      return length;\n    }\n  }, {\n    key: \"magnitudeSquared\",\n    value: function magnitudeSquared() {\n      return this.lengthSquared();\n    }\n  }, {\n    key: \"distance\",\n    value: function distance(mathArray) {\n      return Math.sqrt(this.distanceSquared(mathArray));\n    }\n  }, {\n    key: \"distanceSquared\",\n    value: function distanceSquared(mathArray) {\n      var length = 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        var dist = this[i] - mathArray[i];\n        length += dist * dist;\n      }\n\n      return checkNumber(length);\n    }\n  }, {\n    key: \"dot\",\n    value: function dot(mathArray) {\n      var product = 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        product += this[i] * mathArray[i];\n      }\n\n      return checkNumber(product);\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      var length = this.magnitude();\n\n      if (length !== 0) {\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] /= length;\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply() {\n      for (var _len = arguments.length, vectors = new Array(_len), _key = 0; _key < _len; _key++) {\n        vectors[_key] = arguments[_key];\n      }\n\n      for (var _i = 0, _vectors = vectors; _i < _vectors.length; _i++) {\n        var vector = _vectors[_i];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] *= vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"divide\",\n    value: function divide() {\n      for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        vectors[_key2] = arguments[_key2];\n      }\n\n      for (var _i2 = 0, _vectors2 = vectors; _i2 < _vectors2.length; _i2++) {\n        var vector = _vectors2[_i2];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] /= vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lengthSq\",\n    value: function lengthSq() {\n      return this.lengthSquared();\n    }\n  }, {\n    key: \"distanceTo\",\n    value: function distanceTo(vector) {\n      return this.distance(vector);\n    }\n  }, {\n    key: \"distanceToSquared\",\n    value: function distanceToSquared(vector) {\n      return this.distanceSquared(vector);\n    }\n  }, {\n    key: \"getComponent\",\n    value: function getComponent(i) {\n      assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n      return checkNumber(this[i]);\n    }\n  }, {\n    key: \"setComponent\",\n    value: function setComponent(i, value) {\n      assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n      this[i] = value;\n      return this.check();\n    }\n  }, {\n    key: \"addVectors\",\n    value: function addVectors(a, b) {\n      return this.copy(a).add(b);\n    }\n  }, {\n    key: \"subVectors\",\n    value: function subVectors(a, b) {\n      return this.copy(a).subtract(b);\n    }\n  }, {\n    key: \"multiplyVectors\",\n    value: function multiplyVectors(a, b) {\n      return this.copy(a).multiply(b);\n    }\n  }, {\n    key: \"addScaledVector\",\n    value: function addScaledVector(a, b) {\n      return this.add(new this.constructor(a).multiplyScalar(b));\n    }\n  }, {\n    key: \"x\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      return this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      return this[1] = checkNumber(value);\n    }\n  }]);\n\n  return Vector;\n}(MathArray);\n\nexport { Vector as default };","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport Vector from './base/vector';\nimport { config, isArray } from '../lib/common';\nimport { checkNumber } from '../lib/validators';\nimport * as vec3 from 'gl-matrix/vec3';\nimport { vec3_transformMat2, vec3_transformMat4AsVector } from '../lib/gl-matrix-extras';\nvar ORIGIN = [0, 0, 0];\n\nvar Vector3 = function (_Vector) {\n  _inherits(Vector3, _Vector);\n\n  function Vector3() {\n    var _this;\n\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    _classCallCheck(this, Vector3);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Vector3).call(this, -0, -0, -0));\n\n    if (arguments.length === 1 && isArray(x)) {\n      _this.copy(x);\n    } else {\n      if (config.debug) {\n        checkNumber(x);\n        checkNumber(y);\n        checkNumber(z);\n      }\n\n      _this[0] = x;\n      _this[1] = y;\n      _this[2] = z;\n    }\n\n    return _this;\n  }\n\n  _createClass(Vector3, [{\n    key: \"set\",\n    value: function set(x, y, z) {\n      this[0] = x;\n      this[1] = y;\n      this[2] = z;\n      return this.check();\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(array) {\n      this[0] = array[0];\n      this[1] = array[1];\n      this[2] = array[2];\n      return this.check();\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(object) {\n      if (config.debug) {\n        checkNumber(object.x);\n        checkNumber(object.y);\n        checkNumber(object.z);\n      }\n\n      this[0] = object.x;\n      this[1] = object.y;\n      this[2] = object.z;\n      return this.check();\n    }\n  }, {\n    key: \"toObject\",\n    value: function toObject(object) {\n      object.x = this[0];\n      object.y = this[1];\n      object.z = this[2];\n      return object;\n    }\n  }, {\n    key: \"angle\",\n    value: function angle(vector) {\n      return vec3.angle(this, vector);\n    }\n  }, {\n    key: \"cross\",\n    value: function cross(vector) {\n      vec3.cross(this, this, vector);\n      return this.check();\n    }\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(_ref) {\n      var radians = _ref.radians,\n          _ref$origin = _ref.origin,\n          origin = _ref$origin === void 0 ? ORIGIN : _ref$origin;\n      vec3.rotateX(this, this, origin, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(_ref2) {\n      var radians = _ref2.radians,\n          _ref2$origin = _ref2.origin,\n          origin = _ref2$origin === void 0 ? ORIGIN : _ref2$origin;\n      vec3.rotateY(this, this, origin, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateZ\",\n    value: function rotateZ(_ref3) {\n      var radians = _ref3.radians,\n          _ref3$origin = _ref3.origin,\n          origin = _ref3$origin === void 0 ? ORIGIN : _ref3$origin;\n      vec3.rotateZ(this, this, origin, radians);\n      return this.check();\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(matrix4) {\n      return this.transformAsPoint(matrix4);\n    }\n  }, {\n    key: \"transformAsPoint\",\n    value: function transformAsPoint(matrix4) {\n      vec3.transformMat4(this, this, matrix4);\n      return this.check();\n    }\n  }, {\n    key: \"transformAsVector\",\n    value: function transformAsVector(matrix4) {\n      vec3_transformMat4AsVector(this, this, matrix4);\n      return this.check();\n    }\n  }, {\n    key: \"transformByMatrix3\",\n    value: function transformByMatrix3(matrix3) {\n      vec3.transformMat3(this, this, matrix3);\n      return this.check();\n    }\n  }, {\n    key: \"transformByMatrix2\",\n    value: function transformByMatrix2(matrix2) {\n      vec3_transformMat2(this, this, matrix2);\n      return this.check();\n    }\n  }, {\n    key: \"transformByQuaternion\",\n    value: function transformByQuaternion(quaternion) {\n      vec3.transformQuat(this, this, quaternion);\n      return this.check();\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 3;\n    }\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      return this[2] = checkNumber(value);\n    }\n  }]);\n\n  return Vector3;\n}(Vector);\n\nexport { Vector3 as default };","export default `\\\n\nuniform float lighting_uAmbient;\nuniform float lighting_uDiffuse;\nuniform float lighting_uShininess;\nuniform vec3  lighting_uSpecularColor;\n\nvec3 lighting_getLightColor(vec3 surfaceColor, vec3 light_direction, vec3 view_direction, vec3 normal_worldspace, vec3 color) {\n    vec3 halfway_direction = normalize(light_direction + view_direction);\n    float lambertian = dot(light_direction, normal_worldspace);\n    float specular = 0.0;\n    if (lambertian > 0.0) {\n      float specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);\n      specular = pow(specular_angle, lighting_uShininess);\n    }\n    lambertian = max(lambertian, 0.0);\n    return (lambertian * lighting_uDiffuse * surfaceColor + specular * lighting_uSpecularColor) * color;\n}\n\nvec3 lighting_getLightColor(vec3 surfaceColor, vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {\n  vec3 lightColor = surfaceColor;\n\n  if (lighting_uEnabled) {\n    vec3 view_direction = normalize(cameraPosition - position_worldspace);\n    lightColor = lighting_uAmbient * surfaceColor * lighting_uAmbientLight.color;\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uPointLightCount) {\n        break;\n      }\n      PointLight pointLight = lighting_uPointLight[i];\n      vec3 light_position_worldspace = pointLight.position;\n      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);\n      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\n    }\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uDirectionalLightCount) {\n        break;\n      }\n      DirectionalLight directionalLight = lighting_uDirectionalLight[i];\n      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\n    }\n  }\n  return lightColor;\n}\n\nvec3 lighting_getSpecularLightColor(vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {\n  vec3 lightColor = vec3(0, 0, 0);\n  vec3 surfaceColor = vec3(0, 0, 0);\n\n  if (lighting_uEnabled) {\n    vec3 view_direction = normalize(cameraPosition - position_worldspace);\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uPointLightCount) {\n        break;\n      }\n      PointLight pointLight = lighting_uPointLight[i];\n      vec3 light_position_worldspace = pointLight.position;\n      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);\n      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\n    }\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uDirectionalLightCount) {\n        break;\n      }\n      DirectionalLight directionalLight = lighting_uDirectionalLight[i];\n      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\n    }\n  }\n  return lightColor;\n}\n`;\n","import lights from '../lights/lights';\nimport lightingShader from './phong-lighting.glsl';\n\nconst gouraudLighting = {\n  name: 'gouraud-lighting',\n  dependencies: [lights],\n  vs: lightingShader,\n  defines: {\n    LIGHTING_VERTEX: 1\n  },\n  getUniforms\n};\n\nconst phongLighting = {\n  name: 'phong-lighting',\n  dependencies: [lights],\n  fs: lightingShader,\n  defines: {\n    LIGHTING_FRAGMENT: 1\n  },\n  getUniforms\n};\n\nconst INITIAL_MODULE_OPTIONS = {};\n\nfunction getMaterialUniforms(material) {\n  const {ambient = 0.35, diffuse = 0.6, shininess = 32, specularColor = [30, 30, 30]} = material;\n\n  return {\n    lighting_uAmbient: ambient,\n    lighting_uDiffuse: diffuse,\n    lighting_uShininess: shininess,\n    lighting_uSpecularColor: specularColor.map(x => x / 255)\n  };\n}\n\nfunction getUniforms(opts = INITIAL_MODULE_OPTIONS) {\n  if (!('material' in opts)) {\n    return {};\n  }\n\n  const {material} = opts;\n\n  if (!material) {\n    return {lighting_uEnabled: false};\n  }\n\n  return getMaterialUniforms(material);\n}\n\nexport {gouraudLighting, phongLighting};\n","import { config } from 'math.gl';\nexport { default as Vector2 } from './classes/vector2';\nexport { default as Vector3 } from './classes/vector3';\nexport { default as Vector4 } from './classes/vector4';\nexport { default as Matrix3 } from './classes/matrix3';\nexport { default as Matrix4 } from './classes/matrix4';\nexport { default as Quaternion } from './classes/quaternion';\nexport { config, configure, formatValue, isArray, clone, equals, exactEquals, toRadians, toDegrees, radians, degrees, sin, cos, tan, asin, acos, atan, clamp, lerp, withEpsilon as _withEpsilon } from './lib/common';\nexport { checkNumber } from './lib/validators';\nexport { default as _MathUtils } from './lib/math-utils';\nexport { default as _SphericalCoordinates } from './classes/spherical-coordinates';\nexport { default as _Pose } from './classes/pose';\nexport { default as _Euler } from './classes/euler';\nexport { default as _Polygon } from './addons/polygon';\nexport { default as assert } from './lib/assert';\nvar globals = {\n  self: typeof self !== 'undefined' && self,\n  window: typeof window !== 'undefined' && window,\n  global: typeof global !== 'undefined' && global\n};\nvar global_ = globals.global || globals.self || globals.window;\nglobal_.mathgl = {\n  config: config\n};","/* global window, document */\n\n// Light class implementing the AnimationLoop interface\n// use by examples w/o creating a gl context\nexport class MiniAnimationLoop {\n  static getInfo() {\n    return '';\n  }\n\n  start() {}\n\n  stop() {}\n\n  delete() {}\n\n  onFinalize() {}\n\n  waitForRender() {\n    return Promise.resolve();\n  }\n\n  _setDisplay() {}\n\n  _getCanvas(props = {}) {\n    let canvas;\n    if (props.canvas) {\n      canvas = document.getElementById(props.canvas);\n      const dpr = window.devicePixelRatio || 1;\n      canvas.height = canvas.clientHeight * dpr;\n      canvas.width = canvas.clientWidth * dpr;\n    } else {\n      canvas = document.createElement('canvas');\n      canvas.width = 800;\n      canvas.height = 600;\n      document.body.appendChild(canvas);\n    }\n\n    return canvas;\n  }\n\n  _getContainer(props = {}) {\n    if (this.container) {\n      return this.container;\n    }\n\n    let width;\n    let height;\n\n    this.container = document.createElement('div');\n\n    if (props.canvas) {\n      const canvas = document.getElementById(props.canvas);\n      this.parent = canvas.parentElement;\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n      this.container.style.position = 'relative';\n      this.container.style.top = `-${height}px`;\n    } else {\n      this.parent = document.body;\n      width = 800;\n      height = 800;\n    }\n\n    this.container.style.width = `${width}px`;\n    this.container.style.height = `${height}px`;\n    this.parent.appendChild(this.container);\n\n    return this.container;\n  }\n\n  _removeContainer(props = {}) {\n    this.parent.removeChild(this.container);\n  }\n}\n\n// Create a deterministic pseudorandom number generator\nexport function getRandom() {\n  let s = 1;\n  let c = 1;\n  return () => {\n    s = Math.sin(c * 17.23);\n    c = Math.cos(s * 27.92);\n    return fract(Math.abs(s * c) * 1432.71);\n  };\n}\n\nfunction fract(n) {\n  return n - Math.floor(n);\n}\n","import getPrototypeOf from \"./getPrototypeOf\";\nimport setPrototypeOf from \"./setPrototypeOf\";\nimport isNativeFunction from \"./isNativeFunction\";\nimport construct from \"./construct\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-finite\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.typed.float32-array\";\nimport \"core-js/modules/es6.array.is-array\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport { config, formatValue, equals as _equals, isArray } from '../../lib/common';\n\nvar MathArray = function (_Array) {\n  _inherits(MathArray, _Array);\n\n  function MathArray() {\n    _classCallCheck(this, MathArray);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MathArray).apply(this, arguments));\n  }\n\n  _createClass(MathArray, [{\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor().copy(this);\n    }\n  }, {\n    key: \"from\",\n    value: function from(arrayOrObject) {\n      return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : this.fromObject(arrayOrObject);\n    }\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(array) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = array[i + offset];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"to\",\n    value: function to(arrayOrObject) {\n      if (arrayOrObject === this) {\n        return this;\n      }\n\n      return isArray(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);\n    }\n  }, {\n    key: \"toTarget\",\n    value: function toTarget(target) {\n      return target ? this.to(target) : this;\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        array[offset + i] = this[i];\n      }\n\n      return array;\n    }\n  }, {\n    key: \"toFloat32Array\",\n    value: function toFloat32Array() {\n      return new Float32Array(this);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.formatString(config);\n    }\n  }, {\n    key: \"formatString\",\n    value: function formatString(opts) {\n      var string = '';\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        string += (i > 0 ? ', ' : '') + formatValue(this[i], opts);\n      }\n\n      return \"\".concat(opts.printTypes ? this.constructor.name : '', \"[\").concat(string, \"]\");\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(array) {\n      if (!array || this.length !== array.length) {\n        return false;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        if (!_equals(this[i], array[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"exactEquals\",\n    value: function exactEquals(array) {\n      if (!array || this.length !== array.length) {\n        return false;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        if (this[i] !== array[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = -this[i];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lerp\",\n    value: function lerp(a, b, t) {\n      if (t === undefined) {\n        t = b;\n        b = a;\n        a = this;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        var ai = a[i];\n        this[i] = ai + t * (b[i] - ai);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"min\",\n    value: function min(vector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(vector[i], this[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"max\",\n    value: function max(vector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.max(vector[i], this[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"clamp\",\n    value: function clamp(minVector, maxVector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(Math.max(this[i], minVector[i]), maxVector[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"add\",\n    value: function add() {\n      for (var _len = arguments.length, vectors = new Array(_len), _key = 0; _key < _len; _key++) {\n        vectors[_key] = arguments[_key];\n      }\n\n      for (var _i = 0, _vectors = vectors; _i < _vectors.length; _i++) {\n        var vector = _vectors[_i];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] += vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract() {\n      for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        vectors[_key2] = arguments[_key2];\n      }\n\n      for (var _i2 = 0, _vectors2 = vectors; _i2 < _vectors2.length; _i2++) {\n        var vector = _vectors2[_i2];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] -= vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(_scale) {\n      if (Array.isArray(_scale)) {\n        return this.multiply(_scale);\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= _scale;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(a) {\n      return this.subtract(a);\n    }\n  }, {\n    key: \"setScalar\",\n    value: function setScalar(a) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = a;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"addScalar\",\n    value: function addScalar(a) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] += a;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"subScalar\",\n    value: function subScalar(a) {\n      return this.addScalar(-a);\n    }\n  }, {\n    key: \"multiplyScalar\",\n    value: function multiplyScalar(scalar) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= scalar;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"divideScalar\",\n    value: function divideScalar(a) {\n      return this.scale(1 / a);\n    }\n  }, {\n    key: \"clampScalar\",\n    value: function clampScalar(min, max) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(Math.max(this[i], min), max);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"multiplyByScalar\",\n    value: function multiplyByScalar(scalar) {\n      return this.scale(scalar);\n    }\n  }, {\n    key: \"check\",\n    value: function check() {\n      if (config.debug && !this.validate(this)) {\n        throw new Error(\"math.gl: \".concat(this.constructor.name, \" some fields set to invalid numbers'\"));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      var valid = this.length === this.ELEMENTS;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        valid = valid && Number.isFinite(this[i]);\n      }\n\n      return valid;\n    }\n  }, {\n    key: \"elements\",\n    get: function get() {\n      return this;\n    }\n  }]);\n\n  return MathArray;\n}(_wrapNativeSuper(Array));\n\nexport { MathArray as default };","import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-finite\";\nimport { config } from './common';\nexport function validateVector(v, length) {\n  if (v.length !== length) {\n    return false;\n  }\n\n  for (var i = 0; i < v.length; ++i) {\n    if (!Number.isFinite(v[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function checkNumber(value) {\n  if (!Number.isFinite(value)) {\n    throw new Error(\"Invalid number \".concat(value));\n  }\n\n  return value;\n}\nexport function checkVector(v, length, callerName) {\n  if (config.debug && !validateVector(v, length)) {\n    throw new Error(\"math.gl: \".concat(callerName | '', \" some fields set to invalid numbers'\"));\n  }\n\n  return v;\n}\nvar map = {};\nexport function deprecated(method, version) {\n  if (!map[method]) {\n    map[method] = true;\n    console.warn(\"\".concat(method, \" has been removed in version \").concat(version, \", see upgrade guide for more information\"));\n  }\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import \"core-js/modules/es6.array.fill\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport MathArray from './math-array';\nimport { checkNumber } from '../../lib/validators';\nimport { config } from '../../lib/common';\n\nvar Matrix = function (_MathArray) {\n  _inherits(Matrix, _MathArray);\n\n  function Matrix() {\n    _classCallCheck(this, Matrix);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Matrix).apply(this, arguments));\n  }\n\n  _createClass(Matrix, [{\n    key: \"toString\",\n    value: function toString() {\n      var string = '[';\n\n      if (config.printRowMajor) {\n        string += 'row-major:';\n\n        for (var row = 0; row < this.RANK; ++row) {\n          for (var col = 0; col < this.RANK; ++col) {\n            string += \" \".concat(this[col * this.RANK + row]);\n          }\n        }\n      } else {\n        string += 'column-major:';\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          string += \" \".concat(this[i]);\n        }\n      }\n\n      string += ']';\n      return string;\n    }\n  }, {\n    key: \"getElementIndex\",\n    value: function getElementIndex(row, col) {\n      return col * this.RANK + row;\n    }\n  }, {\n    key: \"getElement\",\n    value: function getElement(row, col) {\n      return this[col * this.RANK + row];\n    }\n  }, {\n    key: \"setElement\",\n    value: function setElement(row, col, value) {\n      this[col * this.RANK + row] = checkNumber(value);\n      return this;\n    }\n  }, {\n    key: \"getColumn\",\n    value: function getColumn(columnIndex) {\n      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Array(this.RANK).fill(-0);\n      var firstIndex = columnIndex * this.RANK;\n\n      for (var i = 0; i < this.RANK; ++i) {\n        result[i] = this[firstIndex + i];\n      }\n\n      return result;\n    }\n  }, {\n    key: \"setColumn\",\n    value: function setColumn(columnIndex, columnVector) {\n      var firstIndex = columnIndex * this.RANK;\n\n      for (var i = 0; i < this.RANK; ++i) {\n        this[firstIndex + i] = columnVector[i];\n      }\n\n      return this;\n    }\n  }]);\n\n  return Matrix;\n}(MathArray);\n\nexport { Matrix as default };","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import \"core-js/modules/es6.array.is-array\";\nimport \"core-js/modules/es6.object.freeze\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { checkVector, deprecated } from '../lib/validators';\nimport Matrix from './base/matrix';\nimport { vec2_transformMat4AsVector, vec3_transformMat4AsVector } from '../lib/gl-matrix-extras';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport * as vec4 from 'gl-matrix/vec4';\nvar IDENTITY = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\nvar ZERO = Object.freeze([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nvar INDICES = Object.freeze({\n  COL0ROW0: 0,\n  COL0ROW1: 1,\n  COL0ROW2: 2,\n  COL0ROW3: 3,\n  COL1ROW0: 4,\n  COL1ROW1: 5,\n  COL1ROW2: 6,\n  COL1ROW3: 7,\n  COL2ROW0: 8,\n  COL2ROW1: 9,\n  COL2ROW2: 10,\n  COL2ROW3: 11,\n  COL3ROW0: 12,\n  COL3ROW1: 13,\n  COL3ROW2: 14,\n  COL3ROW3: 15\n});\nvar constants = {};\n\nvar Matrix4 = function (_Matrix) {\n  _inherits(Matrix4, _Matrix);\n\n  _createClass(Matrix4, [{\n    key: \"INDICES\",\n    get: function get() {\n      return INDICES;\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 16;\n    }\n  }, {\n    key: \"RANK\",\n    get: function get() {\n      return 4;\n    }\n  }], [{\n    key: \"IDENTITY\",\n    get: function get() {\n      constants.IDENTITY = constants.IDENTITY || Object.freeze(new Matrix4(IDENTITY));\n      return constants.IDENTITY;\n    }\n  }, {\n    key: \"ZERO\",\n    get: function get() {\n      constants.ZERO = constants.ZERO || Object.freeze(new Matrix4(ZERO));\n      return constants.ZERO;\n    }\n  }]);\n\n  function Matrix4(array) {\n    var _this;\n\n    _classCallCheck(this, Matrix4);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Matrix4).call(this, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0));\n\n    if (arguments.length === 1 && Array.isArray(array)) {\n      _this.copy(array);\n    } else {\n      _this.identity();\n    }\n\n    return _this;\n  }\n\n  _createClass(Matrix4, [{\n    key: \"copy\",\n    value: function copy(array) {\n      this[0] = array[0];\n      this[1] = array[1];\n      this[2] = array[2];\n      this[3] = array[3];\n      this[4] = array[4];\n      this[5] = array[5];\n      this[6] = array[6];\n      this[7] = array[7];\n      this[8] = array[8];\n      this[9] = array[9];\n      this[10] = array[10];\n      this[11] = array[11];\n      this[12] = array[12];\n      this[13] = array[13];\n      this[14] = array[14];\n      this[15] = array[15];\n      return this.check();\n    }\n  }, {\n    key: \"set\",\n    value: function set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m30;\n      this[4] = m01;\n      this[5] = m11;\n      this[6] = m21;\n      this[7] = m31;\n      this[8] = m02;\n      this[9] = m12;\n      this[10] = m22;\n      this[11] = m32;\n      this[12] = m03;\n      this[13] = m13;\n      this[14] = m23;\n      this[15] = m33;\n      return this.check();\n    }\n  }, {\n    key: \"setRowMajor\",\n    value: function setRowMajor(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m30;\n      this[4] = m01;\n      this[5] = m11;\n      this[6] = m21;\n      this[7] = m31;\n      this[8] = m02;\n      this[9] = m12;\n      this[10] = m22;\n      this[11] = m32;\n      this[12] = m03;\n      this[13] = m13;\n      this[14] = m23;\n      this[15] = m33;\n      return this.check();\n    }\n  }, {\n    key: \"toRowMajor\",\n    value: function toRowMajor(result) {\n      result[0] = this[0];\n      result[1] = this[4];\n      result[2] = this[8];\n      result[3] = this[12];\n      result[4] = this[1];\n      result[5] = this[5];\n      result[6] = this[9];\n      result[7] = this[13];\n      result[8] = this[2];\n      result[9] = this[6];\n      result[10] = this[10];\n      result[11] = this[14];\n      result[12] = this[3];\n      result[13] = this[7];\n      result[14] = this[11];\n      result[15] = this[15];\n      return result;\n    }\n  }, {\n    key: \"identity\",\n    value: function identity() {\n      return this.copy(IDENTITY);\n    }\n  }, {\n    key: \"fromQuaternion\",\n    value: function fromQuaternion(q) {\n      mat4.fromQuat(this, q);\n      return this.check();\n    }\n  }, {\n    key: \"frustum\",\n    value: function frustum(_ref) {\n      var left = _ref.left,\n          right = _ref.right,\n          bottom = _ref.bottom,\n          top = _ref.top,\n          near = _ref.near,\n          far = _ref.far;\n\n      if (far === Infinity) {\n        Matrix4._computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);\n      } else {\n        mat4.frustum(this, left, right, bottom, top, near, far);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lookAt\",\n    value: function lookAt(eye, center, up) {\n      if (arguments.length === 1) {\n        var _eye = eye;\n        eye = _eye.eye;\n        center = _eye.center;\n        up = _eye.up;\n      }\n\n      center = center || [0, 0, 0];\n      up = up || [0, 1, 0];\n      mat4.lookAt(this, eye, center, up);\n      return this.check();\n    }\n  }, {\n    key: \"ortho\",\n    value: function ortho(_ref2) {\n      var left = _ref2.left,\n          right = _ref2.right,\n          bottom = _ref2.bottom,\n          top = _ref2.top,\n          _ref2$near = _ref2.near,\n          near = _ref2$near === void 0 ? 0.1 : _ref2$near,\n          _ref2$far = _ref2.far,\n          far = _ref2$far === void 0 ? 500 : _ref2$far;\n      mat4.ortho(this, left, right, bottom, top, near, far);\n      return this.check();\n    }\n  }, {\n    key: \"orthographic\",\n    value: function orthographic(_ref3) {\n      var _ref3$fovy = _ref3.fovy,\n          fovy = _ref3$fovy === void 0 ? 45 * Math.PI / 180 : _ref3$fovy,\n          _ref3$aspect = _ref3.aspect,\n          aspect = _ref3$aspect === void 0 ? 1 : _ref3$aspect,\n          _ref3$focalDistance = _ref3.focalDistance,\n          focalDistance = _ref3$focalDistance === void 0 ? 1 : _ref3$focalDistance,\n          _ref3$near = _ref3.near,\n          near = _ref3$near === void 0 ? 0.1 : _ref3$near,\n          _ref3$far = _ref3.far,\n          far = _ref3$far === void 0 ? 500 : _ref3$far;\n\n      if (fovy > Math.PI * 2) {\n        throw Error('radians');\n      }\n\n      var halfY = fovy / 2;\n      var top = focalDistance * Math.tan(halfY);\n      var right = top * aspect;\n      return new Matrix4().ortho({\n        left: -right,\n        right: right,\n        bottom: -top,\n        top: top,\n        near: near,\n        far: far\n      });\n    }\n  }, {\n    key: \"perspective\",\n    value: function perspective() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          fovy = _ref4.fovy,\n          _ref4$fov = _ref4.fov,\n          fov = _ref4$fov === void 0 ? 45 * Math.PI / 180 : _ref4$fov,\n          _ref4$aspect = _ref4.aspect,\n          aspect = _ref4$aspect === void 0 ? 1 : _ref4$aspect,\n          _ref4$near = _ref4.near,\n          near = _ref4$near === void 0 ? 0.1 : _ref4$near,\n          _ref4$far = _ref4.far,\n          far = _ref4$far === void 0 ? 500 : _ref4$far;\n\n      fovy = fovy || fov;\n\n      if (fovy > Math.PI * 2) {\n        throw Error('radians');\n      }\n\n      mat4.perspective(this, fovy, aspect, near, far);\n      return this.check();\n    }\n  }, {\n    key: \"determinant\",\n    value: function determinant() {\n      return mat4.determinant(this);\n    }\n  }, {\n    key: \"getScale\",\n    value: function getScale() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n      result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);\n      result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);\n      result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);\n      return result;\n    }\n  }, {\n    key: \"getTranslation\",\n    value: function getTranslation() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n      result[0] = this[12];\n      result[1] = this[13];\n      result[2] = this[14];\n      return result;\n    }\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n      var scaleResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var scale = this.getScale(scaleResult || [-0, -0, -0]);\n      var inverseScale0 = 1 / scale[0];\n      var inverseScale1 = 1 / scale[1];\n      var inverseScale2 = 1 / scale[2];\n      result[0] = this[0] * inverseScale0;\n      result[1] = this[1] * inverseScale1;\n      result[2] = this[2] * inverseScale2;\n      result[3] = 0;\n      result[4] = this[4] * inverseScale0;\n      result[5] = this[5] * inverseScale1;\n      result[6] = this[6] * inverseScale2;\n      result[7] = 0;\n      result[8] = this[8] * inverseScale0;\n      result[9] = this[9] * inverseScale1;\n      result[10] = this[10] * inverseScale2;\n      result[11] = 0;\n      result[12] = 0;\n      result[13] = 0;\n      result[14] = 0;\n      result[15] = 1;\n      return result;\n    }\n  }, {\n    key: \"getRotationMatrix3\",\n    value: function getRotationMatrix3() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0, -0, -0, -0, -0, -0, -0];\n      var scaleResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var scale = this.getScale(scaleResult || [-0, -0, -0]);\n      var inverseScale0 = 1 / scale[0];\n      var inverseScale1 = 1 / scale[1];\n      var inverseScale2 = 1 / scale[2];\n      result[0] = this[0] * inverseScale0;\n      result[1] = this[1] * inverseScale1;\n      result[2] = this[2] * inverseScale2;\n      result[3] = this[4] * inverseScale0;\n      result[4] = this[5] * inverseScale1;\n      result[5] = this[6] * inverseScale2;\n      result[6] = this[8] * inverseScale0;\n      result[7] = this[9] * inverseScale1;\n      result[8] = this[10] * inverseScale2;\n      return result;\n    }\n  }, {\n    key: \"transpose\",\n    value: function transpose() {\n      mat4.transpose(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      mat4.invert(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyLeft\",\n    value: function multiplyLeft(a) {\n      mat4.multiply(this, a, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyRight\",\n    value: function multiplyRight(a) {\n      mat4.multiply(this, this, a);\n      return this.check();\n    }\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(radians) {\n      mat4.rotateX(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(radians) {\n      mat4.rotateY(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateZ\",\n    value: function rotateZ(radians) {\n      mat4.rotateZ(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateXYZ\",\n    value: function rotateXYZ(_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 3),\n          rx = _ref6[0],\n          ry = _ref6[1],\n          rz = _ref6[2];\n\n      return this.rotateX(rx).rotateY(ry).rotateZ(rz);\n    }\n  }, {\n    key: \"rotateAxis\",\n    value: function rotateAxis(radians, axis) {\n      mat4.rotate(this, this, radians, axis);\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(factor) {\n      if (Array.isArray(factor)) {\n        mat4.scale(this, this, factor);\n      } else {\n        mat4.scale(this, this, [factor, factor, factor]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(vec) {\n      mat4.translate(this, this, vec);\n      return this.check();\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(vector, result) {\n      if (vector.length === 4) {\n        result = vec4.transformMat4(result || [-0, -0, -0, -0], vector, this);\n        checkVector(result, 4);\n        return result;\n      }\n\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformAsPoint\",\n    value: function transformAsPoint(vector, result) {\n      var length = vector.length;\n\n      switch (length) {\n        case 2:\n          result = vec2.transformMat4(result || [-0, -0], vector, this);\n          break;\n\n        case 3:\n          result = vec3.transformMat4(result || [-0, -0, -0], vector, this);\n          break;\n\n        default:\n          throw new Error('Illegal vector');\n      }\n\n      checkVector(result, vector.length);\n      return result;\n    }\n  }, {\n    key: \"transformAsVector\",\n    value: function transformAsVector(vector, result) {\n      switch (vector.length) {\n        case 2:\n          result = vec2_transformMat4AsVector(result || [-0, -0], vector, this);\n          break;\n\n        case 3:\n          result = vec3_transformMat4AsVector(result || [-0, -0, -0], vector, this);\n          break;\n\n        default:\n          throw new Error('Illegal vector');\n      }\n\n      checkVector(result, vector.length);\n      return result;\n    }\n  }, {\n    key: \"makeRotationX\",\n    value: function makeRotationX(radians) {\n      return this.identity().rotateX(radians);\n    }\n  }, {\n    key: \"makeTranslation\",\n    value: function makeTranslation(x, y, z) {\n      return this.identity().translate([x, y, z]);\n    }\n  }, {\n    key: \"transformPoint\",\n    value: function transformPoint(vector, result) {\n      deprecated('Matrix4.transformPoint', '3.0');\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformVector\",\n    value: function transformVector(vector, result) {\n      deprecated('Matrix4.transformVector', '3.0');\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformDirection\",\n    value: function transformDirection(vector, result) {\n      deprecated('Matrix4.transformDirection', '3.0');\n      return this.transformAsVector(vector, result);\n    }\n  }], [{\n    key: \"_computeInfinitePerspectiveOffCenter\",\n    value: function _computeInfinitePerspectiveOffCenter(result, left, right, bottom, top, near) {\n      var column0Row0 = 2.0 * near / (right - left);\n      var column1Row1 = 2.0 * near / (top - bottom);\n      var column2Row0 = (right + left) / (right - left);\n      var column2Row1 = (top + bottom) / (top - bottom);\n      var column2Row2 = -1.0;\n      var column2Row3 = -1.0;\n      var column3Row2 = -2.0 * near;\n      result[0] = column0Row0;\n      result[1] = 0.0;\n      result[2] = 0.0;\n      result[3] = 0.0;\n      result[4] = 0.0;\n      result[5] = column1Row1;\n      result[6] = 0.0;\n      result[7] = 0.0;\n      result[8] = column2Row0;\n      result[9] = column2Row1;\n      result[10] = column2Row2;\n      result[11] = column2Row3;\n      result[12] = 0.0;\n      result[13] = 0.0;\n      result[14] = column3Row2;\n      result[15] = 0.0;\n      return result;\n    }\n  }]);\n\n  return Matrix4;\n}(Matrix);\n\nexport { Matrix4 as default };","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","export function vec2_transformMat4AsVector(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  var w = m[3] * x + m[7] * y || 1.0;\n  out[0] = (m[0] * x + m[4] * y) / w;\n  out[1] = (m[1] * x + m[5] * y) / w;\n  return out;\n}\nexport function vec3_transformMat4AsVector(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n  return out;\n}\nexport function vec3_transformMat2(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  out[2] = a[2];\n  return out;\n}\nexport function vec4_transformMat2(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\nexport function vec4_transformMat3(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  out[0] = m[0] * x + m[3] * y + m[6] * z;\n  out[1] = m[1] * x + m[4] * y + m[7] * z;\n  out[2] = m[2] * x + m[5] * y + m[8] * z;\n  out[3] = a[3];\n  return out;\n}","export default `\\\n#if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))\n\nstruct AmbientLight {\n vec3 color;\n};\n\nstruct PointLight {\n vec3 color;\n vec3 position;\n\n // Constant-Linear-Exponential\n vec3 attenuation;\n};\n\nstruct DirectionalLight {\n  vec3 color;\n  vec3 direction;\n};\n\nuniform AmbientLight lighting_uAmbientLight;\nuniform PointLight lighting_uPointLight[MAX_LIGHTS];\nuniform DirectionalLight lighting_uDirectionalLight[MAX_LIGHTS];\nuniform int lighting_uPointLightCount;\nuniform int lighting_uDirectionalLightCount;\n\nuniform bool lighting_uEnabled;\n\nfloat getPointLightAttenuation(PointLight pointLight, float distance) {\n  return pointLight.attenuation.x\n       + pointLight.attenuation.y * distance\n       + pointLight.attenuation.z * distance * distance;\n}\n\n#endif\n`;\n","import lightingShader from './lights.glsl';\n\nexport default {\n  name: 'lights',\n  vs: lightingShader,\n  fs: lightingShader,\n  getUniforms,\n  defines: {\n    MAX_LIGHTS: 3\n  }\n};\n\nconst INITIAL_MODULE_OPTIONS = {};\n\n// Take color 0-255 and intensity as input and output 0.0-1.0 range\nfunction convertColor({color = [0, 0, 0], intensity = 1.0} = {}) {\n  return color.map(component => (component * intensity) / 255.0);\n}\n\nfunction getLightSourceUniforms({ambientLight, pointLights = [], directionalLights = []}) {\n  const lightSourceUniforms = {};\n\n  if (ambientLight) {\n    lightSourceUniforms['lighting_uAmbientLight.color'] = convertColor(ambientLight);\n  } else {\n    lightSourceUniforms['lighting_uAmbientLight.color'] = [0, 0, 0];\n  }\n\n  pointLights.forEach((pointLight, index) => {\n    lightSourceUniforms[`lighting_uPointLight[${index}].color`] = convertColor(pointLight);\n    lightSourceUniforms[`lighting_uPointLight[${index}].position`] = pointLight.position;\n    lightSourceUniforms[`lighting_uPointLight[${index}].attenuation`] = pointLight.attenuation || [\n      1,\n      0,\n      0\n    ];\n  });\n  lightSourceUniforms.lighting_uPointLightCount = pointLights.length;\n\n  directionalLights.forEach((directionalLight, index) => {\n    lightSourceUniforms[`lighting_uDirectionalLight[${index}].color`] = convertColor(\n      directionalLight\n    );\n    lightSourceUniforms[`lighting_uDirectionalLight[${index}].direction`] =\n      directionalLight.direction;\n  });\n  lightSourceUniforms.lighting_uDirectionalLightCount = directionalLights.length;\n\n  return lightSourceUniforms;\n}\n\n// eslint-disable-next-line complexity\nfunction getUniforms(opts = INITIAL_MODULE_OPTIONS) {\n  // Specify lights separately\n  if ('lightSources' in opts) {\n    const {ambientLight, pointLights, directionalLights} = opts.lightSources || {};\n    const hasLights =\n      ambientLight ||\n      (pointLights && pointLights.length > 0) ||\n      (directionalLights && directionalLights.length > 0);\n\n    if (!hasLights) {\n      return {lighting_uEnabled: false};\n    }\n\n    return Object.assign(\n      {},\n      getLightSourceUniforms({ambientLight, pointLights, directionalLights}),\n      {\n        lighting_uEnabled: true\n      }\n    );\n  }\n\n  // Support for array of lights. Type of light is detected by type field\n  if ('lights' in opts) {\n    const lightSources = {pointLights: [], directionalLights: []};\n    for (const light of opts.lights || []) {\n      switch (light.type) {\n        case 'ambient':\n          // Note: Only uses last ambient light\n          // TODO - add ambient light sources on CPU?\n          lightSources.ambientLight = light;\n          break;\n        case 'directional':\n          lightSources.directionalLights.push(light);\n          break;\n        case 'point':\n          lightSources.pointLights.push(light);\n          break;\n        default:\n        // eslint-disable-next-line\n        // console.warn(light.type);\n      }\n    }\n\n    // Call the `opts.lightSources`` version\n    return getUniforms({lightSources});\n  }\n\n  return {};\n}\n","import \"core-js/modules/es6.typed.float32-array\";\n\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-finite\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.array.is-array\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _construct from \"@babel/runtime/helpers/esm/construct\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport assert from './assert';\nvar RADIANS_TO_DEGREES = 1 / Math.PI * 180;\nvar DEGREES_TO_RADIANS = 1 / 180 * Math.PI;\nvar config = {};\nconfig.EPSILON = 1e-12;\nconfig.debug = false;\nconfig.precision = 4;\nconfig.printTypes = false;\nconfig.printDegrees = false;\nconfig.printRowMajor = true;\nexport { config };\nexport function configure() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  for (var key in options) {\n    assert(key in config);\n    config[key] = options[key];\n  }\n\n  return config;\n}\n\nfunction round(value) {\n  return Math.round(value / config.EPSILON) * config.EPSILON;\n}\n\nexport function formatValue(value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$precision = _ref.precision,\n      precision = _ref$precision === void 0 ? config.precision || 4 : _ref$precision;\n\n  value = round(value);\n  return \"\".concat(parseFloat(value.toPrecision(precision)));\n}\nexport function isArray(value) {\n  return Array.isArray(value) || ArrayBuffer.isView(value) && value.length !== undefined;\n}\n\nfunction duplicateArray(array) {\n  return array.clone ? array.clone() : new Array(array.length);\n}\n\nexport function clone(array) {\n  return array.clone ? array.clone() : _construct(Array, _toConsumableArray(array));\n}\n\nfunction map(value, func, result) {\n  if (isArray(value)) {\n    result = result || duplicateArray(value);\n\n    for (var i = 0; i < result.length && i < value.length; ++i) {\n      result[i] = func(value[i], i, result);\n    }\n\n    return result;\n  }\n\n  return func(value);\n}\n\nexport function toRadians(degrees) {\n  return radians(degrees);\n}\nexport function toDegrees(radians) {\n  return degrees(radians);\n}\nexport function radians(degrees, result) {\n  return map(degrees, function (degrees) {\n    return degrees * DEGREES_TO_RADIANS;\n  }, result);\n}\nexport function degrees(radians, result) {\n  return map(radians, function (radians) {\n    return radians * RADIANS_TO_DEGREES;\n  }, result);\n}\nexport function sin(radians) {\n  return map(radians, function (angle) {\n    return Math.sin(angle);\n  });\n}\nexport function cos(radians) {\n  return map(radians, function (angle) {\n    return Math.cos(angle);\n  });\n}\nexport function tan(radians) {\n  return map(radians, function (angle) {\n    return Math.tan(angle);\n  });\n}\nexport function asin(radians) {\n  return map(radians, function (angle) {\n    return Math.asin(angle);\n  });\n}\nexport function acos(radians) {\n  return map(radians, function (angle) {\n    return Math.acos(angle);\n  });\n}\nexport function atan(radians) {\n  return map(radians, function (angle) {\n    return Math.atan(angle);\n  });\n}\nexport function clamp(value, min, max) {\n  return map(value, function (value) {\n    return Math.max(min, Math.min(max, value));\n  });\n}\nexport function lerp(a, b, t) {\n  if (isArray(a)) {\n    return a.map(function (ai, i) {\n      return lerp(ai, b[i], t);\n    });\n  }\n\n  return t * b + (1 - t) * a;\n}\nexport function equals(a, b, epsilon) {\n  var oldEpsilon = config.EPSILON;\n\n  if (epsilon) {\n    config.EPSILON = epsilon;\n  }\n\n  try {\n    if (a === b) {\n      return true;\n    }\n\n    if (isArray(a) && isArray(b)) {\n      if (a.length !== b.length) {\n        return false;\n      }\n\n      for (var i = 0; i < a.length; ++i) {\n        if (!equals(a[i], b[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    if (a && a.equals) {\n      return a.equals(b);\n    }\n\n    if (b && b.equals) {\n      return b.equals(a);\n    }\n\n    if (Number.isFinite(a) && Number.isFinite(b)) {\n      return Math.abs(a - b) <= config.EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n    }\n\n    return false;\n  } finally {\n    config.EPSILON = oldEpsilon;\n  }\n}\nexport function exactEquals(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a && _typeof(a) === 'object' && b && _typeof(b) === 'object') {\n    if (a.constructor !== b.constructor) {\n      return false;\n    }\n\n    if (a.exactEquals) {\n      return a.exactEquals(b);\n    }\n  }\n\n  if (isArray(a) && isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; ++i) {\n      if (!exactEquals(a[i], b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\nexport function withEpsilon(EPSILON, func) {\n  var oldPrecision = config.EPSILON;\n  config.EPSILON = EPSILON;\n  var value;\n\n  try {\n    value = func();\n  } finally {\n    config.EPSILON = oldPrecision;\n  }\n\n  return value;\n}"],"sourceRoot":""}