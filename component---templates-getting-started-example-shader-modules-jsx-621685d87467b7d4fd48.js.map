{"version":3,"sources":["webpack:///../examples/getting-started/shader-modules/app.js","webpack:///./templates/getting-started/example-shader-modules.jsx"],"names":["colorModule","name","fs","AppAnimationLoop","debug","getInfo","onInitialize","gl","positionBuffer","Float32Array","model1","vs","modules","attributes","position","uniforms","hsvColor","vertexCount","model2","onRender","clear","color","onFinalize","AnimationLoop","window","animationLoop","Example","render","pageContext","this","exampleConfig","React","Component"],"mappings":"sMAGA,IAwCMA,EAAc,CAClBC,KADkB,QAElBC,GAAG,gQAUgBC,E,oBACnB,aAAe,OACb,YAAM,CAACC,OAAO,KADF,K,yFAIPC,QAAP,WACE,MA1DJ,gD,2BA6DEC,yBAAoB,IAANC,EAAK,EAALA,GACNC,EAAiB,IAAI,EAAJ,IAAe,IAAIC,aAAa,kBAAvD,MA4BA,MAAO,CAACC,OA1BO,IAAI,EAAJ,IAAc,CAC3BC,GA5DN,uHA6DMT,GArDN,+GAsDMU,QAAS,CAHkB,GAI3BC,WAAY,CACVC,SAAUN,GAEZO,SAAU,CACRC,SAAU,CAAC,GAAI,EAAL,IAEZC,YAAa,IAgBCC,OAbD,IAAI,EAAJ,IAAc,CAC3BP,GAzDN,uHA0DMT,GAlDN,qHAmDMU,QAAS,CAHkB,GAI3BC,WAAY,CACVC,SAAUN,GAEZO,SAAU,CACRC,SAAU,CAAC,EAAI,EAAL,IAEZC,YAAa,IAGST,mB,EAG1BW,qBAAgC,IAAtBZ,EAAqB,EAArBA,GAAIG,EAAiB,EAAjBA,OAAQQ,EAAS,EAATA,OACpBE,YAAMb,EAAI,CAACc,MAAO,CAAC,EAAE,EAAH,OAClBX,SACAQ,U,EAGFI,uBAA8C,IAAlCZ,EAAiC,EAAjCA,OAAQQ,EAAyB,EAAzBA,OAAQV,EAAiB,EAAjBA,eAC1BE,WACAQ,WACAV,Y,GAlD0Ce,KAuD1C,oBAAOC,QAA2BA,OAAtC,UACwB,IAAtB,GACAC,Q,4CC5GmBC,E,gLACnBC,kBAAU,IACAC,EAAgBC,KADjB,kBAEDC,EAAiBF,GAAeA,EAAhB,eAAtB,GACA,OACE,uBAA0BL,cAA1B,EAAwDO,cAAeA,K,GALxCC,IAAMC","file":"component---templates-getting-started-example-shader-modules-jsx-621685d87467b7d4fd48.js","sourcesContent":["import {AnimationLoop, Model} from '@luma.gl/engine';\nimport {Buffer, clear} from '@luma.gl/webgl';\n\nconst INFO_HTML = `\nRe-using shader code with shader modules\n`;\n\n// Base vertex and fragment shader code pairs\nconst vs1 = `\n  attribute vec2 position;\n\n  void main() {\n    gl_Position = vec4(position - vec2(0.5, 0.0), 0.0, 1.0);\n  }\n`;\n\nconst fs1 = `\n  uniform vec3 hsvColor;\n\n  void main() {\n    gl_FragColor = vec4(color_hsv2rgb(hsvColor), 1.0);\n  }\n`;\n\nconst vs2 = `\n  attribute vec2 position;\n\n  void main() {\n    gl_Position = vec4(position + vec2(0.5, 0.0), 0.0, 1.0);\n  }\n`;\n\nconst fs2 = `\n  uniform vec3 hsvColor;\n\n  void main() {\n    gl_FragColor = vec4(color_hsv2rgb(hsvColor) - 0.3, 1.0);\n  }\n`;\n\n// A module that injects a function into the fragment shader\n//  to convert from HSV to RGB colorspace\n// From http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nconst colorModule = {\n  name: 'color',\n  fs: `\n    vec3 color_hsv2rgb(vec3 hsv) {\n      vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n      vec3 p = abs(fract(hsv.xxx + K.xyz) * 6.0 - K.www);\n      vec3 rgb = hsv.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), hsv.y);\n      return rgb;\n    }\n  `\n};\n\nexport default class AppAnimationLoop extends AnimationLoop {\n  constructor() {\n    super({debug: true});\n  }\n\n  static getInfo() {\n    return INFO_HTML;\n  }\n\n  onInitialize({gl}) {\n    const positionBuffer = new Buffer(gl, new Float32Array([-0.3, -0.5, 0.3, -0.5, 0.0, 0.5]));\n\n    const model1 = new Model(gl, {\n      vs: vs1,\n      fs: fs1,\n      modules: [colorModule],\n      attributes: {\n        position: positionBuffer\n      },\n      uniforms: {\n        hsvColor: [0.7, 1.0, 1.0]\n      },\n      vertexCount: 3\n    });\n\n    const model2 = new Model(gl, {\n      vs: vs2,\n      fs: fs2,\n      modules: [colorModule],\n      attributes: {\n        position: positionBuffer\n      },\n      uniforms: {\n        hsvColor: [1.0, 1.0, 1.0]\n      },\n      vertexCount: 3\n    });\n\n    return {model1, model2, positionBuffer};\n  }\n\n  onRender({gl, model1, model2}) {\n    clear(gl, {color: [0, 0, 0, 1]});\n    model1.draw();\n    model2.draw();\n  }\n\n  onFinalize({model1, model2, positionBuffer}) {\n    model1.delete();\n    model2.delete();\n    positionBuffer.delete();\n  }\n}\n\n/* global window */\nif (typeof window !== 'undefined' && !window.website) {\n  const animationLoop = new AppAnimationLoop();\n  animationLoop.start();\n}\n","import React from 'react';\nimport AnimationLoopExamplePage from '../../src/components/animation-loop-example-page';\nimport AnimationLoop from '../../../examples/getting-started/shader-modules/app';\n\nexport default class Example extends React.Component {\n  render() {\n    const { pageContext } = this.props;\n    const exampleConfig = (pageContext && pageContext.exampleConfig) || {};\n    return (\n      <AnimationLoopExamplePage AnimationLoop={AnimationLoop} exampleConfig={exampleConfig} />\n    );\n  }\n}\n"],"sourceRoot":""}