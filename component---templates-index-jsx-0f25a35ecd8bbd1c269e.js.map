{"version":3,"sources":["webpack:///../examples/core/instancing/app.js","webpack:///./templates/core/example-instancing.jsx","webpack:///./templates/index.jsx","webpack:///../modules/constants/src/index.js","webpack:///../modules/core/src/geometry/geometry.js","webpack:///./src/components/animation-loop-example-page.jsx","webpack:///../modules/shadertools/src/utils/webgl-info.js","webpack:///../modules/shadertools/src/utils/is-old-ie.js","webpack:///../modules/shadertools/src/lib/platform-defines.js","webpack:///../modules/shadertools/src/lib/assemble-shaders.js","webpack:///../modules/shadertools/src/lib/shader-module-registry.js","webpack:///../modules/shadertools/src/lib/resolve-modules.js","webpack:///../modules/core/src/scenegraph/nodes/scenegraph-node.js","webpack:///../modules/webgl/src/classes/resource.js","webpack:///../modules/webgl/src/classes/buffer.js","webpack:///../modules/core/src/lib/model-utils.js","webpack:///../modules/core/src/resource-management/program-manager.js","webpack:///../modules/webgl/src/utils/format-value.js","webpack:///../modules/webgl/src/debug/debug-vertex-array.js","webpack:///../modules/webgl/src/debug/debug-uniforms.js","webpack:///../modules/webgl/src/debug/debug-program-configuration.js","webpack:///../modules/core/src/debug/seer-integration.js","webpack:///../modules/core/src/lib/base-model.js","webpack:///../modules/core/src/lib/model.js","webpack:///../modules/shadertools/src/lib/transpile-shader.js","webpack:///../modules/shadertools/src/lib/filters/prop-types.js","webpack:///../modules/shadertools/src/lib/shader-module.js","webpack:///../modules/shadertools/src/lib/inject-shader.js","webpack:///../modules/shadertools/src/modules/module-injectors.js","webpack:///../modules/shadertools/src/index.js","webpack:///../modules/shadertools/src/shaders/modular-vertex.glsl.js","webpack:///../modules/shadertools/src/shaders/modular-fragment.glsl.js","webpack:///../modules/webgl/src/webgl-utils/attribute-utils.js","webpack:///../modules/shadertools/src/lib/constants.js","webpack:///../modules/core/src/geometries/cube-geometry.js","webpack:///../modules/webgl/src/classes/texture.js","webpack:///../modules/core/src/scenegraph/nodes/model-node.js","webpack:///../modules/webgl2-polyfill/src/polyfill-context.js","webpack:///../modules/webgl/src/utils/globals.js","webpack:///../modules/shadertools/src/utils/assert.js","webpack:///../modules/webgl/src/classes/framebuffer.js","webpack:///../modules/webgl/src/utils/log.js","webpack:///../modules/webgl/src/classes/accessor.js","webpack:///../modules/webgl-state-tracker/src/unified-parameter-api/unified-parameter-api.js","webpack:///../modules/webgl-state-tracker/src/unified-parameter-api/webgl-parameter-tables.js","webpack:///../modules/webgl2-polyfill/src/assert.js","webpack:///../modules/webgl/src/utils/is-browser.js","webpack:///../modules/webgl/src/classes/texture-formats.js","webpack:///../modules/webgl/src/classes/texture-2d.js","webpack:///../modules/webgl/src/classes/renderbuffer-formats.js","webpack:///../modules/webgl/src/classes/renderbuffer.js","webpack:///../modules/webgl/src/classes/transform-feedback.js","webpack:///./src/components/info-panel.jsx","webpack:///../modules/webgl-state-tracker/src/state-tracking/track-context-state.js","webpack:///../modules/webgl-state-tracker/src/utils/deep-array-equal.js","webpack:///../modules/webgl-state-tracker/src/state-tracking/webgl-function-to-parameters-table.js","webpack:///../modules/webgl/src/utils/load-file.js","webpack:///../modules/webgl/src/utils/assert.js","webpack:///../modules/webgl/src/utils/is-electron.js","webpack:///../modules/webgl/src/webgl-utils/typed-array-utils.js","webpack:///../modules/webgl/src/webgl-utils/webgl-types.js","webpack:///../modules/webgl/src/classes/clear.js","webpack:///../modules/webgl/src/webgl-utils/texture-utils.js","webpack:///../modules/webgl/src/classes/texture-cube.js","webpack:///../modules/webgl/src/classes/texture-3d.js","webpack:///../modules/webgl/src/features/webgl-features-table.js","webpack:///../modules/addons/src/animation/timeline.js","webpack:///../modules/webgl/src/init.js","webpack:///../modules/webgl/src/webgl-utils/format-utils.js","webpack:///../modules/webgl/src/classes/copy-and-blit.js","webpack:///../modules/webgl-state-tracker/src/unified-parameter-api/webgl-setter-function-table.js","webpack:///../modules/webgl-state-tracker/src/unified-parameter-api/set-parameters.js","webpack:///../modules/webgl2-polyfill/src/polyfills/get-parameter-polyfill.js","webpack:///../modules/webgl2-polyfill/src/polyfill-table.js","webpack:///../modules/shadertools/src/modules/picking/picking.js","webpack:///../modules/shadertools/src/modules/project/project.js","webpack:///../modules/shadertools/src/modules/dirlight/dirlight.js","webpack:///../modules/webgl-state-tracker/src/state-tracking/with-parameters.js","webpack:///../modules/webgl-state-tracker/src/utils/utils.js","webpack:///../modules/webgl-state-tracker/src/utils/assert.js","webpack:///../modules/webgl/src/utils/check-props.js","webpack:///../modules/webgl/src/webgl-utils/webgl-checks.js","webpack:///../modules/webgl/src/utils/utils.js","webpack:///../modules/webgl/src/webgl-utils/constants-to-keys.js","webpack:///../modules/webgl/src/utils/stub-methods.js","webpack:///../modules/webgl/src/features/features.js","webpack:///../modules/webgl/src/classes/query.js","webpack:///../modules/webgl/src/utils/device-pixels.js","webpack:///../modules/webgl/src/classes/uniforms.js","webpack:///../modules/webgl/src/glsl-utils/get-shader-name.js","webpack:///../modules/webgl/src/glsl-utils/get-shader-type-name.js","webpack:///../modules/webgl/src/glsl-utils/format-glsl-error.js","webpack:///../modules/webgl/src/classes/shader.js","webpack:///../modules/webgl/src/classes/program-configuration.js","webpack:///../modules/webgl/src/classes/program.js","webpack:///../modules/webgl/src/context/create-headless-context.js","webpack:///../modules/webgl/src/context/create-canvas.js","webpack:///../modules/webgl/src/context/context.js","webpack:///../modules/webgl/src/context/create-browser-context.js","webpack:///../modules/webgl/src/debug/get-context-debug-info.js","webpack:///../modules/webgl/src/webgl-utils/request-animation-frame.js","webpack:///../modules/core/src/lib/animation-loop.js","webpack:///../modules/addons/src/webvr/display.js","webpack:///../modules/addons/src/webvr/vr-button.js","webpack:///../modules/addons/src/webvr/vr-display.js","webpack:///../modules/webgl/src/utils/array-utils-flat.js","webpack:///../modules/webgl/src/classes/vertex-array-object.js","webpack:///../modules/webgl/src/classes/vertex-array.js"],"names":["SIDE","createShaderHook","createModuleInjection","hook","injection","order","Number","POSITIVE_INFINITY","InstancedCube","gl","props","offsets","i","x","j","y","Float32Array","pickingColors","Uint8ClampedArray","_j","colors","map","Math","offsetsBuffer","buffer","colorsBuffer","pickingColorsBuffer","_ModelNode","call","this","Object","assign","vs","fs","modules","dirlight","picking","isInstanced","instanceCount","geometry","cube_geometry","attributes","instanceSizes","instanceOffsets","divisor","instanceColors","instancePickingColors","ModelNode","AppAnimationLoop","_AnimationLoop","createFramebuffer","debug","getInfo","onInitialize","_this","_ref","_animationLoop","setParameters","clearColor","clearDepth","depthTest","depthFunc","LEQUAL","attachTimeline","timeline","play","timeChannel","addChannel","rate","eyeXChannel","eyeYChannel","eyeZChannel","cube","app_InstancedCube","uniforms","uTime","getTime","uProjection","_ref2","aspect","matrix4","perspective","fov","radians","near","far","uView","lookAt","center","eye","uModel","_ref3","tick","rotateX","rotateY","onRender","animationProps","framebuffer","_mousePosition","devicePixels","cssToDevicePixels","pickX","pickY","model","color","depth","picking_uActive","readPixelsToArray","sourceX","sourceY","sourceWidth","sourceHeight","sourceFormat","RGBA","sourceType","UNSIGNED_BYTE","pickingSelectedColor","pickInstance","draw","onFinalize","_ref4","delete","AnimationLoop","window","website","app_AppAnimationLoop","animationLoop","Example","render","pageContext","exampleConfig","react_default","a","createElement","animation_loop_example_page","React","Component","HeroExample","require","default","IndexPage","react__WEBPACK_IMPORTED_MODULE_0___default","ocular_gatsby_components__WEBPACK_IMPORTED_MODULE_1__","module","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","COLOR_BUFFER_BIT","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","CONSTANT_COLOR","ONE_MINUS_CONSTANT_COLOR","CONSTANT_ALPHA","ONE_MINUS_CONSTANT_ALPHA","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","BLEND_EQUATION","BLEND_EQUATION_RGB","BLEND_EQUATION_ALPHA","BLEND_DST_RGB","BLEND_SRC_RGB","BLEND_DST_ALPHA","BLEND_SRC_ALPHA","BLEND_COLOR","ARRAY_BUFFER_BINDING","ELEMENT_ARRAY_BUFFER_BINDING","LINE_WIDTH","ALIASED_POINT_SIZE_RANGE","ALIASED_LINE_WIDTH_RANGE","CULL_FACE_MODE","FRONT_FACE","DEPTH_RANGE","DEPTH_WRITEMASK","DEPTH_CLEAR_VALUE","DEPTH_FUNC","STENCIL_CLEAR_VALUE","STENCIL_FUNC","STENCIL_FAIL","STENCIL_PASS_DEPTH_FAIL","STENCIL_PASS_DEPTH_PASS","STENCIL_REF","STENCIL_VALUE_MASK","STENCIL_WRITEMASK","STENCIL_BACK_FUNC","STENCIL_BACK_FAIL","STENCIL_BACK_PASS_DEPTH_FAIL","STENCIL_BACK_PASS_DEPTH_PASS","STENCIL_BACK_REF","STENCIL_BACK_VALUE_MASK","STENCIL_BACK_WRITEMASK","VIEWPORT","SCISSOR_BOX","COLOR_CLEAR_VALUE","COLOR_WRITEMASK","UNPACK_ALIGNMENT","PACK_ALIGNMENT","MAX_TEXTURE_SIZE","MAX_VIEWPORT_DIMS","SUBPIXEL_BITS","RED_BITS","GREEN_BITS","BLUE_BITS","ALPHA_BITS","DEPTH_BITS","STENCIL_BITS","POLYGON_OFFSET_UNITS","POLYGON_OFFSET_FACTOR","TEXTURE_BINDING_2D","SAMPLE_BUFFERS","SAMPLES","SAMPLE_COVERAGE_VALUE","SAMPLE_COVERAGE_INVERT","COMPRESSED_TEXTURE_FORMATS","VENDOR","RENDERER","VERSION","IMPLEMENTATION_COLOR_READ_TYPE","IMPLEMENTATION_COLOR_READ_FORMAT","BROWSER_DEFAULT_WEBGL","STATIC_DRAW","STREAM_DRAW","DYNAMIC_DRAW","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","BUFFER_SIZE","BUFFER_USAGE","CURRENT_VERTEX_ATTRIB","VERTEX_ATTRIB_ARRAY_ENABLED","VERTEX_ATTRIB_ARRAY_SIZE","VERTEX_ATTRIB_ARRAY_STRIDE","VERTEX_ATTRIB_ARRAY_TYPE","VERTEX_ATTRIB_ARRAY_NORMALIZED","VERTEX_ATTRIB_ARRAY_POINTER","VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","CULL_FACE","FRONT","BACK","FRONT_AND_BACK","BLEND","DEPTH_TEST","DITHER","POLYGON_OFFSET_FILL","SAMPLE_ALPHA_TO_COVERAGE","SAMPLE_COVERAGE","SCISSOR_TEST","STENCIL_TEST","NO_ERROR","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","CW","CCW","DONT_CARE","FASTEST","NICEST","GENERATE_MIPMAP_HINT","BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","DOUBLE","DEPTH_COMPONENT","ALPHA","RGB","LUMINANCE","LUMINANCE_ALPHA","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","FRAGMENT_SHADER","VERTEX_SHADER","COMPILE_STATUS","DELETE_STATUS","LINK_STATUS","VALIDATE_STATUS","ATTACHED_SHADERS","ACTIVE_ATTRIBUTES","ACTIVE_UNIFORMS","MAX_VERTEX_ATTRIBS","MAX_VERTEX_UNIFORM_VECTORS","MAX_VARYING_VECTORS","MAX_COMBINED_TEXTURE_IMAGE_UNITS","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_IMAGE_UNITS","MAX_FRAGMENT_UNIFORM_VECTORS","SHADER_TYPE","SHADING_LANGUAGE_VERSION","CURRENT_PROGRAM","NEVER","ALWAYS","LESS","EQUAL","GREATER","GEQUAL","NOTEQUAL","KEEP","REPLACE","INCR","DECR","INVERT","INCR_WRAP","DECR_WRAP","NEAREST","LINEAR","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_LINEAR","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_2D","TEXTURE","TEXTURE_CUBE_MAP","TEXTURE_BINDING_CUBE_MAP","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","MAX_CUBE_MAP_TEXTURE_SIZE","TEXTURE0","ACTIVE_TEXTURE","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","TEXTURE_WIDTH","TEXTURE_HEIGHT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","LOW_FLOAT","MEDIUM_FLOAT","HIGH_FLOAT","LOW_INT","MEDIUM_INT","HIGH_INT","FRAMEBUFFER","RENDERBUFFER","RGBA4","RGB5_A1","RGB565","DEPTH_COMPONENT16","STENCIL_INDEX","STENCIL_INDEX8","DEPTH_STENCIL","RENDERBUFFER_WIDTH","RENDERBUFFER_HEIGHT","RENDERBUFFER_INTERNAL_FORMAT","RENDERBUFFER_RED_SIZE","RENDERBUFFER_GREEN_SIZE","RENDERBUFFER_BLUE_SIZE","RENDERBUFFER_ALPHA_SIZE","RENDERBUFFER_DEPTH_SIZE","RENDERBUFFER_STENCIL_SIZE","FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","COLOR_ATTACHMENT0","DEPTH_ATTACHMENT","STENCIL_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","NONE","FRAMEBUFFER_COMPLETE","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","FRAMEBUFFER_BINDING","RENDERBUFFER_BINDING","READ_FRAMEBUFFER","DRAW_FRAMEBUFFER","MAX_RENDERBUFFER_SIZE","INVALID_FRAMEBUFFER_OPERATION","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_COLORSPACE_CONVERSION_WEBGL","READ_BUFFER","UNPACK_ROW_LENGTH","UNPACK_SKIP_ROWS","UNPACK_SKIP_PIXELS","PACK_ROW_LENGTH","PACK_SKIP_ROWS","PACK_SKIP_PIXELS","TEXTURE_BINDING_3D","UNPACK_SKIP_IMAGES","UNPACK_IMAGE_HEIGHT","MAX_3D_TEXTURE_SIZE","MAX_ELEMENTS_VERTICES","MAX_ELEMENTS_INDICES","MAX_TEXTURE_LOD_BIAS","MAX_FRAGMENT_UNIFORM_COMPONENTS","MAX_VERTEX_UNIFORM_COMPONENTS","MAX_ARRAY_TEXTURE_LAYERS","MIN_PROGRAM_TEXEL_OFFSET","MAX_PROGRAM_TEXEL_OFFSET","MAX_VARYING_COMPONENTS","FRAGMENT_SHADER_DERIVATIVE_HINT","RASTERIZER_DISCARD","VERTEX_ARRAY_BINDING","MAX_VERTEX_OUTPUT_COMPONENTS","MAX_FRAGMENT_INPUT_COMPONENTS","MAX_SERVER_WAIT_TIMEOUT","MAX_ELEMENT_INDEX","RED","RGB8","RGBA8","RGB10_A2","TEXTURE_3D","TEXTURE_WRAP_R","TEXTURE_MIN_LOD","TEXTURE_MAX_LOD","TEXTURE_BASE_LEVEL","TEXTURE_MAX_LEVEL","TEXTURE_COMPARE_MODE","TEXTURE_COMPARE_FUNC","SRGB","SRGB8","SRGB8_ALPHA8","COMPARE_REF_TO_TEXTURE","RGBA32F","RGB32F","RGBA16F","RGB16F","TEXTURE_2D_ARRAY","TEXTURE_BINDING_2D_ARRAY","R11F_G11F_B10F","RGB9_E5","RGBA32UI","RGB32UI","RGBA16UI","RGB16UI","RGBA8UI","RGB8UI","RGBA32I","RGB32I","RGBA16I","RGB16I","RGBA8I","RGB8I","RED_INTEGER","RGB_INTEGER","RGBA_INTEGER","R8","RG8","R16F","R32F","RG16F","RG32F","R8I","R8UI","R16I","R16UI","R32I","R32UI","RG8I","RG8UI","RG16I","RG16UI","RG32I","RG32UI","R8_SNORM","RG8_SNORM","RGB8_SNORM","RGBA8_SNORM","RGB10_A2UI","TEXTURE_IMMUTABLE_FORMAT","TEXTURE_IMMUTABLE_LEVELS","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","HALF_FLOAT","RG","RG_INTEGER","INT_2_10_10_10_REV","CURRENT_QUERY","QUERY_RESULT","QUERY_RESULT_AVAILABLE","ANY_SAMPLES_PASSED","ANY_SAMPLES_PASSED_CONSERVATIVE","MAX_DRAW_BUFFERS","DRAW_BUFFER0","DRAW_BUFFER1","DRAW_BUFFER2","DRAW_BUFFER3","DRAW_BUFFER4","DRAW_BUFFER5","DRAW_BUFFER6","DRAW_BUFFER7","DRAW_BUFFER8","DRAW_BUFFER9","DRAW_BUFFER10","DRAW_BUFFER11","DRAW_BUFFER12","DRAW_BUFFER13","DRAW_BUFFER14","DRAW_BUFFER15","MAX_COLOR_ATTACHMENTS","COLOR_ATTACHMENT1","COLOR_ATTACHMENT2","COLOR_ATTACHMENT3","COLOR_ATTACHMENT4","COLOR_ATTACHMENT5","COLOR_ATTACHMENT6","COLOR_ATTACHMENT7","COLOR_ATTACHMENT8","COLOR_ATTACHMENT9","COLOR_ATTACHMENT10","COLOR_ATTACHMENT11","COLOR_ATTACHMENT12","COLOR_ATTACHMENT13","COLOR_ATTACHMENT14","COLOR_ATTACHMENT15","SAMPLER_3D","SAMPLER_2D_SHADOW","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","MAX_SAMPLES","SAMPLER_BINDING","PIXEL_PACK_BUFFER","PIXEL_UNPACK_BUFFER","PIXEL_PACK_BUFFER_BINDING","PIXEL_UNPACK_BUFFER_BINDING","COPY_READ_BUFFER","COPY_WRITE_BUFFER","COPY_READ_BUFFER_BINDING","COPY_WRITE_BUFFER_BINDING","FLOAT_MAT2x3","FLOAT_MAT2x4","FLOAT_MAT3x2","FLOAT_MAT3x4","FLOAT_MAT4x2","FLOAT_MAT4x3","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","UNSIGNED_NORMALIZED","SIGNED_NORMALIZED","VERTEX_ATTRIB_ARRAY_INTEGER","VERTEX_ATTRIB_ARRAY_DIVISOR","TRANSFORM_FEEDBACK_BUFFER_MODE","MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS","TRANSFORM_FEEDBACK_VARYINGS","TRANSFORM_FEEDBACK_BUFFER_START","TRANSFORM_FEEDBACK_BUFFER_SIZE","TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN","MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS","MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS","INTERLEAVED_ATTRIBS","SEPARATE_ATTRIBS","TRANSFORM_FEEDBACK_BUFFER","TRANSFORM_FEEDBACK_BUFFER_BINDING","TRANSFORM_FEEDBACK","TRANSFORM_FEEDBACK_PAUSED","TRANSFORM_FEEDBACK_ACTIVE","TRANSFORM_FEEDBACK_BINDING","FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING","FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE","FRAMEBUFFER_ATTACHMENT_RED_SIZE","FRAMEBUFFER_ATTACHMENT_GREEN_SIZE","FRAMEBUFFER_ATTACHMENT_BLUE_SIZE","FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE","FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE","FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE","FRAMEBUFFER_DEFAULT","DEPTH24_STENCIL8","DRAW_FRAMEBUFFER_BINDING","READ_FRAMEBUFFER_BINDING","RENDERBUFFER_SAMPLES","FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER","FRAMEBUFFER_INCOMPLETE_MULTISAMPLE","UNIFORM_BUFFER","UNIFORM_BUFFER_BINDING","UNIFORM_BUFFER_START","UNIFORM_BUFFER_SIZE","MAX_VERTEX_UNIFORM_BLOCKS","MAX_FRAGMENT_UNIFORM_BLOCKS","MAX_COMBINED_UNIFORM_BLOCKS","MAX_UNIFORM_BUFFER_BINDINGS","MAX_UNIFORM_BLOCK_SIZE","MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS","MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS","UNIFORM_BUFFER_OFFSET_ALIGNMENT","ACTIVE_UNIFORM_BLOCKS","UNIFORM_TYPE","UNIFORM_SIZE","UNIFORM_BLOCK_INDEX","UNIFORM_OFFSET","UNIFORM_ARRAY_STRIDE","UNIFORM_MATRIX_STRIDE","UNIFORM_IS_ROW_MAJOR","UNIFORM_BLOCK_BINDING","UNIFORM_BLOCK_DATA_SIZE","UNIFORM_BLOCK_ACTIVE_UNIFORMS","UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","OBJECT_TYPE","SYNC_CONDITION","SYNC_STATUS","SYNC_FLAGS","SYNC_FENCE","SYNC_GPU_COMMANDS_COMPLETE","UNSIGNALED","SIGNALED","ALREADY_SIGNALED","TIMEOUT_EXPIRED","CONDITION_SATISFIED","WAIT_FAILED","SYNC_FLUSH_COMMANDS_BIT","COLOR","DEPTH","STENCIL","MIN","MAX","DEPTH_COMPONENT24","STREAM_READ","STREAM_COPY","STATIC_READ","STATIC_COPY","DYNAMIC_READ","DYNAMIC_COPY","DEPTH_COMPONENT32F","DEPTH32F_STENCIL8","INVALID_INDEX","TIMEOUT_IGNORED","MAX_CLIENT_WAIT_TIMEOUT_WEBGL","VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE","UNMASKED_VENDOR_WEBGL","UNMASKED_RENDERER_WEBGL","MAX_TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_MAX_ANISOTROPY_EXT","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_R11_EAC","COMPRESSED_SIGNED_R11_EAC","COMPRESSED_RG11_EAC","COMPRESSED_SIGNED_RG11_EAC","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","COMPRESSED_SRGB8_ETC2","COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB_ATC_WEBGL","COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL","COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL","UNSIGNED_INT_24_8_WEBGL","HALF_FLOAT_OES","RGBA32F_EXT","RGB32F_EXT","FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT","UNSIGNED_NORMALIZED_EXT","MIN_EXT","MAX_EXT","SRGB_EXT","SRGB_ALPHA_EXT","SRGB8_ALPHA8_EXT","FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT","FRAGMENT_SHADER_DERIVATIVE_HINT_OES","COLOR_ATTACHMENT0_WEBGL","COLOR_ATTACHMENT1_WEBGL","COLOR_ATTACHMENT2_WEBGL","COLOR_ATTACHMENT3_WEBGL","COLOR_ATTACHMENT4_WEBGL","COLOR_ATTACHMENT5_WEBGL","COLOR_ATTACHMENT6_WEBGL","COLOR_ATTACHMENT7_WEBGL","COLOR_ATTACHMENT8_WEBGL","COLOR_ATTACHMENT9_WEBGL","COLOR_ATTACHMENT10_WEBGL","COLOR_ATTACHMENT11_WEBGL","COLOR_ATTACHMENT12_WEBGL","COLOR_ATTACHMENT13_WEBGL","COLOR_ATTACHMENT14_WEBGL","COLOR_ATTACHMENT15_WEBGL","DRAW_BUFFER0_WEBGL","DRAW_BUFFER1_WEBGL","DRAW_BUFFER2_WEBGL","DRAW_BUFFER3_WEBGL","DRAW_BUFFER4_WEBGL","DRAW_BUFFER5_WEBGL","DRAW_BUFFER6_WEBGL","DRAW_BUFFER7_WEBGL","DRAW_BUFFER8_WEBGL","DRAW_BUFFER9_WEBGL","DRAW_BUFFER10_WEBGL","DRAW_BUFFER11_WEBGL","DRAW_BUFFER12_WEBGL","DRAW_BUFFER13_WEBGL","DRAW_BUFFER14_WEBGL","DRAW_BUFFER15_WEBGL","MAX_COLOR_ATTACHMENTS_WEBGL","MAX_DRAW_BUFFERS_WEBGL","VERTEX_ARRAY_BINDING_OES","QUERY_COUNTER_BITS_EXT","CURRENT_QUERY_EXT","QUERY_RESULT_EXT","QUERY_RESULT_AVAILABLE_EXT","TIME_ELAPSED_EXT","TIMESTAMP_EXT","GPU_DISJOINT_EXT","DRAW_MODE","Geometry","_props","_props$id","id","uid","_props$drawMode","drawMode","_props$attributes","_props$indices","indices","_props$vertexCount","vertexCount","userData","_setAttributes","_calculateVertexCount","getVertexCount","getAttributes","_print","attributeName","ArrayBuffer","isView","value","size","attribute","assert","undefined","isIndexed","length","Infinity","constant","global","navigator","STYLES","EXAMPLE_NOT_SUPPPORTED","display","justifyContent","alignItems","height","STAT_STYLES","position","fontSize","zIndex","background","padding","opacity","AnimationLoopExamplePage","_Component","componentDidMount","showStats","_setDisplay","_luma_gl_addons__WEBPACK_IMPORTED_MODULE_3__","path","setPathPrefix","RAW_GITHUB","start","_showStats","componentWillUnmount","stop","_this2","timeWidget","_probe_gl_stats_widget__WEBPACK_IMPORTED_MODULE_4__","stats","container","refs","renderStats","title","css","header","fontWeight","framesPerUpdate","formatters","CPU Time","GPU Time","Frame Rate","resetOnUpdate","lumaStats","memWidget","memStats","GPU Memory","Buffer Memory","Renderbuffer Memory","Texture Memory","animationFrame","updateStats","_stopStats","_this$props","_this$props$exampleCo","_this$props$panel","panel","isSupported","altText","getAltText","style","controls","className","width","border","ref","canvas","_info_panel__WEBPACK_IMPORTED_MODULE_5__","name","sourceLink","GITHUB_TREE","GL_VENDOR","GL_RENDERER","GL_VERSION","GL_SHADING_LANGUAGE_VERSION","WEBGL_FEATURES","GLSL_FRAG_DATA","GLSL_FRAG_DEPTH","GLSL_DERIVATIVES","GLSL_TEXTURE_LOD","FEATURES","key","compiledGlslExtensions","canCompileGLGSExtension","cap","opts","feature","userAgent","isMSIE","isTrident","isOldIE","source","shader","canCompile","getFeature","extensionName","Boolean","isWebGL2","hasFeatures","features","Array","every","getPlatformShaderDefines","info","vendor","renderer","gpuVendor","identifyGPUVendor","version","shadingLanguageVersion","getContextInfo","debugInfo","toLowerCase","INJECT_SHADER_DECLARATIONS","inject_shader","_SHADER_TYPE","constants","HOOK_FUNCTIONS","_HOOK_FUNCTIONS","MODULE_INJECTIONS","_MODULE_INJECTIONS","FRAGMENT_SHADER_PROLOGUE","_hook$split","stage","signature","moduleName","_opts$order","shaderStage","moduleInjections","assembleShaders","resolveModules","assembleShader","type","getUniforms","assembleGetUniforms","assembleModuleMap","_hookFunctions","_moduleInjections","_ref$defines","defines","_ref$hookFunctions","hookFunctions","_ref$moduleInjections","_ref$inject","inject","_ref$prologue","prologue","log","isVertex","sourceLines","glslVersion","versionLine","coreSource","allDefines","assembledSource","_ref6","getShaderName","_ref5","toUpperCase","getShaderType","isFragment","versionDefines","behavior","getVersionDefines","count","sourceText","define","getApplicationDefines","injectStandardStubs","hookInjections","mainInjections","_iterator","_isArray","isArray","_i","Symbol","iterator","next","done","injections","_key","result","hookName","hookFunction","b","_iterator4","_isArray4","_i4","_ref7","footer","getHookFunctions","injectShader","_iterator2","_isArray2","_i2","moduleUniforms","_iterator3","_isArray3","_i3","shaderModule","getShaderModule","ShaderModuleRegistry","shaderModules","defaultShaderModules","setDefaultShaderModules","getDefaultShaderModules","registerShaderModules","_ref$ignoreMultipleRe","_temp","ignoreMultipleRegistrations","shaderModuleList","_registerShaderModule","moduleOrName","shader_module","Error","shaderModuleRegistry","shader_module_registry_ShaderModuleRegistry","getShaderDependencies","resolve_modules_getShaderModule","moduleMap","moduleDepth","getDependencyGraph","level","keys","sort","dependencies","ScenegraphNode","constructor","math_gl__WEBPACK_IMPORTED_MODULE_4__","rotation","scale","matrix","math_gl__WEBPACK_IMPORTED_MODULE_5__","_setScenegraphNodeProps","setProps","toString","setPosition","setRotation","setScale","setMatrix","copyMatrix","copy","setMatrixComponents","_ref$update","update","updateMatrix","pos","rot","identity","translate","rotateXYZ","getCoordinateUniforms","modelMatrix","worldMatrix","viewMatrix","multiplyRight","worldInverse","invert","worldInverseTranspose","transpose","objectMatrix","worldInverseMatrix","worldInverseTransposeMatrix","ERR_RESOURCE_METHOD_UNDEFINED","Resource","assertWebGLContext","_opts","_opts$userData","_bound","_handle","handle","_createHandle","byteLength","_addStats","_ref$deleteChildren","deleteChildren","children","_deleteHandle","_removeStats","child","bind","funcOrHandle","_bindHandle","unbind","getParameter","pname","getKeyValue","parameter","PARAMETERS","isWebgl2","getExtension","extension","webgl1Default","webgl1","webgl2Default","webgl2","_getParameter","getParameters","parameters","values","getKey","setParameter","_setParameter","stubRemovedMethods","methodNames","initialize","_getOptsFromHandle","_context","luma","_trackAllocatedMemory","bytes","_trackDeallocatedMemory","DEPRECATED_PROPS","offset","stride","normalized","integer","instanced","PROP_CHECKS_INITIALIZE","removedProps","replacedProps","deprecatedProps","PROP_CHECKS_SET_PROPS","Buffer","_Resource","target","GL","getElementCount","accessor","Accessor","data","checkProps","usage","debugData","setAccessor","_setData","_setByteLength","_accessor__WEBPACK_IMPORTED_MODULE_7__","reallocate","bytesUsed","setData","subData","_props$offset","_props$srcOffset","srcOffset","bindBuffer","assertWebGL2Context","bufferSubData","_inferType","copyData","sourceBuffer","_ref$readOffset","readOffset","_ref$writeOffset","writeOffset","getData","_ref2$dstData","dstData","_ref2$srcByteOffset","srcByteOffset","_ref2$dstOffset","dstOffset","_ref2$length","dstAvailableElementCount","dstElementCount","ArrayType","getTypedArrayFromGLType","clamped","sourceAvailableElementCount","_getAvailableElementCount","dstElementOffset","copyElementCount","getBufferSubData","_temp2","_ref3$target","_ref3$index","index","_ref3$offset","bindBufferRange","bindBufferBase","_temp3","_ref4$target","_ref4$index","getDebugData","changed","invalidateDebugData","_getTarget","bufferData","getGLTypeFromTypedArray","sourceElementOffset","BYTES_PER_ELEMENT","createBuffer","deleteBuffer","getBufferParameter","setByteLength","updateAccessor","GLTF_TO_LUMA_ATTRIBUTE_MAP","POSITION","NORMAL","COLOR_0","TEXCOORD_0","TEXCOORD_1","TEXCOORD_2","mapAttributeName","options","_ref$attributeMap","attributeMap","inferAttributeAccessor","category","ProgramManager","_programCache","_getUniforms","_registeredModules","_defaultModules","_hashes","_hashCounter","stateHash","_useCounts","getDefaultProgramManager","defaultProgramManager","addDefaultModule","find","m","push","removeDefaultModule","filter","addModuleInjection","addShaderHook","get","_props$vs","_props$fs","_props$defines","_props$inject","_props$varyings","varyings","_props$bufferMode","bufferMode","_getModuleList","vsHash","_getHash","fsHash","moduleHashes","varyingHashes","v","defineKeys","injectKeys","defineHashes","hash","injectHashes","assembled","classes_program","program","release","appModules","seen","len","_len","_module","_name","formatValue","_opts$isInteger","isInteger","_opts$maxElts","maxElts","_opts$size","string","formatArrayValue","String","decimal","getDebugTableRow","vertexArray","marker","verts","classes_buffer","format","_buffer$getDebugData","modified","getGLSLDeclaration","typeAndName","getCompositeGLType","getDebugTableForUniforms","_ref$header","_ref$undefinedOnly","undefinedOnly","uniformLocations","_uniformSetters","table","uniformNames","uniformName","addUniformToTable","_uniformName","_uniformName2","unusedCount","unusedTable","_unusedTable$uniformN","uniform","Type","_table$uniformName","isDefined","isUniformDefined","debug_program_configuration_getGLSLDeclaration","attributeInfo","_attributeInfo$access","models","recursiveSet","obj","overrides","Map","seer","payload","itemKey","valuePath","__SEER_INITIALIZED__","setOverride","BaseModel","isWebGL","lastLogTime","shaderCache","programManager","_programManagerState","_managedProgram","_props$program","programProps","_programDirty","needsRedraw","_attributes","animatedUniforms","animated","timerQueryEnabled","timeElapsedQuery","lastQueryReturned","accumulatedFrameTime","averageFrameTime","profileFrameCount","pickable","_checkProgram","_setBaseModelProps","setUniforms","getModuleUniforms","moduleSettings","removeModel","isAnimated","getProgram","setProgram","overs","getOverrides","_extractAnimatedUniforms","updateModuleSettings","clear","drawGeometry","_opts$moduleSettings","_opts$uniforms","_opts$attributes","_opts$transformFeedba","transformFeedback","_opts$parameters","_opts$vertexArray","setAttributes","_refreshAnimationProps","logPriority","_logDrawCallStart","drawParams","getDrawParams","indexType","indexOffset","noop","_this$props$onBeforeR","onBeforeRender","_this$props$onAfterRe","onAfterRender","_timerQueryStart","didDraw","getDrawMode","_timerQueryEnd","_logDrawCallEnd","Query","_setAnimationProps","_animationProps","_this$programProps","_this$programProps$vs","MODULAR_SHADERS","_this$programProps$fs","vertex_array","_evaluateAnimateUniforms","valueFunction","foundAnimated","newValue","isObjectEmpty","staticUniforms","query","beginTimeElapsedQuery","end","isResultAvailable","elapsedTime","getTimerMilliseconds","lastFrameTime","logDrawTimeout","priority","Date","now","collapsed","attributeTable","configuration","elements","attributeLocation","rowHeader","location","getDebugTableForVertexArray","_getDebugTableForUnif","uniformTable","_getDebugTableForUnif2","missingTable","configTable","config","attributeInfos","_table","JSON","varyingInfos","_table2","varyingInfo","getDebugTableForProgramConfiguration","isReady","attributesObject","uniformsObject","logModel","message","Model","_BaseModel","prototype","geometryBuffers","_setModelProps","_deleteGeometryBuffers","getInstanceCount","setDrawMode","setVertexCount","setInstanceCount","setGeometry","buffers","remappedName","typedArray","Uint32Array","getBuffersFromGeometry","normalizedAttributes","transform","_Object$assign","_opts$discard","discard","feedbackBuffers","_opts$unbindModels","unbindModels","_setFeedbackBuffers","unbindBuffers","bindBuffers","_feedbackBuffers","transform_feedback","setBuffers","transpileShader","targetGLSLVersion","convertVertexShaderTo300","convertFragmentShaderTo300","convertVertexShaderTo100","convertFragmentShaderTo100","TYPE_DEFINITIONS","number","validate","propType","min","array","parsePropType","propDef","getTypeOf","ShaderModule","_ref$dependencies","_ref$deprecations","deprecations","vertexShader","fragmentShader","_parseDeprecationDefinitions","propDefs","propTypes","propName","parsePropTypes","getModuleSource","moduleSource","_defaultGetUniforms","getDefines","checkDeprecations","forEach","def","shaderSource","deprecated","RegExp","old","private","MODULE_INJECTORS","_MODULE_INJECTORS","DECLARATION_INJECT_MARKER","REGEX_START_OF_MAIN","REGEX_END_OF_MAIN","fragments","_loop","fragmentData","fragmentString","replace","match","combineInjects","injects","__webpack_require__","d","__webpack_exports__","GL_BYTE","GL_UNSIGNED_BYTE","GL_SHORT","GL_UNSIGNED_SHORT","GL_POINTS","GL_LINES","GL_LINE_LOOP","GL_LINE_STRIP","GL_TRIANGLES","GL_TRIANGLE_STRIP","GL_TRIANGLE_FAN","GL_FLOAT","COMPOSITE_GL_TYPES","_COMPOSITE_GL_TYPES","getPrimitiveDrawMode","decomposeCompositeGLType","compositeGLType","typeAndSize","components","glType","_COMPOSITE_GL_TYPES$g","compType","compComponents","CUBE_INDICES","Uint16Array","CUBE_POSITIONS","CUBE_NORMALS","CUBE_TEX_COORDS","ATTRIBUTES","CubeGeometry","_Geometry","NPOT_MIN_FILTERS","Texture","textureUnit","loaded","dataFormat","mipmaps","linearFiltering","supported","isFormatSupported","isLinearFilteringSupported","_DEFAULT_TEXTURE_SETT","Promise","resolvedImageData","pixels","_props$pixels","_props$format","_props$border","_props$recreate","recreate","_props$parameters","_props$pixelStore","pixelStore","_props$textureUnit","_props$unpackFlipY","unpackFlipY","_props2$mipmaps","_props3","_props4$depth","_this$_deduceParamete","_deduceParameters","compressed","activeTexture","bindTexture","DEFAULT_TEXTURE_SETTINGS","glSettings","_isNPOT","_updateForNPOT","setImageData","generateMipmap","resize","_ref2$mipmaps","_this3","params","withParameters","_options$target","_options$pixels","_options$level","_options$format","_options$border","_options$offset","_options$parameters","_options$data","_options$type","_options$width","_options$height","_options$dataFormat","_options$compressed","_this$_deduceParamete2","dataType","_this$_getDataType","_getDataType","channels","DATA_FORMAT_CHANNELS","channelSize","TYPE_SIZES","setSubImageData","_this4","_ref3$pixels","_ref3$data","_ref3$x","_ref3$y","_ref3$width","_ref3$height","_ref3$level","_ref3$format","_ref3$type","_ref3$dataFormat","_ref3$compressed","_ref3$border","_ref3$parameters","_this$_deduceParamete3","ndarray","_buffer__WEBPACK_IMPORTED_MODULE_8__","compressedTexSubImage2D","texSubImage2D","_webgl_utils__WEBPACK_IMPORTED_MODULE_12__","copyFramebuffer","getActiveUnit","_ref4$compressed","textureFormat","TEXTURE_FORMATS","_this$_deduceImageSiz","_deduceImageSize","ImageData","HTMLImageElement","naturalWidth","naturalHeight","HTMLCanvasElement","ImageBitmap","HTMLVideoElement","videoWidth","videoHeight","createTexture","deleteTexture","getTexParameter","param","_getNPOTParam","texParameterf","texParameteri","isPowerOfTwo","_ScenegraphNode","AfterRender","_lib_model__WEBPACK_IMPORTED_MODULE_0__","_setModelNodeProps","managedResources","resource","_this$model","apply","arguments","_this$model2","_this$model3","_this$model4","polyfillExtension","target2","defaults","WEBGL2_CONTEXT_POLYFILLS","_defaults$meta","meta","_meta$suffix","suffix","ext","_Object$keys","extKey","polyfill","global_","initializeExtensions","polyfilled","polyfills","installPolyfills","WEBGL2_CONTEXT_OVERRIDES","originalFunc","installOverrides","window_","globals","self","document","condition","Framebuffer","attachments","readBuffer","drawBuffers","ownResources","colorBufferFloat","colorBufferHalfFloat","getDefaultFramebuffer","defaultFramebuffer","_ref2$width","_ref2$height","_ref2$attachments","_ref2$color","_ref2$depth","_ref2$stencil","stencil","_ref2$check","check","attachment","object","_createDefaultAttachments","clearAttachments","checkStatus","_ref4$attachments","_ref4$clearAttachment","_ref4$resizeAttachmen","resizeAttachments","attach","prevHandle","_setReadBuffer","_setDrawBuffers","drawingBufferWidth","drawingBufferHeight","attachmentPoint","_ref6$clearAttachment","_ref6$resizeAttachmen","newAttachments","bindFramebuffer","descriptor","_renderbuffer__WEBPACK_IMPORTED_MODULE_12__","_attachRenderbuffer","renderbuffer","texture","_descriptor$","layer","_descriptor$2","_attachTexture","_unattach","status","_getFrameBufferStatus","_temp4","_ref7$drawBuffers","drawBuffer","clearBuffer","readPixels","readPixelsToBuffer","copyToDataUrl","copyToImage","copyToTexture","blit","invalidate","_ref8$attachments","_ref8","_ref8$x","_ref8$y","getAttachmentParameter","_getAttachmentParameterFallback","getFramebufferAttachmentParameter","getAttachmentParameters","ATTACHMENT_PARAMETERS","_ref9","_attachments","attachmentName","show","image","maxHeight","_ref10$target","_temp5","_ref11$target","_temp6","_parameters","defaultAttachments","_texture_2d__WEBPACK_IMPORTED_MODULE_11__","oldAttachment","framebufferRenderbuffer","framebufferTexture2D","_ref12$attachment","_ref12","_ref13$attachment","_ref13","face","mapIndexToCubeMapFace","caps","getFeatures","EXT_sRGB","deleteFramebuffer","STATUS","FRAMEBUFFER_ATTACHMENT_PARAMETERS","probe_gl__WEBPACK_IMPORTED_MODULE_0__","enable","DEFAULT_ACCESSOR_VALUES","PROP_CHECKS","_len2","accessors","_key2","_assign","getBytesPerElement","getBytesPerVertex","resolve","_construct","concat","compositeSetters","glConstant","setter","GL_PARAMETER_SETTERS","cache","mergedValues","compositeSetter","GL_COMPOSITE_PARAMETER_SETTERS","getter","GL_PARAMETER_GETTERS","_webgl_parameter_tables__WEBPACK_IMPORTED_MODULE_8__","state","resetParameters","GL_PARAMETER_DEFAULTS","_GL_PARAMETER_DEFAULT","Int32Array","hint","pixelStorei","_GL_PARAMETER_SETTERS","_toConsumableArray","blendEquation","blendFunc","polygonOffset","sampleCoverage","stencilFuncFront","stencilFuncBack","stencilOpFront","stencilOpBack","isEnabled","_GL_PARAMETER_GETTERS","process","_is_electron__WEBPACK_IMPORTED_MODULE_0__","isBrowser","browser","_TEXTURE_FORMATS","types","gl2","_DATA_FORMAT_CHANNELS","_TYPE_SIZES","gl1","Texture2D","loadImage","_Texture","EXT_FLOAT_WEBGL2","renderbuffer_formats","_GL$DEPTH_COMPONENT","bpp","Renderbuffer","formats","getSamplesForFormat","_ref3$samples","samples","bindRenderbuffer","renderbufferStorageMultisample","renderbufferStorage","RENDERBUFFER_FORMATS","createRenderbuffer","deleteRenderbuffer","_syncHandle","getRenderbufferParameter","TransformFeedback","unused","bindOnUse","_unbindBuffers","bufferName","setBuffer","_getVaryingIndex","locationOrName","_this$_getBufferParam","_getBufferParams","bufferOrParams","byteSize","byteOffset","_bindBuffer","begin","primitiveMode","bindTransformFeedback","_bindBuffers","beginTransformFeedback","endTransformFeedback","_getVaryingInfo","getVaryingInfo","bufferIndex","_this$_getBufferParam2","createTransformFeedback","deleteTransformFeedback","InfoPanel","react__WEBPACK_IMPORTED_MODULE_1___default","tabIndex","dangerouslySetInnerHTML","__html","href","PureComponent","installGetterOverride","functionName","originalGetterFunc","configurable","installSetterSpy","originalSetterFunc","_gl$state","_setter","valueChanged","oldValue","GLState","_ref$copyState","copyState","_ref$log","stateStack","_unified_parameter_api_webgl_parameter_tables__WEBPACK_IMPORTED_MODULE_3__","_updateCache","pop","oldValues","deepArrayEqual","trackContextState","_ref2$enable","polyfillContext","_webgl_function_to_parameters_table__WEBPACK_IMPORTED_MODULE_2__","GL_STATE_SETTERS","pushContextState","popContextState","isArrayX","isArrayY","capability","_update","disable","_update2","_update3","_hint","_update4","_update5","_update6","_update7","blendColor","r","g","_update8","mode","_update9","blendEquationSeparate","modeRGB","modeAlpha","_update10","src","dst","_update11","blendFuncSeparate","srcRGB","dstRGB","srcAlpha","dstAlpha","_update12","_update13","_update14","clearStencil","s","_update15","colorMask","_update16","cullFace","_update17","func","_update18","depthRange","zNear","zFar","_update19","depthMask","mask","_update20","frontFace","_update21","lineWidth","_update22","factor","units","_update23","_update24","scissor","_update25","stencilMask","_update26","stencilMaskSeparate","_update27","stencilFunc","_update28","stencilFuncSeparate","_update29","stencilOp","fail","zfail","zpass","_update30","stencilOpSeparate","_update31","viewport","_update32","pathPrefix","prefix","loadFile","url","fetch","then","res","reject","Image","crossOrigin","error","isElectron","versions","electron","ERR_TYPE_DEDUCTION","arrayOrType","Uint8Array","Int8Array","Int16Array","_ref$clamped","flipRows","_ref2$bytesPerPixel","bytesPerPixel","temp","bytesPerRow","topOffset","bottomOffset","scalePixels","newWidth","newHeight","newData","c","headlessGL","WebGLBuffer","WebGL2RenderingContext","_utils_globals__WEBPACK_IMPORTED_MODULE_0__","_utils_is_browser__WEBPACK_IMPORTED_MODULE_1__","ERR_HEADLESSGL_LOAD","headlessTypes","headless","DummyType","WebGLRenderingContext","WebGLProgram","WebGLShader","WebGLFramebuffer","WebGLRenderbuffer","WebGLTexture","WebGLUniformLocation","WebGLActiveInfo","WebGLShaderPrecisionFormat","GL_DEPTH_BUFFER_BIT","GL_STENCIL_BUFFER_BIT","GL_COLOR_BUFFER_BIT","GL_COLOR","GL_DEPTH","GL_STENCIL","GL_DEPTH_STENCIL","ERR_ARGUMENTS","_ref$framebuffer","_ref$color","_ref$depth","_ref$stencil","clearFlags","_ref2$framebuffer","_ref2$buffer","_ref2$drawBuffer","_ref2$value","cloneTextureFrom","refTexture","TextureType","toFramebuffer","_classes_framebuffer__WEBPACK_IMPORTED_MODULE_4__","FACES","TextureCube","_props$mipmaps","setCubeMapImageData","subImage","_ref$x","_ref$y","_ref$mipmapLevel","mipmapLevel","_subImage","_callee","_ref2$border","_ref2$format","_ref2$type","imageDataMap","resolvedFaces","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_7___default","wrap","prev","all","facePixels","sent","lodLevel","setImageDataForFace","imageData","Texture3D","_ref$level","_ref$dataFormat","_ref$border","_ref$type","_ref$offset","_ref$parameters","texImage3D","_buffer__WEBPACK_IMPORTED_MODULE_7__","WEBGL2","VERTEX_ARRAY_OBJECT","TIMER_QUERY","INSTANCED_RENDERING","MULTIPLE_RENDER_TARGETS","ELEMENT_INDEX_UINT32","BLEND_EQUATION_MINMAX","FLOAT_BLEND","COLOR_ENCODING_SRGB","TEXTURE_DEPTH","TEXTURE_FLOAT","TEXTURE_HALF_FLOAT","TEXTURE_FILTER_LINEAR_FLOAT","TEXTURE_FILTER_LINEAR_HALF_FLOAT","TEXTURE_FILTER_ANISOTROPIC","COLOR_ATTACHMENT_RGBA32F","COLOR_ATTACHMENT_FLOAT","COLOR_ATTACHMENT_HALF_FLOAT","_FEATURES$WEBGL2$FEAT","channelHandles","animationHandles","Timeline","time","animations","playing","lastEngineTime","_proto","_props$delay","delay","_props$duration","duration","_props$rate","_props$repeat","repeat","channel","_setChannelTime","set","removeChannel","animationHandle","animation","detachAnimation","isFinished","setTime","animationData","pause","reset","attachAnimation","channelHandle","engineTime","offsetTime","__VERSION__","StatsManager","has","is_browser","nodeIO","glFormatToComponents","_ref$sourceX","_ref$sourceY","_ref$sourceFormat","_ref$sourceAttachment","sourceAttachment","_ref$target","_getFramebuffer","getFramebuffer","pixelArray","getPixelArray","_ref3$sourceAttachmen","_ref3$targetMaxHeight","targetMaxHeight","MAX_SAFE_INTEGER","_scalePixels","context","toDataURL","classes_framebuffer","webgl_setter_function_table","_framebuffer","blend","args","cull","dither","derivativeHint","mipmapHint","polygonOffsetFill","scissorTest","stencilTest","_value","backMask","_args","backFunc","backRef","_args2","sfail","dpfail","dppass","backSfail","backDpfail","backDppass","glSetParameters","FUNCTION_STYLE_PARAMETER_SETTERS","getWebGL2ValueOrZero","WEBGL_PARAMETERS","_WEBGL_PARAMETERS","polyfill_table_isWebGL2","_WEBGL2_CONTEXT_POLYF","createVertexArray","deleteVertexArray","bindVertexArray","isVertexArray","vertexAttribDivisor","drawElementsInstanced","drawArraysInstanced","createQuery","deleteQuery","beginQuery","endQuery","getQuery","getQueryObject","getQueryParameter","getVertexAttrib","_getExtensionData","getExtensionData","getProgramParameter","getInternalformatParameter","extensions","originalGetParameter","limit","DEFAULT_MODULE_OPTIONS","pickingHighlightColor","pickingThreshold","pickingActive","selectedColor","IDENTITY_MATRIX","projectionMatrix","cameraPositionWorld","project","prevUniforms","common","lightDirection","_track_context_state__WEBPACK_IMPORTED_MODULE_0__","_unified_parameter_api_set_parameters__WEBPACK_IMPORTED_MODULE_1__","_utils__WEBPACK_IMPORTED_MODULE_2__","_utils__WEBPACK_IMPORTED_MODULE_3__","_parameters$nocatch","nocatch","propChecks","_propChecks$removedPr","_propChecks$deprecate","_propChecks$replacedP","replacement","_propName","replacementProp","newProps","_propName2","ERR_CONTEXT","ERR_WEBGL2","_version","_assert__WEBPACK_IMPORTED_MODULE_0__","uidCounters","n","isEmpty","isNaN","_log__WEBPACK_IMPORTED_MODULE_0__","instance","upgradeMessage","methodName","LOG_UNSUPPORTED_FEATURE","isFeatureSupported","_webgl_features_table__WEBPACK_IMPORTED_MODULE_3__","featureDefinition","_queryPending","_pollingPromise","hasTimerQuery","beginOcclusionQuery","_ref2$conservative","conservative","beginTransformFeedbackQuery","resultAvailable","isTimerDisjoint","getResult","createPoll","counter","requestAnimationFrame","poll","cssPixel","yInvert","pixel","ratio","yHigh","scaleX","scaleY","t","xHigh","cssToDeviceRatio","getDevicePixelRatio","useDevicePixels","windowRatio","UNIFORM_SETTERS","_UNIFORM_SETTERS","toFloatArray","toIntArray","toUIntArray","FLOAT_ARRAY","INT_ARRAY","UINT_ARRAY","array1","toTypedArray","uniformLength","parseUniformName","matches","getUniformSetter","checkUniformValue","checkLength","checkUniformArray","isFinite","classes_texture","areUniformsEqual","uniform1","uniform2","defaultName","GL_FRAGMENT_SHADER","GL_VERTEX_SHADER","parseGLSLCompilerError","errLog","shaderType","shaderName","errorStrings","errors","warnings","shaderDescription","getShaderTypeName","errorString","segments","line","parseInt","lines","delim","maxDigits","lineNumber","digits","padLeft","addLineNumbers","formatErrors","column","trim","ERR_SOURCE","Shader","_inheritsLoose","getTypeName","_compile","getShaderParameter","getName","getSource","getShaderSource","getTranslatedSource","compileShader","_parseGLSLCompilerErr","getShaderInfoLog","deleteShader","VertexShader","_Shader","createShader","shader_Shader","FragmentShader","_Shader2","ProgramConfiguration","attributeInfosByName","attributeInfosByLocation","varyingInfosByName","_readAttributesFromProgram","_readVaryingsFromProgram","getAttributeInfo","getAttributeLocation","getAttributeAccessor","getVaryingIndex","varying","getVaryingAccessor","_gl$getActiveAttrib","_addAttribute","_gl$getTransformFeedb","_addVarying","_decomposeCompositeGL","compositeType","_inferProperties","classes_accessor","test","_decomposeCompositeGL2","V6_DEPRECATED_METHODS","Program","_isCached","_setId","shader_VertexShader","shader_FragmentShader","transformFeedbackVaryings","_compileAndLink","_readUniformLocationsFromLinkedProgram","program_configuration_ProgramConfiguration","_ref$drawMode","_ref$isIndexed","_ref$indexType","_ref$isInstanced","_ref$instanceCount","_ref$vertexArray","samplers","fb","useProgram","_areTexturesRenderable","_bindTextures","drawRangeElements","drawElements","drawArrays","_onChangeCallback","somethingChanged","changedUniforms","slice","uniformMap","console","checkUniformValues","_setUniforms","texturesRenderable","uniformSetter","textureIndex","createProgram","deleteProgram","_getOptionsFromHandle","getAttachedShaders","shaderHandle","programName","_getName","_uniformCount","getActiveUniform","_parseUniformName","l","_textureIndexCounter","getActiveUniforms","uniformIndices","getUniformBlockIndex","blockName","getActiveUniformBlockParameter","blockIndex","uniformBlockBinding","blockBinding","ERR_HEADLESSGL_NOT_AVAILABLE","ERR_HEADLESSGL_FAILED","pageLoadPromise","isPage","isPageLoaded","getCanvas","targetCanvas","_ref2$onError","onError","_ref$width","_ref$height","_ref$id","_ref$insert","insert","body","firstChild","createCanvas","contextDefaults","throwOnFailure","manageState","createGLContext","_options","throwOnError","_options$onError","onCreateError","_options$webgl","_options$webgl2","createBrowserContext","webgl_types","createHeadlessContext","webGL","vendorMasked","rendererMasked","getContextDebugInfo","driver","logInfo","instrumentGLContext","_instrumented","getVersion","_options3","makeDebugContext","resizeGLContext","devicePixelRatio","devicePixelRatioClamped","aspectRatioValid","clientWidth","clientHeight","setDevicePixelRatio","cancelAnimationFrame","timerId","clearTimeout","statIdCounter","_props$onCreateContex","onCreateContext","_props$onAddHTML","onAddHTML","_props$onInitialize","_props$onRender","_props$onFinalize","_props$gl","_props$glOptions","glOptions","_props$debug","_props$createFramebuf","_props$autoResizeView","autoResizeViewport","_props$autoResizeDraw","autoResizeDrawingBuffer","_props$stats","_props2$useDevicePixe","cpuTime","gpuTime","frameRate","_initialized","_running","_animationFrameId","_nextFramePromise","_resolveNextFrame","_cpuStartTime","_onMousemove","_onMouseleave","setNeedsRedraw","reason","getPageLoadPromise","_createWebGLContext","_createFramebuffer","_startEventHandling","_initializeCallbackData","_updateCallbackData","_resizeCanvasDrawingBuffer","_resizeViewport","_gpuTimeQuery","appContext","_addCallbackData","_startLoop","redraw","_beginTimers","_setupFrame","_renderFrame","_clearNeedsRedraw","offScreen","commit","_endTimers","_finalizeCallbackData","detachTimeline","waitForRender","regenerator_default","abrupt","_this$props2","_this$props3","_this$props4","getHTMLControlValue","defaultValue","element","setViewParameters","_requestAnimationFrame","renderFrame","callback","renderFrameCallback","setTimeout","_this$display","_onSetupFrame","_resizeFramebuffer","startTime","tock","_timeline","_this$_getSizeAndAspe","_getSizeAndAspect","_offScreen","OffscreenCanvas","_createInfoDiv","wrapperDiv","div","html","timeEnd","timeStart","addTime","e","offsetX","offsetY","Display","getViews","submitFrame","views","view","createEnterVRButton","_canvas$getBoundingCl","getBoundingClientRect","top","left","button","VRDisplay","_Display","_vrSupported","vrFrameData","VRFrameData","vrPresenting","vrFrame","_vrDisplayPresentChange","_assertThisInitialized","_removeVRButton","_addVRButton","vrDisplay","getFrameData","_this$vrFrameData","leftProjectionMatrix","leftViewMatrix","rightProjectionMatrix","rightViewMatrix","displayEye","displays","vrButton","_getCanvas","getVRDisplays","displayName","onclick","_startDisplay","requestPresent","isPresenting","arrayBuffer","getScratchArray","VertexArrayObject","hasVertexArrays","bufferValue","constantAttributeZero","getBrowser","getDefaultArray","defaultVertexArray","isDefaultArray","getMaxAttributes","MAX_ATTRIBUTES","setConstant","setElementBuffer","elementBuffer","_enable","enableVertexAttribArray","disableVertexAttribArray","getConstantBuffer","constantValue","_normalizeConstantArrayValue","elementCount","updateNeeded","_compareConstantArrayValues","_ref$start","_ref$count","total","copied","fillArray","arrayValue","v1","v2","_setConstantFloatArray","_setConstantIntArray","_setConstantUintArray","getVertexAttribOffset","MULTI_LOCATION_ATTRIBUTE_REGEXP","DEPRECATIONS_V6","VertexArray","elementsAccessor","vertexArrayObject","vertex_array_object_VertexArrayObject","fill","clearDrawParams","_updateDrawParams","appParameters","_setAttribute","appAccessor","_this$_resolveLocatio","_resolveLocationAndAccessor","_this$_resolveLocatio2","vertexAttribPointer","bindForDraw","_setConstantAttributes","_this5","_this$_getAttributeIn","_getAttributeIndex","accessInfo","_getAttributeInfo","multiLocation","locationOffset","_accessor","_setConstantAttributeZero","_setConstantAttribute","indexCount","_updateDrawParamsForLocation","setElements"],"mappings":"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","file":"component---templates-index-jsx-0f25a35ecd8bbd1c269e.js","sourcesContent":["import {\n  AnimationLoop,\n  setParameters,\n  ModelNode,\n  picking,\n  dirlight,\n  readPixelsToArray,\n  Buffer,\n  CubeGeometry,\n  createShaderHook,\n  createModuleInjection\n} from '@luma.gl/core';\nimport {Timeline} from '@luma.gl/addons';\nimport {cssToDevicePixels} from '@luma.gl/webgl';\nimport {Matrix4, radians} from 'math.gl';\n\nconst INFO_HTML = `\n<p>\nCube drawn with <b>instanced rendering</b>.\n<p>\nA luma.gl <code>Cube</code>, rendering 65,536 instances in a\nsingle GPU draw call using instanced vertex attributes.\n`;\n\nconst SIDE = 256;\n\ncreateShaderHook('vs:MY_SHADER_HOOK_pickColor(inout vec4 color)');\n\ncreateShaderHook('fs:MY_SHADER_HOOK_fragmentColor(inout vec4 color)');\n\ncreateModuleInjection('picking', {\n  hook: 'vs:MY_SHADER_HOOK_pickColor',\n  injection: 'picking_setPickingColor(color.rgb);'\n});\n\ncreateModuleInjection('dirlight', {\n  hook: 'fs:MY_SHADER_HOOK_fragmentColor',\n  injection: 'color = dirlight_filterColor(color);'\n});\n\ncreateModuleInjection('picking', {\n  hook: 'fs:MY_SHADER_HOOK_fragmentColor',\n  injection: 'color = picking_filterColor(color);',\n  order: Number.POSITIVE_INFINITY\n});\n\n// Make a cube with 65K instances and attributes to control offset and color of each instance\nclass InstancedCube extends ModelNode {\n  constructor(gl, props) {\n    let offsets = [];\n    for (let i = 0; i < SIDE; i++) {\n      const x = ((-SIDE + 1) * 3) / 2 + i * 3;\n      for (let j = 0; j < SIDE; j++) {\n        const y = ((-SIDE + 1) * 3) / 2 + j * 3;\n        offsets.push(x, y);\n      }\n    }\n    offsets = new Float32Array(offsets);\n\n    const pickingColors = new Uint8ClampedArray(SIDE * SIDE * 2);\n    for (let i = 0; i < SIDE; i++) {\n      for (let j = 0; j < SIDE; j++) {\n        pickingColors[(i * SIDE + j) * 2 + 0] = i;\n        pickingColors[(i * SIDE + j) * 2 + 1] = j;\n      }\n    }\n\n    const colors = new Float32Array(SIDE * SIDE * 3).map(() => Math.random() * 0.75 + 0.25);\n\n    const vs = `\\\nattribute float instanceSizes;\nattribute vec3 positions;\nattribute vec3 normals;\nattribute vec2 instanceOffsets;\nattribute vec3 instanceColors;\nattribute vec2 instancePickingColors;\n\nuniform mat4 uModel;\nuniform mat4 uView;\nuniform mat4 uProjection;\nuniform float uTime;\n\nvarying vec3 color;\n\nvoid main(void) {\n  vec3 normal = vec3(uModel * vec4(normals, 1.0));\n\n  // Set up data for modules\n  color = instanceColors;\n  project_setNormal(normal);\n  vec4 pickColor = vec4(0., instancePickingColors, 1.0);\n  MY_SHADER_HOOK_pickColor(pickColor);\n\n  // Vertex position (z coordinate undulates with time), and model rotates around center\n  float delta = length(instanceOffsets);\n  vec4 offset = vec4(instanceOffsets, sin((uTime + delta) * 0.1) * 16.0, 0);\n  gl_Position = uProjection * uView * (uModel * vec4(positions * instanceSizes, 1.0) + offset);\n}\n`;\n    const fs = `\\\nprecision highp float;\n\nvarying vec3 color;\n\nvoid main(void) {\n  gl_FragColor = vec4(color, 1.);\n  MY_SHADER_HOOK_fragmentColor(gl_FragColor);\n}\n`;\n\n    const offsetsBuffer = new Buffer(gl, offsets);\n    const colorsBuffer = new Buffer(gl, colors);\n    const pickingColorsBuffer = new Buffer(gl, pickingColors);\n\n    super(\n      gl,\n      Object.assign({}, props, {\n        vs,\n        fs,\n        modules: [dirlight, picking],\n        isInstanced: 1,\n        instanceCount: SIDE * SIDE,\n        geometry: new CubeGeometry(),\n        attributes: {\n          instanceSizes: new Float32Array([1]), // Constant attribute\n          instanceOffsets: [offsetsBuffer, {divisor: 1}],\n          instanceColors: [colorsBuffer, {divisor: 1}],\n          instancePickingColors: [pickingColorsBuffer, {divisor: 1}]\n        }\n      })\n    );\n  }\n}\n\nexport default class AppAnimationLoop extends AnimationLoop {\n  constructor() {\n    super({createFramebuffer: true, debug: true});\n  }\n\n  static getInfo() {\n    return INFO_HTML;\n  }\n\n  onInitialize({gl, _animationLoop}) {\n    setParameters(gl, {\n      clearColor: [0, 0, 0, 1],\n      clearDepth: 1,\n      depthTest: true,\n      depthFunc: gl.LEQUAL\n    });\n\n    this.attachTimeline(new Timeline());\n    this.timeline.play();\n\n    const timeChannel = this.timeline.addChannel({\n      rate: 0.01\n    });\n\n    const eyeXChannel = this.timeline.addChannel({\n      rate: 0.0003\n    });\n\n    const eyeYChannel = this.timeline.addChannel({\n      rate: 0.0004\n    });\n\n    const eyeZChannel = this.timeline.addChannel({\n      rate: 0.0002\n    });\n\n    this.cube = new InstancedCube(gl, {\n      _animationLoop,\n      // inject: {\n      //   'fs:#main-end': 'gl_FragColor = picking_filterColor(gl_FragColor)'\n      // },\n      uniforms: {\n        uTime: () => this.timeline.getTime(timeChannel),\n        // Basic projection matrix\n        uProjection: ({aspect}) =>\n          new Matrix4().perspective({fov: radians(60), aspect, near: 1, far: 2048.0}),\n        // Move the eye around the plane\n        uView: () =>\n          new Matrix4().lookAt({\n            center: [0, 0, 0],\n            eye: [\n              (Math.cos(this.timeline.getTime(eyeXChannel)) * SIDE) / 2,\n              (Math.sin(this.timeline.getTime(eyeYChannel)) * SIDE) / 2,\n              ((Math.sin(this.timeline.getTime(eyeZChannel)) + 1) * SIDE) / 4 + 32\n            ]\n          }),\n        // Rotate all the individual cubes\n        uModel: ({tick}) => new Matrix4().rotateX(tick * 0.01).rotateY(tick * 0.013)\n      }\n    });\n  }\n\n  onRender(animationProps) {\n    const {gl} = animationProps;\n\n    const {framebuffer, _mousePosition} = animationProps;\n\n    if (_mousePosition) {\n      // use the center pixel location in device pixel range\n      const devicePixels = cssToDevicePixels(gl, _mousePosition);\n      const deviceX = devicePixels.x + Math.floor(devicePixels.width / 2);\n      const deviceY = devicePixels.y + Math.floor(devicePixels.height / 2);\n\n      pickInstance(gl, deviceX, deviceY, this.cube, framebuffer);\n    }\n\n    // Draw the cubes\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    this.cube.draw();\n  }\n\n  onFinalize({gl}) {\n    this.cube.delete();\n  }\n}\n\nfunction pickInstance(gl, pickX, pickY, model, framebuffer) {\n  framebuffer.clear({color: true, depth: true});\n  // Render picking colors\n  /* eslint-disable camelcase */\n  model.setUniforms({picking_uActive: 1});\n  model.draw({framebuffer});\n  model.setUniforms({picking_uActive: 0});\n\n  const color = readPixelsToArray(framebuffer, {\n    sourceX: pickX,\n    sourceY: pickY,\n    sourceWidth: 1,\n    sourceHeight: 1,\n    sourceFormat: gl.RGBA,\n    sourceType: gl.UNSIGNED_BYTE\n  });\n\n  if (color[0] + color[1] + color[2] > 0) {\n    model.updateModuleSettings({\n      pickingSelectedColor: color\n    });\n  } else {\n    model.updateModuleSettings({\n      pickingSelectedColor: null\n    });\n  }\n}\n\n/* global window */\nif (typeof window !== 'undefined' && !window.website) {\n  const animationLoop = new AppAnimationLoop();\n  animationLoop.start();\n}\n","import React from 'react';\nimport AnimationLoopExamplePage from '../../src/components/animation-loop-example-page';\nimport AnimationLoop from '../../../examples/core/instancing/app';\n\nexport default class Example extends React.Component {\n  render() {\n    const { pageContext } = this.props;\n    const exampleConfig = (pageContext && pageContext.exampleConfig) || {};\n    return (\n      <AnimationLoopExamplePage AnimationLoop={AnimationLoop} exampleConfig={exampleConfig} />\n    );\n  }\n}\n","import React from 'react';\nimport {Home} from 'ocular-gatsby/components';\nimport './style.css';\n\nif (typeof window !== 'undefined') {\n  window.website = true;\n}\n\nconst HeroExample = require('./core/example-instancing').default;\n\nexport default class IndexPage extends React.Component {\n  render() {\n    return <Home HeroExample={HeroExample} />;\n  }\n}\n","// GL constants, copied from Mozilla documentation\n// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants\n\n// Standard WebGL 1 constants\n// These constants are defined on the WebGLRenderingContext interface.\n\n/* eslint-disable key-spacing, max-len, no-inline-comments, camelcase */\n// eslint-disable-next-line\nmodule.exports = {\n  // Clearing buffers\n  // Constants passed to clear() to clear buffer masks.\n\n  DEPTH_BUFFER_BIT: 0x00000100,\n  STENCIL_BUFFER_BIT: 0x00000400,\n  COLOR_BUFFER_BIT: 0x00004000,\n\n  // Rendering primitives\n  // Constants passed to drawElements() or drawArrays() to specify what kind of primitive to render.\n\n  POINTS: 0x0000,\n  LINES: 0x0001,\n  LINE_LOOP: 0x0002,\n  LINE_STRIP: 0x0003,\n  TRIANGLES: 0x0004,\n  TRIANGLE_STRIP: 0x0005,\n  TRIANGLE_FAN: 0x0006,\n\n  // Blending modes\n  // Constants passed to blendFunc() or blendFuncSeparate() to specify the blending mode (for both, RBG and alpha, or separately).\n\n  ZERO: 0,\n  ONE: 1,\n  SRC_COLOR: 0x0300,\n  ONE_MINUS_SRC_COLOR: 0x0301,\n  SRC_ALPHA: 0x0302,\n  ONE_MINUS_SRC_ALPHA: 0x0303,\n  DST_ALPHA: 0x0304,\n  ONE_MINUS_DST_ALPHA: 0x0305,\n  DST_COLOR: 0x0306,\n  ONE_MINUS_DST_COLOR: 0x0307,\n  SRC_ALPHA_SATURATE: 0x0308,\n  CONSTANT_COLOR: 0x8001,\n  ONE_MINUS_CONSTANT_COLOR: 0x8002,\n  CONSTANT_ALPHA: 0x8003,\n  ONE_MINUS_CONSTANT_ALPHA: 0x8004,\n\n  // Blending equations\n  // Constants passed to blendEquation() or blendEquationSeparate() to control\n  // how the blending is calculated (for both, RBG and alpha, or separately).\n\n  FUNC_ADD: 0x8006,\n  FUNC_SUBTRACT: 0x800a,\n  FUNC_REVERSE_SUBTRACT: 0x800b,\n\n  // Getting GL parameter information\n  // Constants passed to getParameter() to specify what information to return.\n\n  BLEND_EQUATION: 0x8009,\n  BLEND_EQUATION_RGB: 0x8009,\n  BLEND_EQUATION_ALPHA: 0x883d,\n  BLEND_DST_RGB: 0x80c8,\n  BLEND_SRC_RGB: 0x80c9,\n  BLEND_DST_ALPHA: 0x80ca,\n  BLEND_SRC_ALPHA: 0x80cb,\n  BLEND_COLOR: 0x8005,\n  ARRAY_BUFFER_BINDING: 0x8894,\n  ELEMENT_ARRAY_BUFFER_BINDING: 0x8895,\n  LINE_WIDTH: 0x0b21,\n  ALIASED_POINT_SIZE_RANGE: 0x846d,\n  ALIASED_LINE_WIDTH_RANGE: 0x846e,\n  CULL_FACE_MODE: 0x0b45,\n  FRONT_FACE: 0x0b46,\n  DEPTH_RANGE: 0x0b70,\n  DEPTH_WRITEMASK: 0x0b72,\n  DEPTH_CLEAR_VALUE: 0x0b73,\n  DEPTH_FUNC: 0x0b74,\n  STENCIL_CLEAR_VALUE: 0x0b91,\n  STENCIL_FUNC: 0x0b92,\n  STENCIL_FAIL: 0x0b94,\n  STENCIL_PASS_DEPTH_FAIL: 0x0b95,\n  STENCIL_PASS_DEPTH_PASS: 0x0b96,\n  STENCIL_REF: 0x0b97,\n  STENCIL_VALUE_MASK: 0x0b93,\n  STENCIL_WRITEMASK: 0x0b98,\n  STENCIL_BACK_FUNC: 0x8800,\n  STENCIL_BACK_FAIL: 0x8801,\n  STENCIL_BACK_PASS_DEPTH_FAIL: 0x8802,\n  STENCIL_BACK_PASS_DEPTH_PASS: 0x8803,\n  STENCIL_BACK_REF: 0x8ca3,\n  STENCIL_BACK_VALUE_MASK: 0x8ca4,\n  STENCIL_BACK_WRITEMASK: 0x8ca5,\n  VIEWPORT: 0x0ba2,\n  SCISSOR_BOX: 0x0c10,\n  COLOR_CLEAR_VALUE: 0x0c22,\n  COLOR_WRITEMASK: 0x0c23,\n  UNPACK_ALIGNMENT: 0x0cf5,\n  PACK_ALIGNMENT: 0x0d05,\n  MAX_TEXTURE_SIZE: 0x0d33,\n  MAX_VIEWPORT_DIMS: 0x0d3a,\n  SUBPIXEL_BITS: 0x0d50,\n  RED_BITS: 0x0d52,\n  GREEN_BITS: 0x0d53,\n  BLUE_BITS: 0x0d54,\n  ALPHA_BITS: 0x0d55,\n  DEPTH_BITS: 0x0d56,\n  STENCIL_BITS: 0x0d57,\n  POLYGON_OFFSET_UNITS: 0x2a00,\n  POLYGON_OFFSET_FACTOR: 0x8038,\n  TEXTURE_BINDING_2D: 0x8069,\n  SAMPLE_BUFFERS: 0x80a8,\n  SAMPLES: 0x80a9,\n  SAMPLE_COVERAGE_VALUE: 0x80aa,\n  SAMPLE_COVERAGE_INVERT: 0x80ab,\n  COMPRESSED_TEXTURE_FORMATS: 0x86a3,\n  VENDOR: 0x1f00,\n  RENDERER: 0x1f01,\n  VERSION: 0x1f02,\n  IMPLEMENTATION_COLOR_READ_TYPE: 0x8b9a,\n  IMPLEMENTATION_COLOR_READ_FORMAT: 0x8b9b,\n  BROWSER_DEFAULT_WEBGL: 0x9244,\n\n  // Buffers\n  // Constants passed to bufferData(), bufferSubData(), bindBuffer(), or\n  // getBufferParameter().\n\n  STATIC_DRAW: 0x88e4,\n  STREAM_DRAW: 0x88e0,\n  DYNAMIC_DRAW: 0x88e8,\n  ARRAY_BUFFER: 0x8892,\n  ELEMENT_ARRAY_BUFFER: 0x8893,\n  BUFFER_SIZE: 0x8764,\n  BUFFER_USAGE: 0x8765,\n\n  // Vertex attributes\n  // Constants passed to getVertexAttrib().\n\n  CURRENT_VERTEX_ATTRIB: 0x8626,\n  VERTEX_ATTRIB_ARRAY_ENABLED: 0x8622,\n  VERTEX_ATTRIB_ARRAY_SIZE: 0x8623,\n  VERTEX_ATTRIB_ARRAY_STRIDE: 0x8624,\n  VERTEX_ATTRIB_ARRAY_TYPE: 0x8625,\n  VERTEX_ATTRIB_ARRAY_NORMALIZED: 0x886a,\n  VERTEX_ATTRIB_ARRAY_POINTER: 0x8645,\n  VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 0x889f,\n\n  // Culling\n  // Constants passed to cullFace().\n\n  CULL_FACE: 0x0b44,\n  FRONT: 0x0404,\n  BACK: 0x0405,\n  FRONT_AND_BACK: 0x0408,\n\n  // Enabling and disabling\n  // Constants passed to enable() or disable().\n\n  BLEND: 0x0be2,\n  DEPTH_TEST: 0x0b71,\n  DITHER: 0x0bd0,\n  POLYGON_OFFSET_FILL: 0x8037,\n  SAMPLE_ALPHA_TO_COVERAGE: 0x809e,\n  SAMPLE_COVERAGE: 0x80a0,\n  SCISSOR_TEST: 0x0c11,\n  STENCIL_TEST: 0x0b90,\n\n  // Errors\n  // Constants returned from getError().\n\n  NO_ERROR: 0,\n  INVALID_ENUM: 0x0500,\n  INVALID_VALUE: 0x0501,\n  INVALID_OPERATION: 0x0502,\n  OUT_OF_MEMORY: 0x0505,\n  CONTEXT_LOST_WEBGL: 0x9242,\n\n  // Front face directions\n  // Constants passed to frontFace().\n\n  CW: 0x0900,\n  CCW: 0x0901,\n\n  // Hints\n  // Constants passed to hint()\n\n  DONT_CARE: 0x1100,\n  FASTEST: 0x1101,\n  NICEST: 0x1102,\n  GENERATE_MIPMAP_HINT: 0x8192,\n\n  // Data types\n\n  BYTE: 0x1400,\n  UNSIGNED_BYTE: 0x1401,\n  SHORT: 0x1402,\n  UNSIGNED_SHORT: 0x1403,\n  INT: 0x1404,\n  UNSIGNED_INT: 0x1405,\n  FLOAT: 0x1406,\n  DOUBLE: 0x140a,\n\n  // Pixel formats\n\n  DEPTH_COMPONENT: 0x1902,\n  ALPHA: 0x1906,\n  RGB: 0x1907,\n  RGBA: 0x1908,\n  LUMINANCE: 0x1909,\n  LUMINANCE_ALPHA: 0x190a,\n\n  // Pixel types\n\n  // UNSIGNED_BYTE: 0x1401,\n  UNSIGNED_SHORT_4_4_4_4: 0x8033,\n  UNSIGNED_SHORT_5_5_5_1: 0x8034,\n  UNSIGNED_SHORT_5_6_5: 0x8363,\n\n  // Shaders\n  // Constants passed to createShader() or getShaderParameter()\n\n  FRAGMENT_SHADER: 0x8b30,\n  VERTEX_SHADER: 0x8b31,\n  COMPILE_STATUS: 0x8b81,\n  DELETE_STATUS: 0x8b80,\n  LINK_STATUS: 0x8b82,\n  VALIDATE_STATUS: 0x8b83,\n  ATTACHED_SHADERS: 0x8b85,\n  ACTIVE_ATTRIBUTES: 0x8b89,\n  ACTIVE_UNIFORMS: 0x8b86,\n  MAX_VERTEX_ATTRIBS: 0x8869,\n  MAX_VERTEX_UNIFORM_VECTORS: 0x8dfb,\n  MAX_VARYING_VECTORS: 0x8dfc,\n  MAX_COMBINED_TEXTURE_IMAGE_UNITS: 0x8b4d,\n  MAX_VERTEX_TEXTURE_IMAGE_UNITS: 0x8b4c,\n  MAX_TEXTURE_IMAGE_UNITS: 0x8872,\n  MAX_FRAGMENT_UNIFORM_VECTORS: 0x8dfd,\n  SHADER_TYPE: 0x8b4f,\n  SHADING_LANGUAGE_VERSION: 0x8b8c,\n  CURRENT_PROGRAM: 0x8b8d,\n\n  // Depth or stencil tests\n  // Constants passed to depthFunc() or stencilFunc().\n\n  NEVER: 0x0200,\n  ALWAYS: 0x0207,\n  LESS: 0x0201,\n  EQUAL: 0x0202,\n  LEQUAL: 0x0203,\n  GREATER: 0x0204,\n  GEQUAL: 0x0206,\n  NOTEQUAL: 0x0205,\n\n  // Stencil actions\n  // Constants passed to stencilOp().\n\n  KEEP: 0x1e00,\n  REPLACE: 0x1e01,\n  INCR: 0x1e02,\n  DECR: 0x1e03,\n  INVERT: 0x150a,\n  INCR_WRAP: 0x8507,\n  DECR_WRAP: 0x8508,\n\n  // Textures\n  // Constants passed to texParameteri(),\n  // texParameterf(), bindTexture(), texImage2D(), and others.\n\n  NEAREST: 0x2600,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_NEAREST: 0x2700,\n  LINEAR_MIPMAP_NEAREST: 0x2701,\n  NEAREST_MIPMAP_LINEAR: 0x2702,\n  LINEAR_MIPMAP_LINEAR: 0x2703,\n  TEXTURE_MAG_FILTER: 0x2800,\n  TEXTURE_MIN_FILTER: 0x2801,\n  TEXTURE_WRAP_S: 0x2802,\n  TEXTURE_WRAP_T: 0x2803,\n  TEXTURE_2D: 0x0de1,\n  TEXTURE: 0x1702,\n  TEXTURE_CUBE_MAP: 0x8513,\n  TEXTURE_BINDING_CUBE_MAP: 0x8514,\n  TEXTURE_CUBE_MAP_POSITIVE_X: 0x8515,\n  TEXTURE_CUBE_MAP_NEGATIVE_X: 0x8516,\n  TEXTURE_CUBE_MAP_POSITIVE_Y: 0x8517,\n  TEXTURE_CUBE_MAP_NEGATIVE_Y: 0x8518,\n  TEXTURE_CUBE_MAP_POSITIVE_Z: 0x8519,\n  TEXTURE_CUBE_MAP_NEGATIVE_Z: 0x851a,\n  MAX_CUBE_MAP_TEXTURE_SIZE: 0x851c,\n  // TEXTURE0 - 31 0x84C0 - 0x84DF A texture unit.\n  TEXTURE0: 0x84c0,\n  ACTIVE_TEXTURE: 0x84e0,\n  REPEAT: 0x2901,\n  CLAMP_TO_EDGE: 0x812f,\n  MIRRORED_REPEAT: 0x8370,\n\n  // Emulation\n  TEXTURE_WIDTH: 0x1000,\n  TEXTURE_HEIGHT: 0x1001,\n\n  // Uniform types\n\n  FLOAT_VEC2: 0x8b50,\n  FLOAT_VEC3: 0x8b51,\n  FLOAT_VEC4: 0x8b52,\n  INT_VEC2: 0x8b53,\n  INT_VEC3: 0x8b54,\n  INT_VEC4: 0x8b55,\n  BOOL: 0x8b56,\n  BOOL_VEC2: 0x8b57,\n  BOOL_VEC3: 0x8b58,\n  BOOL_VEC4: 0x8b59,\n  FLOAT_MAT2: 0x8b5a,\n  FLOAT_MAT3: 0x8b5b,\n  FLOAT_MAT4: 0x8b5c,\n  SAMPLER_2D: 0x8b5e,\n  SAMPLER_CUBE: 0x8b60,\n\n  // Shader precision-specified types\n\n  LOW_FLOAT: 0x8df0,\n  MEDIUM_FLOAT: 0x8df1,\n  HIGH_FLOAT: 0x8df2,\n  LOW_INT: 0x8df3,\n  MEDIUM_INT: 0x8df4,\n  HIGH_INT: 0x8df5,\n\n  // Framebuffers and renderbuffers\n\n  FRAMEBUFFER: 0x8d40,\n  RENDERBUFFER: 0x8d41,\n  RGBA4: 0x8056,\n  RGB5_A1: 0x8057,\n  RGB565: 0x8d62,\n  DEPTH_COMPONENT16: 0x81a5,\n  STENCIL_INDEX: 0x1901,\n  STENCIL_INDEX8: 0x8d48,\n  DEPTH_STENCIL: 0x84f9,\n  RENDERBUFFER_WIDTH: 0x8d42,\n  RENDERBUFFER_HEIGHT: 0x8d43,\n  RENDERBUFFER_INTERNAL_FORMAT: 0x8d44,\n  RENDERBUFFER_RED_SIZE: 0x8d50,\n  RENDERBUFFER_GREEN_SIZE: 0x8d51,\n  RENDERBUFFER_BLUE_SIZE: 0x8d52,\n  RENDERBUFFER_ALPHA_SIZE: 0x8d53,\n  RENDERBUFFER_DEPTH_SIZE: 0x8d54,\n  RENDERBUFFER_STENCIL_SIZE: 0x8d55,\n  FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 0x8cd0,\n  FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 0x8cd1,\n  FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 0x8cd2,\n  FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 0x8cd3,\n  COLOR_ATTACHMENT0: 0x8ce0,\n  DEPTH_ATTACHMENT: 0x8d00,\n  STENCIL_ATTACHMENT: 0x8d20,\n  DEPTH_STENCIL_ATTACHMENT: 0x821a,\n  NONE: 0,\n  FRAMEBUFFER_COMPLETE: 0x8cd5,\n  FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 0x8cd6,\n  FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 0x8cd7,\n  FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 0x8cd9,\n  FRAMEBUFFER_UNSUPPORTED: 0x8cdd,\n  FRAMEBUFFER_BINDING: 0x8ca6,\n  RENDERBUFFER_BINDING: 0x8ca7,\n  READ_FRAMEBUFFER: 0x8ca8,\n  DRAW_FRAMEBUFFER: 0x8ca9,\n  MAX_RENDERBUFFER_SIZE: 0x84e8,\n  INVALID_FRAMEBUFFER_OPERATION: 0x0506,\n\n  // Pixel storage modes\n  // Constants passed to pixelStorei().\n\n  UNPACK_FLIP_Y_WEBGL: 0x9240,\n  UNPACK_PREMULTIPLY_ALPHA_WEBGL: 0x9241,\n  UNPACK_COLORSPACE_CONVERSION_WEBGL: 0x9243,\n\n  // /////////////////////////////////////////////////////\n  // Additional constants defined WebGL 2\n  // These constants are defined on the WebGL2RenderingContext interface.\n  // All WebGL 1 constants are also available in a WebGL 2 context.\n  // /////////////////////////////////////////////////////\n\n  // Getting GL parameter information\n  // Constants passed to getParameter()\n  // to specify what information to return.\n\n  READ_BUFFER: 0x0c02,\n  UNPACK_ROW_LENGTH: 0x0cf2,\n  UNPACK_SKIP_ROWS: 0x0cf3,\n  UNPACK_SKIP_PIXELS: 0x0cf4,\n  PACK_ROW_LENGTH: 0x0d02,\n  PACK_SKIP_ROWS: 0x0d03,\n  PACK_SKIP_PIXELS: 0x0d04,\n  TEXTURE_BINDING_3D: 0x806a,\n  UNPACK_SKIP_IMAGES: 0x806d,\n  UNPACK_IMAGE_HEIGHT: 0x806e,\n  MAX_3D_TEXTURE_SIZE: 0x8073,\n  MAX_ELEMENTS_VERTICES: 0x80e8,\n  MAX_ELEMENTS_INDICES: 0x80e9,\n  MAX_TEXTURE_LOD_BIAS: 0x84fd,\n  MAX_FRAGMENT_UNIFORM_COMPONENTS: 0x8b49,\n  MAX_VERTEX_UNIFORM_COMPONENTS: 0x8b4a,\n  MAX_ARRAY_TEXTURE_LAYERS: 0x88ff,\n  MIN_PROGRAM_TEXEL_OFFSET: 0x8904,\n  MAX_PROGRAM_TEXEL_OFFSET: 0x8905,\n  MAX_VARYING_COMPONENTS: 0x8b4b,\n  FRAGMENT_SHADER_DERIVATIVE_HINT: 0x8b8b,\n  RASTERIZER_DISCARD: 0x8c89,\n  VERTEX_ARRAY_BINDING: 0x85b5,\n  MAX_VERTEX_OUTPUT_COMPONENTS: 0x9122,\n  MAX_FRAGMENT_INPUT_COMPONENTS: 0x9125,\n  MAX_SERVER_WAIT_TIMEOUT: 0x9111,\n  MAX_ELEMENT_INDEX: 0x8d6b,\n\n  // Textures\n  // Constants passed to texParameteri(),\n  // texParameterf(), bindTexture(), texImage2D(), and others.\n\n  RED: 0x1903,\n  RGB8: 0x8051,\n  RGBA8: 0x8058,\n  RGB10_A2: 0x8059,\n  TEXTURE_3D: 0x806f,\n  TEXTURE_WRAP_R: 0x8072,\n  TEXTURE_MIN_LOD: 0x813a,\n  TEXTURE_MAX_LOD: 0x813b,\n  TEXTURE_BASE_LEVEL: 0x813c,\n  TEXTURE_MAX_LEVEL: 0x813d,\n  TEXTURE_COMPARE_MODE: 0x884c,\n  TEXTURE_COMPARE_FUNC: 0x884d,\n  SRGB: 0x8c40,\n  SRGB8: 0x8c41,\n  SRGB8_ALPHA8: 0x8c43,\n  COMPARE_REF_TO_TEXTURE: 0x884e,\n  RGBA32F: 0x8814,\n  RGB32F: 0x8815,\n  RGBA16F: 0x881a,\n  RGB16F: 0x881b,\n  TEXTURE_2D_ARRAY: 0x8c1a,\n  TEXTURE_BINDING_2D_ARRAY: 0x8c1d,\n  R11F_G11F_B10F: 0x8c3a,\n  RGB9_E5: 0x8c3d,\n  RGBA32UI: 0x8d70,\n  RGB32UI: 0x8d71,\n  RGBA16UI: 0x8d76,\n  RGB16UI: 0x8d77,\n  RGBA8UI: 0x8d7c,\n  RGB8UI: 0x8d7d,\n  RGBA32I: 0x8d82,\n  RGB32I: 0x8d83,\n  RGBA16I: 0x8d88,\n  RGB16I: 0x8d89,\n  RGBA8I: 0x8d8e,\n  RGB8I: 0x8d8f,\n  RED_INTEGER: 0x8d94,\n  RGB_INTEGER: 0x8d98,\n  RGBA_INTEGER: 0x8d99,\n  R8: 0x8229,\n  RG8: 0x822b,\n  R16F: 0x822d,\n  R32F: 0x822e,\n  RG16F: 0x822f,\n  RG32F: 0x8230,\n  R8I: 0x8231,\n  R8UI: 0x8232,\n  R16I: 0x8233,\n  R16UI: 0x8234,\n  R32I: 0x8235,\n  R32UI: 0x8236,\n  RG8I: 0x8237,\n  RG8UI: 0x8238,\n  RG16I: 0x8239,\n  RG16UI: 0x823a,\n  RG32I: 0x823b,\n  RG32UI: 0x823c,\n  R8_SNORM: 0x8f94,\n  RG8_SNORM: 0x8f95,\n  RGB8_SNORM: 0x8f96,\n  RGBA8_SNORM: 0x8f97,\n  RGB10_A2UI: 0x906f,\n\n  /* covered by extension\n  COMPRESSED_R11_EAC : 0x9270,\n  COMPRESSED_SIGNED_R11_EAC: 0x9271,\n  COMPRESSED_RG11_EAC: 0x9272,\n  COMPRESSED_SIGNED_RG11_EAC : 0x9273,\n  COMPRESSED_RGB8_ETC2 : 0x9274,\n  COMPRESSED_SRGB8_ETC2: 0x9275,\n  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 : 0x9276,\n  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC : 0x9277,\n  COMPRESSED_RGBA8_ETC2_EAC: 0x9278,\n  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : 0x9279,\n  */\n  TEXTURE_IMMUTABLE_FORMAT: 0x912f,\n  TEXTURE_IMMUTABLE_LEVELS: 0x82df,\n\n  // Pixel types\n\n  UNSIGNED_INT_2_10_10_10_REV: 0x8368,\n  UNSIGNED_INT_10F_11F_11F_REV: 0x8c3b,\n  UNSIGNED_INT_5_9_9_9_REV: 0x8c3e,\n  FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8dad,\n  UNSIGNED_INT_24_8: 0x84fa,\n  HALF_FLOAT: 0x140b,\n  RG: 0x8227,\n  RG_INTEGER: 0x8228,\n  INT_2_10_10_10_REV: 0x8d9f,\n\n  // Queries\n\n  CURRENT_QUERY: 0x8865,\n  QUERY_RESULT: 0x8866,\n  QUERY_RESULT_AVAILABLE: 0x8867,\n  ANY_SAMPLES_PASSED: 0x8c2f,\n  ANY_SAMPLES_PASSED_CONSERVATIVE: 0x8d6a,\n\n  // Draw buffers\n\n  MAX_DRAW_BUFFERS: 0x8824,\n  DRAW_BUFFER0: 0x8825,\n  DRAW_BUFFER1: 0x8826,\n  DRAW_BUFFER2: 0x8827,\n  DRAW_BUFFER3: 0x8828,\n  DRAW_BUFFER4: 0x8829,\n  DRAW_BUFFER5: 0x882a,\n  DRAW_BUFFER6: 0x882b,\n  DRAW_BUFFER7: 0x882c,\n  DRAW_BUFFER8: 0x882d,\n  DRAW_BUFFER9: 0x882e,\n  DRAW_BUFFER10: 0x882f,\n  DRAW_BUFFER11: 0x8830,\n  DRAW_BUFFER12: 0x8831,\n  DRAW_BUFFER13: 0x8832,\n  DRAW_BUFFER14: 0x8833,\n  DRAW_BUFFER15: 0x8834,\n  MAX_COLOR_ATTACHMENTS: 0x8cdf,\n  COLOR_ATTACHMENT1: 0x8ce1,\n  COLOR_ATTACHMENT2: 0x8ce2,\n  COLOR_ATTACHMENT3: 0x8ce3,\n  COLOR_ATTACHMENT4: 0x8ce4,\n  COLOR_ATTACHMENT5: 0x8ce5,\n  COLOR_ATTACHMENT6: 0x8ce6,\n  COLOR_ATTACHMENT7: 0x8ce7,\n  COLOR_ATTACHMENT8: 0x8ce8,\n  COLOR_ATTACHMENT9: 0x8ce9,\n  COLOR_ATTACHMENT10: 0x8cea,\n  COLOR_ATTACHMENT11: 0x8ceb,\n  COLOR_ATTACHMENT12: 0x8cec,\n  COLOR_ATTACHMENT13: 0x8ced,\n  COLOR_ATTACHMENT14: 0x8cee,\n  COLOR_ATTACHMENT15: 0x8cef,\n\n  // Samplers\n\n  SAMPLER_3D: 0x8b5f,\n  SAMPLER_2D_SHADOW: 0x8b62,\n  SAMPLER_2D_ARRAY: 0x8dc1,\n  SAMPLER_2D_ARRAY_SHADOW: 0x8dc4,\n  SAMPLER_CUBE_SHADOW: 0x8dc5,\n  INT_SAMPLER_2D: 0x8dca,\n  INT_SAMPLER_3D: 0x8dcb,\n  INT_SAMPLER_CUBE: 0x8dcc,\n  INT_SAMPLER_2D_ARRAY: 0x8dcf,\n  UNSIGNED_INT_SAMPLER_2D: 0x8dd2,\n  UNSIGNED_INT_SAMPLER_3D: 0x8dd3,\n  UNSIGNED_INT_SAMPLER_CUBE: 0x8dd4,\n  UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8dd7,\n  MAX_SAMPLES: 0x8d57,\n  SAMPLER_BINDING: 0x8919,\n\n  // Buffers\n\n  PIXEL_PACK_BUFFER: 0x88eb,\n  PIXEL_UNPACK_BUFFER: 0x88ec,\n  PIXEL_PACK_BUFFER_BINDING: 0x88ed,\n  PIXEL_UNPACK_BUFFER_BINDING: 0x88ef,\n  COPY_READ_BUFFER: 0x8f36,\n  COPY_WRITE_BUFFER: 0x8f37,\n  COPY_READ_BUFFER_BINDING: 0x8f36,\n  COPY_WRITE_BUFFER_BINDING: 0x8f37,\n\n  // Data types\n\n  FLOAT_MAT2x3: 0x8b65,\n  FLOAT_MAT2x4: 0x8b66,\n  FLOAT_MAT3x2: 0x8b67,\n  FLOAT_MAT3x4: 0x8b68,\n  FLOAT_MAT4x2: 0x8b69,\n  FLOAT_MAT4x3: 0x8b6a,\n  UNSIGNED_INT_VEC2: 0x8dc6,\n  UNSIGNED_INT_VEC3: 0x8dc7,\n  UNSIGNED_INT_VEC4: 0x8dc8,\n  UNSIGNED_NORMALIZED: 0x8c17,\n  SIGNED_NORMALIZED: 0x8f9c,\n\n  // Vertex attributes\n\n  VERTEX_ATTRIB_ARRAY_INTEGER: 0x88fd,\n  VERTEX_ATTRIB_ARRAY_DIVISOR: 0x88fe,\n\n  // Transform feedback\n\n  TRANSFORM_FEEDBACK_BUFFER_MODE: 0x8c7f,\n  MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 0x8c80,\n  TRANSFORM_FEEDBACK_VARYINGS: 0x8c83,\n  TRANSFORM_FEEDBACK_BUFFER_START: 0x8c84,\n  TRANSFORM_FEEDBACK_BUFFER_SIZE: 0x8c85,\n  TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 0x8c88,\n  MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 0x8c8a,\n  MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 0x8c8b,\n  INTERLEAVED_ATTRIBS: 0x8c8c,\n  SEPARATE_ATTRIBS: 0x8c8d,\n  TRANSFORM_FEEDBACK_BUFFER: 0x8c8e,\n  TRANSFORM_FEEDBACK_BUFFER_BINDING: 0x8c8f,\n  TRANSFORM_FEEDBACK: 0x8e22,\n  TRANSFORM_FEEDBACK_PAUSED: 0x8e23,\n  TRANSFORM_FEEDBACK_ACTIVE: 0x8e24,\n  TRANSFORM_FEEDBACK_BINDING: 0x8e25,\n\n  // Framebuffers and renderbuffers\n\n  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 0x8210,\n  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 0x8211,\n  FRAMEBUFFER_ATTACHMENT_RED_SIZE: 0x8212,\n  FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 0x8213,\n  FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 0x8214,\n  FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 0x8215,\n  FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 0x8216,\n  FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 0x8217,\n  FRAMEBUFFER_DEFAULT: 0x8218,\n  // DEPTH_STENCIL_ATTACHMENT : 0x821A,\n  // DEPTH_STENCIL: 0x84F9,\n  DEPTH24_STENCIL8: 0x88f0,\n  DRAW_FRAMEBUFFER_BINDING: 0x8ca6,\n  READ_FRAMEBUFFER_BINDING: 0x8caa,\n  RENDERBUFFER_SAMPLES: 0x8cab,\n  FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 0x8cd4,\n  FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 0x8d56,\n\n  // Uniforms\n\n  UNIFORM_BUFFER: 0x8a11,\n  UNIFORM_BUFFER_BINDING: 0x8a28,\n  UNIFORM_BUFFER_START: 0x8a29,\n  UNIFORM_BUFFER_SIZE: 0x8a2a,\n  MAX_VERTEX_UNIFORM_BLOCKS: 0x8a2b,\n  MAX_FRAGMENT_UNIFORM_BLOCKS: 0x8a2d,\n  MAX_COMBINED_UNIFORM_BLOCKS: 0x8a2e,\n  MAX_UNIFORM_BUFFER_BINDINGS: 0x8a2f,\n  MAX_UNIFORM_BLOCK_SIZE: 0x8a30,\n  MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 0x8a31,\n  MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 0x8a33,\n  UNIFORM_BUFFER_OFFSET_ALIGNMENT: 0x8a34,\n  ACTIVE_UNIFORM_BLOCKS: 0x8a36,\n  UNIFORM_TYPE: 0x8a37,\n  UNIFORM_SIZE: 0x8a38,\n  UNIFORM_BLOCK_INDEX: 0x8a3a,\n  UNIFORM_OFFSET: 0x8a3b,\n  UNIFORM_ARRAY_STRIDE: 0x8a3c,\n  UNIFORM_MATRIX_STRIDE: 0x8a3d,\n  UNIFORM_IS_ROW_MAJOR: 0x8a3e,\n  UNIFORM_BLOCK_BINDING: 0x8a3f,\n  UNIFORM_BLOCK_DATA_SIZE: 0x8a40,\n  UNIFORM_BLOCK_ACTIVE_UNIFORMS: 0x8a42,\n  UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 0x8a43,\n  UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 0x8a44,\n  UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 0x8a46,\n\n  // Sync objects\n\n  OBJECT_TYPE: 0x9112,\n  SYNC_CONDITION: 0x9113,\n  SYNC_STATUS: 0x9114,\n  SYNC_FLAGS: 0x9115,\n  SYNC_FENCE: 0x9116,\n  SYNC_GPU_COMMANDS_COMPLETE: 0x9117,\n  UNSIGNALED: 0x9118,\n  SIGNALED: 0x9119,\n  ALREADY_SIGNALED: 0x911a,\n  TIMEOUT_EXPIRED: 0x911b,\n  CONDITION_SATISFIED: 0x911c,\n  WAIT_FAILED: 0x911d,\n  SYNC_FLUSH_COMMANDS_BIT: 0x00000001,\n\n  // Miscellaneous constants\n\n  COLOR: 0x1800,\n  DEPTH: 0x1801,\n  STENCIL: 0x1802,\n  MIN: 0x8007,\n  MAX: 0x8008,\n  DEPTH_COMPONENT24: 0x81a6,\n  STREAM_READ: 0x88e1,\n  STREAM_COPY: 0x88e2,\n  STATIC_READ: 0x88e5,\n  STATIC_COPY: 0x88e6,\n  DYNAMIC_READ: 0x88e9,\n  DYNAMIC_COPY: 0x88ea,\n  DEPTH_COMPONENT32F: 0x8cac,\n  DEPTH32F_STENCIL8: 0x8cad,\n  INVALID_INDEX: 0xffffffff,\n  TIMEOUT_IGNORED: -1,\n  MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 0x9247,\n\n  // Constants defined in WebGL extensions\n\n  // ANGLE_instanced_arrays\n\n  VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: 0x88fe,\n\n  // WEBGL_debug_renderer_info\n\n  UNMASKED_VENDOR_WEBGL: 0x9245,\n  UNMASKED_RENDERER_WEBGL: 0x9246,\n\n  // EXT_texture_filter_anisotropic\n\n  MAX_TEXTURE_MAX_ANISOTROPY_EXT: 0x84ff,\n  TEXTURE_MAX_ANISOTROPY_EXT: 0x84fe,\n\n  // WEBGL_compressed_texture_s3tc\n\n  COMPRESSED_RGB_S3TC_DXT1_EXT: 0x83f0,\n  COMPRESSED_RGBA_S3TC_DXT1_EXT: 0x83f1,\n  COMPRESSED_RGBA_S3TC_DXT3_EXT: 0x83f2,\n  COMPRESSED_RGBA_S3TC_DXT5_EXT: 0x83f3,\n\n  // WEBGL_compressed_texture_es3\n\n  COMPRESSED_R11_EAC: 0x9270,\n  COMPRESSED_SIGNED_R11_EAC: 0x9271,\n  COMPRESSED_RG11_EAC: 0x9272,\n  COMPRESSED_SIGNED_RG11_EAC: 0x9273,\n  COMPRESSED_RGB8_ETC2: 0x9274,\n  COMPRESSED_RGBA8_ETC2_EAC: 0x9275,\n  COMPRESSED_SRGB8_ETC2: 0x9276,\n  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: 0x9277,\n  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9278,\n  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9279,\n\n  // WEBGL_compressed_texture_pvrtc\n\n  COMPRESSED_RGB_PVRTC_4BPPV1_IMG: 0x8c00,\n  COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: 0x8c02,\n  COMPRESSED_RGB_PVRTC_2BPPV1_IMG: 0x8c01,\n  COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: 0x8c03,\n\n  // WEBGL_compressed_texture_etc1\n\n  COMPRESSED_RGB_ETC1_WEBGL: 0x8d64,\n\n  // WEBGL_compressed_texture_atc\n\n  COMPRESSED_RGB_ATC_WEBGL: 0x8c92,\n  COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL: 0x8c92,\n  COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL: 0x87ee,\n\n  // WEBGL_depth_texture\n\n  UNSIGNED_INT_24_8_WEBGL: 0x84fa,\n\n  // OES_texture_half_float\n\n  HALF_FLOAT_OES: 0x8d61,\n\n  // WEBGL_color_buffer_float\n\n  RGBA32F_EXT: 0x8814,\n  RGB32F_EXT: 0x8815,\n  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: 0x8211,\n  UNSIGNED_NORMALIZED_EXT: 0x8c17,\n\n  // EXT_blend_minmax\n\n  MIN_EXT: 0x8007,\n  MAX_EXT: 0x8008,\n\n  // EXT_sRGB\n\n  SRGB_EXT: 0x8c40,\n  SRGB_ALPHA_EXT: 0x8c42,\n  SRGB8_ALPHA8_EXT: 0x8c43,\n  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: 0x8210,\n\n  // OES_standard_derivatives\n\n  FRAGMENT_SHADER_DERIVATIVE_HINT_OES: 0x8b8b,\n\n  // WEBGL_draw_buffers\n\n  COLOR_ATTACHMENT0_WEBGL: 0x8ce0,\n  COLOR_ATTACHMENT1_WEBGL: 0x8ce1,\n  COLOR_ATTACHMENT2_WEBGL: 0x8ce2,\n  COLOR_ATTACHMENT3_WEBGL: 0x8ce3,\n  COLOR_ATTACHMENT4_WEBGL: 0x8ce4,\n  COLOR_ATTACHMENT5_WEBGL: 0x8ce5,\n  COLOR_ATTACHMENT6_WEBGL: 0x8ce6,\n  COLOR_ATTACHMENT7_WEBGL: 0x8ce7,\n  COLOR_ATTACHMENT8_WEBGL: 0x8ce8,\n  COLOR_ATTACHMENT9_WEBGL: 0x8ce9,\n  COLOR_ATTACHMENT10_WEBGL: 0x8cea,\n  COLOR_ATTACHMENT11_WEBGL: 0x8ceb,\n  COLOR_ATTACHMENT12_WEBGL: 0x8cec,\n  COLOR_ATTACHMENT13_WEBGL: 0x8ced,\n  COLOR_ATTACHMENT14_WEBGL: 0x8cee,\n  COLOR_ATTACHMENT15_WEBGL: 0x8cef,\n  DRAW_BUFFER0_WEBGL: 0x8825,\n  DRAW_BUFFER1_WEBGL: 0x8826,\n  DRAW_BUFFER2_WEBGL: 0x8827,\n  DRAW_BUFFER3_WEBGL: 0x8828,\n  DRAW_BUFFER4_WEBGL: 0x8829,\n  DRAW_BUFFER5_WEBGL: 0x882a,\n  DRAW_BUFFER6_WEBGL: 0x882b,\n  DRAW_BUFFER7_WEBGL: 0x882c,\n  DRAW_BUFFER8_WEBGL: 0x882d,\n  DRAW_BUFFER9_WEBGL: 0x882e,\n  DRAW_BUFFER10_WEBGL: 0x882f,\n  DRAW_BUFFER11_WEBGL: 0x8830,\n  DRAW_BUFFER12_WEBGL: 0x8831,\n  DRAW_BUFFER13_WEBGL: 0x8832,\n  DRAW_BUFFER14_WEBGL: 0x8833,\n  DRAW_BUFFER15_WEBGL: 0x8834,\n  MAX_COLOR_ATTACHMENTS_WEBGL: 0x8cdf,\n  MAX_DRAW_BUFFERS_WEBGL: 0x8824,\n\n  // OES_vertex_array_object\n\n  VERTEX_ARRAY_BINDING_OES: 0x85b5,\n\n  // EXT_disjoint_timer_query\n\n  QUERY_COUNTER_BITS_EXT: 0x8864,\n  CURRENT_QUERY_EXT: 0x8865,\n  QUERY_RESULT_EXT: 0x8866,\n  QUERY_RESULT_AVAILABLE_EXT: 0x8867,\n  TIME_ELAPSED_EXT: 0x88bf,\n  TIMESTAMP_EXT: 0x8e28,\n  GPU_DISJOINT_EXT: 0x8fbb // A Boolean indicating whether or not the GPU performed any disjoint operation.\n};\n","import {uid, assert} from '../utils';\n\n// Rendering primitives - specify how to extract primitives from vertices.\n// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants\nexport const DRAW_MODE = {\n  POINTS: 0x0000, // draw single points.\n  LINES: 0x0001, // draw lines. Each vertex connects to the one after it.\n  LINE_LOOP: 0x0002, // draw lines. Each set of two vertices is treated as a separate line segment.\n  LINE_STRIP: 0x0003, // draw a connected group of line segments from the first vertex to the last\n  TRIANGLES: 0x0004, // draw triangles. Each set of three vertices creates a separate triangle.\n  TRIANGLE_STRIP: 0x0005, // draw a connected group of triangles.\n  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.\n  // Each vertex connects to the previous and the first vertex in the fan.\n};\n\nexport default class Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n\n  constructor(props = {}) {\n    const {\n      id = uid('geometry'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n\n    // stubRemovedMethods(this, [\n    //   'setNeedsRedraw', 'needsRedraw', 'setAttributes'\n    // ], 'Immutable');\n\n    // stubRemovedMethods(this, [\n    //   'hasAttribute', 'getAttribute', 'getArray'\n    // ], 'Use geometry.attributes and geometry.indices');\n\n    // deprecateMethods(this, ['getAttributes'])\n  }\n\n  get mode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  // Return an object with all attributes plus indices added as a field.\n  getAttributes() {\n    return this.indices ? {indices: this.indices, ...this.attributes} : this.attributes;\n  }\n\n  // PRIVATE\n\n  _print(attributeName) {\n    return `Geometry ${this.id} attribute ${attributeName}`;\n  }\n\n  // Attribute\n  // value: typed array\n  // type: indices, vertices, uvs\n  // size: elements per vertex\n  // target: WebGL buffer type (string or constant)\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {value: indices, size: 1} : indices;\n    }\n\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n\n      // Wrap \"unwrapped\" arrays and try to autodetect their type\n      attribute = ArrayBuffer.isView(attribute) ? {value: attribute} : attribute;\n\n      assert(\n        ArrayBuffer.isView(attribute.value),\n        `${this._print(attributeName)}: must be typed array or object with value as typed array`\n      );\n\n      if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n        attribute.size = 3;\n      }\n\n      // Move indices to separate field\n      if (attributeName === 'indices') {\n        assert(!this.indices);\n        this.indices = attribute;\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n\n    if (this.indices && this.indices.isIndexed !== undefined) {\n      this.indices = Object.assign({}, this.indices);\n      delete this.indices.isIndexed;\n    }\n\n    return this;\n  }\n\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n    let vertexCount = Infinity;\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {value, size, constant} = attribute;\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n\n    assert(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n}\n","import React, {Component} from 'react'; // eslint-disable-line\nimport PropTypes from 'prop-types';\nimport {lumaStats, setPathPrefix} from '@luma.gl/core';\nimport {VRDisplay} from '@luma.gl/addons';\nimport StatsWidget from '@probe.gl/stats-widget';\n\nimport InfoPanel from './info-panel';\n\nconst GITHUB_TREE = 'https://github.com/uber/luma.gl/tree/7.2-release';\n\n// WORKAROUND FOR luma.gl VRDisplay\nif (typeof global !== 'undefined' && !global.navigator) {\n  global.navigator = {};\n}\n\nif (typeof window !== 'undefined') {\n  window.website = true;\n}\n\nconst STYLES = {\n  EXAMPLE_NOT_SUPPPORTED: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100vh'\n  }\n};\n\nconst STAT_STYLES = {\n  position: 'fixed',\n  fontSize: '12px',\n  zIndex: 10000,\n  color: '#fff',\n  background: '#000',\n  padding: '8px',\n  opacity: 0.8\n};\n\nconst propTypes = {\n  AnimationLoop: PropTypes.func.isRequired,\n  exampleConfig: PropTypes.object.isRequired,\n  canvas: PropTypes.string\n};\n\nconst defaultProps = {\n  canvas: 'example-canvas'\n};\n\nconst DEFAULT_ALT_TEXT = 'THIS EXAMPLE IS NOT SUPPORTED';\n\nexport default class AnimationLoopExamplePage extends Component {\n  constructor(props) {\n    super(props);\n    const {AnimationLoop} = this.props;\n    this.animationLoop = new AnimationLoop();\n  }\n\n  componentDidMount() {\n    const {showStats} = this.props;\n\n    this.animationLoop._setDisplay(new VRDisplay());\n\n    // Ensure the example can find its images\n    // TODO - ideally ocular-gatsby should extract images from example source?\n    const {exampleConfig} = this.props;\n    if (exampleConfig && exampleConfig.path) {\n      const RAW_GITHUB = 'https://raw.githubusercontent.com/uber/luma.gl/master';\n      setPathPrefix(`${RAW_GITHUB}/${exampleConfig.path}`);\n    }\n\n    // Start the actual example\n    this.animationLoop.start(this.props);\n\n    // animationLoop.stats.reset();\n\n    if (showStats) {\n      this._showStats(this.animationLoop);\n    }\n  }\n\n  componentWillUnmount() {\n    this.animationLoop.stop(this.props);\n    this.animationLoop.delete();\n    this.animationLoop = null;\n    // this._stopStats();\n  }\n\n  _showStats(animationLoop) {\n    const timeWidget = new StatsWidget(animationLoop.stats, {\n      container: this.refs.renderStats,\n      title: 'Render Time',\n      css: {\n        header: {\n          fontWeight: 'bold'\n        }\n      },\n      framesPerUpdate: 60,\n      formatters: {\n        'CPU Time': 'averageTime',\n        'GPU Time': 'averageTime',\n        'Frame Rate': 'fps'\n      },\n      resetOnUpdate: {\n        'CPU Time': true,\n        'GPU Time': true,\n        'Frame Rate': true\n      }\n    });\n\n    lumaStats.get('Memory Usage').reset();\n    const memWidget = new StatsWidget(lumaStats.get('Memory Usage'), {\n      container: this.refs.memStats,\n      css: {\n        header: {\n          fontWeight: 'bold'\n        }\n      },\n      framesPerUpdate: 60,\n      formatters: {\n        'GPU Memory': 'memory',\n        'Buffer Memory': 'memory',\n        'Renderbuffer Memory': 'memory',\n        'Texture Memory': 'memory'\n      }\n    });\n\n    const updateStats = () => {\n      timeWidget.update();\n      memWidget.update();\n      this.animationFrame = window.requestAnimationFrame(updateStats);\n    };\n\n    this.animationFrame = window.requestAnimationFrame(updateStats);\n  }\n\n  _stopStats() {\n    window.cancelAnimationFrame(this.animationFrame);\n  }\n\n  render() {\n    const {exampleConfig: {title, path} = {}, panel = true, stats} = this.props;\n\n    const notSupported = this.animationLoop.isSupported && !this.animationLoop.isSupported();\n\n    if (notSupported) {\n      const altText = this.animationLoop.getAltText ? this.animationLoop.getAltText() : DEFAULT_ALT_TEXT;\n      return (\n        <div style={STYLES.EXAMPLE_NOT_SUPPPORTED}>\n          <h2> {altText} </h2>\n        </div>\n      );\n    }\n\n    // HTML is stored on the app\n    const controls = this.props.AnimationLoop.getInfo() ||\n      (this.animationLoop.getInfo && this.animationLoop.getInfo());\n\n    return (\n      <div className=\"fg\" style={{width: '100%', height: '100%', padding: 0, border: 0}}>\n        {\n          stats ?\n          <div ref=\"stats\" className=\"stats\" style={STAT_STYLES}>\n            <div ref=\"renderStats\" className=\"renderStats\"/>\n            <div ref=\"memStats\" className=\"memStats\"/>\n          </div> : null\n        }\n        <canvas\n          id={this.props.canvas}\n          style={{width: '100%', height: '100%', padding: 0, border: 0}}\n        />\n        {panel ? <InfoPanel name={title} controls={controls} sourceLink={`${GITHUB_TREE}/${path}`} /> : null}\n      </div>\n    );\n  }\n}\n\nAnimationLoopExamplePage.propTypes = propTypes;\nAnimationLoopExamplePage.defaultProps = defaultProps;\nAnimationLoopExamplePage.displayName = 'AnimationLoop';\n","// Feature detection for WebGL\n//\n// Provides a function that enables simple checking of which WebGL features are\n// available in an WebGL1 or WebGL2 environment.\n\n/* eslint-disable no-inline-comments, max-len */\nimport isOldIE from './is-old-ie';\nimport assert from './assert';\n\nconst GL_VENDOR = 0x1f00;\nconst GL_RENDERER = 0x1f01;\nconst GL_VERSION = 0x1f02;\nconst GL_SHADING_LANGUAGE_VERSION = 0x8b8c;\n\n// Defines luma.gl \"feature\" names and semantics\nconst WEBGL_FEATURES = {\n  // GLSL extensions\n  GLSL_FRAG_DATA: ['WEBGL_draw_buffers', true], // TODO - name makes no sense in GLSL 3.00\n  GLSL_FRAG_DEPTH: ['EXT_frag_depth', true],\n  GLSL_DERIVATIVES: ['OES_standard_derivatives', true],\n  GLSL_TEXTURE_LOD: ['EXT_shader_texture_lod', true]\n};\n\n// Create a key-mirrored FEATURES array\nconst FEATURES = {};\nObject.keys(WEBGL_FEATURES).forEach(key => {\n  FEATURES[key] = key;\n});\n\nexport {FEATURES};\n\nfunction isWebGL2(gl) {\n  return Boolean(gl && gl._version === 2);\n}\n\nexport function getContextInfo(gl) {\n  const info = gl.getExtension('WEBGL_debug_renderer_info');\n  const vendor = gl.getParameter((info && info.UNMASKED_VENDOR_WEBGL) || GL_VENDOR);\n  const renderer = gl.getParameter((info && info.UNMASKED_RENDERER_WEBGL) || GL_RENDERER);\n  const gpuVendor = identifyGPUVendor(vendor, renderer);\n  const gpuInfo = {\n    gpuVendor,\n    vendor,\n    renderer,\n    version: gl.getParameter(GL_VERSION),\n    shadingLanguageVersion: gl.getParameter(GL_SHADING_LANGUAGE_VERSION)\n  };\n  return gpuInfo;\n}\n\nfunction identifyGPUVendor(vendor, renderer) {\n  if (vendor.match(/NVIDIA/i) || renderer.match(/NVIDIA/i)) {\n    return 'NVIDIA';\n  }\n  if (vendor.match(/INTEL/i) || renderer.match(/INTEL/i)) {\n    return 'INTEL';\n  }\n  if (\n    vendor.match(/AMD/i) ||\n    renderer.match(/AMD/i) ||\n    vendor.match(/ATI/i) ||\n    renderer.match(/ATI/i)\n  ) {\n    return 'AMD';\n  }\n  return 'UNKNOWN GPU';\n}\n\nconst compiledGlslExtensions = {};\n\n// Enables feature detection in IE11 due to a bug where gl.getExtension may return true\n// but fail to compile when the extension is enabled in the shader. Specifically,\n// the OES_standard_derivatives and WEBGL_draw_buffers extensions fails to compile in IE11 even though its included\n// in the list of supported extensions.\n// opts allows user agent to be overridden for testing\n/*\n* Inputs :\n*  gl : WebGL context\n*  cap : Key of WEBGL_FEATURES object identifying the extension\n*  opts :\n*   behavior : behavor of extension to be tested, by defualt `enable` is used\n* Returns : true, if shader is compiled successfully, false otherwise\n*/\nexport function canCompileGLGSExtension(gl, cap, opts = {}) {\n  const feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n\n  if (!isOldIE(opts)) {\n    return true;\n  }\n\n  if (cap in compiledGlslExtensions) {\n    return compiledGlslExtensions[cap];\n  }\n\n  const extensionName = feature[0];\n  const behavior = opts.behavior || 'enable';\n  const source = `#extension GL_${extensionName} : ${behavior}\\nvoid main(void) {}`;\n\n  const shader = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const canCompile = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  gl.deleteShader(shader);\n  compiledGlslExtensions[cap] = canCompile;\n  return canCompile;\n}\n\n// TODO - cache the value\nfunction getFeature(gl, cap) {\n  const feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n\n  // Get extension name from table\n  const extensionName = isWebGL2(gl) ? feature[1] || feature[0] : feature[0];\n\n  // Check if the value is dependent on checking an extension\n  const value =\n    typeof extensionName === 'string' ? Boolean(gl.getExtension(extensionName)) : extensionName;\n\n  assert(value === false || value === true);\n\n  return value;\n}\n\nexport function hasFeatures(gl, features) {\n  features = Array.isArray(features) ? features : [features];\n  return features.every(feature => getFeature(gl, feature));\n}\n","/* global window */\n// opts allows user agent to be overridden for testing\nexport default function isOldIE(opts = {}) {\n  const navigator = typeof window !== 'undefined' ? window.navigator || {} : {};\n  const userAgent = opts.userAgent || navigator.userAgent || '';\n  // We only care about older versions of IE (IE 11 and below). Newer versions of IE (Edge)\n  // have much better web standards support.\n  const isMSIE = userAgent.indexOf('MSIE ') !== -1;\n  const isTrident = userAgent.indexOf('Trident/') !== -1;\n  return isMSIE || isTrident;\n}\n","import {getContextInfo, hasFeatures, canCompileGLGSExtension, FEATURES} from '../utils/webgl-info';\n\nexport function getPlatformShaderDefines(gl) {\n  const debugInfo = getContextInfo(gl);\n\n  switch (debugInfo.gpuVendor.toLowerCase()) {\n    case 'nvidia':\n      return `\\\n#define NVIDIA_GPU\n// Nvidia optimizes away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n`;\n\n    case 'intel':\n      return `\\\n#define INTEL_GPU\n// Intel optimizes away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n// Intel's built-in 'tan' function doesn't have acceptable precision\n#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1\n// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow\n#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1\n`;\n\n    case 'amd':\n      // AMD Does not eliminate fp64 code\n      return `\\\n#define AMD_GPU\n`;\n\n    default:\n      // We don't know what GPU it is, could be that the GPU driver or\n      // browser is not implementing UNMASKED_RENDERER constant and not\n      // reporting a correct name\n      return `\\\n#define DEFAULT_GPU\n// Prevent driver from optimizing away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n// Intel's built-in 'tan' function doesn't have acceptable precision\n#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1\n// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow\n#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1\n`;\n  }\n}\n\nexport function getVersionDefines(gl, glslVersion, isFragment) {\n  // Add shadertools defines to let shaders portably v1/v3 check for features\n  let versionDefines = `\\\n#if (__VERSION__ > 120)\n\n# define FRAG_DEPTH\n# define DERIVATIVES\n# define DRAW_BUFFERS\n# define TEXTURE_LOD\n\n#endif // __VERSION\n`;\n\n  if (hasFeatures(gl, FEATURES.GLSL_FRAG_DEPTH)) {\n    versionDefines += `\\\n// FRAG_DEPTH => gl_FragDepth is available\n#ifdef GL_EXT_frag_depth\n#extension GL_EXT_frag_depth : enable\n# define FRAG_DEPTH\n# define gl_FragDepth gl_FragDepthEXT\n#endif\n`;\n  }\n  if (\n    hasFeatures(gl, FEATURES.GLSL_DERIVATIVES) &&\n    canCompileGLGSExtension(gl, FEATURES.GLSL_DERIVATIVES)\n  ) {\n    versionDefines += `\\\n// DERIVATIVES => dxdF, dxdY and fwidth are available\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n# define DERIVATIVES\n#endif\n`;\n  }\n  if (\n    hasFeatures(gl, FEATURES.GLSL_FRAG_DATA) &&\n    canCompileGLGSExtension(gl, FEATURES.GLSL_FRAG_DATA, {behavior: 'require'})\n  ) {\n    versionDefines += `\\\n// DRAW_BUFFERS => gl_FragData[] is available\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers : require\n#define DRAW_BUFFERS\n#endif\n`;\n  }\n  if (hasFeatures(gl, FEATURES.GLSL_TEXTURE_LOD)) {\n    versionDefines += `\\\n// TEXTURE_LOD => texture2DLod etc are available\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n# define TEXTURE_LOD\n#define texture2DLod texture2DLodEXT\n#define texture2DProjLod texture2DProjLodEXT\n#define texture2DProjLod texture2DProjLodEXT\n#define textureCubeLod textureCubeLodEXT\n#define texture2DGrad texture2DGradEXT\n#define texture2DProjGrad texture2DProjGradEXT\n#define texture2DProjGrad texture2DProjGradEXT\n#define textureCubeGrad textureCubeGradEXT\n#endif\n`;\n  }\n  return versionDefines;\n}\n","import {VERTEX_SHADER, FRAGMENT_SHADER} from './constants';\nimport {resolveModules, getShaderModule} from './resolve-modules';\nimport {getPlatformShaderDefines, getVersionDefines} from './platform-defines';\nimport injectShader, {DECLARATION_INJECT_MARKER} from './inject-shader';\nimport {assert} from '../utils';\n/* eslint-disable max-depth, complexity */\n\nconst INJECT_SHADER_DECLARATIONS = `\\n\\n${DECLARATION_INJECT_MARKER}\\n\\n`;\n\nconst SHADER_TYPE = {\n  [VERTEX_SHADER]: 'vertex',\n  [FRAGMENT_SHADER]: 'fragment'\n};\n\nconst HOOK_FUNCTIONS = {\n  [VERTEX_SHADER]: {},\n  [FRAGMENT_SHADER]: {}\n};\n\nconst MODULE_INJECTIONS = {\n  [VERTEX_SHADER]: {},\n  [FRAGMENT_SHADER]: {}\n};\n\n// Precision prologue to inject before functions are injected in shader\n// TODO - extract any existing prologue in the fragment source and move it up...\nconst FRAGMENT_SHADER_PROLOGUE = `\\\nprecision highp float;\n\n`;\n\nexport function createShaderHook(hook, opts = {}) {\n  hook = hook.trim();\n  const [stage, signature] = hook.split(':');\n  const name = hook.replace(/\\(.+/, '');\n  HOOK_FUNCTIONS[stage][name] = Object.assign(opts, {signature});\n}\n\nexport function createModuleInjection(moduleName, opts) {\n  const {hook, injection, order = 0} = opts;\n  const shaderStage = hook.slice(0, 2);\n\n  const moduleInjections = MODULE_INJECTIONS[shaderStage];\n  moduleInjections[moduleName] = moduleInjections[moduleName] || {};\n\n  assert(!moduleInjections[moduleName][hook], 'Module injection already created');\n\n  moduleInjections[moduleName][hook] = {\n    injection,\n    order\n  };\n}\n\n// Helpful for tests\nexport function resetGlobalShaderHooks() {\n  HOOK_FUNCTIONS[VERTEX_SHADER] = {};\n  HOOK_FUNCTIONS[FRAGMENT_SHADER] = {};\n\n  MODULE_INJECTIONS[VERTEX_SHADER] = {};\n  MODULE_INJECTIONS[FRAGMENT_SHADER] = {};\n}\n\n// Inject a list of modules\nexport function assembleShaders(gl, opts) {\n  const {vs, fs} = opts;\n  const modules = resolveModules(opts.modules || []);\n  return {\n    gl,\n    vs: assembleShader(gl, Object.assign({}, opts, {source: vs, type: VERTEX_SHADER, modules})),\n    fs: assembleShader(gl, Object.assign({}, opts, {source: fs, type: FRAGMENT_SHADER, modules})),\n    getUniforms: assembleGetUniforms(modules),\n    modules: assembleModuleMap(modules)\n  };\n}\n\n// Pulls together complete source code for either a vertex or a fragment shader\n// adding prologues, requested module chunks, and any final injections.\nfunction assembleShader(\n  gl,\n  {\n    id,\n    source,\n    type,\n    modules,\n    defines = {},\n    hookFunctions = HOOK_FUNCTIONS,\n    moduleInjections = MODULE_INJECTIONS,\n    inject = {},\n    prologue = true,\n    log\n  }\n) {\n  assert(typeof source === 'string', 'shader source must be a string');\n\n  // TODO(Tarek): Supporting global hooks, remove when they're removed.\n  if (hookFunctions !== HOOK_FUNCTIONS) {\n    hookFunctions = {\n      [VERTEX_SHADER]: Object.assign(\n        {},\n        HOOK_FUNCTIONS[VERTEX_SHADER],\n        hookFunctions[VERTEX_SHADER]\n      ),\n      [FRAGMENT_SHADER]: Object.assign(\n        {},\n        HOOK_FUNCTIONS[FRAGMENT_SHADER],\n        hookFunctions[FRAGMENT_SHADER]\n      )\n    };\n  }\n\n  if (moduleInjections !== MODULE_INJECTIONS) {\n    moduleInjections = {\n      [VERTEX_SHADER]: Object.assign(\n        {},\n        MODULE_INJECTIONS[VERTEX_SHADER],\n        moduleInjections[VERTEX_SHADER]\n      ),\n      [FRAGMENT_SHADER]: Object.assign(\n        {},\n        MODULE_INJECTIONS[FRAGMENT_SHADER],\n        moduleInjections[FRAGMENT_SHADER]\n      )\n    };\n  }\n\n  const isVertex = type === VERTEX_SHADER;\n\n  const sourceLines = source.split('\\n');\n  let glslVersion = 100;\n  let versionLine = '';\n  let coreSource = source;\n  // Extract any version directive string from source.\n  // TODO : keep all pre-processor statements at the begining of the shader.\n  if (sourceLines[0].indexOf('#version ') === 0) {\n    glslVersion = 300; // TODO - regexp that matches atual version number\n    versionLine = sourceLines[0];\n    coreSource = sourceLines.slice(1).join('\\n');\n  } else {\n    versionLine = `#version ${glslVersion}`;\n  }\n\n  // Combine Module and Application Defines\n  const allDefines = {};\n  modules.forEach(module => {\n    Object.assign(allDefines, module.getDefines());\n  });\n  Object.assign(allDefines, defines);\n\n  // Add platform defines (use these to work around platform-specific bugs and limitations)\n  // Add common defines (GLSL version compatibility, feature detection)\n  // Add precision declaration for fragment shaders\n  let assembledSource = prologue\n    ? `\\\n${versionLine}\n${getShaderName({id, source, type})}\n${getShaderType({type})}\n${getPlatformShaderDefines(gl)}\n${getVersionDefines(gl, glslVersion, !isVertex)}\n${getApplicationDefines(allDefines)}\n${isVertex ? '' : FRAGMENT_SHADER_PROLOGUE}\n`\n    : `${versionLine}\n`;\n\n  // Add source of dependent modules in resolved order\n  let injectStandardStubs = false;\n  const hookInjections = {};\n  const mainInjections = {};\n\n  for (const key in inject) {\n    const injection =\n      typeof inject[key] === 'string' ? {injection: inject[key], order: 0} : inject[key];\n    if (key.match(/^(v|f)s:/)) {\n      if (key[3] === '#') {\n        mainInjections[key] = [injection];\n      } else {\n        hookInjections[key] = [injection];\n      }\n    } else {\n      // Regex injection\n      mainInjections[key] = [injection];\n    }\n  }\n\n  for (const module of modules) {\n    switch (module.name) {\n      case 'inject':\n        injectStandardStubs = true;\n        break;\n\n      default:\n        if (log) {\n          module.checkDeprecations(coreSource, log);\n        }\n        const moduleSource = module.getModuleSource(type, glslVersion);\n        // Add the module source, and a #define that declares it presence\n        assembledSource += moduleSource;\n\n        if (moduleInjections[type][module.name]) {\n          const injections = moduleInjections[type][module.name];\n          for (const key in injections) {\n            if (key.match(/^(v|f)s:#/)) {\n              mainInjections[key] = mainInjections[key] || [];\n              mainInjections[key].push(injections[key]);\n            } else {\n              hookInjections[key] = hookInjections[key] || [];\n              hookInjections[key].push(injections[key]);\n            }\n          }\n        }\n    }\n  }\n\n  // For injectShader\n  assembledSource += INJECT_SHADER_DECLARATIONS;\n\n  assembledSource += getHookFunctions(hookFunctions[type], hookInjections);\n\n  // Add the version directive and actual source of this shader\n  assembledSource += coreSource;\n\n  // Apply any requested shader injections\n  assembledSource = injectShader(assembledSource, type, mainInjections, injectStandardStubs);\n\n  return assembledSource;\n}\n\n// Returns a combined `getUniforms` covering the options for all the modules,\n// the created function will pass on options to the inidividual `getUniforms`\n// function of each shader module and combine the results into one object that\n// can be passed to setUniforms.\nfunction assembleGetUniforms(modules) {\n  return function getUniforms(opts) {\n    const uniforms = {};\n    for (const module of modules) {\n      // `modules` is already sorted by dependency level. This guarantees that\n      // modules have access to the uniforms that are generated by their dependencies.\n      const moduleUniforms = module.getUniforms(opts, uniforms);\n      Object.assign(uniforms, moduleUniforms);\n    }\n    return uniforms;\n  };\n}\n\n// Returns a map with module names as keys, resolving to their module definitions\n// The presence of a key indicates that the module is available in this program,\n// whether directly included, or through a dependency of some other module\nfunction assembleModuleMap(modules) {\n  const result = {};\n  for (const moduleName of modules) {\n    const shaderModule = getShaderModule(moduleName);\n    result[moduleName] = shaderModule;\n  }\n  return result;\n}\n\nfunction getShaderType({type}) {\n  return `\n#define SHADER_TYPE_${SHADER_TYPE[type].toUpperCase()}\n`;\n}\n\n// Generate \"glslify-compatible\" SHADER_NAME defines\n// These are understood by the GLSL error parsing function\n// If id is provided and no SHADER_NAME constant is present in source, create one\nfunction getShaderName({id, source, type}) {\n  const injectShaderName = id && typeof id === 'string' && source.indexOf('SHADER_NAME') === -1;\n  return injectShaderName\n    ? `\n#define SHADER_NAME ${id}_${SHADER_TYPE[type]}\n\n`\n    : '';\n}\n\n// Generates application defines from an object\nfunction getApplicationDefines(defines = {}) {\n  let count = 0;\n  let sourceText = '';\n  for (const define in defines) {\n    if (count === 0) {\n      sourceText += '\\n// APPLICATION DEFINES\\n';\n    }\n    count++;\n\n    const value = defines[define];\n    if (value || Number.isFinite(value)) {\n      sourceText += `#define ${define.toUpperCase()} ${defines[define]}\\n`;\n    }\n  }\n  if (count === 0) {\n    sourceText += '\\n';\n  }\n  return sourceText;\n}\n\nfunction getHookFunctions(hookFunctions, hookInjections) {\n  let result = '';\n  for (const hookName in hookFunctions) {\n    const hookFunction = hookFunctions[hookName];\n    result += `void ${hookFunction.signature} {\\n`;\n    if (hookFunction.header) {\n      result += `  ${hookFunction.header}`;\n    }\n    if (hookInjections[hookName]) {\n      const injections = hookInjections[hookName];\n      injections.sort((a, b) => a.order - b.order);\n      for (const injection of injections) {\n        result += `  ${injection.injection}\\n`;\n      }\n    }\n    if (hookFunction.footer) {\n      result += `  ${hookFunction.footer}`;\n    }\n    result += '}\\n';\n  }\n\n  return result;\n}\n","import ShaderModule from './shader-module';\nimport {assert} from '../utils';\n\nexport default class ShaderModuleRegistry {\n  constructor() {\n    this.shaderModules = {};\n    this.defaultShaderModules = [];\n  }\n\n  setDefaultShaderModules(modules) {\n    this.defaultShaderModules = this.resolveModules(modules);\n  }\n\n  getDefaultShaderModules() {\n    return this.defaultShaderModules;\n  }\n\n  registerShaderModules(shaderModuleList, {ignoreMultipleRegistrations = false} = {}) {\n    for (const shaderModule of shaderModuleList) {\n      this._registerShaderModule(shaderModule, ignoreMultipleRegistrations);\n    }\n  }\n\n  getShaderModule(moduleOrName) {\n    // Check if \"inline\" module, return it\n    if (moduleOrName instanceof ShaderModule) {\n      return moduleOrName;\n    }\n\n    // Check if module descriptor\n    if (typeof moduleOrName !== 'string') {\n      return this._registerShaderModule(moduleOrName, true);\n    }\n\n    // Module name - Look up module\n    const module = this.shaderModules[moduleOrName];\n    if (!module) {\n      assert(false, `Unknown shader module ${moduleOrName}`);\n    }\n    return module;\n  }\n\n  // registers any supplied modules, resolves any names into modules\n  // returns a list of modules\n  resolveModules(modules) {\n    return modules.map(moduleOrName => this.getShaderModule(moduleOrName));\n  }\n\n  // PRIVATE API\n\n  _registerShaderModule(module, ignoreMultipleRegistrations = false) {\n    // Check if \"inline\" module, return it\n    if (module instanceof ShaderModule) {\n      return module;\n    }\n\n    assert(module.name, 'shader module has no name');\n\n    if (!this.shaderModules[module.name] || ignoreMultipleRegistrations) {\n      // if ignoreMultipleRegistrations = true, we allow module to be re-registered\n      module = new ShaderModule(module);\n      module.dependencies = this.resolveModules(module.dependencies);\n      this.shaderModules[module.name] = module;\n    } else {\n      // TODO - instead verify that definition is not changing...\n      throw new Error(`shader module ${module.name} already registered`);\n    }\n\n    return this.shaderModules[module.name];\n  }\n}\n","import ShaderModuleRegistry from './shader-module-registry';\n\nconst shaderModuleRegistry = new ShaderModuleRegistry();\n\n/**\n * Registers an array of default shader modules. These will be concatenated\n * automatically at the end of any shader module list passed to\n * `assembleShaders` (plus `resolveModules` and `getShaderDependencies`)\n * @param {Object[]} modules - Array of shader modules\n */\nexport function setDefaultShaderModules(modules) {\n  shaderModuleRegistry.setDefaultShaderModules(modules);\n}\n\nexport function getDefaultShaderModules() {\n  return shaderModuleRegistry.getDefaultShaderModules();\n}\n\n/**\n * Registers an array of shader modules\n * @param {Object[]} shaderModuleList - Array of shader modules\n */\nexport function registerShaderModules(\n  shaderModuleList,\n  {ignoreMultipleRegistrations = false} = {}\n) {\n  shaderModuleRegistry.registerShaderModules(shaderModuleList, {ignoreMultipleRegistrations});\n}\n\n// registers any supplied modules and returns a list of module names\nexport function resolveModules(modules) {\n  modules = modules.concat(shaderModuleRegistry.defaultShaderModules);\n  modules = shaderModuleRegistry.resolveModules(modules);\n  return getShaderDependencies(modules);\n}\n\n// Looks up a moduleName among registered modules and returns definition.\n// If \"inline\" module, returns it directly\nexport function getShaderModule(moduleOrName) {\n  return shaderModuleRegistry.getShaderModule(moduleOrName);\n}\n\n/**\n * Takes a list of shader module names and returns a new list of\n * shader module names that includes all dependencies, sorted so\n * that modules that are dependencies of other modules come first.\n *\n * If the shader glsl code from the returned modules is concatenated\n * in the reverse order, it is guaranteed that all functions be resolved and\n * that all function and variable definitions come before use.\n *\n * @param {String[]} modules - Array of modules (inline modules or module names)\n * @return {String[]} - Array of modules\n */\nfunction getShaderDependencies(modules) {\n  const moduleMap = {};\n  const moduleDepth = {};\n  getDependencyGraph({modules, level: 0, moduleMap, moduleDepth});\n\n  // Return a reverse sort so that dependencies come before the modules that use them\n  return Object.keys(moduleDepth)\n    .sort((a, b) => moduleDepth[b] - moduleDepth[a])\n    .map(name => moduleMap[name]);\n}\n\n/**\n * Recursively checks module dpendencies to calculate dependency\n * level of each module.\n *\n * @param {String[]} modules - Array of modules\n * @param {Number} level - Current level\n * @return {result} - Map of module name to its level\n */\n// Adds another level of dependencies to the result map\nfunction getDependencyGraph({modules, level, moduleMap, moduleDepth}) {\n  if (level >= 5) {\n    throw new Error('Possible loop in shader dependency graph');\n  }\n\n  // Update level on all current modules\n  for (const module of modules) {\n    moduleMap[module.name] = module;\n    if (moduleDepth[module.name] === undefined || moduleDepth[module.name] < level) {\n      moduleDepth[module.name] = level;\n    }\n  }\n\n  // Recurse\n  for (const module of modules) {\n    if (module.dependencies) {\n      getDependencyGraph({modules: module.dependencies, level: level + 1, moduleMap, moduleDepth});\n    }\n  }\n}\n\nexport const TEST_EXPORTS = {\n  getShaderDependencies,\n  getDependencyGraph\n};\n","import {Vector3, Matrix4} from 'math.gl';\nimport {assert, uid} from '../../utils';\n\nexport default class ScenegraphNode {\n  constructor(props = {}) {\n    const {id} = props;\n\n    this.id = id || uid(this.constructor.name);\n\n    this.display = true; // whether to display the object at all\n    this.position = new Vector3();\n    this.rotation = new Vector3();\n    this.scale = new Vector3(1, 1, 1);\n    this.matrix = new Matrix4();\n    this.userData = {};\n\n    this.props = {};\n    this._setScenegraphNodeProps(props);\n  }\n\n  delete() {}\n\n  setProps(props) {\n    this._setScenegraphNodeProps(props);\n    return this;\n  }\n\n  toString() {\n    return `{type: ScenegraphNode, id: ${this.id})}`;\n  }\n\n  setPosition(position) {\n    assert(position.length === 3, 'setPosition requires vector argument');\n    this.position = position;\n    return this;\n  }\n\n  setRotation(rotation) {\n    assert(rotation.length === 3, 'setRotation requires vector argument');\n    this.rotation = rotation;\n    return this;\n  }\n\n  setScale(scale) {\n    assert(scale.length === 3, 'setScale requires vector argument');\n    this.scale = scale;\n    return this;\n  }\n\n  setMatrix(matrix, copyMatrix = true) {\n    if (copyMatrix) {\n      this.matrix.copy(matrix);\n    } else {\n      this.matrix = matrix;\n    }\n  }\n\n  setMatrixComponents({position, rotation, scale, update = true}) {\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    if (update) {\n      this.updateMatrix();\n    }\n    return this;\n  }\n\n  updateMatrix() {\n    const pos = this.position;\n    const rot = this.rotation;\n    const scale = this.scale;\n\n    this.matrix.identity();\n    this.matrix.translate(pos);\n    this.matrix.rotateXYZ(rot);\n    this.matrix.scale(scale);\n    return this;\n  }\n\n  update({position, rotation, scale} = {}) {\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    this.updateMatrix();\n    return this;\n  }\n\n  getCoordinateUniforms(viewMatrix, modelMatrix) {\n    // TODO - solve multiple class problem\n    // assert(viewMatrix instanceof Matrix4);\n    assert(viewMatrix);\n    modelMatrix = modelMatrix || this.matrix;\n    const worldMatrix = new Matrix4(viewMatrix).multiplyRight(modelMatrix);\n    const worldInverse = worldMatrix.invert();\n    const worldInverseTranspose = worldInverse.transpose();\n\n    return {\n      viewMatrix,\n      modelMatrix,\n      objectMatrix: modelMatrix,\n      worldMatrix,\n      worldInverseMatrix: worldInverse,\n      worldInverseTransposeMatrix: worldInverseTranspose\n    };\n  }\n\n  // TODO - copied code, not yet vetted\n  /*\n  transform() {\n    if (!this.parent) {\n      this.endPosition.set(this.position);\n      this.endRotation.set(this.rotation);\n      this.endScale.set(this.scale);\n    } else {\n      const parent = this.parent;\n      this.endPosition.set(this.position.add(parent.endPosition));\n      this.endRotation.set(this.rotation.add(parent.endRotation));\n      this.endScale.set(this.scale.add(parent.endScale));\n    }\n\n    const ch = this.children;\n    for (let i = 0; i < ch.length; ++i) {\n      ch[i].transform();\n    }\n\n    return this;\n  }\n  */\n\n  _setScenegraphNodeProps(props) {\n    if ('display' in props) {\n      this.display = props.display;\n    }\n\n    if ('position' in props) {\n      this.setPosition(props.position);\n    }\n    if ('rotation' in props) {\n      this.setRotation(props.rotation);\n    }\n    if ('scale' in props) {\n      this.setScale(props.scale);\n    }\n\n    // Matrix overwrites other props\n    if ('matrix' in props) {\n      this.setMatrix(props.matrix);\n    }\n\n    Object.assign(this.props, props);\n  }\n}\n","import {lumaStats} from '../init';\nimport {assertWebGLContext, isWebGL2, getKey, getKeyValue} from '../webgl-utils';\nimport {uid, assert, stubRemovedMethods} from '../utils';\n\nconst ERR_RESOURCE_METHOD_UNDEFINED = 'Resource subclass must define virtual methods';\n\n// TODO - Handle context loss\n// function glGetContextLossCount(gl) {\n//   return (gl.luma && gl.luma.glCount) || 0;\n// }\n\nexport default class Resource {\n  constructor(gl, opts = {}) {\n    assertWebGLContext(gl);\n\n    const {id, userData = {}} = opts;\n    this.gl = gl;\n    // this.ext = polyfillContext(gl);\n    this.id = id || uid(this.constructor.name);\n    this.userData = userData;\n    this._bound = false;\n\n    // Set the handle\n    // If handle was provided, use it, otherwise create a new handle\n\n    // TODO - Stores the handle with context loss information\n    // this.glCount = glGetContextLossCount(this.gl);\n\n    // Default VertexArray needs to be created with null handle, so compare against undefined\n    this._handle = opts.handle;\n    if (this._handle === undefined) {\n      this._handle = this._createHandle();\n    }\n\n    // Only meaningful for resources that allocate GPU memory\n    this.byteLength = 0;\n\n    this._addStats();\n  }\n\n  toString() {\n    return `${this.constructor.name}(${this.id})`;\n  }\n\n  get handle() {\n    // TODO - Add context loss handling\n    // Will regenerate and reinitialize the handle if necessary\n    // const glCount = glGetContextLossCount(this.gl);\n    // if (this.glCount !== glCount) {\n    //   this._handle = this._createHandle(this.opts);\n    //   this._glCount = glCount;\n    //   // Reinitialize object\n    //   this.initialize(this.opts);\n    // }\n    return this._handle;\n  }\n\n  delete({deleteChildren = false} = {}) {\n    // Delete this object, and get refs to any children\n    const children = this._handle && this._deleteHandle(this._handle);\n    if (this._handle) {\n      this._removeStats();\n    }\n    this._handle = null;\n\n    // Optionally, recursively delete the children\n    if (children && deleteChildren) {\n      children.filter(Boolean).forEach(child => {\n        child.delete();\n      });\n    }\n\n    return this;\n  }\n\n  bind(funcOrHandle = this.handle) {\n    if (typeof funcOrHandle !== 'function') {\n      this._bindHandle(funcOrHandle);\n      return this;\n    }\n\n    let value;\n\n    if (!this._bound) {\n      this._bindHandle(this.handle);\n      this._bound = true;\n\n      value = funcOrHandle();\n\n      this._bound = false;\n      this._bindHandle(null);\n    } else {\n      value = funcOrHandle();\n    }\n\n    return value;\n  }\n\n  unbind() {\n    this.bind(null);\n  }\n\n  /**\n   * Query a Resource parameter\n   *\n   * @param {GLenum} pname\n   * @return {GLint|GLfloat|GLenum} param\n   */\n  getParameter(pname, opts = {}) {\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n\n    const parameters = this.constructor.PARAMETERS || {};\n\n    // Use parameter definitions to handle unsupported parameters\n    const parameter = parameters[pname];\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n\n      // Check if we can query for this parameter\n      const parameterAvailable =\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        const webgl1Default = parameter.webgl1;\n        const webgl2Default = 'webgl2' in parameter ? parameter.webgl2 : parameter.webgl1;\n        const defaultValue = isWebgl2 ? webgl2Default : webgl1Default;\n        return defaultValue;\n      }\n    }\n\n    // If unknown parameter - Could be a valid parameter not covered by PARAMS\n    // Attempt to query for it and let WebGL report errors\n    return this._getParameter(pname, opts);\n  }\n\n  // Many resources support a getParameter call -\n  // getParameters will get all parameters - slow but useful for debugging\n  // eslint-disable-next-line complexity\n  getParameters(opts = {}) {\n    const {parameters, keys} = {};\n\n    // Get parameter definitions for this Resource\n    const PARAMETERS = this.constructor.PARAMETERS || {};\n\n    const isWebgl2 = isWebGL2(this.gl);\n\n    const values = {};\n\n    // Query all parameters if no list provided\n    const parameterKeys = parameters || Object.keys(PARAMETERS);\n\n    // WEBGL limits\n    for (const pname of parameterKeys) {\n      const parameter = PARAMETERS[pname];\n\n      // Check if this parameter is available on this platform\n      const parameterAvailable =\n        parameter &&\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (parameterAvailable) {\n        const key = keys ? getKey(this.gl, pname) : pname;\n        values[key] = this.getParameter(pname, opts);\n        if (keys && parameter.type === 'GLenum') {\n          values[key] = getKey(this.gl, values[key]);\n        }\n      }\n    }\n\n    return values;\n  }\n\n  /**\n   * Update a Resource setting\n   *\n   * @todo - cache parameter to avoid issuing WebGL calls?\n   *\n   * @param {GLenum} pname - parameter (GL constant, value or key)\n   * @param {GLint|GLfloat|GLenum} value\n   * @return {Resource} returns self to enable chaining\n   */\n  setParameter(pname, value) {\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n\n    const parameters = this.constructor.PARAMETERS || {};\n\n    const parameter = parameters[pname];\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n\n      // Check if this parameter is available on this platform\n      const parameterAvailable =\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        throw new Error('Parameter not available on this platform');\n      }\n\n      // Handle string keys\n      if (parameter.type === 'GLenum') {\n        value = getKeyValue(value);\n      }\n    }\n\n    // If unknown parameter - Could be a valid parameter not covered by PARAMS\n    // attempt to set it and let WebGL report errors\n    this._setParameter(pname, value);\n    return this;\n  }\n\n  /*\n   * Batch update resource parameters\n   * Assumes the subclass supports a setParameter call\n   */\n  setParameters(parameters) {\n    for (const pname in parameters) {\n      this.setParameter(pname, parameters[pname]);\n    }\n    return this;\n  }\n\n  // Install stubs for removed methods\n  stubRemovedMethods(className, version, methodNames) {\n    return stubRemovedMethods(this, className, version, methodNames);\n  }\n\n  // PUBLIC VIRTUAL METHODS\n  initialize(opts) {}\n\n  // PROTECTED METHODS - These must be overridden by subclass\n  _createHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _deleteHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _bindHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _getOptsFromHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _getParameter(pname, opts) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  /**\n   * @param {GLenum} pname\n   * @param {GLint|GLfloat|GLenum} param\n   * @return {Sampler} returns self to enable chaining\n   */\n  _setParameter(pname, value) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  // PRIVATE METHODS\n\n  _context() {\n    this.gl.luma = this.gl.luma || {};\n    return this.gl.luma;\n  }\n\n  _addStats() {\n    const name = this.constructor.name;\n    const stats = lumaStats.get('Resource Counts');\n\n    stats.get('Resources Created').incrementCount();\n    stats.get(`${name}s Created`).incrementCount();\n    stats.get(`${name}s Active`).incrementCount();\n  }\n\n  _removeStats() {\n    const name = this.constructor.name;\n    const stats = lumaStats.get('Resource Counts');\n\n    stats.get(`${name}s Active`).decrementCount();\n  }\n\n  _trackAllocatedMemory(bytes, name = this.constructor.name) {\n    const stats = lumaStats.get('Memory Usage');\n\n    stats.get('GPU Memory').addCount(bytes);\n    stats.get(`${name} Memory`).addCount(bytes);\n    this.byteLength = bytes;\n  }\n\n  _trackDeallocatedMemory(name = this.constructor.name) {\n    const stats = lumaStats.get('Memory Usage');\n\n    stats.get('GPU Memory').subtractCount(this.byteLength);\n    stats.get(`${name} Memory`).subtractCount(this.byteLength);\n    this.byteLength = 0;\n  }\n}\n","import GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport Accessor from './accessor';\nimport {\n  assertWebGL2Context,\n  getGLTypeFromTypedArray,\n  getTypedArrayFromGLType\n} from '../webgl-utils';\nimport {log, assert, checkProps} from '../utils';\n\nconst DEBUG_DATA_LENGTH = 10;\n\n// Shared prop checks for constructor and setProps\nconst DEPRECATED_PROPS = {\n  offset: 'accessor.offset',\n  stride: 'accessor.stride',\n  type: 'accessor.type',\n  size: 'accessor.size',\n  divisor: 'accessor.divisor',\n  normalized: 'accessor.normalized',\n  integer: 'accessor.integer',\n  instanced: 'accessor.divisor',\n  isInstanced: 'accessor.divisor'\n};\n\n// Prop checks for constructor\nconst PROP_CHECKS_INITIALIZE = {\n  removedProps: {},\n  replacedProps: {\n    bytes: 'byteLength'\n  },\n  // new Buffer() with individual accessor props is still used in apps, emit warnings\n  deprecatedProps: DEPRECATED_PROPS\n};\n\n// Prop checks for setProps\nconst PROP_CHECKS_SET_PROPS = {\n  // Buffer.setProps() with individual accessor props is rare => emit errors\n  removedProps: DEPRECATED_PROPS\n};\n\nexport default class Buffer extends Resource {\n  constructor(gl, props = {}) {\n    super(gl, props);\n\n    this.stubRemovedMethods('Buffer', 'v6.0', ['layout', 'setLayout', 'getIndexedParameter']);\n    // this.stubRemovedMethods('Buffer', 'v7.0', ['updateAccessor']);\n\n    // In WebGL1, need to make sure we use GL.ELEMENT_ARRAY_BUFFER when initializing element buffers\n    // otherwise buffer type will lock to generic (non-element) buffer\n    // In WebGL2, we can use GL.COPY_READ_BUFFER which avoids locking the type here\n    this.target = props.target || (this.gl.webgl2 ? GL.COPY_READ_BUFFER : GL.ARRAY_BUFFER);\n\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  // returns number of elements in the buffer (assuming that the full buffer is used)\n  getElementCount(accessor = this.accessor) {\n    return Math.round(this.byteLength / Accessor.getBytesPerElement(accessor));\n  }\n\n  // returns number of vertices in the buffer (assuming that the full buffer is used)\n  getVertexCount(accessor = this.accessor) {\n    return Math.round(this.byteLength / Accessor.getBytesPerVertex(accessor));\n  }\n\n  // Creates and initializes the buffer object's data store.\n  // Signature: `new Buffer(gl, {data: new Float32Array(...)})`\n  // Signature: `new Buffer(gl, new Float32Array(...))`\n  // Signature: `new Buffer(gl, 100)`\n  initialize(props = {}) {\n    // Signature `new Buffer(gl, new Float32Array(...)`\n    if (ArrayBuffer.isView(props)) {\n      props = {data: props};\n    }\n\n    // Signature: `new Buffer(gl, 100)`\n    if (Number.isFinite(props)) {\n      props = {byteLength: props};\n    }\n\n    props = checkProps('Buffer', props, PROP_CHECKS_INITIALIZE);\n\n    // Initialize member fields\n    this.usage = props.usage || GL.STATIC_DRAW;\n    this.debugData = null;\n\n    // Deprecated: Merge main props and accessor\n    this.setAccessor(Object.assign({}, props, props.accessor));\n\n    // Set data: (re)initializes the buffer\n    if (props.data) {\n      this._setData(props.data);\n    } else {\n      this._setByteLength(props.byteLength || 0);\n    }\n\n    return this;\n  }\n\n  setProps(props) {\n    props = checkProps('Buffer', props, PROP_CHECKS_SET_PROPS);\n\n    if ('accessor' in props) {\n      this.setAccessor(props.accessor);\n    }\n\n    return this;\n  }\n\n  // Optionally stores an accessor with the buffer, makes it easier to use it as an attribute later\n  // {type, size = 1, offset = 0, stride = 0, normalized = false, integer = false, divisor = 0}\n  setAccessor(accessor) {\n    // NOTE: From luma.gl v7.0, Accessors have an optional `buffer `field\n    // (mainly to support \"interleaving\")\n    // To avoid confusion, ensure `buffer.accessor` does not have a `buffer.accessor.buffer` field:\n    accessor = Object.assign({}, accessor);\n    delete accessor.buffer;\n\n    // This new statement ensures that an \"accessor object\" is re-packaged as an Accessor instance\n    this.accessor = new Accessor(accessor);\n    return this;\n  }\n\n  // Allocate a bigger GPU buffer (if the current buffer is not big enough).\n  // If a reallocation is triggered it clears the buffer\n  // Returns:\n  //  `true`: buffer was reallocated, data was cleared\n  //  `false`: buffer was big enough, data is intact\n  reallocate(byteLength) {\n    if (byteLength > this.byteLength) {\n      this._setByteLength(byteLength);\n      return true;\n    }\n    this.bytesUsed = byteLength;\n    return false;\n  }\n\n  // Update with new data. Reinitializes the buffer\n  setData(props) {\n    return this.initialize(props);\n  }\n\n  // Updates a subset of a buffer object's data store.\n  // Data (Typed Array or ArrayBuffer), length is inferred unless provided\n  // Offset into buffer\n  // WebGL2 only: Offset into srcData\n  // WebGL2 only: Number of bytes to be copied\n  subData(props) {\n    // Signature: buffer.subData(new Float32Array([...]))\n    if (ArrayBuffer.isView(props)) {\n      props = {data: props};\n    }\n\n    const {data, offset = 0, srcOffset = 0} = props;\n    const byteLength = props.byteLength || props.length;\n\n    assert(data);\n\n    // Create the buffer - binding it here for the first time locks the type\n    // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type\n    const target = this.gl.webgl2 ? GL.COPY_WRITE_BUFFER : this.target;\n    this.gl.bindBuffer(target, this.handle);\n    // WebGL2: subData supports additional srcOffset and length parameters\n    if (srcOffset !== 0 || byteLength !== undefined) {\n      assertWebGL2Context(this.gl);\n      this.gl.bufferSubData(this.target, offset, data, srcOffset, byteLength);\n    } else {\n      this.gl.bufferSubData(target, offset, data);\n    }\n    this.gl.bindBuffer(target, null);\n\n    // TODO - update local `data` if offsets are right\n    this.debugData = null;\n\n    this._inferType(data);\n\n    return this;\n  }\n\n  // WEBGL2 ONLY: Copies part of the data of another buffer into this buffer\n  copyData({sourceBuffer, readOffset = 0, writeOffset = 0, size}) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n\n    // Use GL.COPY_READ_BUFFER+GL.COPY_WRITE_BUFFER avoid disturbing other targets and locking type\n    gl.bindBuffer(GL.COPY_READ_BUFFER, sourceBuffer.handle);\n    gl.bindBuffer(GL.COPY_WRITE_BUFFER, this.handle);\n    gl.copyBufferSubData(GL.COPY_READ_BUFFER, GL.COPY_WRITE_BUFFER, readOffset, writeOffset, size);\n    gl.bindBuffer(GL.COPY_READ_BUFFER, null);\n    gl.bindBuffer(GL.COPY_WRITE_BUFFER, null);\n\n    // TODO - update local `data` if offsets are 0\n    this.debugData = null;\n\n    return this;\n  }\n\n  // WEBGL2 ONLY: Reads data from buffer into an ArrayBufferView or SharedArrayBuffer.\n  getData({dstData = null, srcByteOffset = 0, dstOffset = 0, length = 0} = {}) {\n    assertWebGL2Context(this.gl);\n\n    const ArrayType = getTypedArrayFromGLType(this.accessor.type || GL.FLOAT, {clamped: false});\n    const sourceAvailableElementCount = this._getAvailableElementCount(srcByteOffset);\n\n    const dstElementOffset = dstOffset;\n\n    let dstAvailableElementCount;\n    let dstElementCount;\n    if (dstData) {\n      dstElementCount = dstData.length;\n      dstAvailableElementCount = dstElementCount - dstElementOffset;\n    } else {\n      // Allocate ArrayBufferView with enough size to copy all eligible data.\n      dstAvailableElementCount = Math.min(\n        sourceAvailableElementCount,\n        length || sourceAvailableElementCount\n      );\n      dstElementCount = dstElementOffset + dstAvailableElementCount;\n    }\n\n    const copyElementCount = Math.min(sourceAvailableElementCount, dstAvailableElementCount);\n    length = length || copyElementCount;\n    assert(length <= copyElementCount);\n    dstData = dstData || new ArrayType(dstElementCount);\n\n    // Use GL.COPY_READ_BUFFER to avoid disturbing other targets and locking type\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, this.handle);\n    this.gl.getBufferSubData(GL.COPY_READ_BUFFER, srcByteOffset, dstData, dstOffset, length);\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, null);\n\n    // TODO - update local `data` if offsets are 0\n    return dstData;\n  }\n\n  /**\n   * Binds a buffer to a given binding point (target).\n   *   GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER take an index, and optionally a range.\n   *   - GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER need an index to affect state\n   *   - GL.UNIFORM_BUFFER: `offset` must be aligned to GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT.\n   *   - GL.UNIFORM_BUFFER: `size` must be a minimum of GL.UNIFORM_BLOCK_SIZE_DATA.\n   */\n  bind({\n    target = this.target, // target for the bind operation\n    index = this.accessor && this.accessor.index, // index = index of target (indexed bind point)\n    offset = 0,\n    size\n  } = {}) {\n    // NOTE: While GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER could\n    // be used as direct binding points, they will not affect transform feedback or\n    // uniform buffer state. Instead indexed bindings need to be made.\n    if (target === GL.UNIFORM_BUFFER || target === GL.TRANSFORM_FEEDBACK_BUFFER) {\n      if (size !== undefined) {\n        this.gl.bindBufferRange(target, index, this.handle, offset, size);\n      } else {\n        assert(offset === 0); // Make sure offset wasn't supplied\n        this.gl.bindBufferBase(target, index, this.handle);\n      }\n    } else {\n      this.gl.bindBuffer(target, this.handle);\n    }\n\n    return this;\n  }\n\n  unbind({target = this.target, index = this.accessor && this.accessor.index} = {}) {\n    const isIndexedBuffer = target === GL.UNIFORM_BUFFER || target === GL.TRANSFORM_FEEDBACK_BUFFER;\n    if (isIndexedBuffer) {\n      this.gl.bindBufferBase(target, index, null);\n    } else {\n      this.gl.bindBuffer(target, null);\n    }\n    return this;\n  }\n\n  // PROTECTED METHODS (INTENDED FOR USE BY OTHER FRAMEWORK CODE ONLY)\n\n  // Returns a short initial data array\n  getDebugData() {\n    if (!this.debugData) {\n      this.debugData = this.getData({length: Math.min(DEBUG_DATA_LENGTH, this.byteLength)});\n      return {data: this.debugData, changed: true};\n    }\n    return {data: this.debugData, changed: false};\n  }\n\n  invalidateDebugData() {\n    this.debugData = null;\n  }\n\n  // PRIVATE METHODS\n\n  // Allocate a new buffer and initialize to contents of typed array\n  _setData(data, usage = this.usage) {\n    assert(ArrayBuffer.isView(data));\n\n    this._trackDeallocatedMemory();\n\n    const target = this._getTarget();\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, data, usage);\n    this.gl.bindBuffer(target, null);\n\n    this.usage = usage;\n    this.debugData = data.slice(0, DEBUG_DATA_LENGTH);\n    this.bytesUsed = data.byteLength;\n\n    this._trackAllocatedMemory(data.byteLength);\n\n    // infer GL type from supplied typed array\n    const type = getGLTypeFromTypedArray(data);\n    assert(type);\n    this.setAccessor(new Accessor(this.accessor, {type}));\n    return this;\n  }\n\n  // Allocate a GPU buffer of specified size.\n  _setByteLength(byteLength, usage = this.usage) {\n    assert(byteLength >= 0);\n\n    this._trackDeallocatedMemory();\n\n    // Workaround needed for Safari (#291):\n    // gl.bufferData with size equal to 0 crashes. Instead create zero sized array.\n    let data = byteLength;\n    if (byteLength === 0) {\n      data = new Float32Array(0);\n    }\n\n    const target = this._getTarget();\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, data, usage);\n    this.gl.bindBuffer(target, null);\n\n    this.usage = usage;\n    this.debugData = null;\n    this.bytesUsed = byteLength;\n\n    this._trackAllocatedMemory(byteLength);\n\n    return this;\n  }\n\n  // Binding a buffer for the first time locks the type\n  // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type\n  _getTarget() {\n    return this.gl.webgl2 ? GL.COPY_WRITE_BUFFER : this.target;\n  }\n\n  _getAvailableElementCount(srcByteOffset) {\n    const ArrayType = getTypedArrayFromGLType(this.accessor.type || GL.FLOAT, {clamped: false});\n    const sourceElementOffset = srcByteOffset / ArrayType.BYTES_PER_ELEMENT;\n    return this.getElementCount() - sourceElementOffset;\n  }\n\n  // Automatically infers type from typed array passed to setData\n  // Note: No longer that useful, since type is now autodeduced from the compiled shaders\n  _inferType(data) {\n    if (!this.accessor.type) {\n      this.setAccessor(new Accessor(this.accessor, {type: getGLTypeFromTypedArray(data)}));\n    }\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createBuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteBuffer(this.handle);\n    this._trackDeallocatedMemory();\n  }\n\n  _getParameter(pname) {\n    this.gl.bindBuffer(this.target, this.handle);\n    const value = this.gl.getBufferParameter(this.target, pname);\n    this.gl.bindBuffer(this.target, null);\n    return value;\n  }\n\n  // DEPRECATIONS - v7.0\n  get type() {\n    log.deprecated('Buffer.type', 'Buffer.accessor.type')();\n    return this.accessor.type;\n  }\n\n  get bytes() {\n    log.deprecated('Buffer.bytes', 'Buffer.byteLength')();\n    return this.byteLength;\n  }\n\n  // DEPRECATIONS - v6.0\n  // Deprecated in v6.x, but not warnings not properly implemented\n  setByteLength(byteLength) {\n    log.deprecated('setByteLength', 'reallocate')();\n    return this.reallocate(byteLength);\n  }\n\n  // Deprecated in v6.x, but not warnings not properly implemented\n  updateAccessor(opts) {\n    log.deprecated('updateAccessor(...)', 'setAccessor(new Accessor(buffer.accessor, ...)')();\n    this.accessor = new Accessor(this.accessor, opts);\n    return this;\n  }\n}\n","import GL from '@luma.gl/constants';\nimport {Buffer} from '@luma.gl/webgl';\nimport {assert} from '../utils';\n\n// Support for mapping new geometries with glTF attribute names to \"classic\" luma.gl shader names\nconst GLTF_TO_LUMA_ATTRIBUTE_MAP = {\n  POSITION: 'positions',\n  NORMAL: 'normals',\n  COLOR_0: 'colors',\n  TEXCOORD_0: 'texCoords',\n  TEXCOORD_1: 'texCoords1',\n  TEXCOORD_2: 'texCoords2'\n};\n\nexport function getBuffersFromGeometry(gl, geometry, options) {\n  const buffers = {};\n  let indices = geometry.indices;\n\n  for (const name in geometry.attributes) {\n    const attribute = geometry.attributes[name];\n    const remappedName = mapAttributeName(name, options);\n\n    if (name === 'indices') {\n      indices = attribute;\n    } else if (attribute.constant) {\n      buffers[remappedName] = attribute.value;\n    } else {\n      const typedArray = attribute.value;\n      // Create accessor by copying the attribute and removing `value``\n      const accessor = {...attribute};\n      delete accessor.value;\n      buffers[remappedName] = [new Buffer(gl, typedArray), accessor];\n\n      inferAttributeAccessor(name, accessor);\n    }\n  }\n\n  if (indices) {\n    const data = indices.value || indices;\n    assert(\n      data instanceof Uint16Array || data instanceof Uint32Array,\n      'attribute array for \"indices\" must be of integer type'\n    );\n    const accessor = {\n      size: 1,\n      isIndexed: indices.isIndexed === undefined ? true : indices.isIndexed\n    };\n    buffers.indices = [\n      new Buffer(gl, {\n        data,\n        target: GL.ELEMENT_ARRAY_BUFFER\n      }),\n      accessor\n    ];\n  }\n\n  return buffers;\n}\n\nfunction mapAttributeName(name, options) {\n  const {attributeMap = GLTF_TO_LUMA_ATTRIBUTE_MAP} = options || {};\n  return (attributeMap && attributeMap[name]) || name;\n}\n\n// Check for well known attribute names\n// eslint-disable-next-line complexity\nexport function inferAttributeAccessor(attributeName, attribute) {\n  let category;\n  switch (attributeName) {\n    case 'texCoords':\n    case 'texCoord1':\n    case 'texCoord2':\n    case 'texCoord3':\n      category = 'uvs';\n      break;\n    case 'vertices':\n    case 'positions':\n    case 'normals':\n    case 'pickingColors':\n      category = 'vectors';\n      break;\n    default:\n  }\n\n  // Check for categorys\n  switch (category) {\n    case 'vectors':\n      attribute.size = attribute.size || 3;\n      break;\n    case 'uvs':\n      attribute.size = attribute.size || 2;\n      break;\n    default:\n  }\n\n  assert(Number.isFinite(attribute.size), `attribute ${attributeName} needs size`);\n}\n","import {assembleShaders} from '@luma.gl/shadertools';\nimport {Program} from '@luma.gl/webgl';\n\nexport default class ProgramManager {\n  static getDefaultProgramManager(gl) {\n    gl.luma = gl.luma || {};\n    gl.luma.defaultProgramManager = gl.luma.defaultProgramManager || new ProgramManager(gl);\n\n    return gl.luma.defaultProgramManager;\n  }\n\n  constructor(gl) {\n    this.gl = gl;\n\n    this._programCache = {};\n    this._getUniforms = {};\n    this._registeredModules = {};\n    this._moduleInjections = {\n      vs: {},\n      fs: {}\n    };\n    this._hookFunctions = {\n      vs: {},\n      fs: {}\n    };\n    this._defaultModules = [];\n\n    this._hashes = {};\n    this._hashCounter = 0;\n    this.stateHash = 0; // Used change hashing if hooks are modified\n    this._useCounts = {};\n  }\n\n  addDefaultModule(module) {\n    if (!this._defaultModules.find(m => m.name === module.name)) {\n      this._defaultModules.push(module);\n    }\n\n    this.stateHash++;\n  }\n\n  removeDefaultModule(module) {\n    const moduleName = typeof module === 'string' ? module : module.name;\n    this._defaultModules = this._defaultModules.filter(m => m.name !== moduleName);\n    this.stateHash++;\n  }\n\n  addModuleInjection(module, opts) {\n    const moduleName = typeof module === 'string' ? module : module.name;\n    const {hook, injection, order = 0} = opts;\n    const shaderStage = hook.slice(0, 2);\n\n    const moduleInjections = this._moduleInjections[shaderStage];\n    moduleInjections[moduleName] = moduleInjections[moduleName] || {};\n\n    moduleInjections[moduleName][hook] = {\n      injection,\n      order\n    };\n\n    this.stateHash++;\n  }\n\n  addShaderHook(hook, opts = {}) {\n    hook = hook.trim();\n    const [stage, signature] = hook.split(':');\n    const name = hook.replace(/\\(.+/, '');\n    this._hookFunctions[stage][name] = Object.assign(opts, {signature});\n\n    this.stateHash++;\n  }\n\n  get(props = {}) {\n    const {vs = '', fs = '', defines = {}, inject = {}, varyings = [], bufferMode = 0x8c8d} = props; // varyings/bufferMode for xform feedback, 0x8c8d = SEPARATE_ATTRIBS\n\n    const modules = this._getModuleList(props.modules); // Combine with default modules\n\n    const vsHash = this._getHash(vs);\n    const fsHash = this._getHash(fs);\n    const moduleHashes = modules.map(m => this._getHash(typeof m === 'string' ? m : m.name)).sort();\n    const varyingHashes = varyings.map(v => this._getHash(v));\n\n    const defineKeys = Object.keys(defines).sort();\n    const injectKeys = Object.keys(inject).sort();\n    const defineHashes = [];\n    const injectHashes = [];\n\n    for (const key of defineKeys) {\n      defineHashes.push(this._getHash(key));\n      defineHashes.push(this._getHash(defines[key]));\n    }\n\n    for (const key of injectKeys) {\n      defineHashes.push(this._getHash(key));\n      defineHashes.push(this._getHash(inject[key]));\n    }\n\n    const hash = `${vsHash}/${fsHash}D${defineHashes.join('/')}M${moduleHashes.join(\n      '/'\n    )}I${injectHashes.join('/')}V${varyingHashes.join('/')}H${this.stateHash}B${bufferMode}`;\n\n    if (!this._programCache[hash]) {\n      const assembled = assembleShaders(this.gl, {\n        vs,\n        fs,\n        modules,\n        inject,\n        defines,\n        hookFunctions: this._hookFunctions,\n        moduleInjections: this._moduleInjections\n      });\n\n      this._programCache[hash] = new Program(this.gl, {\n        hash,\n        vs: assembled.vs,\n        fs: assembled.fs,\n        varyings,\n        bufferMode\n      });\n\n      this._getUniforms[hash] = assembled.getUniforms || (x => {});\n      this._useCounts[hash] = 0;\n    }\n\n    this._useCounts[hash]++;\n\n    return this._programCache[hash];\n  }\n\n  getUniforms(program) {\n    return this._getUniforms[program.hash] || null;\n  }\n\n  release(program) {\n    const hash = program.hash;\n    this._useCounts[hash]--;\n\n    if (this._useCounts[hash] === 0) {\n      this._programCache[hash].delete();\n      delete this._programCache[hash];\n      delete this._getUniforms[hash];\n      delete this._useCounts[hash];\n    }\n  }\n\n  _getHash(key) {\n    if (this._hashes[key] === undefined) {\n      this._hashes[key] = this._hashCounter++;\n    }\n\n    return this._hashes[key];\n  }\n\n  // Dedup and combine with default modules\n  _getModuleList(appModules = []) {\n    const modules = new Array(this._defaultModules.length + appModules.length);\n    const seen = {};\n    let count = 0;\n\n    for (let i = 0, len = this._defaultModules.length; i < len; ++i) {\n      const module = this._defaultModules[i];\n      const name = typeof module === 'string' ? module : module.name;\n      modules[count++] = module;\n      seen[name] = true;\n    }\n\n    for (let i = 0, len = appModules.length; i < len; ++i) {\n      const module = appModules[i];\n      const name = typeof module === 'string' ? module : module.name;\n      if (!seen[name]) {\n        modules[count++] = module;\n        seen[name] = true;\n      }\n    }\n\n    modules.length = count;\n\n    return modules;\n  }\n}\n","// TODO / DEPRECATED - delete when confident that probe.gl logging implements all opts\n/* eslint-disable no-console */\nfunction formatArrayValue(v, opts) {\n  const {maxElts = 16, size = 1} = opts;\n  let string = '[';\n  for (let i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += `,${i % size === 0 ? ' ' : ''}`;\n    }\n    string += formatValue(v[i], opts);\n  }\n  const terminator = v.length > maxElts ? '...' : ']';\n  return `${string}${terminator}`;\n}\n\nexport function formatValue(v, opts = {}) {\n  const EPSILON = 1e-16;\n  const {isInteger = false} = opts;\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, opts);\n  }\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n  if (Math.abs(v) < EPSILON) {\n    return isInteger ? '0' : '0.';\n  }\n  if (isInteger) {\n    return v.toFixed(0);\n  }\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    return v.toFixed(0);\n  }\n  const string = v.toPrecision(2);\n  const decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}\n","import Buffer from '../classes/buffer';\nimport {getKey} from '../webgl-utils';\nimport {getCompositeGLType} from '../webgl-utils/attribute-utils';\nimport {formatValue} from '../utils';\n\n// Creates object suitable as input for console.table\nexport function getDebugTableForVertexArray({vertexArray, header = 'Attributes'} = {}) {\n  if (!vertexArray.configuration) {\n    return {};\n  }\n\n  const table = {}; // {[header]: {}};\n\n  // Add index (elements) if available\n  if (vertexArray.elements) {\n    // const elements = Object.assign({size: 1}, vertexArray.elements);\n    table.ELEMENT_ARRAY_BUFFER = getDebugTableRow(vertexArray, vertexArray.elements, null, header);\n  }\n\n  // Add used attributes\n  const attributes = vertexArray.values;\n\n  for (const attributeLocation in attributes) {\n    const info = vertexArray._getAttributeInfo(attributeLocation);\n    if (info) {\n      let rowHeader = `${attributeLocation}: ${info.name}`;\n      const accessor = vertexArray.accessors[info.location];\n      if (accessor) {\n        rowHeader = `${attributeLocation}: ${getGLSLDeclaration(info.name, accessor)}`;\n      }\n      table[rowHeader] = getDebugTableRow(\n        vertexArray,\n        attributes[attributeLocation],\n        accessor,\n        header\n      );\n    }\n  }\n\n  return table;\n}\n\n/* eslint-disable max-statements */\nfunction getDebugTableRow(vertexArray, attribute, accessor, header) {\n  const {gl} = vertexArray;\n\n  if (!attribute) {\n    return {\n      [header]: 'null',\n      'Format ': 'N/A'\n    };\n  }\n\n  let type = 'NOT PROVIDED';\n  let size = 'N/A';\n  let verts = 'N/A';\n  let bytes = 'N/A';\n\n  let isInteger;\n  let marker;\n  let value;\n\n  if (accessor) {\n    type = accessor.type;\n    size = accessor.size;\n\n    // Generate a type name by dropping Array from Float32Array etc.\n    type = String(type).replace('Array', '');\n\n    // Look for 'nt' to detect integer types, e.g. Int32Array, Uint32Array\n    isInteger = type.indexOf('nt') !== -1;\n  }\n\n  if (attribute instanceof Buffer) {\n    const buffer = attribute;\n\n    const {data, modified} = buffer.getDebugData();\n    marker = modified ? '*' : '';\n\n    value = data;\n    bytes = buffer.byteLength;\n    verts = bytes / data.BYTES_PER_ELEMENT / size;\n\n    let format;\n\n    if (accessor) {\n      const instanced = accessor.divisor > 0;\n      format = `${instanced ? 'I ' : 'P '} ${verts} (x${size}=${bytes} bytes ${getKey(gl, type)})`;\n    } else {\n      // element buffer\n      isInteger = true;\n      format = `${bytes} bytes`;\n    }\n\n    return {\n      [header]: `${marker}${formatValue(value, {size, isInteger})}`,\n      'Format ': format\n    };\n  }\n\n  // CONSTANT VALUE\n  value = attribute;\n  size = attribute.length;\n  // Generate a type name by dropping Array from Float32Array etc.\n  type = String(attribute.constructor.name).replace('Array', '');\n  // Look for 'nt' to detect integer types, e.g. Int32Array, Uint32Array\n  isInteger = type.indexOf('nt') !== -1;\n\n  return {\n    [header]: `${formatValue(value, {size, isInteger})} (constant)`,\n    'Format ': `${size}x${type} (constant)`\n  };\n}\n/* eslint-ensable max-statements */\n\nfunction getGLSLDeclaration(name, accessor) {\n  const {type, size} = accessor;\n  const typeAndName = getCompositeGLType(type, size);\n  return typeAndName ? `${name} (${typeAndName.name})` : name;\n}\n","import {formatValue, assert} from '../utils';\n\n// Prepares a table suitable for console.table\n/* eslint-disable max-statements, complexity */\nexport function getDebugTableForUniforms({\n  header = 'Uniforms',\n  program,\n  uniforms,\n  undefinedOnly = false\n} = {}) {\n  assert(program);\n\n  const SHADER_MODULE_UNIFORM_REGEXP = '.*_.*';\n  const PROJECT_MODULE_UNIFORM_REGEXP = '.*Matrix'; // TODO - Use explicit list\n\n  const uniformLocations = program._uniformSetters;\n  const table = {}; // {[header]: {}};\n\n  // Add program's provided uniforms (in alphabetical order)\n  const uniformNames = Object.keys(uniformLocations).sort();\n\n  let count = 0;\n\n  // First add non-underscored uniforms (assumed not coming from shader modules)\n  for (const uniformName of uniformNames) {\n    if (\n      !uniformName.match(SHADER_MODULE_UNIFORM_REGEXP) &&\n      !uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)\n    ) {\n      if (addUniformToTable({table, header, uniforms, uniformName, undefinedOnly})) {\n        count++;\n      }\n    }\n  }\n\n  // add underscored uniforms (assumed from shader modules)\n  for (const uniformName of uniformNames) {\n    if (uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)) {\n      if (addUniformToTable({table, header, uniforms, uniformName, undefinedOnly})) {\n        count++;\n      }\n    }\n  }\n\n  for (const uniformName of uniformNames) {\n    if (!table[uniformName]) {\n      if (addUniformToTable({table, header, uniforms, uniformName, undefinedOnly})) {\n        count++;\n      }\n    }\n  }\n\n  // Create a table of unused uniforms\n  let unusedCount = 0;\n  const unusedTable = {};\n  if (!undefinedOnly) {\n    for (const uniformName in uniforms) {\n      const uniform = uniforms[uniformName];\n      if (!table[uniformName]) {\n        unusedCount++;\n        unusedTable[uniformName] = {\n          Type: `NOT USED: ${uniform}`,\n          [header]: formatValue(uniform)\n        };\n      }\n    }\n  }\n\n  return {table, count, unusedTable, unusedCount};\n}\n\n// Helper\nfunction addUniformToTable({table, header, uniforms, uniformName, undefinedOnly}) {\n  const value = uniforms[uniformName];\n  const isDefined = isUniformDefined(value);\n  if (!undefinedOnly || !isDefined) {\n    table[uniformName] = {\n      // Add program's unprovided uniforms\n      [header]: isDefined ? formatValue(value) : 'N/A',\n      'Uniform Type': isDefined ? value : 'NOT PROVIDED'\n    };\n    return true;\n  }\n  return false;\n}\n\nfunction isUniformDefined(value) {\n  return value !== undefined && value !== null;\n}\n","import {getCompositeGLType} from '../webgl-utils/attribute-utils';\n\nexport function getDebugTableForProgramConfiguration(config) {\n  const table = {};\n\n  const header = `Accessors for ${config.id}`;\n\n  for (const attributeInfo of config.attributeInfos) {\n    if (attributeInfo) {\n      const glslDeclaration = getGLSLDeclaration(attributeInfo);\n      table[`in ${glslDeclaration}`] = {[header]: JSON.stringify(attributeInfo.accessor)};\n    }\n  }\n\n  for (const varyingInfo of config.varyingInfos) {\n    if (varyingInfo) {\n      const glslDeclaration = getGLSLDeclaration(varyingInfo);\n      table[`out ${glslDeclaration}`] = {[header]: JSON.stringify(varyingInfo.accessor)};\n    }\n  }\n\n  return table;\n}\n\nfunction getGLSLDeclaration(attributeInfo) {\n  const {type, size} = attributeInfo.accessor;\n  const typeAndName = getCompositeGLType(type, size);\n  if (typeAndName) {\n    return `${typeAndName.name} ${attributeInfo.name}`;\n  }\n  return attributeInfo.name;\n}\n","import seer from 'seer';\n\nimport {window} from '../utils';\n\nconst models = {};\n\n/**\n * Add a model to our cache indexed by id\n */\nexport const addModel = model => {\n  if (models[model.id]) {\n    return;\n  }\n  models[model.id] = model;\n\n  seer.listItem('luma.gl', model.id);\n};\n\n/**\n * Log a model uniforms and attributes.\n */\nexport const logModel = (model, uniforms) => {\n  if (!seer.isReady() || seer.throttle(`luma.gl:${model.id}`, 1e3)) {\n    return;\n  }\n\n  const attributesObject = model.geometry\n    ? Object.assign({}, model.geometry.attributes, model.attributes)\n    : model.attributes;\n  const uniformsObject = Object.assign({}, model.uniforms, uniforms);\n\n  seer.multiUpdate('luma.gl', model.id, [\n    {path: 'objects.uniforms', data: uniformsObject},\n    {path: 'objects.attributes', data: attributesObject}\n  ]);\n};\n\n/**\n * Remove a previously set model from the cache\n */\nexport const removeModel = id => {\n  delete models[id];\n  seer.deleteItem('luma.gl', id);\n};\n\n/**\n * Recursively traverse an object given a path of properties and set the given value\n */\nconst recursiveSet = (obj, path, value) => {\n  if (!obj) {\n    return;\n  }\n\n  if (path.length > 1) {\n    recursiveSet(obj[path[0]], path.slice(1), value);\n  } else {\n    obj[path[0]] = value;\n  }\n};\n\nconst overrides = new Map();\n\n/**\n * Create an override on the specify layer, indexed by a valuePath array.\n * Do nothing in case Seer as not been initialized to prevent any preformance drawback.\n */\nexport const setOverride = (id, valuePath, value) => {\n  if (!window.__SEER_INITIALIZED__) {\n    return;\n  }\n\n  if (!overrides.has(id)) {\n    overrides.set(id, new Map());\n  }\n\n  const uniforms = overrides.get(id);\n  uniforms.set(valuePath, value);\n};\n\n/**\n * Apply overrides to a specific model's uniforms\n */\nexport const getOverrides = (id, uniforms) => {\n  if (!window.__SEER_INITIALIZED__ || !id) {\n    return;\n  }\n\n  const overs = overrides.get(id);\n  if (!overs) {\n    return;\n  }\n\n  overs.forEach((value, valuePath) => {\n    recursiveSet(uniforms, valuePath, value);\n  });\n};\n\n/**\n * Listen for luma.gl edit events\n */\nseer.listenFor('luma.gl', payload => {\n  const model = models[payload.itemKey];\n  if (!model || payload.type !== 'edit' || payload.valuePath[0] !== 'uniforms') {\n    return;\n  }\n\n  const valuePath = payload.valuePath.slice(1);\n  setOverride(payload.itemKey, valuePath, payload.value);\n\n  const uniforms = model.getUniforms();\n  recursiveSet(uniforms, valuePath, payload.value);\n  model.setUniforms(uniforms);\n});\n","/* eslint-disable complexity */\n// Shared code between Model and MeshModel\nimport ProgramManager from '../resource-management/program-manager';\nimport {isWebGL, Query, Program, VertexArray, clear} from '@luma.gl/webgl';\nimport {MODULAR_SHADERS} from '@luma.gl/shadertools';\nimport {\n  getDebugTableForUniforms,\n  getDebugTableForVertexArray,\n  getDebugTableForProgramConfiguration\n} from '@luma.gl/webgl';\nimport {addModel, removeModel, logModel, getOverrides} from '../debug/seer-integration';\nimport {log, isObjectEmpty, uid, assert} from '../utils';\n\nconst LOG_DRAW_PRIORITY = 2;\nconst LOG_DRAW_TIMEOUT = 10000;\n\n// Model abstract O3D Class\nexport default class BaseModel {\n  constructor(gl, props = {}) {\n    assert(isWebGL(gl));\n    const {id = uid('base-model')} = props;\n    this.id = id;\n    this.gl = gl;\n    this.id = props.id || uid('Model');\n    this.lastLogTime = 0; // TODO - move to probe.gl\n    this.initialize(props);\n  }\n\n  initialize(props) {\n    this.props = {};\n\n    if (props.shaderCache) {\n      log.warn('ShaderCache property is deprecated')();\n    }\n\n    this.programManager = props.programManager || ProgramManager.getDefaultProgramManager(this.gl);\n    this._programManagerState = -1;\n    this._managedProgram = false;\n\n    const {program = null, vs, fs, modules, defines, inject, varyings, bufferMode} = props;\n\n    this.programProps = {program, vs, fs, modules, defines, inject, varyings, bufferMode};\n    this.program = null;\n    this.vertexArray = null;\n    this._programDirty = true;\n\n    // Initialize state\n    this.userData = {};\n    this.needsRedraw = true;\n\n    // Attributes and buffers\n    // Model manages auto Buffer creation from typed arrays\n    this._attributes = {}; // All attributes\n    this.attributes = {}; // User defined attributes\n\n    // Model manages uniform animation\n    this.uniforms = {};\n    this.animatedUniforms = {};\n    this.animated = false;\n    this.animationLoop = null; // if set, used as source for animationProps\n\n    this.timerQueryEnabled = false;\n    this.timeElapsedQuery = undefined;\n    this.lastQueryReturned = true;\n\n    this.stats = {\n      accumulatedFrameTime: 0,\n      averageFrameTime: 0,\n      profileFrameCount: 0\n    };\n\n    // picking options\n    this.pickable = true;\n\n    this._checkProgram();\n\n    this._setBaseModelProps(props);\n\n    this.setUniforms(\n      Object.assign(\n        {},\n        this.getModuleUniforms(props.moduleSettings) // Get unforms for supplied parameters\n      )\n    );\n  }\n\n  setProps(props) {\n    this._setBaseModelProps(props);\n  }\n\n  delete() {\n    // delete all attributes created by this model\n    // TODO - should buffer deletes be handled by vertex array?\n    for (const key in this._attributes) {\n      if (this._attributes[key] !== this.attributes[key]) {\n        this._attributes[key].delete();\n      }\n    }\n\n    if (this._managedProgram) {\n      this.programManager.release(this.program);\n    }\n\n    this.vertexArray.delete();\n\n    removeModel(this.id);\n  }\n\n  // GETTERS\n\n  isAnimated() {\n    return this.animated;\n  }\n\n  getProgram() {\n    return this.program;\n  }\n\n  setProgram(props) {\n    this.programProps = Object.assign({}, props);\n    this._programDirty = true;\n  }\n\n  getUniforms() {\n    return this.uniforms;\n  }\n\n  // SETTERS\n\n  // TODO - should actually set the uniforms\n  setUniforms(uniforms = {}) {\n    // Let Seer override edited uniforms\n    uniforms = Object.assign({}, uniforms);\n    getOverrides(this.id, uniforms);\n\n    // Resolve any animated uniforms so that we have an initial value\n    uniforms = this._extractAnimatedUniforms(uniforms);\n\n    Object.assign(this.uniforms, uniforms);\n\n    return this;\n  }\n\n  getModuleUniforms(opts) {\n    this._checkProgram();\n\n    const getUniforms = this.programManager.getUniforms(this.program);\n\n    if (getUniforms) {\n      return getUniforms(opts);\n    }\n\n    return {};\n  }\n\n  updateModuleSettings(opts) {\n    const uniforms = this.getModuleUniforms(opts || {});\n    return this.setUniforms(uniforms);\n  }\n\n  // DRAW CALLS\n\n  clear(opts) {\n    clear(this.program.gl, opts);\n    return this;\n  }\n\n  /* eslint-disable max-statements  */\n  drawGeometry(opts = {}) {\n    // Lazy update program and vertex array\n    this._checkProgram();\n\n    const {\n      moduleSettings = null,\n      framebuffer,\n      uniforms = {},\n      attributes = {},\n      transformFeedback = this.transformFeedback,\n      parameters = {},\n      vertexArray = this.vertexArray,\n      animationProps\n    } = opts;\n\n    addModel(this);\n\n    // Update model with any just provided attributes, settings or uniforms\n    this.setAttributes(attributes);\n    this.updateModuleSettings(moduleSettings);\n    this.setUniforms(uniforms);\n\n    // Animate any function valued uniforms\n    this._refreshAnimationProps(animationProps);\n\n    const logPriority = this._logDrawCallStart(2);\n\n    const drawParams = this.vertexArray.getDrawParams(this.props);\n    if (drawParams.isInstanced && !this.isInstanced) {\n      log.warn('Found instanced attributes on non-instanced model', this.id)();\n    }\n\n    const {isIndexed, indexType, indexOffset} = drawParams;\n    const {isInstanced, instanceCount} = this;\n\n    const noop = () => {};\n    const {onBeforeRender = noop, onAfterRender = noop} = this.props;\n\n    onBeforeRender();\n\n    this._timerQueryStart();\n\n    this.program.setUniforms(this.uniforms);\n\n    const didDraw = this.program.draw(\n      Object.assign({}, opts, {\n        logPriority,\n        uniforms: null, // Already set (may contain \"function values\" not understood by Program)\n        framebuffer,\n        parameters,\n        drawMode: this.getDrawMode(),\n        vertexCount: this.getVertexCount(),\n        vertexArray,\n        transformFeedback,\n        isIndexed,\n        indexType,\n        isInstanced,\n        instanceCount,\n        offset: isIndexed ? indexOffset : 0\n      })\n    );\n\n    this._timerQueryEnd();\n\n    onAfterRender();\n\n    this._logDrawCallEnd(logPriority, vertexArray, framebuffer);\n\n    return didDraw;\n  }\n  /* eslint-enable max-statements  */\n\n  // PRIVATE METHODS\n\n  // eslint-disable-next-line max-statements, complexity\n  _setBaseModelProps(props) {\n    Object.assign(this.props, props);\n\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms);\n    }\n\n    if ('pickable' in props) {\n      this.pickable = props.pickable;\n    }\n\n    // if ('onBeforeRender' in props) {}\n    // if ('onAfterRender' in props) {}\n\n    // Experimental props\n    if ('timerQueryEnabled' in props) {\n      this.timerQueryEnabled = props.timerQueryEnabled && Query.isSupported(this.gl, ['timers']);\n      if (props.timerQueryEnabled && !this.timerQueryEnabled) {\n        log.warn('GPU timer not supported')();\n      }\n    }\n\n    if ('_animationProps' in props) {\n      this._setAnimationProps(props._animationProps);\n    }\n\n    if ('_animationLoop' in props) {\n      this.animationLoop = props._animationLoop;\n    }\n  }\n\n  _checkProgram(shaderCache = null) {\n    const needsUpdate =\n      this._programDirty || this.programManager.stateHash !== this._programManagerState;\n\n    if (!needsUpdate) {\n      return;\n    }\n\n    let {program} = this.programProps;\n\n    if (program) {\n      this._managedProgram = false;\n    } else {\n      const {\n        // TODO(Tarek): Are these actually used anywhere?\n        vs = MODULAR_SHADERS.vs,\n        fs = MODULAR_SHADERS.fs,\n        modules,\n        inject,\n        defines,\n        varyings,\n        bufferMode\n      } = this.programProps;\n      program = this.programManager.get({vs, fs, modules, inject, defines, varyings, bufferMode});\n      if (this.program && this._managedProgram) {\n        this.programManager.release(this.program);\n      }\n      this._programManagerState = this.programManager.stateHash;\n      this._managedProgram = true;\n    }\n\n    assert(program instanceof Program, 'Model needs a program');\n\n    this._programDirty = false;\n\n    if (program === this.program) {\n      return;\n    }\n\n    this.program = program;\n\n    if (this.vertexArray) {\n      this.vertexArray.setProps({program: this.program, attributes: this.vertexArray.attributes});\n    } else {\n      this.vertexArray = new VertexArray(this.gl, {program: this.program});\n    }\n\n    // Make sure we have some reasonable default uniforms in place\n    this.setUniforms(\n      Object.assign(\n        {},\n        this.getModuleUniforms() // Get all default uniforms,\n      )\n    );\n  }\n\n  // Refreshes animated uniforms, attempting to get animated props from animationLoop if registered\n  _refreshAnimationProps(animationProps) {\n    // Try to read animationProps\n    animationProps = animationProps || (this.animationLoop && this.animationLoop.animationProps);\n    if (animationProps) {\n      this._setAnimationProps(animationProps);\n    }\n  }\n\n  // Calculate new values for any function uniforms based on supplied animationProps\n  _evaluateAnimateUniforms(animationProps) {\n    if (!this.animated) {\n      return {};\n    }\n    const animatedUniforms = {};\n    for (const uniformName in this.animatedUniforms) {\n      const valueFunction = this.animatedUniforms[uniformName];\n      animatedUniforms[uniformName] = valueFunction(animationProps);\n    }\n    return animatedUniforms;\n  }\n\n  // Extracts a list of function valued uniforms, so we can update them before each draw call\n  // Also removes such uniforms from the returned list\n  _extractAnimatedUniforms(uniforms) {\n    let foundAnimated = false;\n\n    // Keep our animatedUniforms map up-to-date\n    for (const uniformName in uniforms) {\n      const newValue = uniforms[uniformName];\n      if (typeof newValue === 'function') {\n        this.animatedUniforms[uniformName] = newValue;\n        foundAnimated = true;\n      } else {\n        delete this.animatedUniforms[uniformName];\n      }\n    }\n\n    // Update animated flag: `Model` is animated if any uniforms are animated (i.e. functions)\n    this.animated = !isObjectEmpty(this.animatedUniforms);\n\n    if (!foundAnimated) {\n      return uniforms;\n    }\n\n    // If animated uniforms were found, remove them from ordinary uniform list\n    // `Program` class can't (and shouldn't) handle function valued uniforms\n    const staticUniforms = {};\n    for (const uniformName in uniforms) {\n      if (!this.animatedUniforms[uniformName]) {\n        staticUniforms[uniformName] = uniforms[uniformName];\n      }\n    }\n    return staticUniforms;\n  }\n\n  // Timer Queries\n\n  _timerQueryStart() {\n    if (this.timerQueryEnabled === true) {\n      if (!this.timeElapsedQuery) {\n        this.timeElapsedQuery = new Query(this.gl);\n      }\n      if (this.lastQueryReturned) {\n        this.lastQueryReturned = false;\n        this.timeElapsedQuery.beginTimeElapsedQuery();\n      }\n    }\n  }\n\n  _timerQueryEnd() {\n    if (this.timerQueryEnabled === true) {\n      this.timeElapsedQuery.end();\n      // TODO: Skip results if 'gl.getParameter(this.ext.GPU_DISJOINT_EXT)' returns false\n      // should this be incorporated into Query object?\n      if (this.timeElapsedQuery.isResultAvailable()) {\n        this.lastQueryReturned = true;\n        const elapsedTime = this.timeElapsedQuery.getTimerMilliseconds();\n\n        // Update stats (e.g. for seer)\n        this.stats.lastFrameTime = elapsedTime;\n        this.stats.accumulatedFrameTime += elapsedTime;\n        this.stats.profileFrameCount++;\n        this.stats.averageFrameTime =\n          this.stats.accumulatedFrameTime / this.stats.profileFrameCount;\n\n        // Log stats\n        log.log(\n          LOG_DRAW_PRIORITY,\n          `\\\nGPU time ${this.program.id}: ${this.stats.lastFrameTime}ms \\\naverage ${this.stats.averageFrameTime}ms \\\naccumulated: ${this.stats.accumulatedFrameTime}ms \\\ncount: ${this.stats.profileFrameCount}`\n        )();\n      }\n    }\n  }\n\n  _logDrawCallStart(priority) {\n    const logDrawTimeout = priority > 3 ? 0 : LOG_DRAW_TIMEOUT;\n    if (log.priority < priority || Date.now() - this.lastLogTime < logDrawTimeout) {\n      return undefined;\n    }\n\n    this.lastLogTime = Date.now();\n\n    log.group(LOG_DRAW_PRIORITY, `>>> DRAWING MODEL ${this.id}`, {collapsed: log.priority <= 2})();\n\n    return priority;\n  }\n\n  _logDrawCallEnd(priority, vertexArray, uniforms, framebuffer) {\n    // HACK: priority === undefined means logDrawCallStart didn't run\n    if (priority === undefined) {\n      return;\n    }\n\n    const attributeTable = getDebugTableForVertexArray({\n      vertexArray,\n      header: `${this.id} attributes`,\n      attributes: this._attributes\n    });\n\n    const {table: uniformTable, unusedTable, unusedCount} = getDebugTableForUniforms({\n      header: `${this.id} uniforms`,\n      program: this.program,\n      uniforms: Object.assign({}, this.program.uniforms, uniforms)\n    });\n\n    // log missing uniforms\n    const {table: missingTable, count: missingCount} = getDebugTableForUniforms({\n      header: `${this.id} uniforms`,\n      program: this.program,\n      uniforms: Object.assign({}, this.program.uniforms, uniforms),\n      undefinedOnly: true\n    });\n\n    if (missingCount > 0) {\n      log.log('MISSING UNIFORMS', Object.keys(missingTable))();\n      // log.table(priority, missingTable)();\n    }\n    if (unusedCount > 0) {\n      log.log('UNUSED UNIFORMS', Object.keys(unusedTable))();\n      // log.log(priority, 'Unused uniforms ', unusedTable)();\n    }\n\n    const configTable = getDebugTableForProgramConfiguration(this.vertexArray.configuration);\n\n    log.table(priority, attributeTable)();\n\n    log.table(priority, uniformTable)();\n\n    log.table(priority + 1, configTable)();\n\n    logModel(this, uniforms);\n\n    if (framebuffer) {\n      framebuffer.log({priority: LOG_DRAW_PRIORITY, message: `Rendered to ${framebuffer.id}`});\n    }\n\n    log.groupEnd(LOG_DRAW_PRIORITY, `>>> DRAWING MODEL ${this.id}`)();\n  }\n}\n","import GL from '@luma.gl/constants';\nimport {TransformFeedback, Buffer} from '@luma.gl/webgl';\nimport {getBuffersFromGeometry} from './model-utils';\nimport BaseModel from './base-model';\nimport {log, isObjectEmpty, uid, assert} from '../utils';\n\nconst ERR_MODEL_PARAMS = 'Model needs drawMode and vertexCount';\n\nexport default class Model extends BaseModel {\n  constructor(gl, props = {}) {\n    // Deduce a helpful id\n    const {id = uid('model')} = props;\n    super(gl, {...props, id});\n  }\n\n  initialize(props) {\n    super.initialize(props);\n\n    this.drawMode = props.drawMode !== undefined ? props.drawMode : GL.TRIANGLES;\n    this.vertexCount = props.vertexCount || 0;\n\n    // Track buffers created by setGeometry\n    this.geometryBuffers = {};\n\n    // geometry might have set drawMode and vertexCount\n    this.isInstanced = props.isInstanced || props.instanced;\n\n    this._setModelProps(props);\n\n    // TODO - just to unbreak deck.gl 7.0-beta, remove as soon as updated\n    this.geometry = {};\n\n    // assert(program || program instanceof Program);\n    assert(this.drawMode !== undefined && Number.isFinite(this.vertexCount), ERR_MODEL_PARAMS);\n  }\n\n  setProps(props) {\n    super.setProps(props);\n    this._setModelProps(props);\n  }\n\n  delete() {\n    super.delete();\n\n    this._deleteGeometryBuffers();\n  }\n\n  // GETTERS\n\n  getDrawMode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  getInstanceCount() {\n    return this.instanceCount;\n  }\n\n  getAttributes() {\n    return this.attributes;\n  }\n\n  // SETTERS\n\n  setDrawMode(drawMode) {\n    this.drawMode = drawMode;\n    return this;\n  }\n\n  setVertexCount(vertexCount) {\n    assert(Number.isFinite(vertexCount));\n    this.vertexCount = vertexCount;\n    return this;\n  }\n\n  setInstanceCount(instanceCount) {\n    assert(Number.isFinite(instanceCount));\n    this.instanceCount = instanceCount;\n    return this;\n  }\n\n  setGeometry(geometry) {\n    this.drawMode = geometry.drawMode;\n    this.vertexCount = geometry.getVertexCount();\n\n    this._deleteGeometryBuffers();\n\n    this.geometryBuffers = getBuffersFromGeometry(this.gl, geometry);\n    this.vertexArray.setAttributes(this.geometryBuffers);\n    return this;\n  }\n\n  setAttributes(attributes = {}) {\n    // Avoid setting needsRedraw if no attributes\n    if (isObjectEmpty(attributes)) {\n      return this;\n    }\n\n    const normalizedAttributes = {};\n    for (const name in attributes) {\n      const attribute = attributes[name];\n      // The `getValue` call provides support for deck.gl `Attribute` class\n      // TODO - remove once deck refactoring completes\n      normalizedAttributes[name] = attribute.getValue ? attribute.getValue() : attribute;\n    }\n\n    this.vertexArray.setAttributes(normalizedAttributes);\n    return this;\n  }\n\n  // DRAW CALLS\n\n  draw(options = {}) {\n    return this.drawGeometry(options);\n  }\n\n  // Draw call for transform feedback\n  transform(opts = {}) {\n    const {discard = true, feedbackBuffers, unbindModels = []} = opts;\n\n    let {parameters} = opts;\n\n    if (feedbackBuffers) {\n      this._setFeedbackBuffers(feedbackBuffers);\n    }\n\n    if (discard) {\n      parameters = Object.assign({}, parameters, {[GL.RASTERIZER_DISCARD]: discard});\n    }\n\n    unbindModels.forEach(model => model.vertexArray.unbindBuffers());\n    try {\n      this.draw(Object.assign({}, opts, {parameters}));\n    } finally {\n      unbindModels.forEach(model => model.vertexArray.bindBuffers());\n    }\n\n    return this;\n  }\n\n  // DEPRECATED METHODS\n\n  render(uniforms = {}) {\n    log.warn('Model.render() is deprecated. Use Model.setUniforms() and Model.draw()')();\n    return this.setUniforms(uniforms).draw();\n  }\n\n  // PRIVATE METHODS\n\n  _setModelProps(props) {\n    // params\n    // if ('drawMode' in props) {\n    //   this.drawMode = getDrawMode(props.drawMode);\n    // }\n    // if ('vertexCount' in props) {\n    //   this.vertexCount = props.vertexCount;\n    // }\n    if ('instanceCount' in props) {\n      this.instanceCount = props.instanceCount;\n    }\n    if ('geometry' in props) {\n      this.setGeometry(props.geometry);\n    }\n\n    // webgl settings\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('_feedbackBuffers' in props) {\n      this._setFeedbackBuffers(props._feedbackBuffers);\n    }\n  }\n\n  _deleteGeometryBuffers() {\n    for (const name in this.geometryBuffers) {\n      // Buffer is raw value (for indices) or first element of [buffer, accessor] pair\n      const buffer = this.geometryBuffers[name][0] || this.geometryBuffers[name];\n      if (buffer instanceof Buffer) {\n        buffer.delete();\n      }\n    }\n  }\n\n  // Updates (evaluates) all function valued uniforms based on a new set of animationProps\n  // experimental\n  _setAnimationProps(animationProps) {\n    if (this.animated) {\n      assert(animationProps, 'Model.draw(): animated uniforms but no animationProps');\n      const animatedUniforms = this._evaluateAnimateUniforms(animationProps);\n      Object.assign(this.uniforms, animatedUniforms);\n    }\n  }\n\n  // Transform Feedback\n\n  _setFeedbackBuffers(feedbackBuffers = {}) {\n    // Avoid setting needsRedraw if no feedbackBuffers\n    if (isObjectEmpty(feedbackBuffers)) {\n      return this;\n    }\n\n    const {gl} = this.program;\n    this.transformFeedback =\n      this.transformFeedback ||\n      new TransformFeedback(gl, {\n        program: this.program\n      });\n\n    this.transformFeedback.setBuffers(feedbackBuffers);\n    return this;\n  }\n}\n","// Transpiles shader source code to target GLSL version\n// Note: We always run transpiler even if same version e.g. 3.00 => 3.00\n// RFC: https://github.com/uber/luma.gl/blob/7.0-release/dev-docs/RFCs/v6.0/portable-glsl-300-rfc.md\nexport default function transpileShader(source, targetGLSLVersion, isVertex) {\n  switch (targetGLSLVersion) {\n    case 300:\n      return isVertex ? convertVertexShaderTo300(source) : convertFragmentShaderTo300(source);\n    case 100:\n      return isVertex ? convertVertexShaderTo100(source) : convertFragmentShaderTo100(source);\n    default:\n      throw new Error(`unknown GLSL version ${targetGLSLVersion}`);\n  }\n}\n\nfunction convertVertexShaderTo300(source) {\n  return source\n    .replace(/attribute\\s+/g, 'in ')\n    .replace(/varying\\s+/g, 'out ')\n    .replace(/texture2D\\(/g, 'texture(')\n    .replace(/textureCube\\(+/g, 'texture(')\n    .replace(/texture2DLodEXT\\(/g, 'textureLod(')\n    .replace(/textureCubeLodEXT\\(/g, 'textureLod(');\n}\n\nfunction convertFragmentShaderTo300(source) {\n  return source\n    .replace(/varying\\s+/g, 'in ')\n    .replace(/texture2D\\(/g, 'texture(')\n    .replace(/textureCube\\(/g, 'texture(')\n    .replace(/texture2DLodEXT\\(/g, 'textureLod(')\n    .replace(/textureCubeLodEXT\\(/g, 'textureLod(');\n\n  // Deal with fragColor\n  // .replace(/gl_fragColor/g, 'fragColor ');\n}\n\nfunction convertVertexShaderTo100(source) {\n  // /gm - treats each line as a string, so that ^ matches after newlines\n  return source\n    .replace(/^in\\s+/gm, 'attribute ')\n    .replace(/^out\\s+/gm, 'varying ')\n    .replace(/texture\\(/g, 'texture2D(');\n}\n\nfunction convertFragmentShaderTo100(source) {\n  // /gm - treats each line as a string, so that ^ matches after newlines\n  return source.replace(/^in\\s+/gm, 'varying ').replace(/texture\\(/g, 'texture2D(');\n\n  // Deal with fragColor\n  // .replace(/^out\\s+/g, 'varying ')\n}\n","const TYPE_DEFINITIONS = {\n  number: {\n    validate(value, propType) {\n      return (\n        Number.isFinite(value) &&\n        (!('max' in propType) || value <= propType.max) &&\n        (!('min' in propType) || value >= propType.min)\n      );\n    }\n  },\n  array: {\n    validate(value, propType) {\n      return Array.isArray(value) || ArrayBuffer.isView(value);\n    }\n  }\n};\n\nexport function parsePropTypes(propDefs) {\n  const propTypes = {};\n  for (const propName in propDefs) {\n    const propDef = propDefs[propName];\n    const propType = parsePropType(propDef);\n    propTypes[propName] = propType;\n  }\n  return propTypes;\n}\n\n// Parses one property definition entry. Either contains:\n// * a valid prop type object ({type, ...})\n// * or just a default value, in which case type and name inference is used\nfunction parsePropType(propDef) {\n  let type = getTypeOf(propDef);\n  if (type === 'object') {\n    if (!propDef) {\n      return {type: 'object', value: null};\n    }\n    if ('type' in propDef) {\n      return Object.assign({}, propDef, TYPE_DEFINITIONS[propDef.type]);\n    }\n    if (!('value' in propDef)) {\n      // If no type and value this object is likely the value\n      return {type: 'object', value: propDef};\n    }\n    type = getTypeOf(propDef.value);\n    return Object.assign({type}, propDef, TYPE_DEFINITIONS[type]);\n  }\n  return Object.assign({type, value: propDef}, TYPE_DEFINITIONS[type]);\n}\n\n// improved version of javascript typeof that can distinguish arrays and null values\nfunction getTypeOf(value) {\n  if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n    return 'array';\n  }\n  return typeof value;\n}\n","import transpileShader from './transpile-shader';\nimport {assert} from '../utils';\nimport {parsePropTypes} from './filters/prop-types';\n\nconst VERTEX_SHADER = 'vs';\nconst FRAGMENT_SHADER = 'fs';\n\nexport default class ShaderModule {\n  constructor({\n    name,\n    vs,\n    fs,\n    dependencies = [],\n    uniforms,\n    getUniforms,\n    deprecations = [],\n    defines = {},\n    // DEPRECATED\n    vertexShader,\n    fragmentShader\n  }) {\n    assert(typeof name === 'string');\n    this.name = name;\n    this.vs = vs || vertexShader;\n    this.fs = fs || fragmentShader;\n    this.getModuleUniforms = getUniforms;\n    this.dependencies = dependencies;\n    this.deprecations = this._parseDeprecationDefinitions(deprecations);\n    this.defines = defines;\n\n    if (uniforms) {\n      this.uniforms = parsePropTypes(uniforms);\n    }\n  }\n\n  // Extracts the source code chunk for the specified shader type from the named shader module\n  getModuleSource(type, targetGLSLVersion) {\n    let moduleSource;\n    switch (type) {\n      case VERTEX_SHADER:\n        moduleSource = transpileShader(this.vs || '', targetGLSLVersion, true);\n        break;\n      case FRAGMENT_SHADER:\n        moduleSource = transpileShader(this.fs || '', targetGLSLVersion, false);\n        break;\n      default:\n        assert(false);\n    }\n\n    return `\\\n#define MODULE_${this.name.toUpperCase()}\n${moduleSource}\\\n// END MODULE_${this.name}\n\n`;\n  }\n\n  getUniforms(opts, uniforms) {\n    if (this.getModuleUniforms) {\n      return this.getModuleUniforms(opts, uniforms);\n    }\n    // Build uniforms from the uniforms array\n    if (this.uniforms) {\n      return this._defaultGetUniforms(opts);\n    }\n    return {};\n  }\n\n  getDefines() {\n    return this.defines;\n  }\n\n  // Warn about deprecated uniforms or functions\n  checkDeprecations(shaderSource, log) {\n    this.deprecations.forEach(def => {\n      if (def.regex.test(shaderSource)) {\n        if (def.deprecated) {\n          log.deprecated(def.old, def.new)();\n        } else {\n          log.removed(def.old, def.new)();\n        }\n      }\n    });\n  }\n\n  _parseDeprecationDefinitions(deprecations) {\n    deprecations.forEach(def => {\n      switch (def.type) {\n        case 'function':\n          def.regex = new RegExp(`\\\\b${def.old}\\\\(`);\n          break;\n        default:\n          def.regex = new RegExp(`${def.type} ${def.old};`);\n      }\n    });\n\n    return deprecations;\n  }\n\n  _defaultGetUniforms(opts = {}) {\n    const uniforms = {};\n    const propTypes = this.uniforms;\n\n    for (const key in propTypes) {\n      const propDef = propTypes[key];\n      if (key in opts && !propDef.private) {\n        if (propDef.validate) {\n          assert(propDef.validate(opts[key], propDef), `${this.name}: invalid ${key}`);\n        }\n        uniforms[key] = opts[key];\n      } else {\n        uniforms[key] = propDef.value;\n      }\n    }\n\n    return uniforms;\n  }\n}\n\n// This utility mutates the original module\n// Keeping for backward compatibility\n// TODO - remove in v8\nexport function normalizeShaderModule(module) {\n  if (!module.normalized) {\n    module.normalized = true;\n    if (module.uniforms && !module.getUniforms) {\n      const shaderModule = new ShaderModule(module);\n      module.getUniforms = shaderModule.getUniforms.bind(shaderModule);\n    }\n  }\n  return module;\n}\n","import {MODULE_INJECTORS_VS, MODULE_INJECTORS_FS} from '../modules/module-injectors';\nimport {VERTEX_SHADER, FRAGMENT_SHADER} from './constants';\nimport {assert} from '../utils';\n\n// TODO - experimental\nconst MODULE_INJECTORS = {\n  [VERTEX_SHADER]: MODULE_INJECTORS_VS,\n  [FRAGMENT_SHADER]: MODULE_INJECTORS_FS\n};\n\nexport const DECLARATION_INJECT_MARKER = '__LUMA_INJECT_DECLARATIONS__'; // Uniform/attribute declarations\n\nconst REGEX_START_OF_MAIN = /void main\\s*\\([^)]*\\)\\s*\\{\\n?/; // Beginning of main\nconst REGEX_END_OF_MAIN = /}\\n?[^{}]*$/; // End of main, assumes main is last function\nconst fragments = [];\n\n// A minimal shader injection/templating system.\n// RFC: https://github.com/uber/luma.gl/blob/7.0-release/dev-docs/RFCs/v6.0/shader-injection-rfc.md\n/* eslint-disable complexity */\nexport default function injectShader(source, type, inject, injectStandardStubs) {\n  const isVertex = type === VERTEX_SHADER;\n\n  for (const key in inject) {\n    const fragmentData = inject[key];\n    fragmentData.sort((a, b) => a.order - b.order);\n    fragments.length = fragmentData.length;\n    for (let i = 0, len = fragmentData.length; i < len; ++i) {\n      fragments[i] = fragmentData[i].injection;\n    }\n    const fragmentString = `${fragments.join('\\n')}\\n`;\n    switch (key) {\n      // declarations are injected before the main function\n      case 'vs:#decl':\n        if (isVertex) {\n          source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);\n        }\n        break;\n      // main code is injected at the end of main function\n      case 'vs:#main-start':\n        if (isVertex) {\n          source = source.replace(REGEX_START_OF_MAIN, match => match + fragmentString);\n        }\n        break;\n      case 'vs:#main-end':\n        if (isVertex) {\n          source = source.replace(REGEX_END_OF_MAIN, match => fragmentString + match);\n        }\n        break;\n      case 'fs:#decl':\n        if (!isVertex) {\n          source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);\n        }\n        break;\n      case 'fs:#main-start':\n        if (!isVertex) {\n          source = source.replace(REGEX_START_OF_MAIN, match => match + fragmentString);\n        }\n        break;\n      case 'fs:#main-end':\n        if (!isVertex) {\n          source = source.replace(REGEX_END_OF_MAIN, match => fragmentString + match);\n        }\n        break;\n\n      default:\n        // TODO(Tarek): I think this usage should be deprecated.\n\n        // inject code after key, leaving key in place\n        source = source.replace(key, match => match + fragmentString);\n    }\n  }\n\n  // Remove if it hasn't already been replaced\n  source = source.replace(DECLARATION_INJECT_MARKER, '');\n\n  // Finally, if requested, insert an automatic module injector chunk\n  if (injectStandardStubs) {\n    source = source.replace(/\\}\\s*$/, match => match + MODULE_INJECTORS[type]);\n  }\n\n  return source;\n}\n\n/* eslint-enable complexity */\n\n// Takes an array of inject objects and combines them into one\nexport function combineInjects(injects) {\n  const result = {};\n  assert(Array.isArray(injects) && injects.length > 1);\n  injects.forEach(inject => {\n    for (const key in inject) {\n      result[key] = result[key] ? `${result[key]}\\n${inject[key]}` : inject[key];\n    }\n  });\n  return result;\n}\n","export const MODULE_INJECTORS_VS = `\\\n#ifdef MODULE_LOGDEPTH\n  logdepth_adjustPosition(gl_Position);\n#endif\n`;\n\nexport const MODULE_INJECTORS_FS = `\\\n#ifdef MODULE_MATERIAL\n  gl_FragColor = material_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LIGHTING\n  gl_FragColor = lighting_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_FOG\n  gl_FragColor = fog_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_PICKING\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LOGDEPTH\n  logdepth_setFragDepth();\n#endif\n`;\n","// shadertools exports\n\n// DEFAULT SHADERS\n// A set of base shaders that leverage the shader module system,\n// dynamically enabling features depending on which modules are included\nimport MODULAR_VS from './shaders/modular-vertex.glsl';\nimport MODULAR_FS from './shaders/modular-fragment.glsl';\n\n// DOCUMENTED APIS\nexport {\n  registerShaderModules,\n  setDefaultShaderModules,\n  getDefaultShaderModules\n} from './lib/resolve-modules';\nexport {\n  assembleShaders,\n  createShaderHook,\n  createModuleInjection,\n  resetGlobalShaderHooks\n} from './lib/assemble-shaders';\n\n// HELPERS\nexport {combineInjects} from './lib/inject-shader';\nexport {normalizeShaderModule} from './lib/shader-module';\n\n// UTILS\nexport {\n  getQualifierDetails,\n  getPassthroughFS,\n  typeToChannelSuffix,\n  typeToChannelCount,\n  convertToVec4\n} from './utils/shader-utils';\n\n// SHADER MODULES\nexport * from './modules';\n\nexport const MODULAR_SHADERS = {\n  vs: MODULAR_VS,\n  fs: MODULAR_FS,\n  uniforms: {}\n};\n","export default `\\\n#define SHADER_NAME luma_modular_vertex\n\n// object attributes\nattribute vec3 positions;\nattribute vec3 normals;\nattribute vec4 colors;\nattribute vec2 texCoords;\nattribute vec3 pickingColors;\n\nvoid main(void) {\n\n  // Set up position\n#ifdef MODULE_GEOMETRY\n  geometry_setPosition(positions);\n  geometry_setNormal(normals);\n#endif\n\n#ifdef MODULE_PROJECT\n  project_setPositionAndNormal_Model(positions, normals);\n  gl_Position = project_model_to_clipspace(positions);\n#endif\n\n  // Set up depth\n#ifdef MODULE_LOGDEPTH\n  logdepth_adjustPosition(gl_Position);\n#endif\n\n#ifdef MODULE_DIFFUSE\n  diffuse_setTextureCoordinate(texCoords);\n#endif\n\n  // Set up color calculations\n#ifdef MODULE_MATERIAL\n  material_setDiffuseColor(colors);\n  material_setDiffuseTextureCoordinates(texCoords);\n#endif\n\n#ifdef MODULE_LIGHTING\n  lighting_setPositionAndNormal(positions, normals);\n  lighting_apply_light(positions);\n  lighting_apply_reflection(positions);\n#endif\n\n#ifdef MODULE_PICKING\n  picking_setPickingColor(pickingColors);\n#endif\n\n}\n`;\n","export default `\\\n#define SHADER_NAME luma-modular-fragment\n\nprecision highp float;\n\n// varyings\nvarying vec4 vColor;\n\nvoid main(){\n  gl_FragColor = vec4(1., 0., 1., 1.);\n\n#ifdef MODULE_DIFFUSE\n  gl_FragColor = diffuse_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_MATERIAL\n  gl_FragColor = material_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LIGHTING\n  gl_FragColor = lighting_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_FOG\n  gl_FragColor = fog_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_PICKING\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LOGDEPTH\n  logdepth_setFragDepth(gl_Position);\n#endif\n}\n`;\n","/* eslint-disable camelcase */\nimport {assert} from '../utils';\n\nconst GL_BYTE = 0x1400;\nconst GL_UNSIGNED_BYTE = 0x1401;\nconst GL_SHORT = 0x1402;\nconst GL_UNSIGNED_SHORT = 0x1403;\n\nconst GL_POINTS = 0x0;\nconst GL_LINES = 0x1;\nconst GL_LINE_LOOP = 0x2;\nconst GL_LINE_STRIP = 0x3;\nconst GL_TRIANGLES = 0x4;\nconst GL_TRIANGLE_STRIP = 0x5;\nconst GL_TRIANGLE_FAN = 0x6;\n\n// Local constants - these will \"collapse\" during minification\nconst GL_FLOAT = 0x1406;\nconst GL_FLOAT_VEC2 = 0x8b50;\nconst GL_FLOAT_VEC3 = 0x8b51;\nconst GL_FLOAT_VEC4 = 0x8b52;\n\nconst GL_INT = 0x1404;\nconst GL_INT_VEC2 = 0x8b53;\nconst GL_INT_VEC3 = 0x8b54;\nconst GL_INT_VEC4 = 0x8b55;\n\nconst GL_UNSIGNED_INT = 0x1405;\nconst GL_UNSIGNED_INT_VEC2 = 0x8dc6;\nconst GL_UNSIGNED_INT_VEC3 = 0x8dc7;\nconst GL_UNSIGNED_INT_VEC4 = 0x8dc8;\n\nconst GL_BOOL = 0x8b56;\nconst GL_BOOL_VEC2 = 0x8b57;\nconst GL_BOOL_VEC3 = 0x8b58;\nconst GL_BOOL_VEC4 = 0x8b59;\n\nconst GL_FLOAT_MAT2 = 0x8b5a;\nconst GL_FLOAT_MAT3 = 0x8b5b;\nconst GL_FLOAT_MAT4 = 0x8b5c;\n\nconst GL_FLOAT_MAT2x3 = 0x8b65;\nconst GL_FLOAT_MAT2x4 = 0x8b66;\nconst GL_FLOAT_MAT3x2 = 0x8b67;\nconst GL_FLOAT_MAT3x4 = 0x8b68;\nconst GL_FLOAT_MAT4x2 = 0x8b69;\nconst GL_FLOAT_MAT4x3 = 0x8b6a;\n\n// Composite types table\nconst COMPOSITE_GL_TYPES = {\n  [GL_FLOAT]: [GL_FLOAT, 1, 'float'],\n  [GL_FLOAT_VEC2]: [GL_FLOAT, 2, 'vec2'],\n  [GL_FLOAT_VEC3]: [GL_FLOAT, 3, 'vec3'],\n  [GL_FLOAT_VEC4]: [GL_FLOAT, 4, 'vec4'],\n\n  [GL_INT]: [GL_INT, 1, 'int'],\n  [GL_INT_VEC2]: [GL_INT, 2, 'ivec2'],\n  [GL_INT_VEC3]: [GL_INT, 3, 'ivec3'],\n  [GL_INT_VEC4]: [GL_INT, 4, 'ivec4'],\n\n  [GL_UNSIGNED_INT]: [GL_UNSIGNED_INT, 1, 'uint'],\n  [GL_UNSIGNED_INT_VEC2]: [GL_UNSIGNED_INT, 2, 'uvec2'],\n  [GL_UNSIGNED_INT_VEC3]: [GL_UNSIGNED_INT, 3, 'uvec3'],\n  [GL_UNSIGNED_INT_VEC4]: [GL_UNSIGNED_INT, 4, 'uvec4'],\n\n  [GL_BOOL]: [GL_FLOAT, 1, 'bool'],\n  [GL_BOOL_VEC2]: [GL_FLOAT, 2, 'bvec2'],\n  [GL_BOOL_VEC3]: [GL_FLOAT, 3, 'bvec3'],\n  [GL_BOOL_VEC4]: [GL_FLOAT, 4, 'bvec4'],\n\n  [GL_FLOAT_MAT2]: [GL_FLOAT, 8, 'mat2'], // 4\n  [GL_FLOAT_MAT2x3]: [GL_FLOAT, 8, 'mat2x3'], // 6\n  [GL_FLOAT_MAT2x4]: [GL_FLOAT, 8, 'mat2x4'], // 8\n\n  [GL_FLOAT_MAT3]: [GL_FLOAT, 12, 'mat3'], // 9\n  [GL_FLOAT_MAT3x2]: [GL_FLOAT, 12, 'mat3x2'], // 6\n  [GL_FLOAT_MAT3x4]: [GL_FLOAT, 12, 'mat3x4'], // 12\n\n  [GL_FLOAT_MAT4]: [GL_FLOAT, 16, 'mat4'], // 16\n  [GL_FLOAT_MAT4x2]: [GL_FLOAT, 16, 'mat4x2'], // 8\n  [GL_FLOAT_MAT4x3]: [GL_FLOAT, 16, 'mat4x3'] // 12\n};\n\n// Counts the number of complete primitives given a number of vertices and a drawMode\nexport function getPrimitiveDrawMode(drawMode) {\n  switch (drawMode) {\n    case GL_POINTS:\n      return GL_POINTS;\n    case GL_LINES:\n      return GL_LINES;\n    case GL_LINE_STRIP:\n      return GL_LINES;\n    case GL_LINE_LOOP:\n      return GL_LINES;\n    case GL_TRIANGLES:\n      return GL_TRIANGLES;\n    case GL_TRIANGLE_STRIP:\n      return GL_TRIANGLES;\n    case GL_TRIANGLE_FAN:\n      return GL_TRIANGLES;\n    default:\n      assert(false);\n      return 0;\n  }\n}\n\n// Counts the number of complete \"primitives\" given a number of vertices and a drawMode\nexport function getPrimitiveCount({drawMode, vertexCount}) {\n  switch (drawMode) {\n    case GL_POINTS:\n    case GL_LINE_LOOP:\n      return vertexCount;\n    case GL_LINES:\n      return vertexCount / 2;\n    case GL_LINE_STRIP:\n      return vertexCount - 1;\n    case GL_TRIANGLES:\n      return vertexCount / 3;\n    case GL_TRIANGLE_STRIP:\n    case GL_TRIANGLE_FAN:\n      return vertexCount - 2;\n    default:\n      assert(false);\n      return 0;\n  }\n}\n\n// Counts the number of vertices after splitting the vertex stream into separate \"primitives\"\nexport function getVertexCount({drawMode, vertexCount}) {\n  const primitiveCount = getPrimitiveCount({drawMode, vertexCount});\n  switch (getPrimitiveDrawMode(drawMode)) {\n    case GL_POINTS:\n      return primitiveCount;\n    case GL_LINES:\n      return primitiveCount * 2;\n    case GL_TRIANGLES:\n      return primitiveCount * 3;\n    default:\n      assert(false);\n      return 0;\n  }\n}\n\n// Decomposes a composite type GL.VEC3 into a basic type (GL.FLOAT) and components (3)\nexport function decomposeCompositeGLType(compositeGLType) {\n  const typeAndSize = COMPOSITE_GL_TYPES[compositeGLType];\n  if (!typeAndSize) {\n    return null;\n  }\n  const [type, components] = typeAndSize;\n  return {type, components};\n}\n\nexport function getCompositeGLType(type, components) {\n  switch (type) {\n    case GL_BYTE:\n    case GL_UNSIGNED_BYTE:\n    case GL_SHORT:\n    case GL_UNSIGNED_SHORT:\n      type = GL_FLOAT;\n      break;\n    default:\n  }\n\n  for (const glType in COMPOSITE_GL_TYPES) {\n    const [compType, compComponents, name] = COMPOSITE_GL_TYPES[glType];\n    if (compType === type && compComponents === components) {\n      return {glType, name};\n    }\n  }\n  return null;\n}\n","export const VERTEX_SHADER = 'vs';\nexport const FRAGMENT_SHADER = 'fs';\n","import Geometry from '../geometry/geometry';\nimport {uid} from '../utils';\n\n// prettier-ignore\nconst CUBE_INDICES = new Uint16Array([\n  0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13,\n  14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23\n]);\n\n// prettier-ignore\nconst CUBE_POSITIONS = new Float32Array([\n  -1,  -1,  1, 1,  -1,  1,  1,  1,  1,  -1,  1,  1,\n  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1,  -1,\n  -1,  1,  -1,  -1,  1,  1,  1,  1,  1,  1,  1,  -1,\n  -1,  -1,  -1,  1,  -1,  -1,  1,  -1,  1,  -1,  -1,  1,\n  1,  -1,  -1,  1,  1,  -1,  1,  1,  1,  1,  -1,  1,\n  -1,  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1\n]);\n\n// TODO - could be Uint8\n// prettier-ignore\nconst CUBE_NORMALS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,\n  // Back face\n  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,\n  // Top face\n  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,\n  // Bottom face\n  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,\n  // Right face\n  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,\n  // Left face\n  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0\n]);\n\n// prettier-ignore\nconst CUBE_TEX_COORDS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  1,  1,  0,  1,\n  // Back face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Top face\n  0,  1,  0,  0,  1,  0,  1,  1,\n  // Bottom face\n  1,  1,  0,  1,  0,  0,  1,  0,\n  // Right face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Left face\n  0,  0,  1,  0,  1,  1,  0,  1\n]);\n\nconst ATTRIBUTES = {\n  POSITION: {size: 3, value: new Float32Array(CUBE_POSITIONS)},\n  NORMAL: {size: 3, value: new Float32Array(CUBE_NORMALS)},\n  TEXCOORD_0: {size: 2, value: new Float32Array(CUBE_TEX_COORDS)}\n};\n\nexport default class CubeGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('cube-geometry')} = props;\n    super({\n      ...props,\n      id,\n      indices: {size: 1, value: new Uint16Array(CUBE_INDICES)},\n      attributes: {...ATTRIBUTES, ...props.attributes}\n    });\n  }\n}\n","import GL from '@luma.gl/constants';\n\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {\n  TEXTURE_FORMATS,\n  DATA_FORMAT_CHANNELS,\n  TYPE_SIZES,\n  isFormatSupported,\n  isLinearFilteringSupported\n} from './texture-formats';\n\nimport {withParameters} from '../context';\nimport {isWebGL2, assertWebGL2Context, WebGLBuffer} from '../webgl-utils';\nimport {log, uid, isPowerOfTwo, assert} from '../utils';\n\n// Supported min filters for NPOT texture.\nconst NPOT_MIN_FILTERS = [GL.LINEAR, GL.NEAREST];\n\nexport default class Texture extends Resource {\n  static isSupported(gl, {format, linearFiltering} = {}) {\n    let supported = true;\n    if (format) {\n      supported = supported && isFormatSupported(gl, format);\n      supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));\n    }\n    return supported;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n  constructor(gl, props) {\n    const {\n      id = uid('texture'),\n      handle,\n      target\n      // , magFilter, minFilter, wrapS, wrapT\n    } = props;\n\n    super(gl, {id, handle});\n\n    this.target = target;\n    this.textureUnit = undefined;\n\n    // Program.draw() checks the loaded flag of all textures to avoid\n    // Textures that are still loading from promises\n    // Set to true as soon as texture has been initialized with valid data\n    this.loaded = false;\n\n    this.width = undefined;\n    this.height = undefined;\n    this.depth = undefined;\n    this.format = undefined;\n    this.type = undefined;\n    this.dataFormat = undefined;\n    this.border = undefined;\n    this.textureUnit = undefined;\n    this.mipmaps = undefined;\n  }\n\n  toString() {\n    return `Texture(${this.id},${this.width}x${this.height})`;\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(props = {}) {\n    let data = props.data;\n\n    if (data instanceof Promise) {\n      data.then(resolvedImageData =>\n        this.initialize(\n          Object.assign({}, props, {\n            pixels: resolvedImageData,\n            data: resolvedImageData\n          })\n        )\n      );\n      return this;\n    }\n\n    const {\n      pixels = null,\n      format = GL.RGBA,\n      border = 0,\n      recreate = false,\n      parameters = {},\n      pixelStore = {},\n      textureUnit = undefined,\n      // Deprecated parameters\n      unpackFlipY = true\n    } = props;\n\n    let {mipmaps = true} = props;\n\n    // pixels variable is for API compatibility purpose\n    if (!data) {\n      // TODO - This looks backwards? Commenting out for now until we decide\n      // which prop to use\n      // log.deprecated('data', 'pixels')();\n      data = pixels;\n    }\n\n    let {width, height, dataFormat, type} = props;\n    const {depth = 0} = props;\n\n    // Deduce width and height\n    ({width, height, dataFormat, type} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed: false,\n      data,\n      width,\n      height\n    }));\n\n    // Store opts for accessors\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.format = format;\n    this.type = type;\n    this.dataFormat = dataFormat;\n    this.border = border;\n    this.textureUnit = textureUnit;\n\n    if (Number.isFinite(this.textureUnit)) {\n      this.gl.activeTexture(GL.TEXTURE0 + this.textureUnit);\n      this.gl.bindTexture(this.target, this.handle);\n    }\n\n    // Note: luma.gl defaults to GL.UNPACK_FLIP_Y_WEBGL = true;\n    // TODO - compare v4 and v3\n    const DEFAULT_TEXTURE_SETTINGS = {\n      // Pixel store\n      [GL.UNPACK_FLIP_Y_WEBGL]: unpackFlipY\n    };\n    const glSettings = Object.assign({}, DEFAULT_TEXTURE_SETTINGS, pixelStore);\n\n    if (mipmaps && this._isNPOT()) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      mipmaps = false;\n\n      this._updateForNPOT(parameters);\n    }\n\n    this.mipmaps = mipmaps;\n\n    this.setImageData({\n      data,\n      width,\n      height,\n      depth,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps,\n      parameters: glSettings\n    });\n\n    if (mipmaps) {\n      this.generateMipmap();\n    }\n\n    // Set texture sampler parameters\n    this.setParameters(parameters);\n\n    // TODO - Store data to enable auto recreate on context loss\n    if (recreate) {\n      this.data = data;\n    }\n\n    return this;\n  }\n\n  // If size has changed, reinitializes with current format\n  // note clears image and mipmaps\n  resize({height, width, mipmaps = false}) {\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({\n        width,\n        height,\n        format: this.format,\n        type: this.type,\n        dataFormat: this.dataFormat,\n        border: this.border,\n        mipmaps\n      });\n    }\n    return this;\n  }\n\n  // Call to regenerate mipmaps after modifying texture(s)\n  generateMipmap(params = {}) {\n    if (this._isNPOT()) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      return this;\n    }\n\n    this.mipmaps = true;\n\n    this.gl.bindTexture(this.target, this.handle);\n    withParameters(this.gl, params, () => {\n      this.gl.generateMipmap(this.target);\n    });\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  /*\n   * Allocates storage\n   * @param {*} pixels -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} width -\n   * @param {GLint} height -\n   * @param {GLint} mipMapLevel -\n   * @param {GLenum} format - format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  /* eslint-disable max-len, max-statements, complexity */\n  setImageData(options) {\n    this._trackDeallocatedMemory('Texture');\n\n    const {\n      target = this.target,\n      pixels = null,\n      level = 0,\n      format = this.format,\n      border = this.border,\n      offset = 0,\n      parameters = {}\n    } = options;\n\n    let {\n      data = null,\n      type = this.type,\n      width = this.width,\n      height = this.height,\n      dataFormat = this.dataFormat,\n      compressed = false\n    } = options;\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    const {gl} = this;\n    gl.bindTexture(this.target, this.handle);\n\n    let dataType = null;\n    ({data, dataType} = this._getDataType({data, compressed}));\n\n    withParameters(this.gl, parameters, () => {\n      switch (dataType) {\n        case 'null':\n          gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          break;\n        case 'typed-array':\n          // Looks like this assert is not necessary, as offset is ignored under WebGL1\n          // assert((offset === 0 || isWebGL2(gl)), 'offset supported in WebGL2 only');\n          gl.texImage2D(\n            target,\n            level,\n            format,\n            width,\n            height,\n            border,\n            dataFormat,\n            type,\n            data,\n            offset\n          );\n          break;\n        case 'buffer':\n          // WebGL2 enables creating textures directly from a WebGL buffer\n          assertWebGL2Context(gl);\n          gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle || data);\n          gl.texImage2D(target, level, format, width, height, border, dataFormat, type, offset);\n          gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n          break;\n        case 'browser-object':\n          if (isWebGL2(gl)) {\n            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          } else {\n            gl.texImage2D(target, level, format, dataFormat, type, data);\n          }\n          break;\n        case 'compressed':\n          gl.compressedTexImage2D(target, level, format, width, height, border, data);\n          break;\n        default:\n          assert(false, 'Unknown image data type');\n      }\n    });\n\n    if (data && data.byteLength) {\n      this._trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      // NOTE(Tarek): Default to RGBA bytes\n      const channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n      const channelSize = TYPE_SIZES[this.type] || 1;\n\n      this._trackAllocatedMemory(this.width * this.height * channels * channelSize, 'Texture');\n    }\n\n    this.loaded = true;\n\n    return this;\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Redefines an area of an existing texture\n   * Note: does not allocate storage\n   */\n  /*\n   * Redefines an area of an existing texture\n   * @param {*} pixels, data -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} x - xOffset from where texture to be updated\n   * @param {GLint} y - yOffset from where texture to be updated\n   * @param {GLint} width - width of the sub image to be updated\n   * @param {GLint} height - height of the sub image to be updated\n   * @param {GLint} level - mip level to be updated\n   * @param {GLenum} format - internal format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer or ArrayBufferView\n   * @param {GLenum} dataFormat - format of image data.\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  setSubImageData({\n    target = this.target,\n    pixels = null,\n    data = null,\n    x = 0,\n    y = 0,\n    width = this.width,\n    height = this.height,\n    level = 0,\n    format = this.format,\n    type = this.type,\n    dataFormat = this.dataFormat,\n    compressed = false,\n    offset = 0,\n    border = this.border,\n    parameters = {}\n  }) {\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    assert(this.depth === 0, 'texSubImage not supported for 3D textures');\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    // Support ndarrays\n    if (data && data.data) {\n      const ndarray = data;\n      data = ndarray.data;\n      width = ndarray.shape[0];\n      height = ndarray.shape[1];\n    }\n\n    // Support buffers\n    if (data instanceof Buffer) {\n      data = data.handle;\n    }\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withParameters(this.gl, parameters, () => {\n      // TODO - x,y parameters\n      if (compressed) {\n        this.gl.compressedTexSubImage2D(target, level, x, y, width, height, format, data);\n      } else if (data === null) {\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, null);\n      } else if (ArrayBuffer.isView(data)) {\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data, offset);\n      } else if (data instanceof WebGLBuffer) {\n        // WebGL2 allows us to create texture directly from a WebGL buffer\n        assertWebGL2Context(this.gl);\n        // This texImage2D signature uses currently bound GL.PIXEL_UNPACK_BUFFER\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data);\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, offset);\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n      } else if (isWebGL2(this.gl)) {\n        // Assume data is a browser supported object (ImageData, Canvas, ...)\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data);\n      } else {\n        this.gl.texSubImage2D(target, level, x, y, dataFormat, type, data);\n      }\n    });\n\n    this.gl.bindTexture(this.target, null);\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Defines a two-dimensional texture image or cube-map texture image with\n   * pixels from the current framebuffer (rather than from client memory).\n   * (gl.copyTexImage2D wrapper)\n   *\n   * Note that binding a texture into a Framebuffer's color buffer and\n   * rendering can be faster.\n   */\n  copyFramebuffer(opts = {}) {\n    log.error(\n      'Texture.copyFramebuffer({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  getActiveUnit() {\n    return this.gl.getParameter(GL.ACTIVE_TEXTURE) - GL.TEXTURE0;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n\n  bind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, this.handle);\n    return textureUnit;\n  }\n\n  unbind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, null);\n    return textureUnit;\n  }\n\n  // PRIVATE METHODS\n\n  _getDataType({data, compressed = false}) {\n    if (compressed) {\n      return {data, dataType: 'compressed'};\n    }\n    if (data === null) {\n      return {data, dataType: 'null'};\n    }\n    if (ArrayBuffer.isView(data)) {\n      return {data, dataType: 'typed-array'};\n    }\n    if (data instanceof Buffer) {\n      return {data: data.handle, dataType: 'buffer'};\n    }\n    if (data instanceof WebGLBuffer) {\n      return {data, dataType: 'buffer'};\n    }\n    // Assume data is a browser supported object (ImageData, Canvas, ...)\n    return {data, dataType: 'browser-object'};\n  }\n\n  /* Copied from texture-2d.js\n  // WebGL2\n  setPixels(opts = {}) {\n    const {\n      buffer,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n\n    // This signature of texImage2D uses currently bound GL.PIXEL_UNPACK_BUFFER\n    gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, buffer.target);\n    // And as always, we must also bind the texture itself\n    this.bind();\n\n    gl.texImage2D(gl.TEXTURE_2D,\n      mipmapLevel, format, width, height, border, format, type, buffer.target);\n\n    this.unbind();\n    gl.bindBuffer(GL.GL.PIXEL_UNPACK_BUFFER, null);\n    return this;\n  }\n\n  setImageDataFromCompressedBuffer(opts) {\n    const {\n      buffer,\n      // offset = 0,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      internalFormat = GL.RGBA,\n      // format = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n    gl.compressedTexImage2D(this.target,\n      mipmapLevel, internalFormat, width, height, border, buffer);\n    // gl.compressedTexSubImage2D(target,\n    //   level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);\n    return this;\n  }\n\n  copySubImage(opts) {\n    const {\n      // pixels,\n      // offset = 0,\n      // x,\n      // y,\n      // width,\n      // height,\n      // mipmapLevel = 0,\n      // internalFormat = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      // border = 0\n    } = opts;\n\n    // if (pixels instanceof ArrayBufferView) {\n    //   gl.texSubImage2D(target, level, x, y, width, height, format, type, pixels);\n    // }\n    // gl.texSubImage2D(target, level, x, y, format, type, ? pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLImageElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLCanvasElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLVideoElement pixels);\n    // // Additional signature in a WebGL 2 context:\n    // gl.texSubImage2D(target, level, x, y, format, type, GLintptr offset);\n  }\n  */\n\n  // HELPER METHODS\n\n  _deduceParameters(opts) {\n    const {format, data} = opts;\n    let {width, height, dataFormat, type, compressed} = opts;\n\n    // Deduce format and type from format\n    const textureFormat = TEXTURE_FORMATS[format];\n    dataFormat = dataFormat || (textureFormat && textureFormat.dataFormat);\n    type = type || (textureFormat && textureFormat.types[0]);\n\n    // Deduce compression from format\n    compressed = compressed || (textureFormat && textureFormat.compressed);\n\n    ({width, height} = this._deduceImageSize(data, width, height));\n\n    return {dataFormat, type, compressed, width, height, format, data};\n  }\n\n  /* global ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement, ImageBitmap */\n  // eslint-disable-next-line complexity\n  _deduceImageSize(data, width, height) {\n    let size;\n\n    if (typeof ImageData !== 'undefined' && data instanceof ImageData) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\n      size = {width: data.naturalWidth, height: data.naturalHeight};\n    } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\n      size = {width: data.videoWidth, height: data.videoHeight};\n    } else if (!data) {\n      size = {width: width >= 0 ? width : 1, height: height >= 0 ? height : 1};\n    } else {\n      size = {width, height};\n    }\n\n    assert(size, 'Could not deduced texture size');\n    assert(\n      width === undefined || size.width === width,\n      'Deduced texture width does not match supplied width'\n    );\n    assert(\n      height === undefined || size.height === height,\n      'Deduced texture height does not match supplied height'\n    );\n\n    return size;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createTexture();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTexture(this.handle);\n    this._trackDeallocatedMemory('Texture');\n  }\n\n  _getParameter(pname) {\n    switch (pname) {\n      case GL.TEXTURE_WIDTH:\n        return this.width;\n      case GL.TEXTURE_HEIGHT:\n        return this.height;\n      default:\n        this.gl.bindTexture(this.target, this.handle);\n        const value = this.gl.getTexParameter(this.target, pname);\n        this.gl.bindTexture(this.target, null);\n        return value;\n    }\n  }\n\n  _setParameter(pname, param) {\n    this.gl.bindTexture(this.target, this.handle);\n\n    // NOTE: Apply NPOT workaround\n    param = this._getNPOTParam(pname, param);\n\n    // Apparently there are some integer/float conversion rules that made\n    // the WebGL committe expose two parameter setting functions in JavaScript.\n    // For now, pick the float version for parameters specified as GLfloat.\n    switch (pname) {\n      case GL.TEXTURE_MIN_LOD:\n      case GL.TEXTURE_MAX_LOD:\n        this.gl.texParameterf(this.handle, pname, param);\n        break;\n\n      case GL.TEXTURE_WIDTH:\n      case GL.TEXTURE_HEIGHT:\n        assert(false);\n        break;\n\n      default:\n        this.gl.texParameteri(this.target, pname, param);\n        break;\n    }\n\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  _isNPOT() {\n    if (isWebGL2(this.gl)) {\n      // NPOT restriction is only for WebGL1\n      return false;\n    }\n    // Width and height not available, consider it is not NPOT texture\n    if (!this.width || !this.height) {\n      return false;\n    }\n    return !isPowerOfTwo(this.width) || !isPowerOfTwo(this.height);\n  }\n\n  // Update default settings which are not supported by NPOT textures.\n  _updateForNPOT(parameters) {\n    if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n      parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_S to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_T to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;\n    }\n  }\n\n  _getNPOTParam(pname, param) {\n    if (this._isNPOT()) {\n      switch (pname) {\n        case GL.TEXTURE_MIN_FILTER:\n          if (NPOT_MIN_FILTERS.indexOf(param) === -1) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n            param = GL.LINEAR;\n          }\n          break;\n        case GL.TEXTURE_WRAP_S:\n        case GL.TEXTURE_WRAP_T:\n          if (param !== GL.CLAMP_TO_EDGE) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, ${getKey(this.gl, pname)} to CLAMP_TO_EDGE`)();\n            param = GL.CLAMP_TO_EDGE;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    return param;\n  }\n}\n","import Model from '../../lib/model';\nimport ScenegraphNode from './scenegraph-node';\n\nexport default class ModelNode extends ScenegraphNode {\n  constructor(gl, props = {}) {\n    super(props);\n\n    // pverride callbacks to make sure we call them with this\n    this.onBeforeRender = null;\n    this.AfterRender = null;\n\n    // Create new Model or used supplied Model\n    if (gl instanceof Model) {\n      this.model = gl;\n      this._setModelNodeProps(props);\n    } else {\n      this.model = new Model(gl, props);\n    }\n\n    this.managedResources = props.managedResources || [];\n  }\n\n  setProps(props) {\n    super.setProps(props);\n    this._setModelNodeProps(props);\n    return this;\n  }\n\n  delete() {\n    if (this.model) {\n      this.model.delete();\n      this.model = null;\n    }\n\n    this.managedResources.forEach(resource => resource.delete());\n    this.managedResources = [];\n  }\n\n  // Forward node methods\n  draw(...args) {\n    // Return value indicates if something was actually drawn\n    return this.model.draw(...args);\n  }\n\n  setUniforms(...args) {\n    this.model.setUniforms(...args);\n    return this;\n  }\n\n  setAttributes(...args) {\n    this.model.setAttributes(...args);\n    return this;\n  }\n\n  updateModuleSettings(...args) {\n    this.model.updateModuleSettings(...args);\n    return this;\n  }\n\n  // PRIVATE\n\n  _setModelNodeProps(props) {\n    this.model.setProps(props);\n  }\n}\n","// WebGL1/WebGL2 extension polyfill support\n//\n// Provides a function that creates polyfills for WebGL2 functions based\n// on available extensions and installs them on a supplied target (could be\n// the WebGLContext or its prototype, or a separate object).\n//\n// This is intended to be a stand-alone file with minimal dependencies,\n// easy to reuse or repurpose in other projects.\n\n/* eslint-disable camelcase, brace-style */\nimport assert from './assert';\n\nimport {WEBGL2_CONTEXT_POLYFILLS, WEBGL2_CONTEXT_OVERRIDES} from './polyfill-table';\n\n// Registers extensions, polyfills or mock functions for extensions in the polyfills list\n// TODO - remove use of name `luma`.\nexport default function polyfillContext(gl) {\n  gl.luma = gl.luma || {};\n  initializeExtensions(gl);\n  if (!gl.luma.polyfilled) {\n    installPolyfills(gl, WEBGL2_CONTEXT_POLYFILLS);\n    installOverrides(gl, {target: gl.luma, target2: gl});\n    gl.luma.polyfilled = true;\n  }\n  return gl;\n}\n\n// TODO - is this still required?\n/* global window, global */\nconst global_ = typeof global !== 'undefined' ? global : window;\nglobal_.polyfillContext = polyfillContext;\n\nfunction initializeExtensions(gl) {\n  gl.luma.extensions = {};\n  // `getSupportedExtensions` can return null when context is lost.\n  const EXTENSIONS = gl.getSupportedExtensions() || [];\n  for (const extension of EXTENSIONS) {\n    gl.luma[extension] = gl.getExtension(extension);\n  }\n}\n\n// Install simple overrides (mostly get* functions)\nfunction installOverrides(gl, {target, target2}) {\n  Object.keys(WEBGL2_CONTEXT_OVERRIDES).forEach(key => {\n    if (typeof WEBGL2_CONTEXT_OVERRIDES[key] === 'function') {\n      // install an override, if no implementation was detected\n      const originalFunc = gl[key] ? gl[key].bind(gl) : () => {};\n      const polyfill = WEBGL2_CONTEXT_OVERRIDES[key].bind(null, gl, originalFunc);\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  });\n}\n\nfunction installPolyfills(gl, polyfills) {\n  for (const extension of Object.getOwnPropertyNames(polyfills)) {\n    if (extension !== 'overrides') {\n      polyfillExtension(gl, {extension, target: gl.luma, target2: gl});\n    }\n  }\n}\n\n// Polyfills a single WebGL extension into the `target` object\nfunction polyfillExtension(gl, {extension, target, target2}) {\n  const defaults = WEBGL2_CONTEXT_POLYFILLS[extension];\n  assert(defaults);\n\n  const {meta = {}} = defaults;\n  const {suffix = ''} = meta;\n\n  const ext = gl.getExtension(extension);\n\n  for (const key of Object.keys(defaults)) {\n    const extKey = `${key}${suffix}`;\n\n    let polyfill = null;\n    if (key === 'meta') {\n      // ignore\n    } else if (typeof gl[key] === 'function') {\n      // WebGL2 implementation is already\n    } else if (ext && typeof ext[extKey] === 'function') {\n      // pick extension implemenentation,if available\n      polyfill = (...args) => ext[extKey](...args);\n    } else if (typeof defaults[key] === 'function') {\n      // pick the mock implementation, if no implementation was detected\n      polyfill = defaults[key].bind(target);\n    }\n\n    if (polyfill) {\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  }\n}\n","/* eslint-disable no-restricted-globals */\n/* global self, window, global, document */\n/* eslint-disable no-restricted-globals */\nconst globals = {\n  self: typeof self !== 'undefined' && self,\n  window: typeof window !== 'undefined' && window,\n  global: typeof global !== 'undefined' && global,\n  document: typeof document !== 'undefined' && document\n};\n\nconst self_ = globals.self || globals.window || globals.global;\nconst window_ = globals.window || globals.self || globals.global;\nconst global_ = globals.global || globals.self || globals.window;\nconst document_ = globals.document || {};\n\nexport {self_ as self, window_ as window, global_ as global, document_ as document};\n","// Recommendation is to ignore message but current test suite checks agains the\n// message so keep it for now.\nexport default function assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'shadertools: assertion failed.');\n  }\n}\n","import GL from '@luma.gl/constants';\n\nimport Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport {clear, clearBuffer} from './clear';\nimport {copyToDataUrl} from './copy-and-blit.js';\n\nimport {getFeatures} from '../features';\n\nimport {isWebGL2, assertWebGL2Context, getKey} from '../webgl-utils';\n\nimport {log, assert} from '../utils';\n\nconst ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\n\nexport default class Framebuffer extends Resource {\n  static isSupported(\n    gl,\n    {\n      colorBufferFloat, // Whether floating point textures can be rendered and read\n      colorBufferHalfFloat // Whether half float textures can be rendered and read\n    } = {}\n  ) {\n    let supported = true;\n\n    if (colorBufferFloat) {\n      supported = Boolean(\n        // WebGL 2\n        gl.getExtension('EXT_color_buffer_float') ||\n          // WebGL 1, not exposed on all platforms\n          gl.getExtension('WEBGL_color_buffer_float') ||\n          // WebGL 1, implicitly enables float render targets https://www.khronos.org/registry/webgl/extensions/OES_texture_float/\n          gl.getExtension('OES_texture_float')\n      );\n    }\n\n    if (colorBufferHalfFloat) {\n      supported =\n        supported &&\n        Boolean(\n          // WebGL 2\n          gl.getExtension('EXT_color_buffer_float') ||\n            // WebGL 1\n            gl.getExtension('EXT_color_buffer_half_float')\n        );\n    }\n\n    return supported;\n  }\n\n  // Create a Framebuffer wrapper for the default framebuffer (target === null)\n  static getDefaultFramebuffer(gl) {\n    gl.luma = gl.luma || {};\n    gl.luma.defaultFramebuffer =\n      gl.luma.defaultFramebuffer ||\n      new Framebuffer(gl, {\n        id: 'default-framebuffer',\n        handle: null,\n        attachments: {}\n      });\n    // TODO - can we query for and get a handle to the GL.FRONT renderbuffer?\n    return gl.luma.defaultFramebuffer;\n  }\n\n  get MAX_COLOR_ATTACHMENTS() {\n    return this.gl.getParameter(this.gl.MAX_COLOR_ATTACHMENTS);\n  }\n\n  get MAX_DRAW_BUFFERS() {\n    return this.gl.getParameter(this.gl.MAX_DRAW_BUFFERS);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // Public members\n    this.width = null;\n    this.height = null;\n    this.attachments = {};\n    this.readBuffer = GL.COLOR_ATTACHMENT0;\n    this.drawBuffers = [GL.COLOR_ATTACHMENT0];\n    this.ownResources = [];\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  get color() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get texture() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get depth() {\n    return (\n      this.attachments[GL.DEPTH_ATTACHMENT] || this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] || null\n    );\n  }\n\n  get stencil() {\n    return (\n      this.attachments[GL.STENCIL_ATTACHMENT] ||\n      this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] ||\n      null\n    );\n  }\n\n  initialize({\n    width = 1,\n    height = 1,\n    attachments = null,\n    color = true,\n    depth = true,\n    stencil = false,\n    check = true,\n    readBuffer,\n    drawBuffers\n  }) {\n    assert(width >= 0 && height >= 0, 'Width and height need to be integers');\n\n    // Store actual width and height for diffing\n    this.width = width;\n    this.height = height;\n\n    // Resize any provided attachments - note that resize only resizes if needed\n    // Note: A framebuffer has no separate size, it is defined by its attachments (which must agree)\n    if (attachments) {\n      for (const attachment in attachments) {\n        const target = attachments[attachment];\n        const object = Array.isArray(target) ? target[0] : target;\n        object.resize({width, height});\n      }\n    } else {\n      // Create any requested default attachments\n      attachments = this._createDefaultAttachments(color, depth, stencil, width, height);\n    }\n\n    this.update({clearAttachments: true, attachments, readBuffer, drawBuffers});\n\n    // Checks that framebuffer was properly set up, if not, throws an explanatory error\n    if (attachments && check) {\n      this.checkStatus();\n    }\n  }\n\n  delete() {\n    for (const resource of this.ownResources) {\n      resource.delete();\n    }\n    super.delete();\n  }\n  update({\n    attachments = {},\n    readBuffer,\n    drawBuffers,\n    clearAttachments = false,\n    resizeAttachments = true\n  }) {\n    this.attach(attachments, {clearAttachments, resizeAttachments});\n\n    const {gl} = this;\n    // Multiple render target support, set read buffer and draw buffers\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    if (readBuffer) {\n      this._setReadBuffer(readBuffer);\n    }\n    if (drawBuffers) {\n      this._setDrawBuffers(drawBuffers);\n    }\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // Attachment resize is expected to be a noop if size is same\n  resize({width, height} = {}) {\n    // for default framebuffer, just update the stored size\n    if (this.handle === null) {\n      assert(width === undefined && height === undefined);\n      this.width = this.gl.drawingBufferWidth;\n      this.height = this.gl.drawingBufferHeight;\n      return this;\n    }\n\n    if (width === undefined) {\n      width = this.gl.drawingBufferWidth;\n    }\n    if (height === undefined) {\n      height = this.gl.drawingBufferHeight;\n    }\n\n    if (width !== this.width && height !== this.height) {\n      log.log(2, `Resizing framebuffer ${this.id} to ${width}x${height}`)();\n    }\n    for (const attachmentPoint in this.attachments) {\n      this.attachments[attachmentPoint].resize({width, height});\n    }\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  // Attach from a map of attachments\n  attach(attachments, {clearAttachments = false, resizeAttachments = true} = {}) {\n    const newAttachments = {};\n\n    // Any current attachments need to be removed, add null values to map\n    if (clearAttachments) {\n      Object.keys(this.attachments).forEach(key => {\n        newAttachments[key] = null;\n      });\n    }\n\n    // Overlay the new attachments\n    Object.assign(newAttachments, attachments);\n\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    // Walk the attachments\n    for (const key in newAttachments) {\n      // Ensure key is not undefined\n      assert(key !== undefined, 'Misspelled framebuffer binding point?');\n\n      const attachment = Number(key);\n\n      const descriptor = newAttachments[attachment];\n      let object = descriptor;\n      if (!object) {\n        this._unattach(attachment);\n      } else if (object instanceof Renderbuffer) {\n        this._attachRenderbuffer({attachment, renderbuffer: object});\n      } else if (Array.isArray(descriptor)) {\n        const [texture, layer = 0, level = 0] = descriptor;\n        object = texture;\n        this._attachTexture({attachment, texture, layer, level});\n      } else {\n        this._attachTexture({attachment, texture: object, layer: 0, level: 0});\n      }\n\n      // Resize objects\n      if (resizeAttachments && object) {\n        object.resize({width: this.width, height: this.height});\n      }\n    }\n\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    // Assign to attachments and remove any nulls to get a clean attachment map\n    Object.assign(this.attachments, attachments);\n    Object.keys(this.attachments)\n      .filter(key => !this.attachments[key])\n      .forEach(key => {\n        delete this.attachments[key];\n      });\n  }\n\n  checkStatus() {\n    const {gl} = this;\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    const status = gl.checkFramebufferStatus(GL.FRAMEBUFFER);\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n      throw new Error(_getFrameBufferStatus(status));\n    }\n    return this;\n  }\n\n  clear({color, depth, stencil, drawBuffers = []} = {}) {\n    // Bind framebuffer and delegate to global clear functions\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    if (color || depth || stencil) {\n      clear(this.gl, {color, depth, stencil});\n    }\n\n    drawBuffers.forEach((value, drawBuffer) => {\n      clearBuffer({drawBuffer, value});\n    });\n\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // NOTE: Slow requires roundtrip to GPU\n  // App can provide pixelArray or have it auto allocated by this method\n  // @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n  //  newly allocated by this method unless provided by app.\n  readPixels(opts = {}) {\n    log.error(\n      'Framebuffer.readPixels() is no logner supported, use readPixelsToArray(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads data into provided buffer object asynchronously\n  // This function doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n  readPixelsToBuffer(opts = {}) {\n    log.error(\n      'Framebuffer.readPixelsToBuffer()is no logner supported, use readPixelsToBuffer(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels as a dataUrl\n  copyToDataUrl(opts = {}) {\n    log.error(\n      'Framebuffer.copyToDataUrl() is no logner supported, use copyToDataUrl(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels into an HTML Image\n  copyToImage(opts = {}) {\n    log.error('Framebuffer.copyToImage() is no logner supported, use copyToImage(framebuffer)')();\n    return null;\n  }\n\n  // copyToFramebuffer({width, height}) {\n  //   const scaleX = width / this.width;\n  //   const scaleY = height / this.height;\n  //   const scale = Math.min(scaleX, scaleY);\n  //   width = width * scale;\n  //   height = height * scale;\n  //   const scaledFramebuffer = new Framebuffer(this.gl, {width, height});\n  //   this.blit();\n  // }\n\n  // Copy a rectangle from a framebuffer attachment into a texture (at an offset)\n  // NOTE: assumes texture has enough storage allocated\n  // eslint-disable-next-line complexity\n  copyToTexture(opts = {}) {\n    log.error(\n      'Framebuffer.copyToTexture({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  // WEBGL2 INTERFACE\n\n  // Copies a rectangle of pixels between framebuffers\n  // eslint-disable-next-line complexity\n  blit(opts = {}) {\n    log.error('Framebuffer.blit({...}) is no logner supported, use blit(source, target, opts)')();\n    return null;\n  }\n\n  // signals to the GL that it need not preserve all pixels of a specified region of the framebuffer\n  invalidate({attachments = [], x = 0, y = 0, width, height}) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n    const prevHandle = gl.bindFramebuffer(GL.READ_FRAMEBUFFER, this.handle);\n    const invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n    if (invalidateAll) {\n      gl.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments);\n    } else {\n      gl.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments, x, y, width, height);\n    }\n    gl.bindFramebuffer(GL.READ_FRAMEBUFFER, prevHandle);\n    return this;\n  }\n\n  // Return the value for `pname` of the specified attachment.\n  // The type returned is the type of the requested pname\n  getAttachmentParameter(attachment, pname, keys) {\n    let value = this._getAttachmentParameterFallback(pname);\n    if (value === null) {\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n      value = this.gl.getFramebufferAttachmentParameter(GL.FRAMEBUFFER, attachment, pname);\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, null);\n    }\n    if (keys && value > 1000) {\n      value = getKey(this.gl, value);\n    }\n    return value;\n  }\n\n  getAttachmentParameters(\n    attachment = GL.COLOR_ATTACHMENT0,\n    keys,\n    parameters = this.constructor.ATTACHMENT_PARAMETERS || []\n  ) {\n    const values = {};\n    for (const pname of parameters) {\n      const key = keys ? getKey(this.gl, pname) : pname;\n      values[key] = this.getAttachmentParameter(attachment, pname, keys);\n    }\n    return values;\n  }\n\n  getParameters(keys = true) {\n    const attachments = Object.keys(this.attachments);\n    // if (this === this.gl.luma.defaultFramebuffer) {\n    //   attachments = [GL.COLOR_ATTACHMENT0, GL.DEPTH_STENCIL_ATTACHMENT];\n    // }\n    const parameters = {};\n    for (const attachmentName of attachments) {\n      const attachment = Number(attachmentName);\n      const key = keys ? getKey(this.gl, attachment) : attachment;\n      parameters[key] = this.getAttachmentParameters(attachment, keys);\n    }\n    return parameters;\n  }\n\n  // DEBUG\n\n  // Note: Will only work when called in an event handler\n  show() {\n    /* global window */\n    if (typeof window !== 'undefined') {\n      window.open(copyToDataUrl(this), 'luma-debug-texture');\n    }\n    return this;\n  }\n\n  log(priority = 0, message = '') {\n    if (priority > log.priority || typeof window === 'undefined') {\n      return this;\n    }\n    message = message || `Framebuffer ${this.id}`;\n    const image = copyToDataUrl(this, {maxHeight: 100});\n    log.image({priority, message, image}, message)();\n    return this;\n  }\n\n  // WEBGL INTERFACE\n  bind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, this.handle);\n    return this;\n  }\n\n  unbind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _createDefaultAttachments(color, depth, stencil, width, height) {\n    let defaultAttachments = null;\n\n    // Add a color buffer if requested and not supplied\n    if (color) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.COLOR_ATTACHMENT0] = new Texture2D(this.gl, {\n        id: `${this.id}-color0`,\n        pixels: null, // reserves texture memory, but texels are undefined\n        format: GL.RGBA,\n        type: GL.UNSIGNED_BYTE,\n        width,\n        height,\n        // Note: Mipmapping can be disabled by texture resource when we resize the texture\n        // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant\n        // behavior we always disable mipmaps.\n        mipmaps: false,\n        // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.\n        // Use LINEAR so subpixel algos like fxaa work.\n        // Set WRAP modes that support NPOT textures too.\n        parameters: {\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n        }\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.COLOR_ATTACHMENT0]);\n    }\n\n    if (depth && stencil) {\n      // TODO - handle separate stencil\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_STENCIL_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth-stencil`,\n        format: GL.DEPTH24_STENCIL8,\n        width,\n        height: 111\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.DEPTH_STENCIL_ATTACHMENT]);\n      // TODO - optional texture\n      // new Texture2D(this.gl, {\n      //   id: `${this.id}-depth-stencil`,\n      //   format: GL.DEPTH24_STENCIL8,\n      //   dataFormat: GL.DEPTH_STENCIL,\n      //   type: GL.UNSIGNED_INT_24_8,\n      //   width,\n      //   height,\n      //   mipmaps: false\n      // });\n    } else if (depth) {\n      // Add a depth buffer if requested and not supplied\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth`,\n        format: GL.DEPTH_COMPONENT16,\n        width,\n        height\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.DEPTH_ATTACHMENT]);\n    } else if (stencil) {\n      // TODO - handle separate stencil\n      assert(false);\n    }\n\n    return defaultAttachments;\n  }\n\n  _unattach(attachment) {\n    const oldAttachment = this.attachments[attachment];\n    if (!oldAttachment) {\n      return;\n    }\n    if (oldAttachment instanceof Renderbuffer) {\n      // render buffer\n      this.gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, null);\n    } else {\n      // Must be a texture attachment\n      this.gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, null, 0);\n    }\n    delete this.attachments[attachment];\n  }\n\n  _attachRenderbuffer({attachment = GL.COLOR_ATTACHMENT0, renderbuffer}) {\n    const {gl} = this;\n    // TODO - is the bind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer.handle);\n    gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, renderbuffer.handle);\n    // TODO - is the unbind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.attachments[attachment] = renderbuffer;\n  }\n\n  // layer = 0 - index into Texture2DArray and Texture3D or face for `TextureCubeMap`\n  // level = 0 - mipmapLevel (must be 0 in WebGL1)\n  _attachTexture({attachment = GL.COLOR_ATTACHMENT0, texture, layer, level}) {\n    const {gl} = this;\n    gl.bindTexture(texture.target, texture.handle);\n\n    switch (texture.target) {\n      case GL.TEXTURE_2D_ARRAY:\n      case GL.TEXTURE_3D:\n        gl.framebufferTextureLayer(GL.FRAMEBUFFER, attachment, texture.target, level, layer);\n        break;\n\n      case GL.TEXTURE_CUBE_MAP:\n        // layer must be a cubemap face (or if index, converted to cube map face)\n        const face = mapIndexToCubeMapFace(layer);\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, face, texture.handle, level);\n        break;\n\n      case GL.TEXTURE_2D:\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, texture.handle, level);\n        break;\n\n      default:\n        assert(false, 'Illegal texture type');\n    }\n\n    gl.bindTexture(texture.target, null);\n    this.attachments[attachment] = texture;\n  }\n\n  // Expects framebuffer to be bound\n  _setReadBuffer(readBuffer) {\n    const {gl} = this;\n    if (isWebGL2(gl)) {\n      gl.readBuffer(readBuffer);\n    } else {\n      // Setting to color attachment 0 is a noop, so allow it in WebGL1\n      assert(\n        readBuffer === GL.COLOR_ATTACHMENT0 || readBuffer === GL.BACK,\n        ERR_MULTIPLE_RENDERTARGETS\n      );\n    }\n    this.readBuffer = readBuffer;\n  }\n\n  // Expects framebuffer to be bound\n  _setDrawBuffers(drawBuffers) {\n    const {gl} = this;\n    if (isWebGL2(gl)) {\n      gl.drawBuffers(drawBuffers);\n    } else {\n      const ext = gl.getExtension('WEBGL.draw_buffers');\n      if (ext) {\n        ext.drawBuffersWEBGL(drawBuffers);\n      } else {\n        // Setting a single draw buffer to color attachment 0 is a noop, allow in WebGL1\n        assert(\n          drawBuffers.length === 1 &&\n            (drawBuffers[0] === GL.COLOR_ATTACHMENT0 || drawBuffers[0] === GL.BACK),\n          ERR_MULTIPLE_RENDERTARGETS\n        );\n      }\n    }\n    this.drawBuffers = drawBuffers;\n  }\n\n  // Attempt to provide workable defaults for WebGL2 symbols under WebGL1\n  // null means OK to query\n  // TODO - move to webgl1 polyfills\n  /* eslint-disable complexity */\n  _getAttachmentParameterFallback(pname) {\n    const caps = getFeatures(this.gl);\n\n    switch (pname) {\n      case GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: // GLint\n        return !caps.webgl2 ? 0 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: // GLint\n        return !caps.webgl2 ? 8 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: // GLenum\n        return !caps.webgl2 ? GL.UNSIGNED_INT : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:\n        return !caps.webgl2 && !caps.EXT_sRGB ? GL.LINEAR : null;\n      default:\n        return null;\n    }\n  }\n  /* eslint-enable complexity */\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createFramebuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteFramebuffer(this.handle);\n  }\n\n  _bindHandle(handle) {\n    return this.gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  }\n}\n\n// PUBLIC METHODS\n\n// Map an index to a cube map face constant\nfunction mapIndexToCubeMapFace(layer) {\n  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)\n  // if smaller assume layer is index, otherwise assume it is already a cube map face constant\n  return layer < GL.TEXTURE_CUBE_MAP_POSITIVE_X ? layer + GL.TEXTURE_CUBE_MAP_POSITIVE_X : layer;\n}\n\n// Helper METHODS\n// Get a string describing the framebuffer error if installed\nfunction _getFrameBufferStatus(status) {\n  // Use error mapping if installed\n  const STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || `Framebuffer error ${status}`;\n}\n\nexport const FRAMEBUFFER_ATTACHMENT_PARAMETERS = [\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, // WebGLRenderbuffer or WebGLTexture\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, // GL.RENDERBUFFER, GL.TEXTURE, GL.NONE\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, // GL.TEXTURE_CUBE_MAP_POSITIVE_X, etc.\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, // GLint\n  // EXT_sRGB or WebGL2\n  GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, // GL.LINEAR, GL.SRBG\n  // WebGL2\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE // GLint\n  // GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE\n  // GL.FLOAT, GL.INT, GL.UNSIGNED_INT, GL.SIGNED_NORMALIZED, OR GL.UNSIGNED_NORMALIZED.\n];\n\nFramebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;\n","import {Log} from 'probe.gl';\n\nexport default new Log({id: 'luma'}).enable();\n","import GL from '@luma.gl/constants';\nimport {getTypedArrayFromGLType} from '../webgl-utils';\nimport {checkProps, assert} from '../utils';\n\nconst DEFAULT_ACCESSOR_VALUES = {\n  offset: 0,\n  stride: 0,\n  type: GL.FLOAT,\n  size: 1,\n  divisor: 0,\n  normalized: false,\n  integer: false\n};\n\nconst PROP_CHECKS = {\n  deprecatedProps: {\n    instanced: 'divisor',\n    isInstanced: 'divisor'\n  }\n};\n\nexport default class Accessor {\n  static getBytesPerElement(accessor) {\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || GL.FLOAT);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n\n  static getBytesPerVertex(accessor) {\n    assert(accessor.size);\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || GL.FLOAT);\n    return ArrayType.BYTES_PER_ELEMENT * accessor.size;\n  }\n\n  // Combines (merges) a list of accessors. On top of default values\n  // Usually [programAccessor, bufferAccessor, appAccessor]\n  // All props will be set in the returned object.\n  // TODO check for conflicts between values in the supplied accessors\n  static resolve(...accessors) {\n    return new Accessor(...[DEFAULT_ACCESSOR_VALUES, ...accessors]); // Default values\n  }\n\n  constructor(...accessors) {\n    accessors.forEach(accessor => this._assign(accessor)); // Merge in sequence\n    Object.freeze(this);\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  // ACCESSORS\n\n  // TODO - remove>\n  get BYTES_PER_ELEMENT() {\n    return Accessor.getBytesPerElement(this);\n  }\n\n  get BYTES_PER_VERTEX() {\n    return Accessor.getBytesPerVertex(this);\n  }\n\n  // PRIVATE\n\n  // eslint-disable-next-line complexity, max-statements\n  _assign(props = {}) {\n    props = checkProps('Accessor', props, PROP_CHECKS);\n\n    if (props.type !== undefined) {\n      this.type = props.type;\n\n      // Auto-deduce integer type?\n      if (props.type === GL.INT || props.type === GL.UNSIGNED_INT) {\n        this.integer = true;\n      }\n    }\n    if (props.size !== undefined) {\n      this.size = props.size;\n    }\n    if (props.offset !== undefined) {\n      this.offset = props.offset;\n    }\n    if (props.stride !== undefined) {\n      this.stride = props.stride;\n    }\n    if (props.normalized !== undefined) {\n      this.normalized = props.normalized;\n    }\n    if (props.integer !== undefined) {\n      this.integer = props.integer;\n    }\n\n    // INSTANCE DIVISOR\n    if (props.divisor !== undefined) {\n      this.divisor = props.divisor;\n    }\n\n    // Buffer is optional\n    if (props.buffer !== undefined) {\n      this.buffer = props.buffer;\n    }\n\n    // The binding index (for binding e.g. Transform feedbacks and Uniform buffers)\n    // TODO - should this be part of accessor?\n    if (props.index !== undefined) {\n      if (typeof index === 'boolean') {\n        this.index = props.index ? 1 : 0;\n      } else {\n        this.index = props.index;\n      }\n    }\n\n    // DEPRECATED\n    if (props.instanced !== undefined) {\n      this.divisor = props.instanced ? 1 : 0;\n    }\n    if (props.isInstanced !== undefined) {\n      this.divisor = props.isInstanced ? 1 : 0;\n    }\n\n    return this;\n  }\n}\n\n// TEST EXPORTS\nexport {DEFAULT_ACCESSOR_VALUES};\n","// Provides a unified API for getting and setting any WebGL parameter\n// Also knows default values of all parameters, enabling fast cache initialization\n// Provides base functionality for the state caching.\nimport {\n  GL_PARAMETER_DEFAULTS,\n  GL_PARAMETER_SETTERS,\n  GL_COMPOSITE_PARAMETER_SETTERS,\n  GL_PARAMETER_GETTERS\n} from './webgl-parameter-tables';\n\nimport deepArrayEqual from '../utils/deep-array-equal';\nimport {assert} from '../utils';\n\n// PUBLIC METHODS\n\n// Sets any single GL parameter regardless of function (gl.getParameter/gl.isEnabled...)\n// Returns the previous value\n// Note: limited to parameter values\nexport function setParameter(gl, key, value) {\n  const getter = GL_PARAMETER_GETTERS[key];\n  const prevValue = getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));\n  const setter = GL_PARAMETER_SETTERS[key];\n  assert(typeof setter === 'function');\n  setter(gl, value, Number(key));\n  return prevValue;\n}\n\n// Sets any GL parameter regardless of function (gl.blendMode, ...)\n// Note: requires a `cache` object to be set on the context (gl.state.cache)\n// This object is used to fill in any missing values for composite setter functions\nexport function setParameters(gl, values) {\n  const compositeSetters = {};\n\n  // HANDLE PRIMITIVE SETTERS (and make note of any composite setters)\n\n  for (const key in values) {\n    const glConstant = Number(key);\n    const setter = GL_PARAMETER_SETTERS[key];\n    if (setter) {\n      // Composite setters should only be called once, so save them\n      if (typeof setter === 'string') {\n        compositeSetters[setter] = true;\n      } else {\n        // if (gl[glConstant] !== undefined) {\n        // TODO - added above check since this is being called on WebGL2 values in WebGL1...\n        // TODO - deep equal on values? only call setter if value has changed?\n        // NOTE - the setter will automatically update this.state\n        setter(gl, values[key], glConstant);\n      }\n    }\n  }\n\n  // HANDLE COMPOSITE SETTERS\n\n  // NOTE: any non-provided values needed by composite setters are filled in from state cache\n  // The cache parameter is automatically retrieved from the context\n  // This depends on `trackContextState`, which is technically a \"circular\" dependency.\n  // But it is too inconvenient to always require a cache parameter here.\n  // This is the ONLY external dependency in this module/\n  const cache = gl.state && gl.state.cache;\n  if (cache) {\n    const mergedValues = Object.assign({}, cache, values);\n\n    for (const key in compositeSetters) {\n      // TODO - avoid calling composite setters if values have not changed.\n      const compositeSetter = GL_COMPOSITE_PARAMETER_SETTERS[key];\n      // Note - if `trackContextState` has been called,\n      // the setter will automatically update this.state.cache\n      compositeSetter(gl, mergedValues);\n    }\n  }\n  // Add a log for the else case?\n}\n\n// Queries any single GL parameter regardless of function (gl.getParameter/gl.isEnabled...)\nexport function getParameter(gl, key) {\n  const getter = GL_PARAMETER_GETTERS[key];\n  return getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));\n}\n\n// Copies the state from a context (gl.getParameter should not be overriden)\n// Reads the entire WebGL state from a context\n// Caveat: This generates a huge amount of synchronous driver roundtrips and should be\n// considered a very slow operation, to be used only if/when a context already manipulated\n// by external code needs to be synchronized for the first time\n// @return {Object} - a newly created map, with values keyed by GL parameters\nexport function getParameters(gl, parameters) {\n  // default to querying all parameters\n  parameters = parameters || GL_PARAMETER_DEFAULTS;\n  // support both arrays of parameters and objects (keys represent parameters)\n  const parameterKeys = Array.isArray(parameters) ? parameters : Object.keys(parameters);\n\n  const state = {};\n  for (const key of parameterKeys) {\n    state[key] = getParameter(gl, key);\n  }\n  return state;\n}\n\nexport function getDefaultParameters(gl) {\n  // TODO - Query GL.VIEWPORT and GL.SCISSOR_BOX since these are dynamic\n  return Object.assign({}, GL_PARAMETER_DEFAULTS, {\n    // TODO: For viewport and scissor default values are set at the time of\n    // context creation based on canvas size, we can query them here but it will\n    // not match with what we have in GL_PARAMETER_DEFAULTS table, we should revisit.\n    // [GL.VIEWPORT]: gl.constructor.prototype.getParameter.call(gl, GL.VIEWPORT),\n    // [GL.SCISSOR_BOX]: gl.constructor.prototype.getParameter.call(gl, GL.SCISSOR_BOX)\n  });\n}\n\n// Reset all parameters to a pure context state\nexport function resetParameters(gl) {\n  setParameters(gl, getDefaultParameters(gl));\n}\n\n// Get all parameters that have been modified from a pure context state\nexport function getModifiedParameters(gl) {\n  const values = getParameters(gl, Object.keys(GL_PARAMETER_DEFAULTS));\n  const modified = {};\n  for (const key in GL_PARAMETER_DEFAULTS) {\n    if (!deepArrayEqual(values[key], GL_PARAMETER_DEFAULTS[key])) {\n      modified[key] = values[key];\n    }\n  }\n  return modified;\n}\n","// Tables describing WebGL parameters\nimport GL from '@luma.gl/constants';\nimport {isWebGL2} from '../utils';\n\n// DEFAULT SETTINGS - FOR FAST CACHE INITIALIZATION AND CONTEXT RESETS\n\nexport const GL_PARAMETER_DEFAULTS = {\n  [GL.BLEND]: false,\n  [GL.BLEND_COLOR]: new Float32Array([0, 0, 0, 0]),\n  [GL.BLEND_EQUATION_RGB]: GL.FUNC_ADD,\n  [GL.BLEND_EQUATION_ALPHA]: GL.FUNC_ADD,\n  [GL.BLEND_SRC_RGB]: GL.ONE,\n  [GL.BLEND_DST_RGB]: GL.ZERO,\n  [GL.BLEND_SRC_ALPHA]: GL.ONE,\n  [GL.BLEND_DST_ALPHA]: GL.ZERO,\n  [GL.COLOR_CLEAR_VALUE]: new Float32Array([0, 0, 0, 0]), // TBD\n  [GL.COLOR_WRITEMASK]: [true, true, true, true],\n  [GL.CULL_FACE]: false,\n  [GL.CULL_FACE_MODE]: GL.BACK,\n  [GL.DEPTH_TEST]: false,\n  [GL.DEPTH_CLEAR_VALUE]: 1,\n  [GL.DEPTH_FUNC]: GL.LESS,\n  [GL.DEPTH_RANGE]: new Float32Array([0, 1]), // TBD\n  [GL.DEPTH_WRITEMASK]: true,\n  [GL.DITHER]: true,\n  // FRAMEBUFFER_BINDING and DRAW_FRAMEBUFFER_BINDING(WebGL2) refer same state.\n  [GL.FRAMEBUFFER_BINDING]: null,\n  [GL.FRONT_FACE]: GL.CCW,\n  [GL.GENERATE_MIPMAP_HINT]: GL.DONT_CARE,\n  [GL.LINE_WIDTH]: 1,\n  [GL.POLYGON_OFFSET_FILL]: false,\n  [GL.POLYGON_OFFSET_FACTOR]: 0,\n  [GL.POLYGON_OFFSET_UNITS]: 0,\n  [GL.SAMPLE_COVERAGE_VALUE]: 1.0,\n  [GL.SAMPLE_COVERAGE_INVERT]: false,\n  [GL.SCISSOR_TEST]: false,\n  // Note: Dynamic value. If scissor test enabled we expect users to set correct scissor box\n  [GL.SCISSOR_BOX]: new Int32Array([0, 0, 1024, 1024]),\n  [GL.STENCIL_TEST]: false,\n  [GL.STENCIL_CLEAR_VALUE]: 0,\n  [GL.STENCIL_WRITEMASK]: 0xffffffff,\n  [GL.STENCIL_BACK_WRITEMASK]: 0xffffffff,\n  [GL.STENCIL_FUNC]: GL.ALWAYS,\n  [GL.STENCIL_REF]: 0,\n  [GL.STENCIL_VALUE_MASK]: 0xffffffff,\n  [GL.STENCIL_BACK_FUNC]: GL.ALWAYS,\n  [GL.STENCIL_BACK_REF]: 0,\n  [GL.STENCIL_BACK_VALUE_MASK]: 0xffffffff,\n  [GL.STENCIL_FAIL]: GL.KEEP,\n  [GL.STENCIL_PASS_DEPTH_FAIL]: GL.KEEP,\n  [GL.STENCIL_PASS_DEPTH_PASS]: GL.KEEP,\n  [GL.STENCIL_BACK_FAIL]: GL.KEEP,\n  [GL.STENCIL_BACK_PASS_DEPTH_FAIL]: GL.KEEP,\n  [GL.STENCIL_BACK_PASS_DEPTH_PASS]: GL.KEEP,\n  // Dynamic value: We use [0, 0, 1024, 1024] as default, but usually this is updated in each frame.\n  [GL.VIEWPORT]: new Int32Array([0, 0, 1024, 1024]),\n  // WEBGL1 PIXEL PACK/UNPACK MODES\n  [GL.PACK_ALIGNMENT]: 4,\n  [GL.UNPACK_ALIGNMENT]: 4,\n  [GL.UNPACK_FLIP_Y_WEBGL]: false,\n  [GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL]: false,\n  [GL.UNPACK_COLORSPACE_CONVERSION_WEBGL]: GL.BROWSER_DEFAULT_WEBGL,\n\n  // WEBGL2 / EXTENSIONS\n  // gl1: 'OES_standard_derivatives'\n  [GL.FRAGMENT_SHADER_DERIVATIVE_HINT]: GL.DONT_CARE,\n  [GL.READ_FRAMEBUFFER_BINDING]: null,\n  [GL.RASTERIZER_DISCARD]: false,\n  [GL.PACK_ROW_LENGTH]: 0,\n  [GL.PACK_SKIP_PIXELS]: 0,\n  [GL.PACK_SKIP_ROWS]: 0,\n  [GL.UNPACK_ROW_LENGTH]: 0,\n  [GL.UNPACK_IMAGE_HEIGHT]: 0,\n  [GL.UNPACK_SKIP_PIXELS]: 0,\n  [GL.UNPACK_SKIP_ROWS]: 0,\n  [GL.UNPACK_SKIP_IMAGES]: 0\n};\n\n// SETTER TABLES - ENABLES SETTING ANY PARAMETER WITH A COMMON API\n\nconst enable = (gl, value, key) => (value ? gl.enable(key) : gl.disable(key));\nconst hint = (gl, value, key) => gl.hint(key, value);\nconst pixelStorei = (gl, value, key) => gl.pixelStorei(key, value);\n\nconst drawFramebuffer = (gl, value) => {\n  const target = isWebGL2(gl) ? GL.DRAW_FRAMEBUFFER : GL.FRAMEBUFFER;\n  return gl.bindFramebuffer(target, value);\n};\nconst readFramebuffer = (gl, value) => {\n  return gl.bindFramebuffer(GL.READ_FRAMEBUFFER, value);\n};\n\n// Map from WebGL parameter names to corresponding WebGL setter functions\n// WegGL constants are read by parameter names, but set by function names\n// NOTE: When value type is a string, it will be handled by 'GL_COMPOSITE_PARAMETER_SETTERS'\nexport const GL_PARAMETER_SETTERS = {\n  [GL.BLEND]: enable,\n  [GL.BLEND_COLOR]: (gl, value) => gl.blendColor(...value),\n  [GL.BLEND_EQUATION_RGB]: 'blendEquation',\n  [GL.BLEND_EQUATION_ALPHA]: 'blendEquation',\n  [GL.BLEND_SRC_RGB]: 'blendFunc',\n  [GL.BLEND_DST_RGB]: 'blendFunc',\n  [GL.BLEND_SRC_ALPHA]: 'blendFunc',\n  [GL.BLEND_DST_ALPHA]: 'blendFunc',\n  [GL.COLOR_CLEAR_VALUE]: (gl, value) => gl.clearColor(...value),\n  [GL.COLOR_WRITEMASK]: (gl, value) => gl.colorMask(...value),\n  [GL.CULL_FACE]: enable,\n  [GL.CULL_FACE_MODE]: (gl, value) => gl.cullFace(value),\n  [GL.DEPTH_TEST]: enable,\n  [GL.DEPTH_CLEAR_VALUE]: (gl, value) => gl.clearDepth(value),\n  [GL.DEPTH_FUNC]: (gl, value) => gl.depthFunc(value),\n  [GL.DEPTH_RANGE]: (gl, value) => gl.depthRange(...value),\n  [GL.DEPTH_WRITEMASK]: (gl, value) => gl.depthMask(value),\n  [GL.DITHER]: enable,\n  [GL.FRAGMENT_SHADER_DERIVATIVE_HINT]: hint,\n  // NOTE: FRAMEBUFFER_BINDING and DRAW_FRAMEBUFFER_BINDING(WebGL2) refer same state.\n  [GL.FRAMEBUFFER_BINDING]: drawFramebuffer,\n  [GL.FRONT_FACE]: (gl, value) => gl.frontFace(value),\n  [GL.GENERATE_MIPMAP_HINT]: hint,\n  [GL.LINE_WIDTH]: (gl, value) => gl.lineWidth(value),\n  [GL.POLYGON_OFFSET_FILL]: enable,\n  [GL.POLYGON_OFFSET_FACTOR]: 'polygonOffset',\n  [GL.POLYGON_OFFSET_UNITS]: 'polygonOffset',\n  [GL.RASTERIZER_DISCARD]: enable,\n  [GL.SAMPLE_COVERAGE_VALUE]: 'sampleCoverage',\n  [GL.SAMPLE_COVERAGE_INVERT]: 'sampleCoverage',\n  [GL.SCISSOR_TEST]: enable,\n  [GL.SCISSOR_BOX]: (gl, value) => gl.scissor(...value),\n  [GL.STENCIL_TEST]: enable,\n  [GL.STENCIL_CLEAR_VALUE]: (gl, value) => gl.clearStencil(value),\n  [GL.STENCIL_WRITEMASK]: (gl, value) => gl.stencilMaskSeparate(GL.FRONT, value),\n  [GL.STENCIL_BACK_WRITEMASK]: (gl, value) => gl.stencilMaskSeparate(GL.BACK, value),\n  [GL.STENCIL_FUNC]: 'stencilFuncFront',\n  [GL.STENCIL_REF]: 'stencilFuncFront',\n  [GL.STENCIL_VALUE_MASK]: 'stencilFuncFront',\n  [GL.STENCIL_BACK_FUNC]: 'stencilFuncBack',\n  [GL.STENCIL_BACK_REF]: 'stencilFuncBack',\n  [GL.STENCIL_BACK_VALUE_MASK]: 'stencilFuncBack',\n  [GL.STENCIL_FAIL]: 'stencilOpFront',\n  [GL.STENCIL_PASS_DEPTH_FAIL]: 'stencilOpFront',\n  [GL.STENCIL_PASS_DEPTH_PASS]: 'stencilOpFront',\n  [GL.STENCIL_BACK_FAIL]: 'stencilOpBack',\n  [GL.STENCIL_BACK_PASS_DEPTH_FAIL]: 'stencilOpBack',\n  [GL.STENCIL_BACK_PASS_DEPTH_PASS]: 'stencilOpBack',\n  [GL.VIEWPORT]: (gl, value) => gl.viewport(...value),\n\n  // WEBGL1 PIXEL PACK/UNPACK MODES\n  [GL.PACK_ALIGNMENT]: pixelStorei,\n  [GL.UNPACK_ALIGNMENT]: pixelStorei,\n  [GL.UNPACK_FLIP_Y_WEBGL]: pixelStorei,\n  [GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL]: pixelStorei,\n  [GL.UNPACK_COLORSPACE_CONVERSION_WEBGL]: pixelStorei,\n\n  // WEBGL2 PIXEL PACK/UNPACK MODES\n  // RASTERIZER_DISCARD ...\n  [GL.PACK_ROW_LENGTH]: pixelStorei,\n  [GL.PACK_SKIP_PIXELS]: pixelStorei,\n  [GL.PACK_SKIP_ROWS]: pixelStorei,\n  [GL.READ_FRAMEBUFFER_BINDING]: readFramebuffer,\n  [GL.UNPACK_ROW_LENGTH]: pixelStorei,\n  [GL.UNPACK_IMAGE_HEIGHT]: pixelStorei,\n  [GL.UNPACK_SKIP_PIXELS]: pixelStorei,\n  [GL.UNPACK_SKIP_ROWS]: pixelStorei,\n  [GL.UNPACK_SKIP_IMAGES]: pixelStorei\n};\n\n// COMPOSITE_WEBGL_PARAMETER_\nexport const GL_COMPOSITE_PARAMETER_SETTERS = {\n  blendEquation: (gl, values) =>\n    gl.blendEquationSeparate(values[GL.BLEND_EQUATION_RGB], values[GL.BLEND_EQUATION_ALPHA]),\n  blendFunc: (gl, values) =>\n    gl.blendFuncSeparate(\n      values[GL.BLEND_SRC_RGB],\n      values[GL.BLEND_DST_RGB],\n      values[GL.BLEND_SRC_ALPHA],\n      values[GL.BLEND_DST_ALPHA]\n    ),\n  polygonOffset: (gl, values) =>\n    gl.polygonOffset(values[GL.POLYGON_OFFSET_FACTOR], values[GL.POLYGON_OFFSET_UNITS]),\n  sampleCoverage: (gl, values) =>\n    gl.sampleCoverage(values[GL.SAMPLE_COVERAGE_VALUE], values[GL.SAMPLE_COVERAGE_INVERT]),\n  stencilFuncFront: (gl, values) =>\n    gl.stencilFuncSeparate(\n      GL.FRONT,\n      values[GL.STENCIL_FUNC],\n      values[GL.STENCIL_REF],\n      values[GL.STENCIL_VALUE_MASK]\n    ),\n  stencilFuncBack: (gl, values) =>\n    gl.stencilFuncSeparate(\n      GL.BACK,\n      values[GL.STENCIL_BACK_FUNC],\n      values[GL.STENCIL_BACK_REF],\n      values[GL.STENCIL_BACK_VALUE_MASK]\n    ),\n  stencilOpFront: (gl, values) =>\n    gl.stencilOpSeparate(\n      GL.FRONT,\n      values[GL.STENCIL_FAIL],\n      values[GL.STENCIL_PASS_DEPTH_FAIL],\n      values[GL.STENCIL_PASS_DEPTH_PASS]\n    ),\n  stencilOpBack: (gl, values) =>\n    gl.stencilOpSeparate(\n      GL.BACK,\n      values[GL.STENCIL_BACK_FAIL],\n      values[GL.STENCIL_BACK_PASS_DEPTH_FAIL],\n      values[GL.STENCIL_BACK_PASS_DEPTH_PASS]\n    )\n};\n\n// GETTER TABLE - FOR READING OUT AN ENTIRE CONTEXT\n\nconst isEnabled = (gl, key) => gl.isEnabled(key);\n\n// Exceptions for any keys that cannot be queried by gl.getParameters\nexport const GL_PARAMETER_GETTERS = {\n  [GL.BLEND]: isEnabled,\n  [GL.CULL_FACE]: isEnabled,\n  [GL.DEPTH_TEST]: isEnabled,\n  [GL.DITHER]: isEnabled,\n  [GL.POLYGON_OFFSET_FILL]: isEnabled,\n  [GL.SAMPLE_ALPHA_TO_COVERAGE]: isEnabled,\n  [GL.SAMPLE_COVERAGE]: isEnabled,\n  [GL.SCISSOR_TEST]: isEnabled,\n  [GL.STENCIL_TEST]: isEnabled,\n\n  // WebGL 2\n  [GL.RASTERIZER_DISCARD]: isEnabled\n};\n","export default function assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'webgl2-polyfill: assertion failed.');\n  }\n}\n","// This function is needed in initialization stages,\n// make sure it can be imported in isolation\n/* global process */\n\nimport isElectron from './is-electron';\n\nconst isNode =\n  typeof process === 'object' && String(process) === '[object process]' && !process.browser;\n\nconst isBrowser = !isNode || isElectron;\n\n// document does not exist on worker thread\nexport const isBrowserMainThread = isBrowser && typeof document !== 'undefined';\n\nexport default isBrowser;\n","import GL from '@luma.gl/constants';\nimport {isWebGL2} from '../webgl-utils';\n\n// const S3TC = 'WEBGL_compressed_texture_s3tc';\n// const PVRTC = 'WEBGL_compressed_texture_pvrtc';\n// const ES3 = 'WEBGL_compressed_texture_es3';\n// const ETC1 = 'WEBGL_compressed_texture_etc1';\n// const SRGB = 'EXT_sRGB';\n// const DEPTH = 'WEBGL_depth_texture';\n\n// Legal combinations for internalFormat, format and type\nexport const TEXTURE_FORMATS = {\n  // Unsized texture format - more performance\n  [GL.RGB]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5]},\n  // TODO: format: GL.RGBA type: GL.FLOAT is supported in WebGL1 when 'OES_texure_float' is suported\n  // we need to update this table structure to specify extensions (gl1: 'OES_texure_float', gl2: false) for each type.\n  [GL.RGBA]: {\n    dataFormat: GL.RGBA,\n    types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4, GL.UNSIGNED_SHORT_5_5_5_1]\n  },\n  [GL.ALPHA]: {dataFormat: GL.ALPHA, types: [GL.UNSIGNED_BYTE]},\n  [GL.LUMINANCE]: {dataFormat: GL.LUMINANCE, types: [GL.UNSIGNED_BYTE]},\n  [GL.LUMINANCE_ALPHA]: {dataFormat: GL.LUMINANCE_ALPHA, types: [GL.UNSIGNED_BYTE]},\n\n  // 32 bit floats\n  [GL.R32F]: {dataFormat: GL.RED, types: [GL.FLOAT], gl2: true},\n  [GL.RG32F]: {dataFormat: GL.RG, types: [GL.FLOAT], gl2: true},\n  [GL.RGB32F]: {dataFormat: GL.RGB, types: [GL.FLOAT], gl2: true},\n  [GL.RGBA32F]: {dataFormat: GL.RGBA, types: [GL.FLOAT], gl2: true}\n\n  // [GL.DEPTH_COMPONENT]: {types: [GL.UNSIGNED_SHORT, GL.UNSIGNED_INT, GL.UNSIGNED_INT_24_8], gl1: DEPTH},\n  // [GL.DEPTH_STENCIL]: {gl1: DEPTH},\n\n  // Sized texture format - more performance\n  // R\n  // [GL.R8]: {dataFormat: GL.RED, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // [GL.R16F]: {dataFormat: GL.RED, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.R8UI]: {dataFormat: GL.RED_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RG\n  // [GL.RG8]: {dataFormat: GL.RG, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // [GL.RG16F]: {dataFormat: GL.RG, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RG8UI]: {dataFormat: GL.RG_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RGB\n  // [GL.RGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.SRGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.RGB565]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5], gl2: true},\n  // [GL.R11F_G11F_B10F]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_INT_10F_11F_11F_REV, GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RGB9_E5]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_half_float'},\n  // [GL.RGB16F]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_float'},\n  // [GL.RGB8UI]: {dataFormat: GL.RGB_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RGBA\n  // [GL.RGBA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.SRGB8_ALPHA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.RGB5_A1]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_5_5_1], gl2: true},\n  // [GL.RGBA4]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4], gl2: true},\n  // [GL.RGBA16F]: {dataFormat: GL.RGBA, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RGBA8UI]: {dataFormat: GL.RGBA_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true}\n\n  // Compressed formats\n\n  // WEBGL_compressed_texture_s3tc\n\n  // [GL.COMPRESSED_RGB_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT3_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT5_EXT]: {compressed: true, gl1: S3TC},\n\n  // WEBGL_compressed_texture_es3\n\n  // [GL.COMPRESSED_R11_EAC]: {compressed: true, gl1: ES3}, // RED\n  // [GL.COMPRESSED_SIGNED_R11_EAC]: {compressed: true, gl1: ES3}, // RED\n  // [GL.COMPRESSED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG\n  // [GL.COMPRESSED_SIGNED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG\n  // [GL.COMPRESSED_RGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB\n  // [GL.COMPRESSED_RGBA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RBG\n  // [GL.COMPRESSED_SRGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB\n  // [GL.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RGBA\n  // [GL.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA\n  // [GL.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA\n  /* WebGL2 guaranteed availability compressed formats?\n  COMPRESSED_R11_EAC RED\n  COMPRESSED_SIGNED_R11_EAC RED\n  COMPRESSED_RG11_EAC RG\n  COMPRESSED_SIGNED_RG11_EAC RG\n  COMPRESSED_RGB8_ETC2 RGB\n  COMPRESSED_SRGB8_ETC2 RGB\n  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA\n  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA\n  COMPRESSED_RGBA8_ETC2_EAC RGBA\n  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\n  */\n\n  // WEBGL_compressed_texture_pvrtc\n\n  // [GL.COMPRESSED_RGB_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGB_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n\n  // WEBGL_compressed_texture_etc1\n\n  // [GL.COMPRESSED_RGB_ETC1_WEBGL]: {compressed: true, gl1: ETC1},\n\n  // WEBGL_compressed_texture_atc\n\n  // [GL.COMPRESSED_RGB_ATC_WEBGL]: {compressed: true, gl1: ETC1},\n  // [GL.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL]: {compressed: true, gl1: ETC1},\n  // [GL.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL]: {compressed: true, gl1: ETC1}\n};\n\nexport const DATA_FORMAT_CHANNELS = {\n  [GL.RED]: 1,\n  [GL.RED_INTEGER]: 1,\n  [GL.RG]: 2,\n  [GL.RG_INTEGER]: 2,\n  [GL.RGB]: 3,\n  [GL.RGB_INTEGER]: 3,\n  [GL.RGBA]: 4,\n  [GL.RGBA_INTEGER]: 4,\n  [GL.DEPTH_COMPONENT]: 1,\n  [GL.DEPTH_STENCIL]: 1,\n  [GL.ALPHA]: 1,\n  [GL.LUMINANCE]: 1,\n  [GL.LUMINANCE_ALPHA]: 2\n};\n\nexport const TYPE_SIZES = {\n  [GL.FLOAT]: 4,\n  [GL.UNSIGNED_INT]: 4,\n  [GL.INT]: 4,\n  [GL.UNSIGNED_SHORT]: 2,\n  [GL.SHORT]: 2,\n  [GL.HALF_FLOAT]: 2,\n  [GL.BYTE]: 1,\n  [GL.UNSIGNED_BYTE]: 1\n};\n\nexport function isFormatSupported(gl, format) {\n  const info = TEXTURE_FORMATS[format];\n  if (!info) {\n    return false;\n  }\n  if (info.gl1 === undefined && info.gl2 === undefined) {\n    // No info - always supported\n    return true;\n  }\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n  return typeof value === 'string' ? gl.getExtension(value) : value;\n}\n\nexport function isLinearFilteringSupported(gl, format) {\n  const info = TEXTURE_FORMATS[format];\n  switch (info && info.types[0]) {\n    // Both WebGL1 and WebGL2?\n    case GL.FLOAT:\n      return gl.getExtension('OES_texture_float_linear');\n    // Not in WebGL2?\n    case GL.HALF_FLOAT:\n      return gl.getExtension('OES_texture_half_float_linear');\n    default:\n      return true;\n  }\n}\n","import GL from '@luma.gl/constants';\nimport Texture from './texture';\nimport {assertWebGLContext} from '../webgl-utils';\nimport {loadImage} from '../utils/load-file';\n\nexport default class Texture2D extends Texture {\n  static isSupported(gl, opts) {\n    return Texture.isSupported(gl, opts);\n  }\n\n  constructor(gl, props = {}) {\n    assertWebGLContext(gl);\n\n    // Signature: new Texture2D(gl, url | Promise)\n    if (props instanceof Promise || typeof props === 'string') {\n      props = {data: props};\n    }\n\n    // Signature: new Texture2D(gl, {data: url})\n    if (typeof props.data === 'string') {\n      props = Object.assign({}, props, {data: loadImage(props.data)});\n    }\n\n    super(gl, Object.assign({}, props, {target: GL.TEXTURE_2D}));\n\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n}\n","import GL from '@luma.gl/constants';\n\n// Define local extension strings to optimize minification\n// const SRGB = 'EXT_sRGB';\n// const EXT_FLOAT_WEBGL1 = 'WEBGL.color_buffer_float';\nconst EXT_FLOAT_WEBGL2 = 'EXT_color_buffer_float';\n// const EXT_HALF_FLOAT_WEBGL1 = 'EXT_color_buffer_half_float';\n\n// NOTE(Tarek): bpp === \"bytes per pixel\", used for\n// memory usage calculations.\nexport default {\n  [GL.DEPTH_COMPONENT16]: {bpp: 2}, // 16 depth bits.\n  [GL.DEPTH_COMPONENT24]: {gl2: true, bpp: 3},\n  [GL.DEPTH_COMPONENT32F]: {gl2: true, bpp: 4},\n\n  [GL.STENCIL_INDEX8]: {bpp: 1}, // 8 stencil bits.\n\n  [GL.DEPTH_STENCIL]: {bpp: 4},\n  [GL.DEPTH24_STENCIL8]: {gl2: true, bpp: 4},\n  [GL.DEPTH32F_STENCIL8]: {gl2: true, bpp: 5},\n\n  // When using a WebGL 1 context, color renderbuffer formats are limited\n  [GL.RGBA4]: {bpp: 2},\n  [GL.RGB565]: {bpp: 2},\n  [GL.RGB5_A1]: {bpp: 2},\n\n  // When using a WebGL 2 context, the following values are available additionally:\n  [GL.R8]: {gl2: true, bpp: 1},\n  [GL.R8UI]: {gl2: true, bpp: 1},\n  [GL.R8I]: {gl2: true, bpp: 1},\n  [GL.R16UI]: {gl2: true, bpp: 2},\n  [GL.R16I]: {gl2: true, bpp: 2},\n  [GL.R32UI]: {gl2: true, bpp: 4},\n  [GL.R32I]: {gl2: true, bpp: 4},\n  [GL.RG8]: {gl2: true, bpp: 2},\n  [GL.RG8UI]: {gl2: true, bpp: 2},\n  [GL.RG8I]: {gl2: true, bpp: 2},\n  [GL.RG16UI]: {gl2: true, bpp: 4},\n  [GL.RG16I]: {gl2: true, bpp: 4},\n  [GL.RG32UI]: {gl2: true, bpp: 8},\n  [GL.RG32I]: {gl2: true, bpp: 8},\n  [GL.RGB8]: {gl2: true, bpp: 3},\n  [GL.RGBA8]: {gl2: true, bpp: 4},\n  // [GL.SRGB8_ALPHA8]: {gl2: true, gl1: SRGB}, // When using the EXT_sRGB WebGL1 extension\n  [GL.RGB10_A2]: {gl2: true, bpp: 4},\n  [GL.RGBA8UI]: {gl2: true, bpp: 4},\n  [GL.RGBA8I]: {gl2: true, bpp: 4},\n  [GL.RGB10_A2UI]: {gl2: true, bpp: 4},\n  [GL.RGBA16UI]: {gl2: true, bpp: 8},\n  [GL.RGBA16I]: {gl2: true, bpp: 8},\n  [GL.RGBA32I]: {gl2: true, bpp: 16},\n  [GL.RGBA32UI]: {gl2: true, bpp: 16},\n\n  // When using a WebGL 2 context and the EXT_color_buffer_float WebGL2 extension\n  [GL.R16F]: {gl2: EXT_FLOAT_WEBGL2, bpp: 2},\n  [GL.RG16F]: {gl2: EXT_FLOAT_WEBGL2, bpp: 4},\n  [GL.RGBA16F]: {gl2: EXT_FLOAT_WEBGL2, bpp: 8},\n  [GL.R32F]: {gl2: EXT_FLOAT_WEBGL2, bpp: 4},\n  [GL.RG32F]: {gl2: EXT_FLOAT_WEBGL2, bpp: 8},\n  // TODO - can't get WEBGL.color_buffer_float to work on renderbuffers\n  [GL.RGBA32F]: {gl2: EXT_FLOAT_WEBGL2, bpp: 16},\n  // [GL.RGBA32F]: {gl2: EXT_FLOAT_WEBGL2, gl1: EXT_FLOAT_WEBGL1},\n  [GL.R11F_G11F_B10F]: {gl2: EXT_FLOAT_WEBGL2, bpp: 4}\n};\n","/* eslint-disable no-inline-comments */\nimport GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport RENDERBUFFER_FORMATS from './renderbuffer-formats';\nimport {isWebGL2} from '../webgl-utils';\nimport {assert} from '../utils';\n\nfunction isFormatSupported(gl, format, formats) {\n  const info = formats[format];\n  if (!info) {\n    return false;\n  }\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n  if (typeof value === 'string') {\n    return gl.getExtension(value);\n  }\n  return value;\n}\n\nexport default class Renderbuffer extends Resource {\n  static isSupported(gl, {format} = {}) {\n    return !format || isFormatSupported(gl, format, RENDERBUFFER_FORMATS);\n  }\n\n  static getSamplesForFormat(gl, {format}) {\n    // Polyfilled to return [0] under WebGL1\n    return gl.getInternalformatParameter(GL.RENDERBUFFER, format, GL.SAMPLES);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  // Creates and initializes a renderbuffer object's data store\n  initialize({format, width = 1, height = 1, samples = 0}) {\n    assert(format, 'Needs format');\n\n    this._trackDeallocatedMemory();\n\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, this.handle);\n\n    if (samples !== 0 && isWebGL2(this.gl)) {\n      this.gl.renderbufferStorageMultisample(GL.RENDERBUFFER, samples, format, width, height);\n    } else {\n      this.gl.renderbufferStorage(GL.RENDERBUFFER, format, width, height);\n    }\n\n    // this.gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.format = format;\n    this.width = width;\n    this.height = height;\n    this.samples = samples;\n\n    this._trackAllocatedMemory(\n      this.width * this.height * (this.samples || 1) * RENDERBUFFER_FORMATS[this.format].bpp\n    );\n\n    return this;\n  }\n\n  resize({width, height}) {\n    // Don't resize if width/height haven't changed\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({width, height, format: this.format, samples: this.samples});\n    }\n    return this;\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createRenderbuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteRenderbuffer(this.handle);\n    this._trackDeallocatedMemory();\n  }\n\n  _bindHandle(handle) {\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, handle);\n  }\n\n  _syncHandle(handle) {\n    this.format = this.getParameter(GL.RENDERBUFFER_INTERNAL_FORMAT);\n    this.width = this.getParameter(GL.RENDERBUFFER_WIDTH);\n    this.height = this.getParameter(GL.RENDERBUFFER_HEIGHT);\n    this.samples = this.getParameter(GL.RENDERBUFFER_SAMPLES);\n  }\n\n  // @param {Boolean} opt.autobind=true - method call will bind/unbind object\n  // @returns {GLenum|GLint} - depends on pname\n  _getParameter(pname) {\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, this.handle);\n    const value = this.gl.getRenderbufferParameter(GL.RENDERBUFFER, pname);\n    // this.gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n    return value;\n  }\n}\n","import GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {isWebGL2, assertWebGL2Context} from '../webgl-utils';\nimport {log, isObjectEmpty} from '../utils';\n\n// NOTE: The `bindOnUse` flag is a major workaround:\n// See https://github.com/KhronosGroup/WebGL/issues/2346\n\nexport default class TransformFeedback extends Resource {\n  static isSupported(gl) {\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, props = {}) {\n    assertWebGL2Context(gl);\n    super(gl, props);\n\n    this.initialize(props);\n    this.stubRemovedMethods('TransformFeedback', 'v6.0', ['pause', 'resume']);\n    Object.seal(this);\n  }\n\n  initialize(props = {}) {\n    this.buffers = {};\n    this.unused = {};\n    this.configuration = null;\n    this.bindOnUse = true;\n\n    // Unbind any currently bound buffers\n    if (!isObjectEmpty(this.buffers)) {\n      this.bind(() => this._unbindBuffers());\n    }\n\n    this.setProps(props);\n    return this;\n  }\n\n  setProps(props) {\n    if ('program' in props) {\n      this.configuration = props.program && props.program.configuration;\n    }\n    if ('configuration' in props) {\n      this.configuration = props.configuration;\n    }\n    if ('bindOnUse' in props) {\n      props = props.bindOnUse;\n    }\n    if ('buffers' in props) {\n      this.setBuffers(props.buffers);\n    }\n  }\n\n  setBuffers(buffers = {}) {\n    this.bind(() => {\n      for (const bufferName in buffers) {\n        this.setBuffer(bufferName, buffers[bufferName]);\n      }\n    });\n    return this;\n  }\n\n  setBuffer(locationOrName, bufferOrParams) {\n    const location = this._getVaryingIndex(locationOrName);\n    const {buffer, byteSize, byteOffset} = this._getBufferParams(bufferOrParams);\n\n    if (location < 0) {\n      this.unused[locationOrName] = buffer;\n      log.warn(() => `${this.id} unused varying buffer ${locationOrName}`)();\n      return this;\n    }\n\n    this.buffers[location] = bufferOrParams;\n\n    // Need to avoid chrome bug where buffer that is already bound to a different target\n    // cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.\n    if (!this.bindOnUse) {\n      this._bindBuffer(location, buffer, byteOffset, byteSize);\n    }\n\n    return this;\n  }\n\n  begin(primitiveMode = GL.POINTS) {\n    this.gl.bindTransformFeedback(GL.TRANSFORM_FEEDBACK, this.handle);\n    this._bindBuffers();\n    this.gl.beginTransformFeedback(primitiveMode);\n    return this;\n  }\n\n  end() {\n    this.gl.endTransformFeedback();\n    this._unbindBuffers();\n    this.gl.bindTransformFeedback(GL.TRANSFORM_FEEDBACK, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _getBufferParams(bufferOrParams) {\n    let byteOffset;\n    let byteSize;\n    let buffer;\n    if (bufferOrParams instanceof Buffer === false) {\n      buffer = bufferOrParams.buffer;\n      byteSize = bufferOrParams.byteSize;\n      byteOffset = bufferOrParams.byteOffset;\n    } else {\n      buffer = bufferOrParams;\n    }\n    // to use bindBufferRange, either offset or size must be specified, use default value for the other.\n    if (byteOffset !== undefined || byteSize !== undefined) {\n      byteOffset = byteOffset || 0;\n      byteSize = byteSize || buffer.byteLength - byteOffset;\n    }\n    return {buffer, byteOffset, byteSize};\n  }\n\n  _getVaryingInfo(locationOrName) {\n    return this.configuration && this.configuration.getVaryingInfo(locationOrName);\n  }\n\n  _getVaryingIndex(locationOrName) {\n    if (this.configuration) {\n      return this.configuration.getVaryingInfo(locationOrName).location;\n    }\n    const location = Number(locationOrName);\n    return Number.isFinite(location) ? location : -1;\n  }\n\n  // Need to avoid chrome bug where buffer that is already bound to a different target\n  // cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.\n  _bindBuffers() {\n    if (this.bindOnUse) {\n      for (const bufferIndex in this.buffers) {\n        const {buffer, byteSize, byteOffset} = this._getBufferParams(this.buffers[bufferIndex]);\n        this._bindBuffer(bufferIndex, buffer, byteOffset, byteSize);\n      }\n    }\n  }\n\n  _unbindBuffers() {\n    if (this.bindOnUse) {\n      for (const bufferIndex in this.buffers) {\n        this._bindBuffer(bufferIndex, null);\n      }\n    }\n  }\n\n  _bindBuffer(index, buffer, byteOffset = 0, byteSize) {\n    const handle = buffer && buffer.handle;\n    if (!handle || byteSize === undefined) {\n      this.gl.bindBufferBase(GL.TRANSFORM_FEEDBACK_BUFFER, index, handle);\n    } else {\n      this.gl.bindBufferRange(GL.TRANSFORM_FEEDBACK_BUFFER, index, handle, byteOffset, byteSize);\n    }\n    return this;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createTransformFeedback();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTransformFeedback(this.handle);\n  }\n\n  _bindHandle(handle) {\n    this.gl.bindTransformFeedback(GL.TRANSFORM_FEEDBACK, this.handle);\n  }\n}\n","import React, {PureComponent} from 'react';\n\nexport default class InfoPanel extends PureComponent {\n  render() {\n    const { name, controls, sourceLink} = this.props;\n\n    return (\n      <div className=\"options-panel top-right\" tabIndex=\"0\">\n        <h3>{name}</h3>\n        <div className=\"control-panel\" dangerouslySetInnerHTML={{__html: controls}} />\n\n        {sourceLink && (\n          <div className=\"source-link\">\n            <a href={sourceLink} target=\"_new\">\n              {'View Code ↗'}\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","// Support for listening to context state changes and intercepting state queries\n//\n// NOTE: this system does not handle buffer bindings\nimport GL_STATE_SETTERS from './webgl-function-to-parameters-table';\nimport {GL_PARAMETER_DEFAULTS} from '../unified-parameter-api/webgl-parameter-tables';\nimport {setParameters, getParameters} from '../unified-parameter-api/unified-parameter-api';\nimport {assert, deepArrayEqual} from '../utils';\n\n// HELPER FUNCTIONS - INSTALL GET/SET INTERCEPTORS (SPYS) ON THE CONTEXT\n\n// Overrides a WebGLRenderingContext state \"getter\" function\n// to return values directly from cache\nfunction installGetterOverride(gl, functionName) {\n  // Get the original function from the WebGLRenderingContext\n  const originalGetterFunc = gl[functionName].bind(gl);\n\n  // Wrap it with a spy so that we can update our state cache when it gets called\n  gl[functionName] = function get(...params) {\n    const pname = params[0];\n\n    // WebGL limits are not prepopulated in the cache, we must\n    // query first time. They are all primitive (single value)\n    if (!(pname in gl.state.cache)) {\n      gl.state.cache[pname] = originalGetterFunc(...params);\n    }\n\n    // Optionally call the original function to do a \"hard\" query from the WebGLRenderingContext\n    return gl.state.enable\n      ? // Call the getter the params so that it can e.g. serve from a cache\n        gl.state.cache[pname]\n      : // Optionally call the original function to do a \"hard\" query from the WebGLRenderingContext\n        originalGetterFunc(...params);\n  };\n\n  // Set the name of this anonymous function to help in debugging and profiling\n  Object.defineProperty(gl[functionName], 'name', {\n    value: `${functionName}-from-cache`,\n    configurable: false\n  });\n}\n\n// Overrides a WebGLRenderingContext state \"setter\" function\n// to call a setter spy before the actual setter. Allows us to keep a cache\n// updated with a copy of the WebGL context state.\nfunction installSetterSpy(gl, functionName, setter) {\n  // Get the original function from the WebGLRenderingContext\n  const originalSetterFunc = gl[functionName].bind(gl);\n\n  // Wrap it with a spy so that we can update our state cache when it gets called\n  gl[functionName] = function set(...params) {\n    // Update the value\n    // Call the setter with the state cache and the params so that it can store the parameters\n    const {valueChanged, oldValue} = setter(gl.state._updateCache, ...params);\n\n    // Call the original WebGLRenderingContext func to make sure the context actually gets updated\n    if (valueChanged) {\n      gl.state.log(`gl.${functionName}`, ...params); // eslint-disable-line\n      originalSetterFunc(...params);\n    }\n\n    // Note: if the original function fails to set the value, our state cache will be bad\n    // No solution for this at the moment, but assuming that this is unlikely to be a real problem\n    // We could call the setter after the originalSetterFunc. Concern is that this would\n    // cause different behavior in debug mode, where originalSetterFunc can throw exceptions\n\n    return oldValue;\n  };\n\n  // Set the name of this anonymous function to help in debugging and profiling\n  Object.defineProperty(gl[functionName], 'name', {\n    value: `${functionName}-to-cache`,\n    configurable: false\n  });\n}\n\n// HELPER CLASS - GLState\n\n/* eslint-disable no-shadow */\nclass GLState {\n  constructor(\n    gl,\n    {\n      copyState = false, // Copy cache from params (slow) or initialize from WebGL defaults (fast)\n      log = () => {} // Logging function, called when gl parameter change calls are actually issued\n    } = {}\n  ) {\n    this.gl = gl;\n    this.stateStack = [];\n    this.enable = true;\n    this.cache = copyState ? getParameters(gl) : Object.assign({}, GL_PARAMETER_DEFAULTS);\n    this.log = log;\n\n    this._updateCache = this._updateCache.bind(this);\n    Object.seal(this);\n  }\n\n  push(values = {}) {\n    this.stateStack.push({});\n  }\n\n  pop() {\n    assert(this.stateStack.length > 0);\n    // Use the saved values in the state stack to restore parameters\n    const oldValues = this.stateStack[this.stateStack.length - 1];\n    setParameters(this.gl, oldValues, this.cache);\n    // Don't pop until we have reset parameters (to make sure other \"stack frames\" are not affected)\n    this.stateStack.pop();\n  }\n\n  // interceptor for context set functions - update our cache and our stack\n  // values (Object) - the key values for this setter\n  _updateCache(values) {\n    let valueChanged = false;\n    let oldValue; // = undefined\n\n    const oldValues = this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1];\n\n    for (const key in values) {\n      assert(key !== undefined);\n      // Check that value hasn't already been shadowed\n      if (!deepArrayEqual(values[key], this.cache[key])) {\n        valueChanged = true;\n        oldValue = this.cache[key];\n\n        // First, save current value being shadowed\n        // If a state stack frame is active, save the current parameter values for pop\n        // but first check that value hasn't already been shadowed and saved\n        if (oldValues && !(key in oldValues)) {\n          oldValues[key] = this.cache[key];\n        }\n\n        // Save current value being shadowed\n        this.cache[key] = values[key];\n      }\n    }\n\n    return {valueChanged, oldValue};\n  }\n}\n\n// PUBLIC API\n\n/**\n * Initialize WebGL state caching on a context\n * can be called multiple times to enable/disable\n * @param {WebGLRenderingContext} - context\n */\n// After calling this function, context state will be cached\n// gl.state.push() and gl.state.pop() will be available for saving,\n// temporarily modifying, and then restoring state.\nexport default function trackContextState(gl, {enable = true, copyState} = {}) {\n  assert(copyState !== undefined);\n  if (!gl.state) {\n    /* global window, global */\n    const global_ = typeof global !== 'undefined' ? global : window;\n    if (global_.polyfillContext) {\n      global_.polyfillContext(gl);\n    }\n\n    // Create a state cache\n    gl.state = new GLState(gl, {copyState, enable});\n\n    // intercept all setter functions in the table\n    for (const key in GL_STATE_SETTERS) {\n      const setter = GL_STATE_SETTERS[key];\n      installSetterSpy(gl, key, setter);\n    }\n\n    // intercept all getter functions in the table\n    installGetterOverride(gl, 'getParameter');\n    installGetterOverride(gl, 'isEnabled');\n  }\n\n  gl.state.enable = enable;\n\n  return gl;\n}\n\nexport function pushContextState(gl) {\n  if (!gl.state) {\n    trackContextState(gl, {copyState: false});\n  }\n  gl.state.push();\n}\n\nexport function popContextState(gl) {\n  assert(gl.state);\n  gl.state.pop();\n}\n","export default function deepArrayEqual(x, y) {\n  if (x === y) {\n    return true;\n  }\n  const isArrayX = Array.isArray(x) || ArrayBuffer.isView(x);\n  const isArrayY = Array.isArray(y) || ArrayBuffer.isView(y);\n  if (isArrayX && isArrayY && x.length === y.length) {\n    for (let i = 0; i < x.length; ++i) {\n      if (x[i] !== y[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n","// Replacements for WebGL state setting functions that call supplied 'update'\n// function setting the individual parameters.\n// i.e. these \"setters\" map functions to gl parameters\n\n// The 'update' function is used to interceptor WEBGL functions that set\n// WebGLRenderingContext state so that state changes can be tracked.\n\n// It also enables checking values against cache and avoid unnecessary WebGL\n// set/get operations.\n\nimport GL from '@luma.gl/constants';\n\nexport default {\n  // GENERIC SETTERS\n\n  enable: (update, capability) =>\n    update({\n      [capability]: true\n    }),\n  disable: (update, capability) =>\n    update({\n      [capability]: false\n    }),\n  pixelStorei: (update, pname, value) =>\n    update({\n      [pname]: value\n    }),\n  hint: (update, pname, hint) =>\n    update({\n      [pname]: hint\n    }),\n\n  // SPECIFIC SETTERS\n\n  bindFramebuffer: (update, target, framebuffer) => {\n    switch (target) {\n      case GL.FRAMEBUFFER:\n        return update({\n          [GL.DRAW_FRAMEBUFFER_BINDING]: framebuffer,\n          [GL.READ_FRAMEBUFFER_BINDING]: framebuffer\n        });\n      case GL.DRAW_FRAMEBUFFER:\n        return update({[GL.DRAW_FRAMEBUFFER_BINDING]: framebuffer});\n      case GL.READ_FRAMEBUFFER:\n        return update({[GL.READ_FRAMEBUFFER_BINDING]: framebuffer});\n      default:\n        return null;\n    }\n  },\n  blendColor: (update, r, g, b, a) =>\n    update({\n      [GL.BLEND_COLOR]: new Float32Array([r, g, b, a])\n    }),\n\n  blendEquation: (update, mode) =>\n    update({\n      [GL.BLEND_EQUATION_RGB]: mode,\n      [GL.BLEND_EQUATION_ALPHA]: mode\n    }),\n\n  blendEquationSeparate: (update, modeRGB, modeAlpha) =>\n    update({\n      [GL.BLEND_EQUATION_RGB]: modeRGB,\n      [GL.BLEND_EQUATION_ALPHA]: modeAlpha\n    }),\n\n  blendFunc: (update, src, dst) =>\n    update({\n      [GL.BLEND_SRC_RGB]: src,\n      [GL.BLEND_DST_RGB]: dst,\n      [GL.BLEND_SRC_ALPHA]: src,\n      [GL.BLEND_DST_ALPHA]: dst\n    }),\n\n  blendFuncSeparate: (update, srcRGB, dstRGB, srcAlpha, dstAlpha) =>\n    update({\n      [GL.BLEND_SRC_RGB]: srcRGB,\n      [GL.BLEND_DST_RGB]: dstRGB,\n      [GL.BLEND_SRC_ALPHA]: srcAlpha,\n      [GL.BLEND_DST_ALPHA]: dstAlpha\n    }),\n\n  clearColor: (update, r, g, b, a) =>\n    update({\n      [GL.COLOR_CLEAR_VALUE]: new Float32Array([r, g, b, a])\n    }),\n\n  clearDepth: (update, depth) =>\n    update({\n      [GL.DEPTH_CLEAR_VALUE]: depth\n    }),\n\n  clearStencil: (update, s) =>\n    update({\n      [GL.STENCIL_CLEAR_VALUE]: s\n    }),\n\n  colorMask: (update, r, g, b, a) =>\n    update({\n      [GL.COLOR_WRITEMASK]: [r, g, b, a]\n    }),\n\n  cullFace: (update, mode) =>\n    update({\n      [GL.CULL_FACE_MODE]: mode\n    }),\n\n  depthFunc: (update, func) =>\n    update({\n      [GL.DEPTH_FUNC]: func\n    }),\n\n  depthRange: (update, zNear, zFar) =>\n    update({\n      [GL.DEPTH_RANGE]: new Float32Array([zNear, zFar])\n    }),\n\n  depthMask: (update, mask) =>\n    update({\n      [GL.DEPTH_WRITEMASK]: mask\n    }),\n\n  frontFace: (update, face) =>\n    update({\n      [GL.FRONT_FACE]: face\n    }),\n\n  lineWidth: (update, width) =>\n    update({\n      [GL.LINE_WIDTH]: width\n    }),\n\n  polygonOffset: (update, factor, units) =>\n    update({\n      [GL.POLYGON_OFFSET_FACTOR]: factor,\n      [GL.POLYGON_OFFSET_UNITS]: units\n    }),\n\n  sampleCoverage: (update, value, invert) =>\n    update({\n      [GL.SAMPLE_COVERAGE_VALUE]: value,\n      [GL.SAMPLE_COVERAGE_INVERT]: invert\n    }),\n\n  scissor: (update, x, y, width, height) =>\n    update({\n      [GL.SCISSOR_BOX]: new Int32Array([x, y, width, height])\n    }),\n\n  stencilMask: (update, mask) =>\n    update({\n      [GL.STENCIL_WRITEMASK]: mask,\n      [GL.STENCIL_BACK_WRITEMASK]: mask\n    }),\n\n  stencilMaskSeparate: (update, face, mask) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_WRITEMASK : GL.STENCIL_BACK_WRITEMASK]: mask\n    }),\n\n  stencilFunc: (update, func, ref, mask) =>\n    update({\n      [GL.STENCIL_FUNC]: func,\n      [GL.STENCIL_REF]: ref,\n      [GL.STENCIL_VALUE_MASK]: mask,\n      [GL.STENCIL_BACK_FUNC]: func,\n      [GL.STENCIL_BACK_REF]: ref,\n      [GL.STENCIL_BACK_VALUE_MASK]: mask\n    }),\n\n  stencilFuncSeparate: (update, face, func, ref, mask) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_FUNC : GL.STENCIL_BACK_FUNC]: func,\n      [face === GL.FRONT ? GL.STENCIL_REF : GL.STENCIL_BACK_REF]: ref,\n      [face === GL.FRONT ? GL.STENCIL_VALUE_MASK : GL.STENCIL_BACK_VALUE_MASK]: mask\n    }),\n\n  stencilOp: (update, fail, zfail, zpass) =>\n    update({\n      [GL.STENCIL_FAIL]: fail,\n      [GL.STENCIL_PASS_DEPTH_FAIL]: zfail,\n      [GL.STENCIL_PASS_DEPTH_PASS]: zpass,\n      [GL.STENCIL_BACK_FAIL]: fail,\n      [GL.STENCIL_BACK_PASS_DEPTH_FAIL]: zfail,\n      [GL.STENCIL_BACK_PASS_DEPTH_PASS]: zpass\n    }),\n\n  stencilOpSeparate: (update, face, fail, zfail, zpass) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_FAIL : GL.STENCIL_BACK_FAIL]: fail,\n      [face === GL.FRONT ? GL.STENCIL_PASS_DEPTH_FAIL : GL.STENCIL_BACK_PASS_DEPTH_FAIL]: zfail,\n      [face === GL.FRONT ? GL.STENCIL_PASS_DEPTH_PASS : GL.STENCIL_BACK_PASS_DEPTH_PASS]: zpass\n    }),\n\n  viewport: (update, x, y, width, height) =>\n    update({\n      [GL.VIEWPORT]: new Int32Array([x, y, width, height])\n    })\n};\n","/* global fetch, Image */\nimport {assert} from '../utils';\n\nlet pathPrefix = '';\n\n/*\n * Set a relative path prefix\n */\nexport function setPathPrefix(prefix) {\n  pathPrefix = prefix;\n}\n\n// Reads raw file data from:\nexport function loadFile(url, options = {}) {\n  assert(typeof url === 'string');\n  url = pathPrefix + url;\n  const dataType = options.dataType || 'text';\n  return fetch(url, options).then(res => res[dataType]());\n}\n\n/*\n * Loads images asynchronously\n * image.crossOrigin can be set via opts.crossOrigin, default to 'anonymous'\n * returns a promise tracking the load\n */\nexport function loadImage(url, opts) {\n  assert(typeof url === 'string');\n  url = pathPrefix + url;\n  return new Promise((resolve, reject) => {\n    try {\n      const image = new Image();\n      image.onload = () => resolve(image);\n      image.onerror = () => reject(new Error(`Could not load image ${url}.`));\n      image.crossOrigin = (opts && opts.crossOrigin) || 'anonymous';\n      image.src = url;\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n","// Recommendation is to ignore message but current test suite checks agains the\n// message so keep it for now.\nexport default function assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'luma.gl: assertion failed.');\n  }\n}\n","// based on https://github.com/cheton/is-electron\n// https://github.com/electron/electron/issues/2288\n/* global window, process, navigator */\nfunction isElectron() {\n  // Renderer process\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.process === 'object' &&\n    window.process.type === 'renderer'\n  ) {\n    return true;\n  }\n  // Main process\n  if (\n    typeof process !== 'undefined' &&\n    typeof process.versions === 'object' &&\n    Boolean(process.versions.electron)\n  ) {\n    return true;\n  }\n  // Detect the user agent when the `nodeIntegration` option is set to true\n  if (\n    typeof navigator === 'object' &&\n    typeof navigator.userAgent === 'string' &&\n    navigator.userAgent.indexOf('Electron') >= 0\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport default isElectron();\n","import GL from '@luma.gl/constants';\n\nconst ERR_TYPE_DEDUCTION = 'Failed to deduce GL constant from typed array';\n\n// Converts TYPED ARRAYS to corresponding GL constant\n// Used to auto deduce gl parameter types\nexport function getGLTypeFromTypedArray(arrayOrType) {\n  // If typed array, look up constructor\n  const type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n  switch (type) {\n    case Float32Array:\n      return GL.FLOAT;\n    case Uint16Array:\n      return GL.UNSIGNED_SHORT;\n    case Uint32Array:\n      return GL.UNSIGNED_INT;\n    case Uint8Array:\n      return GL.UNSIGNED_BYTE;\n    case Uint8ClampedArray:\n      return GL.UNSIGNED_BYTE;\n    case Int8Array:\n      return GL.BYTE;\n    case Int16Array:\n      return GL.SHORT;\n    case Int32Array:\n      return GL.INT;\n    default:\n      throw new Error(ERR_TYPE_DEDUCTION);\n  }\n}\n\n// Converts GL constant to corresponding TYPED ARRAY\n// Used to auto deduce gl parameter types\n\n/* eslint-disable complexity */\nexport function getTypedArrayFromGLType(glType, {clamped = true} = {}) {\n  // Sorted in some order of likelihood to reduce amount of comparisons\n  switch (glType) {\n    case GL.FLOAT:\n      return Float32Array;\n    case GL.UNSIGNED_SHORT:\n    case GL.UNSIGNED_SHORT_5_6_5:\n    case GL.UNSIGNED_SHORT_4_4_4_4:\n    case GL.UNSIGNED_SHORT_5_5_5_1:\n      return Uint16Array;\n    case GL.UNSIGNED_INT:\n      return Uint32Array;\n    case GL.UNSIGNED_BYTE:\n      return clamped ? Uint8ClampedArray : Uint8Array;\n    case GL.BYTE:\n      return Int8Array;\n    case GL.SHORT:\n      return Int16Array;\n    case GL.INT:\n      return Int32Array;\n    default:\n      throw new Error('Failed to deduce typed array type from GL constant');\n  }\n}\n/* eslint-enable complexity */\n\n// Flip rows (can be used on arrays returned from `Framebuffer.readPixels`)\n// https://stackoverflow.com/questions/41969562/\n// how-can-i-flip-the-result-of-webglrenderingcontext-readpixels\nexport function flipRows({data, width, height, bytesPerPixel = 4, temp}) {\n  const bytesPerRow = width * bytesPerPixel;\n\n  // make a temp buffer to hold one row\n  temp = temp || new Uint8Array(bytesPerRow);\n  for (let y = 0; y < height / 2; ++y) {\n    const topOffset = y * bytesPerRow;\n    const bottomOffset = (height - y - 1) * bytesPerRow;\n    // make copy of a row on the top half\n    temp.set(data.subarray(topOffset, topOffset + bytesPerRow));\n    // copy a row from the bottom half to the top\n    data.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);\n    // copy the copy of the top half row to the bottom half\n    data.set(temp, bottomOffset);\n  }\n}\n\nexport function scalePixels({data, width, height}) {\n  const newWidth = Math.round(width / 2);\n  const newHeight = Math.round(height / 2);\n  const newData = new Uint8Array(newWidth * newHeight * 4);\n  for (let y = 0; y < newHeight; y++) {\n    for (let x = 0; x < newWidth; x++) {\n      for (let c = 0; c < 4; c++) {\n        newData[(y * newWidth + x) * 4 + c] = data[(y * 2 * width + x * 2) * 4 + c];\n      }\n    }\n  }\n  return {data: newData, width: newWidth, height: newHeight};\n}\n","// WEBGL BUILT-IN TYPES\n// 1) Exports all WebGL constants as {GL}\n// 2) Enables app to \"import\" WebGL types\n//    - Importing these types makes them known to eslint etc.\n//    - Provides dummy types for WebGL2 when not available to streamline\n//      library code.\n//    - Exports types from headless gl when running under Node.js\n\n/* eslint-disable quotes, no-console */\nimport {global} from '../utils/globals';\nimport isBrowser from '../utils/is-browser';\n\nexport const ERR_HEADLESSGL_LOAD = `\\\nluma.gl: loaded under Node.js without headless gl installed, meaning that WebGL \\\ncontexts can not be created. This may not be an error. For example, this is a \\\ntypical configuration for isorender applications running on the server.`;\n\n// TODO(Tarek): OOGLY HACK to avoid webpack requiring headless\n//   browser bundles. Will be removed in 8.0 when we\n//   remove automatic headless context creation\nconst m = module;\n\n// Load headless gl dynamically, if available\nexport let headlessTypes = null;\nexport function headlessGL(...args) {\n  const headless = m.require('gl');\n  if (!headless) {\n    throw new Error(ERR_HEADLESSGL_LOAD);\n  }\n  return headless(...args);\n}\n\nif (!isBrowser) {\n  try {\n    headlessTypes = m.require('gl/wrap');\n  } catch (error) {\n    // /* global console */\n    // console.info(ERR_HEADLESSGL_LOAD);\n  }\n}\n\nclass DummyType {}\n\nconst {\n  WebGLRenderingContext = DummyType,\n  WebGLProgram = DummyType,\n  WebGLShader = DummyType,\n  WebGLBuffer = DummyType,\n  WebGLFramebuffer = DummyType,\n  WebGLRenderbuffer = DummyType,\n  WebGLTexture = DummyType,\n  WebGLUniformLocation = DummyType,\n  WebGLActiveInfo = DummyType,\n  WebGLShaderPrecisionFormat = DummyType\n} = headlessTypes || global;\n\nexport const webGLTypesAvailable =\n  WebGLRenderingContext !== DummyType &&\n  WebGLProgram !== DummyType &&\n  WebGLShader !== DummyType &&\n  WebGLBuffer !== DummyType &&\n  WebGLFramebuffer !== DummyType &&\n  WebGLRenderbuffer !== DummyType &&\n  WebGLTexture !== DummyType &&\n  WebGLUniformLocation !== DummyType &&\n  WebGLActiveInfo !== DummyType &&\n  WebGLShaderPrecisionFormat !== DummyType;\n\n// Ensures that WebGL2RenderingContext is defined in non-WebGL2 environments\n// so that apps can test their gl contexts with instanceof\n// E.g. if (gl instanceof WebGL2RenderingContext) { }\nfunction getWebGL2RenderingContext() {\n  class WebGL2RenderingContextNotSupported {}\n  return global.WebGL2RenderingContext || WebGL2RenderingContextNotSupported;\n}\n\n// Ensure that Image is defined under Node.js\nfunction getImage() {\n  class ImageNotSupported {}\n  return global.Image || ImageNotSupported;\n}\n\nconst WebGL2RenderingContext = getWebGL2RenderingContext();\nconst Image = getImage();\n\n// Export the standard WebGL types\nexport {\n  Image,\n  WebGLRenderingContext,\n  WebGLProgram,\n  WebGLShader,\n  WebGLBuffer,\n  WebGLFramebuffer,\n  WebGLRenderbuffer,\n  WebGLTexture,\n  WebGLUniformLocation,\n  WebGLActiveInfo,\n  WebGLShaderPrecisionFormat,\n  WebGL2RenderingContext\n};\n","import {withParameters} from '../context';\nimport {assertWebGL2Context} from '../webgl-utils';\nimport {assert} from '../utils';\n\n// Should collapse during minification\nconst GL_DEPTH_BUFFER_BIT = 0x00000100;\nconst GL_STENCIL_BUFFER_BIT = 0x00000400;\nconst GL_COLOR_BUFFER_BIT = 0x00004000;\n\nconst GL_COLOR = 0x1800;\nconst GL_DEPTH = 0x1801;\nconst GL_STENCIL = 0x1802;\nconst GL_DEPTH_STENCIL = 0x84f9;\n\n// Should disappear if asserts are removed\nconst ERR_ARGUMENTS = 'clear: bad arguments';\n\n// Optionally clears depth, color and stencil buffers\nexport function clear(gl, {framebuffer = null, color = null, depth = null, stencil = null} = {}) {\n  const parameters = {};\n\n  if (framebuffer) {\n    parameters.framebuffer = framebuffer;\n  }\n\n  let clearFlags = 0;\n\n  if (color) {\n    clearFlags |= GL_COLOR_BUFFER_BIT;\n    if (color !== true) {\n      parameters.clearColor = color;\n    }\n  }\n\n  if (depth) {\n    clearFlags |= GL_DEPTH_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearDepth = depth;\n    }\n  }\n\n  if (stencil) {\n    clearFlags |= GL_STENCIL_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearStencil = depth;\n    }\n  }\n\n  assert(clearFlags !== 0, ERR_ARGUMENTS);\n\n  // Temporarily set any clear \"colors\" and call clear\n  withParameters(gl, parameters, () => {\n    gl.clear(clearFlags);\n  });\n}\n\n// WebGL2 - clear a specific drawing buffer\nexport function clearBuffer(\n  gl,\n  {framebuffer = null, buffer = GL_COLOR, drawBuffer = 0, value = [0, 0, 0, 0]} = {}\n) {\n  assertWebGL2Context(gl);\n\n  withParameters(gl, {framebuffer}, () => {\n    // Method selection per OpenGL ES 3 docs\n    switch (buffer) {\n      case GL_COLOR:\n        switch (value.constructor) {\n          case Int32Array:\n            gl.clearBufferiv(buffer, drawBuffer, value);\n            break;\n          case Uint32Array:\n            gl.clearBufferuiv(buffer, drawBuffer, value);\n            break;\n          case Float32Array:\n          default:\n            gl.clearBufferfv(buffer, drawBuffer, value);\n        }\n        break;\n\n      case GL_DEPTH:\n        gl.clearBufferfv(GL_DEPTH, 0, [value]);\n        break;\n\n      case GL_STENCIL:\n        gl.clearBufferiv(GL_STENCIL, 0, [value]);\n        break;\n\n      case GL_DEPTH_STENCIL:\n        const [depth, stencil] = value;\n        gl.clearBufferfi(GL_DEPTH_STENCIL, 0, depth, stencil);\n        break;\n\n      default:\n        assert(false, ERR_ARGUMENTS);\n    }\n  });\n}\n","// TODO: Two subdirectories must not depend on each other (classes vs utils)!\nimport Texture2D from '../classes/texture-2d';\nimport TextureCube from '../classes/texture-cube';\nimport Texture3D from '../classes/texture-3d';\nimport Framebuffer from '../classes/framebuffer';\nimport GL from '@luma.gl/constants';\nimport {assert} from '../utils';\n\n// Clone a new texture object from a reference texture object.\nexport function cloneTextureFrom(refTexture, overrides) {\n  assert(\n    refTexture instanceof Texture2D ||\n      refTexture instanceof TextureCube ||\n      refTexture instanceof Texture3D\n  );\n\n  const TextureType = refTexture.constructor;\n\n  const {gl, width, height, format, type, dataFormat, border, mipmaps} = refTexture;\n\n  const textureOptions = Object.assign(\n    {\n      width,\n      height,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps\n    },\n    overrides\n  );\n\n  // TODO: move this to `Texture` class as instance method and use this.constructor\n  return new TextureType(gl, textureOptions);\n}\n\n// Wraps a given texture into a framebuffer object, that can be further used\n// to read data from the texture object.\nexport function toFramebuffer(texture, opts) {\n  const {gl, width, height, id} = texture;\n  const framebuffer = new Framebuffer(\n    gl,\n    Object.assign({}, opts, {\n      id: `framebuffer-for-${id}`,\n      width,\n      height,\n      attachments: {\n        [GL.COLOR_ATTACHMENT0]: texture\n      }\n    })\n  );\n  return framebuffer;\n}\n","import GL from '@luma.gl/constants';\nimport Texture from './texture';\nimport {assertWebGLContext} from '../webgl-utils';\nimport {log} from '../utils';\n\nconst FACES = [\n  GL.TEXTURE_CUBE_MAP_POSITIVE_X,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_X,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Y,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Z,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Z\n];\n\nexport default class TextureCube extends Texture {\n  constructor(gl, props = {}) {\n    assertWebGLContext(gl);\n\n    super(gl, Object.assign({}, props, {target: GL.TEXTURE_CUBE_MAP}));\n\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(props = {}) {\n    const {mipmaps = true, parameters = {}} = props;\n\n    // Store props for accessors\n    this.opts = props;\n\n    this.setCubeMapImageData(props).then(() => {\n      this.loaded = true;\n\n      // TODO - should genMipmap() be called on the cubemap or on the faces?\n      // TODO - without generateMipmap() cube textures do not work at all!!! Why?\n      if (mipmaps) {\n        this.generateMipmap(props);\n      }\n\n      this.setParameters(parameters);\n    });\n  }\n\n  subImage({face, data, x = 0, y = 0, mipmapLevel = 0}) {\n    return this._subImage({target: face, data, x, y, mipmapLevel});\n  }\n\n  /* eslint-disable max-statements, max-len */\n  async setCubeMapImageData({\n    width,\n    height,\n    pixels,\n    data,\n    border = 0,\n    format = GL.RGBA,\n    type = GL.UNSIGNED_BYTE\n  }) {\n    const {gl} = this;\n    const imageDataMap = pixels || data;\n\n    // pixel data (imageDataMap) is an Object from Face to Image or Promise.\n    // For example:\n    // {\n    // GL.TEXTURE_CUBE_MAP_POSITIVE_X : Image-or-Promise,\n    // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : Image-or-Promise,\n    // ... }\n    // To provide multiple level-of-details (LODs) this can be Face to Array\n    // of Image or Promise, like this\n    // {\n    // GL.TEXTURE_CUBE_MAP_POSITIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],\n    // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],\n    // ... }\n\n    const resolvedFaces = await Promise.all(\n      FACES.map(face => {\n        const facePixels = imageDataMap[face];\n        return Promise.all(Array.isArray(facePixels) ? facePixels : [facePixels]);\n      })\n    );\n\n    this.bind();\n\n    FACES.forEach((face, index) => {\n      if (resolvedFaces[index].length > 1 && this.opts.mipmaps !== false) {\n        // If the user provides multiple LODs, then automatic mipmap\n        // generation generateMipmap() should be disabled to avoid overwritting them.\n        log.warn(`${this.id} has mipmap and multiple LODs.`)();\n      }\n      resolvedFaces[index].forEach((image, lodLevel) => {\n        // TODO: adjust width & height for LOD!\n        if (width && height) {\n          gl.texImage2D(face, lodLevel, format, width, height, border, format, type, image);\n        } else {\n          gl.texImage2D(face, lodLevel, format, format, type, image);\n        }\n      });\n    });\n\n    this.unbind();\n  }\n\n  // TODO: update this method to accept LODs\n  setImageDataForFace(options) {\n    const {\n      face,\n      width,\n      height,\n      pixels,\n      data,\n      border = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE\n      // generateMipmap = false // TODO\n    } = options;\n\n    const {gl} = this;\n\n    const imageData = pixels || data;\n\n    this.bind();\n    if (imageData instanceof Promise) {\n      imageData.then(resolvedImageData =>\n        this.setImageDataForFace(\n          Object.assign({}, options, {\n            face,\n            data: resolvedImageData,\n            pixels: resolvedImageData\n          })\n        )\n      );\n    } else if (this.width || this.height) {\n      gl.texImage2D(face, 0, format, width, height, border, format, type, imageData);\n    } else {\n      gl.texImage2D(face, 0, format, format, type, imageData);\n    }\n\n    return this;\n  }\n}\n\nTextureCube.FACES = FACES;\n","import GL from '@luma.gl/constants';\nimport {withParameters} from '../context';\nimport {isWebGL2, assertWebGL2Context} from '../webgl-utils';\nimport Texture from './texture';\nimport {DATA_FORMAT_CHANNELS, TYPE_SIZES} from './texture-formats';\nimport Buffer from './buffer';\n\nexport default class Texture3D extends Texture {\n  static isSupported(gl) {\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, props = {}) {\n    assertWebGL2Context(gl);\n    props = Object.assign({depth: 1}, props, {target: GL.TEXTURE_3D, unpackFlipY: false});\n    super(gl, props);\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  // Image 3D copies from Typed Array or WebGLBuffer\n  setImageData({\n    level = 0,\n    dataFormat = GL.RGBA,\n    width,\n    height,\n    depth = 1,\n    border = 0,\n    format,\n    type = GL.UNSIGNED_BYTE,\n    offset = 0,\n    data,\n    parameters = {}\n  }) {\n    this._trackDeallocatedMemory('Texture');\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withParameters(this.gl, parameters, () => {\n      if (ArrayBuffer.isView(data)) {\n        this.gl.texImage3D(\n          this.target,\n          level,\n          dataFormat,\n          width,\n          height,\n          depth,\n          border,\n          format,\n          type,\n          data\n        );\n      }\n\n      if (data instanceof Buffer) {\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle);\n        this.gl.texImage3D(\n          this.target,\n          level,\n          dataFormat,\n          width,\n          height,\n          depth,\n          border,\n          format,\n          type,\n          offset\n        );\n      }\n    });\n\n    if (data && data.byteLength) {\n      this._trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      // NOTE(Tarek): Default to RGBA bytes\n      const channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n      const channelSize = TYPE_SIZES[this.type] || 1;\n\n      this._trackAllocatedMemory(\n        this.width * this.height * this.depth * channels * channelSize,\n        'Texture'\n      );\n    }\n\n    this.loaded = true;\n\n    return this;\n  }\n}\n","// TODO - this should be the default export, test cases need updating\nexport const FEATURES = {\n  WEBGL2: 'WEBGL2',\n\n  // API SUPPORT\n  VERTEX_ARRAY_OBJECT: 'VERTEX_ARRAY_OBJECT',\n  TIMER_QUERY: 'TIMER_QUERY',\n  INSTANCED_RENDERING: 'INSTANCED_RENDERING',\n  MULTIPLE_RENDER_TARGETS: 'MULTIPLE_RENDER_TARGETS',\n\n  // FEATURES\n  ELEMENT_INDEX_UINT32: 'ELEMENT_INDEX_UINT32',\n\n  // BLENDING\n  BLEND_EQUATION_MINMAX: 'BLEND_EQUATION_MINMAX',\n  FLOAT_BLEND: 'FLOAT_BLEND',\n\n  // TEXTURES: '// TEXTURES', RENDERBUFFERS\n  COLOR_ENCODING_SRGB: 'COLOR_ENCODING_SRGB',\n\n  // TEXTURES\n  TEXTURE_DEPTH: 'TEXTURE_DEPTH',\n  TEXTURE_FLOAT: 'TEXTURE_FLOAT',\n  TEXTURE_HALF_FLOAT: 'TEXTURE_HALF_FLOAT',\n\n  TEXTURE_FILTER_LINEAR_FLOAT: 'TEXTURE_FILTER_LINEAR_FLOAT',\n  TEXTURE_FILTER_LINEAR_HALF_FLOAT: 'TEXTURE_FILTER_LINEAR_HALF_FLOAT',\n  TEXTURE_FILTER_ANISOTROPIC: 'TEXTURE_FILTER_ANISOTROPIC',\n\n  // FRAMEBUFFERS: '// FRAMEBUFFERS', TEXTURES AND RENDERBUFFERS\n  COLOR_ATTACHMENT_RGBA32F: 'COLOR_ATTACHMENT_RGBA32F',\n  COLOR_ATTACHMENT_FLOAT: 'COLOR_ATTACHMENT_FLOAT',\n  COLOR_ATTACHMENT_HALF_FLOAT: 'COLOR_ATTACHMENT_HALF_FLOAT',\n\n  // GLSL extensions\n  GLSL_FRAG_DATA: 'GLSL_FRAG_DATA',\n  GLSL_FRAG_DEPTH: 'GLSL_FRAG_DEPTH',\n  GLSL_DERIVATIVES: 'GLSL_DERIVATIVES',\n  GLSL_TEXTURE_LOD: 'GLSL_TEXTURE_LOD'\n};\n\n// Defines luma.gl \"feature\" names and semantics\n// Format: 'feature-name: [WebGL1 support, WebGL2 support] / [WebGL1 and WebGL2 support]', when support is 'string' it is the name of the extension\nexport default {\n  [FEATURES.WEBGL2]: [false, true],\n\n  // API SUPPORT\n  [FEATURES.VERTEX_ARRAY_OBJECT]: ['OES_vertex_array_object', true],\n  [FEATURES.TIMER_QUERY]: ['EXT_disjoint_timer_query', 'EXT_disjoint_timer_query_webgl2'],\n  [FEATURES.INSTANCED_RENDERING]: ['ANGLE_instanced_arrays', true],\n  [FEATURES.MULTIPLE_RENDER_TARGETS]: ['WEBGL_draw_buffers', true],\n\n  // FEATURES\n  [FEATURES.ELEMENT_INDEX_UINT32]: ['OES_element_index_uint', true],\n\n  // BLENDING\n  [FEATURES.BLEND_EQUATION_MINMAX]: ['EXT_blend_minmax', true],\n  [FEATURES.FLOAT_BLEND]: ['EXT_float_blend'],\n\n  // TEXTURES, RENDERBUFFERS\n  [FEATURES.COLOR_ENCODING_SRGB]: ['EXT_sRGB', true],\n\n  // TEXTURES\n  [FEATURES.TEXTURE_DEPTH]: ['WEBGL_depth_texture', true],\n  [FEATURES.TEXTURE_FLOAT]: ['OES_texture_float', true],\n  [FEATURES.TEXTURE_HALF_FLOAT]: ['OES_texture_half_float', true],\n\n  [FEATURES.TEXTURE_FILTER_LINEAR_FLOAT]: ['OES_texture_float_linear'],\n  [FEATURES.TEXTURE_FILTER_LINEAR_HALF_FLOAT]: ['OES_texture_half_float_linear'],\n  [FEATURES.TEXTURE_FILTER_ANISOTROPIC]: ['EXT_texture_filter_anisotropic'],\n\n  // FRAMEBUFFERS, TEXTURES AND RENDERBUFFERS\n  [FEATURES.COLOR_ATTACHMENT_RGBA32F]: ['WEBGL_color_buffer_float', 'EXT_color_buffer_float'],\n  [FEATURES.COLOR_ATTACHMENT_FLOAT]: [false, 'EXT_color_buffer_float'],\n  [FEATURES.COLOR_ATTACHMENT_HALF_FLOAT]: ['EXT_color_buffer_half_float'],\n\n  // GLSL extensions\n  [FEATURES.GLSL_FRAG_DATA]: ['WEBGL_draw_buffers', true],\n  [FEATURES.GLSL_FRAG_DEPTH]: ['EXT_frag_depth', true],\n  [FEATURES.GLSL_DERIVATIVES]: ['OES_standard_derivatives', true],\n  [FEATURES.GLSL_TEXTURE_LOD]: ['EXT_shader_texture_lod', true]\n};\n","let channelHandles = 1;\nlet animationHandles = 1;\n\nexport class Timeline {\n  constructor() {\n    this.time = 0;\n    this.channels = new Map();\n    this.animations = new Map();\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  addChannel(props) {\n    const {delay = 0, duration = Number.POSITIVE_INFINITY, rate = 1, repeat = 1} = props;\n\n    const handle = channelHandles++;\n    const channel = {\n      time: 0,\n      delay,\n      duration,\n      rate,\n      repeat\n    };\n    this._setChannelTime(channel, this.time);\n    this.channels.set(handle, channel);\n\n    return handle;\n  }\n\n  removeChannel(handle) {\n    this.channels.delete(handle);\n\n    for (const [animationHandle, animation] of this.animations) {\n      if (animation.channel === handle) {\n        this.detachAnimation(animationHandle);\n      }\n    }\n  }\n\n  isFinished(handle) {\n    const channel = this.channels.get(handle);\n    if (channel === undefined) {\n      return false;\n    }\n\n    return this.time >= channel.delay + channel.duration * channel.repeat;\n  }\n\n  getTime(handle) {\n    if (handle === undefined) {\n      return this.time;\n    }\n\n    const channel = this.channels.get(handle);\n\n    if (channel === undefined) {\n      return -1;\n    }\n\n    return channel.time;\n  }\n\n  setTime(time) {\n    this.time = Math.max(0, time);\n\n    const channels = this.channels.values();\n    for (const channel of channels) {\n      this._setChannelTime(channel, this.time);\n    }\n\n    const animations = this.animations.values();\n    for (const animationData of animations) {\n      const {animation, channel} = animationData;\n      animation.setTime(this.getTime(channel));\n    }\n  }\n\n  play() {\n    this.playing = true;\n  }\n\n  pause() {\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  reset() {\n    this.setTime(0);\n  }\n\n  attachAnimation(animation, channelHandle) {\n    const animationHandle = animationHandles++;\n\n    this.animations.set(animationHandle, {\n      animation,\n      channel: channelHandle\n    });\n\n    animation.setTime(this.getTime(channelHandle));\n\n    return animationHandle;\n  }\n\n  detachAnimation(handle) {\n    this.animations.delete(handle);\n  }\n\n  update(engineTime) {\n    if (this.playing) {\n      if (this.lastEngineTime === -1) {\n        this.lastEngineTime = engineTime;\n      }\n      this.setTime(this.time + (engineTime - this.lastEngineTime));\n      this.lastEngineTime = engineTime;\n    }\n  }\n\n  _setChannelTime(channel, time) {\n    const offsetTime = time - channel.delay;\n    const totalDuration = channel.duration * channel.repeat;\n    // Note(Tarek): Don't loop on final repeat.\n    if (offsetTime >= totalDuration) {\n      channel.time = channel.duration * channel.rate;\n    } else {\n      channel.time = Math.max(0, offsetTime) % channel.duration;\n      channel.time *= channel.rate;\n    }\n  }\n}\n","import isBrowser from './utils/is-browser';\nimport {global} from './utils/globals';\nimport log from './utils/log';\nimport {Stats} from 'probe.gl';\n\n// TODO - when webgl2 gets ubiquitous, remove default support for webgl1 by dropping next line\n// Can be installed by applications\nimport '@luma.gl/webgl2-polyfill';\n\n// Version detection using babel plugin\n/* global __VERSION__ */\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'untranspiled source';\n\nconst STARTUP_MESSAGE = 'set luma.log.priority=1 (or higher) to trace rendering';\n// Assign luma.log.priority in console to control logging: \\\n// 0: none, 1: minimal, 2: verbose, 3: attribute/uniforms, 4: gl logs\n// luma.log.break[], set to gl funcs, luma.log.profile[] set to model names`;\n\nclass StatsManager {\n  constructor() {\n    this.stats = new Map();\n  }\n\n  get(name) {\n    if (!this.stats.has(name)) {\n      this.stats.set(name, new Stats({id: name}));\n    }\n\n    return this.stats.get(name);\n  }\n}\n\nconst lumaStats = new StatsManager();\n\nif (global.luma && global.luma.VERSION !== VERSION) {\n  throw new Error(`luma.gl - multiple VERSIONs detected: ${global.luma.VERSION} vs ${VERSION}`);\n}\n\nif (!global.luma) {\n  if (isBrowser) {\n    log.log(1, `luma.gl ${VERSION} - ${STARTUP_MESSAGE}`)();\n  }\n\n  global.luma = global.luma || {\n    VERSION,\n    version: VERSION,\n    log,\n\n    // A global stats object that various components can add information to\n    // E.g. see webgl/resource.js\n    stats: lumaStats,\n\n    // Keep some luma globals in a sub-object\n    // This allows us to dynamically detect if certain modules have been\n    // included (such as IO and headless) and enable related functionality,\n    // without unconditionally requiring and thus bundling big dependencies\n    // into the app.\n    globals: {\n      modules: {},\n      nodeIO: {}\n    }\n  };\n}\n\nexport {global};\nexport {lumaStats};\nexport default global.luma;\n","import GL from '@luma.gl/constants';\nimport {assert} from '../utils';\n\n// Returns number of components in a specific readPixels WebGL format\nexport function glFormatToComponents(format) {\n  switch (format) {\n    case GL.ALPHA:\n    case GL.R32F:\n    case GL.RED:\n      return 1;\n    case GL.RG32F:\n    case GL.RG:\n      return 2;\n    case GL.RGB:\n    case GL.RGB32F:\n      return 3;\n    case GL.RGBA:\n    case GL.RGBA32F:\n      return 4;\n    // TODO: Add support for additional WebGL2 formats\n    default:\n      assert(false);\n      return 0;\n  }\n}\n\n// Return byte count for given readPixels WebGL type\nexport function glTypeToBytes(type) {\n  switch (type) {\n    case GL.UNSIGNED_BYTE:\n      return 1;\n    case GL.UNSIGNED_SHORT_5_6_5:\n    case GL.UNSIGNED_SHORT_4_4_4_4:\n    case GL.UNSIGNED_SHORT_5_5_5_1:\n      return 2;\n    case GL.FLOAT:\n      return 4;\n    // TODO: Add support for additional WebGL2 types\n    default:\n      assert(false);\n      return 0;\n  }\n}\n","import GL from '@luma.gl/constants';\nimport Buffer from './buffer';\nimport Framebuffer from './framebuffer';\nimport Texture from './texture';\nimport {withParameters} from '../context';\nimport {assertWebGL2Context, flipRows, scalePixels} from '../webgl-utils';\nimport {getTypedArrayFromGLType, getGLTypeFromTypedArray} from '../webgl-utils/typed-array-utils';\nimport {glFormatToComponents, glTypeToBytes} from '../webgl-utils/format-utils';\nimport {toFramebuffer} from '../webgl-utils/texture-utils';\nimport {assert, log} from '../utils';\n\n// NOTE: Slow requires roundtrip to GPU\n// Copies data from a Framebuffer or a Texture object into ArrayBuffer object.\n// App can provide targetPixelArray or have it auto allocated by this method\n// @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n//  newly allocated by this method unless provided by app.\nexport function readPixelsToArray(\n  source,\n  {\n    sourceX = 0,\n    sourceY = 0,\n    sourceFormat = GL.RGBA,\n    sourceAttachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    target = null,\n    // following parameters are auto deduced if not provided\n    sourceWidth,\n    sourceHeight,\n    sourceType\n  } = {}\n) {\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(source);\n  assert(framebuffer);\n  const {gl, handle, attachments} = framebuffer;\n  sourceWidth = sourceWidth || framebuffer.width;\n  sourceHeight = sourceHeight || framebuffer.height;\n\n  // TODO - Set and unset gl.readBuffer\n  if (sourceAttachment === GL.COLOR_ATTACHMENT0 && handle === null) {\n    sourceAttachment = GL.FRONT;\n  }\n\n  assert(attachments[sourceAttachment]);\n\n  // Deduce the type from color attachment if not provided.\n  sourceType = sourceType || attachments[sourceAttachment].type;\n\n  // Deduce type and allocated pixelArray if needed\n  target = getPixelArray(target, sourceType, sourceFormat, sourceWidth, sourceHeight);\n\n  // Pixel array available, if necessary, deduce type from it.\n  sourceType = sourceType || getGLTypeFromTypedArray(target);\n\n  const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  gl.readPixels(sourceX, sourceY, sourceWidth, sourceHeight, sourceFormat, sourceType, target);\n  gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n  return target;\n}\n\n// NOTE: doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n// Copies data from a Framebuffer or a Texture object into a Buffer object.\nexport function readPixelsToBuffer(\n  source,\n  {\n    sourceX = 0,\n    sourceY = 0,\n    sourceFormat = GL.RGBA,\n    target = null, // A new Buffer object is created when not provided.\n    targetByteOffset = 0, // byte offset in buffer object\n    // following parameters are auto deduced if not provided\n    sourceWidth,\n    sourceHeight,\n    sourceType\n  }\n) {\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(source);\n  assert(framebuffer);\n  const {gl} = framebuffer;\n  sourceWidth = sourceWidth || framebuffer.width;\n  sourceHeight = sourceHeight || framebuffer.height;\n\n  // Asynchronus read (PIXEL_PACK_BUFFER) is WebGL2 only feature\n  assertWebGL2Context(gl);\n\n  // deduce type if not available.\n  sourceType = sourceType || (target ? target.type : GL.UNSIGNED_BYTE);\n\n  if (!target) {\n    // Create new buffer with enough size\n    const components = glFormatToComponents(sourceFormat);\n    const byteCount = glTypeToBytes(sourceType);\n    const byteLength = targetByteOffset + sourceWidth * sourceHeight * components * byteCount;\n    target = new Buffer(gl, {byteLength, accessor: {type: sourceType, size: components}});\n  }\n\n  target.bind({target: GL.PIXEL_PACK_BUFFER});\n  withParameters(gl, {framebuffer}, () => {\n    gl.readPixels(\n      sourceX,\n      sourceY,\n      sourceWidth,\n      sourceHeight,\n      sourceFormat,\n      sourceType,\n      targetByteOffset\n    );\n  });\n  target.unbind({target: GL.PIXEL_PACK_BUFFER});\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n\n  return target;\n}\n\n// Reads pixels from a Framebuffer or Texture object to a dataUrl\nexport function copyToDataUrl(\n  source,\n  {\n    sourceAttachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    targetMaxHeight = Number.MAX_SAFE_INTEGER\n  } = {}\n) {\n  let data = readPixelsToArray(source, {sourceAttachment});\n\n  // Scale down\n  let {width, height} = source;\n  while (height > targetMaxHeight) {\n    ({data, width, height} = scalePixels({data, width, height}));\n  }\n\n  // Flip to top down coordinate system\n  flipRows({data, width, height});\n\n  /* global document */\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  const context = canvas.getContext('2d');\n\n  // Copy the pixels to a 2D canvas\n  const imageData = context.createImageData(width, height);\n  imageData.data.set(data);\n  context.putImageData(imageData, 0, 0);\n\n  return canvas.toDataURL();\n}\n\n// Reads pixels from a Framebuffer or Texture object into an HTML Image\nexport function copyToImage(\n  source,\n  {\n    sourceAttachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    targetImage = null\n  } = {}\n) {\n  /* global Image */\n  const dataUrl = copyToDataUrl(source, {sourceAttachment});\n  targetImage = targetImage || new Image();\n  targetImage.src = dataUrl;\n  return targetImage;\n}\n\n// Copy a rectangle from a Framebuffer or Texture object into a texture (at an offset)\n// eslint-disable-next-line complexity, max-statements\nexport function copyToTexture(\n  source,\n  target,\n  {\n    sourceX = 0,\n    sourceY = 0,\n    // attachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n\n    targetX,\n    targetY,\n    targetZ,\n    targetMipmaplevel = 0,\n    targetInternalFormat = GL.RGBA,\n\n    width, // defaults to target width\n    height // defaults to target height\n  } = {}\n) {\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(source);\n  assert(framebuffer);\n  const {gl, handle} = framebuffer;\n  const isSubCopy =\n    typeof targetX !== 'undefined' ||\n    typeof targetY !== 'undefined' ||\n    typeof targetZ !== 'undefined';\n  targetX = targetX || 0;\n  targetY = targetY || 0;\n  targetZ = targetZ || 0;\n  const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  // TODO - support gl.readBuffer (WebGL2 only)\n  // const prevBuffer = gl.readBuffer(attachment);\n  assert(target);\n  let texture = null;\n  if (target instanceof Texture) {\n    texture = target;\n    width = Number.isFinite(width) ? width : texture.width;\n    height = Number.isFinite(height) ? height : texture.height;\n    texture.bind(0);\n    target = texture.target;\n  }\n\n  if (!isSubCopy) {\n    gl.copyTexImage2D(\n      target,\n      targetMipmaplevel,\n      targetInternalFormat,\n      sourceX,\n      sourceY,\n      width,\n      height,\n      0 /* border must be 0 */\n    );\n  } else {\n    switch (target) {\n      case GL.TEXTURE_2D:\n      case GL.TEXTURE_CUBE_MAP:\n        gl.copyTexSubImage2D(\n          target,\n          targetMipmaplevel,\n          targetX,\n          targetY,\n          sourceX,\n          sourceY,\n          width,\n          height\n        );\n        break;\n      case GL.TEXTURE_2D_ARRAY:\n      case GL.TEXTURE_3D:\n        gl.copyTexSubImage3D(\n          target,\n          targetMipmaplevel,\n          targetX,\n          targetY,\n          targetZ,\n          sourceX,\n          sourceY,\n          width,\n          height\n        );\n        break;\n      default:\n    }\n  }\n  if (texture) {\n    texture.unbind();\n  }\n  gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n  return texture;\n}\n\n// NOTE: WEBLG2 only\n// Copies a rectangle of pixels between Framebuffer or Texture objects\n// eslint-disable-next-line max-statements, complexity\nexport function blit(\n  source,\n  target,\n  {\n    sourceAttachment = GL.COLOR_ATTACHMENT0,\n    sourceX0 = 0,\n    sourceY0 = 0,\n    sourceX1,\n    sourceY1,\n    targetX0 = 0,\n    targetY0 = 0,\n    targetX1,\n    targetY1,\n    color = true,\n    depth = false,\n    stencil = false,\n    mask = 0,\n    filter = GL.NEAREST\n  } = {}\n) {\n  const {framebuffer: srcFramebuffer, deleteFramebuffer: deleteSrcFramebuffer} = getFramebuffer(\n    source\n  );\n  const {framebuffer: dstFramebuffer, deleteFramebuffer: deleteDstFramebuffer} = getFramebuffer(\n    target\n  );\n\n  assert(srcFramebuffer);\n  assert(dstFramebuffer);\n  const {gl, handle, width, height, readBuffer} = dstFramebuffer;\n  assertWebGL2Context(gl);\n\n  if (!srcFramebuffer.handle && sourceAttachment === GL.COLOR_ATTACHMENT0) {\n    sourceAttachment = GL.FRONT;\n  }\n\n  if (color) {\n    mask |= GL.COLOR_BUFFER_BIT;\n  }\n  if (depth) {\n    mask |= GL.DEPTH_BUFFER_BIT;\n  }\n  if (stencil) {\n    mask |= GL.STENCIL_BUFFER_BIT;\n  }\n\n  if (deleteSrcFramebuffer || deleteDstFramebuffer) {\n    // Either source or destiantion was a texture object, which is wrapped in a Framebuffer objecgt as color attachment.\n    // Overwrite the mask to `COLOR_BUFFER_BIT`\n    if (mask & (GL.DEPTH_BUFFER_BIT | GL.STENCIL_BUFFER_BIT)) {\n      mask = GL.COLOR_BUFFER_BIT;\n      log.warn('Blitting from or into a Texture object, forcing mask to GL.COLOR_BUFFER_BIT')();\n    }\n  }\n  assert(mask);\n\n  sourceX1 = sourceX1 === undefined ? srcFramebuffer.width : sourceX1;\n  sourceY1 = sourceY1 === undefined ? srcFramebuffer.height : sourceY1;\n  targetX1 = targetX1 === undefined ? width : targetX1;\n  targetY1 = targetY1 === undefined ? height : targetY1;\n\n  const prevDrawHandle = gl.bindFramebuffer(GL.DRAW_FRAMEBUFFER, handle);\n  const prevReadHandle = gl.bindFramebuffer(GL.READ_FRAMEBUFFER, srcFramebuffer.handle);\n  gl.readBuffer(sourceAttachment);\n  gl.blitFramebuffer(\n    sourceX0,\n    sourceY0,\n    sourceX1,\n    sourceY1,\n    targetX0,\n    targetY0,\n    targetX1,\n    targetY1,\n    mask,\n    filter\n  );\n  gl.readBuffer(readBuffer);\n  gl.bindFramebuffer(GL.READ_FRAMEBUFFER, prevReadHandle || null);\n  gl.bindFramebuffer(GL.DRAW_FRAMEBUFFER, prevDrawHandle || null);\n  if (deleteSrcFramebuffer) {\n    srcFramebuffer.delete();\n  }\n  if (deleteDstFramebuffer) {\n    dstFramebuffer.delete();\n  }\n\n  return dstFramebuffer;\n}\n\n// Helper methods\n\nfunction getFramebuffer(source) {\n  if (!(source instanceof Framebuffer)) {\n    return {framebuffer: toFramebuffer(source), deleteFramebuffer: true};\n  }\n  return {framebuffer: source, deleteFramebuffer: false};\n}\n\nfunction getPixelArray(pixelArray, type, format, width, height) {\n  if (pixelArray) {\n    return pixelArray;\n  }\n  // Allocate pixel array if not already available, using supplied type\n  type = type || GL.UNSIGNED_BYTE;\n  const ArrayType = getTypedArrayFromGLType(type, {clamped: false});\n  const components = glFormatToComponents(format);\n  // TODO - check for composite type (components = 1).\n  return new ArrayType(width * height * components);\n}\n","// map of parameter setter function names, parameter constants, default values and types\n// - Uses gl function names, except when setter function exist that are named differently\n// - When the WebGL api offers <setter> and <setter>Separate (e.g. blendEquation and\n//   blendEquationSeparate, we use non-separate name, but accept both non-separate and\n//   separate arguments. Thus, a `getParameter` call will always return all the separate values\n//   in an array, in a form that can be accepted by the setter.\n\nimport GL from '@luma.gl/constants';\n\n// HELPERS\n\nfunction isArray(array) {\n  return Array.isArray(array) || ArrayBuffer.isView(array);\n}\n\nexport default {\n  framebuffer: (gl, framebuffer) => {\n    // accepts 1) a WebGLFramebuffer 2) null (default framebuffer), or 3) luma.gl Framebuffer class\n    // framebuffer is null when restoring to default framebuffer, otherwise use the WebGL handle.\n    const handle = framebuffer && 'handle' in framebuffer ? framebuffer.handle : framebuffer;\n    return gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  },\n  blend: (gl, value) => (value ? gl.enable(GL.BLEND) : gl.disable(GL.BLEND)),\n  blendColor: (gl, value) => gl.blendColor(...value),\n  blendEquation: (gl, args) => {\n    args = isArray(args) ? args : [args, args];\n    gl.blendEquationSeparate(...args);\n  },\n  blendFunc: (gl, args) => {\n    args = isArray(args) && args.length === 2 ? [...args, ...args] : args;\n    gl.blendFuncSeparate(...args);\n  },\n\n  clearColor: (gl, value) => gl.clearColor(...value),\n  clearDepth: (gl, value) => gl.clearDepth(value),\n  clearStencil: (gl, value) => gl.clearStencil(value),\n\n  colorMask: (gl, value) => gl.colorMask(...value),\n\n  cull: (gl, value) => (value ? gl.enable(GL.CULL_FACE) : gl.disable(GL.CULL_FACE)),\n  cullFace: (gl, value) => gl.cullFace(value),\n\n  depthTest: (gl, value) => (value ? gl.enable(GL.DEPTH_TEST) : gl.disable(GL.DEPTH_TEST)),\n  depthFunc: (gl, value) => gl.depthFunc(value),\n  depthMask: (gl, value) => gl.depthMask(value),\n  depthRange: (gl, value) => gl.depthRange(...value),\n\n  dither: (gl, value) => (value ? gl.enable(GL.DITHER) : gl.disable(GL.DITHER)),\n\n  derivativeHint: (gl, value) => {\n    // gl1: 'OES_standard_derivatives'\n    gl.hint(GL.FRAGMENT_SHADER_DERIVATIVE_HINT, value);\n  },\n\n  frontFace: (gl, value) => gl.frontFace(value),\n\n  mipmapHint: (gl, value) => gl.hint(GL.GENERATE_MIPMAP_HINT, value),\n\n  lineWidth: (gl, value) => gl.lineWidth(value),\n\n  polygonOffsetFill: (gl, value) =>\n    value ? gl.enable(GL.POLYGON_OFFSET_FILL) : gl.disable(GL.POLYGON_OFFSET_FILL),\n  polygonOffset: (gl, value) => gl.polygonOffset(...value),\n\n  sampleCoverage: (gl, value) => gl.sampleCoverage(...value),\n\n  scissorTest: (gl, value) => (value ? gl.enable(GL.SCISSOR_TEST) : gl.disable(GL.SCISSOR_TEST)),\n  scissor: (gl, value) => gl.scissor(...value),\n\n  stencilTest: (gl, value) => (value ? gl.enable(GL.STENCIL_TEST) : gl.disable(GL.STENCIL_TEST)),\n  stencilMask: (gl, value) => {\n    value = isArray(value) ? value : [value, value];\n    const [mask, backMask] = value;\n    gl.stencilMaskSeparate(GL.FRONT, mask);\n    gl.stencilMaskSeparate(GL.BACK, backMask);\n  },\n  stencilFunc: (gl, args) => {\n    args = isArray(args) && args.length === 3 ? [...args, ...args] : args;\n    const [func, ref, mask, backFunc, backRef, backMask] = args;\n    gl.stencilFuncSeparate(GL.FRONT, func, ref, mask);\n    gl.stencilFuncSeparate(GL.BACK, backFunc, backRef, backMask);\n  },\n  stencilOp: (gl, args) => {\n    args = isArray(args) && args.length === 3 ? [...args, ...args] : args;\n    const [sfail, dpfail, dppass, backSfail, backDpfail, backDppass] = args;\n    gl.stencilOpSeparate(GL.FRONT, sfail, dpfail, dppass);\n    gl.stencilOpSeparate(GL.BACK, backSfail, backDpfail, backDppass);\n  },\n\n  viewport: (gl, value) => gl.viewport(...value)\n};\n","import {setParameters as glSetParameters} from './unified-parameter-api';\nimport FUNCTION_STYLE_PARAMETER_SETTERS from './webgl-setter-function-table';\n\n// Adds support for using gl function names (in addition to parameter constants)\n// as keys in setParameters\n//\n// Note: Value may be \"normalized\" (in case a short form is supported).\n// In that case the normalized value is returned.\n\nexport function setParameters(gl, parameters) {\n  // Handles any GL parameter keys\n  glSetParameters(gl, parameters);\n  // Check for function style keys\n  for (const key in parameters) {\n    const setter = FUNCTION_STYLE_PARAMETER_SETTERS[key];\n    if (setter) {\n      setter(gl, parameters[key], key);\n    }\n  }\n}\n","/* eslint-disable no-inline-comments, max-len, camelcase */\nimport GL from '@luma.gl/constants';\n\nconst OES_element_index = 'OES_element_index';\nconst WEBGL_draw_buffers = 'WEBGL_draw_buffers';\nconst EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';\nconst EXT_disjoint_timer_query_webgl2 = 'EXT_disjoint_timer_query_webgl2';\nconst EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';\nconst WEBGL_debug_renderer_info = 'WEBGL_debug_renderer_info';\n\nconst GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8b8b;\nconst GL_DONT_CARE = 0x1100;\nconst GL_GPU_DISJOINT_EXT = 0x8fbb;\nconst GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84ff;\nconst GL_UNMASKED_VENDOR_WEBGL = 0x9245; // vendor string of the graphics driver.\nconst GL_UNMASKED_RENDERER_WEBGL = 0x9246; // renderer string of the graphics driver.\n\nconst getWebGL2ValueOrZero = gl => (!isWebGL2(gl) ? 0 : undefined);\n\n// if a function returns undefined in this table,\n// the original getParameter will be called, defeating the override\nconst WEBGL_PARAMETERS = {\n  [GL.READ_BUFFER]: gl => (!isWebGL2(gl) ? GL.COLOR_ATTACHMENT0 : undefined),\n\n  // WebGL2 context parameters\n  [GL_FRAGMENT_SHADER_DERIVATIVE_HINT]: gl => (!isWebGL2(gl) ? GL_DONT_CARE : undefined),\n\n  [GL.RASTERIZER_DISCARD]: getWebGL2ValueOrZero,\n\n  [GL.SAMPLES]: getWebGL2ValueOrZero,\n\n  // WebGL2 extension context parameters\n  [GL_GPU_DISJOINT_EXT]: (gl, getParameter) => {\n    const ext = isWebGL2(gl)\n      ? gl.getExtension(EXT_disjoint_timer_query_webgl2)\n      : gl.getExtension(EXT_disjoint_timer_query);\n    return ext && ext.GPU_DISJOINT_EXT ? getParameter(ext.GPU_DISJOINT_EXT) : 0;\n  },\n\n  // Extension fixed values\n  [GL_UNMASKED_VENDOR_WEBGL]: (gl, getParameter) => {\n    const ext = gl.getExtension(WEBGL_debug_renderer_info);\n    return getParameter((ext && ext.UNMASKED_VENDOR_WEBGL) || GL.VENDOR);\n  },\n\n  [GL_UNMASKED_RENDERER_WEBGL]: (gl, getParameter) => {\n    const ext = gl.getExtension(WEBGL_debug_renderer_info);\n    return getParameter((ext && ext.UNMASKED_RENDERER_WEBGL) || GL.RENDERER);\n  },\n\n  // Extension LIMITS\n  [GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT]: (gl, getParameter) => {\n    const ext = gl.luma.extensions[EXT_texture_filter_anisotropic];\n    return ext ? getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1.0;\n  },\n\n  // WebGL2 Limits\n  [GL.MAX_3D_TEXTURE_SIZE]: getWebGL2ValueOrZero,\n  [GL.MAX_ARRAY_TEXTURE_LAYERS]: getWebGL2ValueOrZero,\n  [GL.MAX_CLIENT_WAIT_TIMEOUT_WEBGL]: getWebGL2ValueOrZero,\n  [GL.MAX_COLOR_ATTACHMENTS]: (gl, getParameter) => {\n    if (!isWebGL2(gl)) {\n      const ext = gl.getExtension(WEBGL_draw_buffers);\n      return ext ? getParameter(ext.MAX_COLOR_ATTACHMENTS_WEBGL) : 0;\n    }\n    return undefined;\n  },\n  [GL.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_COMBINED_UNIFORM_BLOCKS]: getWebGL2ValueOrZero,\n  [GL.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_DRAW_BUFFERS]: gl => {\n    if (!isWebGL2(gl)) {\n      const ext = gl.getExtension(WEBGL_draw_buffers);\n      return ext ? ext.MAX_DRAW_BUFFERS_WEBGL : 0;\n    }\n    return undefined;\n  },\n  [GL.MAX_ELEMENT_INDEX]:\n    // Guess: per webglstats.com 99.6% of webgl2 supports 2147483647\n    gl => (gl.getExtension(OES_element_index) ? 2147483647 : 65535),\n  [GL.MAX_ELEMENTS_INDICES]:\n    // Guess: \"Reasonably safe\" per webglstats.com - could be higher/lower (on some mobile devices)\n    gl => (gl.getExtension(OES_element_index) ? 16777216 : 65535),\n  [GL.MAX_ELEMENTS_VERTICES]:\n    // Guess: \"Reasonably safe\" per webglstats.com - could be higher/lower (on some mobile devices)\n    gl => 16777216,\n  [GL.MAX_FRAGMENT_INPUT_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_FRAGMENT_UNIFORM_BLOCKS]: getWebGL2ValueOrZero,\n  [GL.MAX_FRAGMENT_UNIFORM_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_SAMPLES]: getWebGL2ValueOrZero,\n  [GL.MAX_SERVER_WAIT_TIMEOUT]: getWebGL2ValueOrZero,\n  [GL.MAX_TEXTURE_LOD_BIAS]: getWebGL2ValueOrZero,\n  [GL.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS]: getWebGL2ValueOrZero,\n  [GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_UNIFORM_BLOCK_SIZE]: getWebGL2ValueOrZero,\n  [GL.MAX_UNIFORM_BUFFER_BINDINGS]: getWebGL2ValueOrZero,\n  [GL.MAX_VARYING_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_VERTEX_OUTPUT_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_VERTEX_UNIFORM_BLOCKS]: getWebGL2ValueOrZero,\n  [GL.MAX_VERTEX_UNIFORM_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MIN_PROGRAM_TEXEL_OFFSET]: getWebGL2ValueOrZero,\n  [GL.MAX_PROGRAM_TEXEL_OFFSET]: getWebGL2ValueOrZero,\n  [GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT]: getWebGL2ValueOrZero\n};\n\n// Return true if WebGL2 context\nfunction isWebGL2(gl) {\n  return Boolean(gl && gl._version === 2);\n}\n\n// A \"replacement\" gl.getParameter that accepts \"enums\" from extensions and WebGL2\n// and returns reasonably safe defaults\nexport function getParameterPolyfill(gl, originalGetParameter, pname) {\n  // Return mock limits (usually 0) for WebGL2 constants to ensure these\n  // can be queries without error\n  const limit = WEBGL_PARAMETERS[pname];\n  const value = typeof limit === 'function' ? limit(gl, originalGetParameter, pname) : limit;\n  const result = value !== undefined ? value : originalGetParameter(pname);\n  return result;\n}\n","import GL from '@luma.gl/constants';\nimport assert from './assert';\n\nimport {getParameterPolyfill} from './polyfills/get-parameter-polyfill';\n\nconst OES_vertex_array_object = 'OES_vertex_array_object';\nconst ANGLE_instanced_arrays = 'ANGLE_instanced_arrays';\nconst WEBGL_draw_buffers = 'WEBGL_draw_buffers';\nconst EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';\nconst EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';\n\nconst ERR_VAO_NOT_SUPPORTED = 'VertexArray requires WebGL2 or OES_vertex_array_object extension';\n\n// Return true if WebGL2 context\nfunction isWebGL2(gl) {\n  return Boolean(gl && gl._version === 2);\n}\n\n// Return object with webgl2 flag and an extension\nfunction getExtensionData(gl, extension) {\n  return {\n    webgl2: isWebGL2(gl),\n    ext: gl.getExtension(extension)\n  };\n}\n\n// function mapExtensionConstant(gl, constant) {\n//   switch (constant) {\n//   case ext.FRAGMENT_SHADER_DERIVATIVE_HINT_OES: return GL.FRAGMENT_SHADER_DERIVATIVE_HINT;\n//   }\n// }\n\nexport const WEBGL2_CONTEXT_POLYFILLS = {\n  // POLYFILL TABLE\n  [OES_vertex_array_object]: {\n    meta: {suffix: 'OES'},\n    // NEW METHODS\n    createVertexArray: () => {\n      assert(false, ERR_VAO_NOT_SUPPORTED);\n    },\n    deleteVertexArray: () => {},\n    bindVertexArray: () => {},\n    isVertexArray: () => false\n  },\n  [ANGLE_instanced_arrays]: {\n    meta: {\n      suffix: 'ANGLE'\n      // constants: {\n      //   VERTEX_ATTRIB_ARRAY_DIVISOR: 'VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE'\n      // }\n    },\n    vertexAttribDivisor(location, divisor) {\n      // Accept divisor 0 even if instancing is not supported (0 = no instancing)\n      assert(divisor === 0, 'WebGL instanced rendering not supported');\n    },\n    drawElementsInstanced: () => {},\n    drawArraysInstanced: () => {}\n  },\n  [WEBGL_draw_buffers]: {\n    meta: {\n      suffix: 'WEBGL'\n    },\n    drawBuffers: () => {\n      assert(false);\n    }\n  },\n  [EXT_disjoint_timer_query]: {\n    meta: {suffix: 'EXT'},\n    // WebGL1: Polyfills the WebGL2 Query API\n    createQuery: () => {\n      assert(false);\n    },\n    deleteQuery: () => {\n      assert(false);\n    },\n    beginQuery: () => {\n      assert(false);\n    },\n    endQuery: () => {},\n    getQuery(handle, pname) {\n      return this.getQueryObject(handle, pname);\n    },\n    // The WebGL1 extension uses getQueryObject rather then getQueryParameter\n    getQueryParameter(handle, pname) {\n      return this.getQueryObject(handle, pname);\n    },\n    getQueryObject: () => {}\n  }\n};\n\nexport const WEBGL2_CONTEXT_OVERRIDES = {\n  // Ensure readBuffer is a no-op\n  readBuffer: (gl, originalFunc, attachment) => {\n    if (isWebGL2(gl)) {\n      originalFunc(attachment);\n    } else {\n      // assert(attachment !== GL_COLOR_ATTACHMENT0 && attachment !== GL_FRONT);\n    }\n  },\n  // Override for getVertexAttrib that returns sane values for non-WebGL1 constants\n  getVertexAttrib: (gl, originalFunc, location, pname) => {\n    // const gl = this; // eslint-disable-line\n    const {webgl2, ext} = getExtensionData(gl, ANGLE_instanced_arrays);\n\n    let result;\n    switch (pname) {\n      // WebGL1 attributes will never be integer\n      case GL.VERTEX_ATTRIB_ARRAY_INTEGER:\n        result = !webgl2 ? false : undefined;\n        break;\n      // if instancing is not available, return 0 meaning divisor has not been set\n      case GL.VERTEX_ATTRIB_ARRAY_DIVISOR:\n        result = !webgl2 && !ext ? 0 : undefined;\n        break;\n      default:\n    }\n\n    return result !== undefined ? result : originalFunc(location, pname);\n  },\n  // Handle transform feedback and uniform block queries in WebGL1\n  getProgramParameter: (gl, originalFunc, program, pname) => {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case GL.TRANSFORM_FEEDBACK_BUFFER_MODE:\n          return GL.SEPARATE_ATTRIBS;\n        case GL.TRANSFORM_FEEDBACK_VARYINGS:\n          return 0;\n        case GL.ACTIVE_UNIFORM_BLOCKS:\n          return 0;\n        default:\n      }\n    }\n    return originalFunc(program, pname);\n  },\n  getInternalformatParameter: (gl, originalFunc, target, format, pname) => {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case GL.SAMPLES:\n          return new Int32Array([0]);\n        default:\n      }\n    }\n    return gl.getInternalformatParameter(target, format, pname);\n  },\n  getTexParameter(gl, originalFunc, target, pname) {\n    switch (pname) {\n      case GL.TEXTURE_MAX_ANISOTROPY_EXT:\n        const {extensions} = gl.luma;\n        const ext = extensions[EXT_texture_filter_anisotropic];\n        pname = (ext && ext.TEXTURE_MAX_ANISOTROPY_EXT) || GL.TEXTURE_MAX_ANISOTROPY_EXT;\n        break;\n      default:\n    }\n    return originalFunc(target, pname);\n  },\n  getParameter: getParameterPolyfill,\n  hint(gl, originalFunc, pname, value) {\n    // TODO - handle GL.FRAGMENT_SHADER_DERIVATIVE_HINT:\n    // switch (pname) {\n    // case GL.FRAGMENT_SHADER_DERIVATIVE_HINT:\n    // }\n    return originalFunc(pname, value);\n  }\n};\n","const DEFAULT_HIGHLIGHT_COLOR = new Uint8Array([0, 255, 255, 255]);\n\nconst DEFAULT_MODULE_OPTIONS = {\n  pickingSelectedColor: null, //  Set to a picking color to visually highlight that item\n  pickingHighlightColor: DEFAULT_HIGHLIGHT_COLOR, // Color of visual highlight of \"selected\" item\n  pickingThreshold: 1.0,\n  pickingActive: false // Set to true when rendering to off-screen \"picking\" buffer\n};\n\n/* eslint-disable camelcase */\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS) {\n  const uniforms = {};\n  if (opts.pickingSelectedColor !== undefined) {\n    if (opts.pickingSelectedColor === null) {\n      uniforms.picking_uSelectedColorValid = 0;\n    } else {\n      const selectedColor = [\n        opts.pickingSelectedColor[0],\n        opts.pickingSelectedColor[1],\n        opts.pickingSelectedColor[2]\n      ];\n      uniforms.picking_uSelectedColorValid = 1;\n      uniforms.picking_uSelectedColor = selectedColor;\n    }\n  }\n  if (opts.pickingHighlightColor !== undefined) {\n    uniforms.picking_uHighlightColor = opts.pickingHighlightColor;\n  }\n  // TODO - major hack - decide on normalization and remove\n  if (opts.pickingThreshold !== undefined) {\n    uniforms.picking_uThreshold = opts.pickingThreshold;\n  }\n  if (opts.pickingActive !== undefined) {\n    uniforms.picking_uActive = opts.pickingActive ? 1 : 0;\n  }\n  return uniforms;\n}\n\nconst vs = `\\\nuniform vec3 picking_uSelectedColor;\nuniform float picking_uThreshold;\nuniform bool picking_uSelectedColorValid;\n\nout vec4 picking_vRGBcolor_Aselected;\n\nconst float COLOR_SCALE = 1. / 255.;\n\nbool isVertexPicked(vec3 vertexColor) {\n  return\n    picking_uSelectedColorValid &&\n    abs(vertexColor.r - picking_uSelectedColor.r) < picking_uThreshold &&\n    abs(vertexColor.g - picking_uSelectedColor.g) < picking_uThreshold &&\n    abs(vertexColor.b - picking_uSelectedColor.b) < picking_uThreshold;\n}\n\nvoid picking_setPickingColor(vec3 pickingColor) {\n  // Do the comparison with selected item color in vertex shader as it should mean fewer compares\n  picking_vRGBcolor_Aselected.a =\n    float(isVertexPicked(pickingColor));\n\n  // Stores the picking color so that the fragment shader can render it during picking\n  picking_vRGBcolor_Aselected.rgb = pickingColor * COLOR_SCALE;\n}\n`;\n\nconst fs = `\\\nuniform bool picking_uActive; // true during rendering to offscreen picking buffer\nuniform vec3 picking_uSelectedColor;\nuniform vec4 picking_uHighlightColor;\n\nin vec4 picking_vRGBcolor_Aselected;\n\nconst float COLOR_SCALE = 1. / 255.;\n\n/*\n * Returns highlight color if this item is selected.\n */\nvec4 picking_filterHighlightColor(vec4 color) {\n  bool selected = bool(picking_vRGBcolor_Aselected.a);\n\n  if (selected) {\n    vec4 highLightColor = picking_uHighlightColor * COLOR_SCALE;\n\n    float highLightAlpha = highLightColor.a;\n    float blendedAlpha = highLightAlpha + color.a * (1.0 - highLightAlpha);\n    float highLightRatio = highLightAlpha / blendedAlpha;\n\n    vec3 blendedRGB = mix(color.rgb, highLightColor.rgb, highLightRatio);\n    return vec4(blendedRGB, blendedAlpha);\n  } else {\n    return color;\n  }\n}\n\n/*\n * Returns picking color if picking enabled else unmodified argument.\n */\nvec4 picking_filterPickingColor(vec4 color) {\n  vec3 pickingColor = picking_vRGBcolor_Aselected.rgb;\n  if (picking_uActive && length(pickingColor) < 0.001) {\n    discard;\n  }\n  return picking_uActive ? vec4(pickingColor, 1.0) : color;\n}\n\n/*\n * Returns picking color if picking is enabled if not\n * highlight color if this item is selected, otherwise unmodified argument.\n */\nvec4 picking_filterColor(vec4 color) {\n  vec4 highightColor = picking_filterHighlightColor(color);\n  return picking_filterPickingColor(highightColor);\n}\n\n`;\n\nexport default {\n  name: 'picking',\n  vs,\n  fs,\n  getUniforms\n};\n","import {Matrix4} from 'math.gl';\n\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\nconst DEFAULT_MODULE_OPTIONS = {\n  modelMatrix: IDENTITY_MATRIX,\n  viewMatrix: IDENTITY_MATRIX,\n  projectionMatrix: IDENTITY_MATRIX,\n  cameraPositionWorld: [0, 0, 0]\n};\n\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS, prevUniforms = {}) {\n  // const viewProjectionInverse = viewProjection.invert();\n  // viewInverseMatrix: view.invert(),\n  // viewProjectionInverseMatrix: viewProjectionInverse\n\n  const uniforms = {};\n  if (opts.modelMatrix !== undefined) {\n    uniforms.modelMatrix = opts.modelMatrix;\n  }\n  if (opts.viewMatrix !== undefined) {\n    uniforms.viewMatrix = opts.viewMatrix;\n  }\n  if (opts.projectionMatrix !== undefined) {\n    uniforms.projectionMatrix = opts.projectionMatrix;\n  }\n  if (opts.cameraPositionWorld !== undefined) {\n    uniforms.cameraPositionWorld = opts.cameraPositionWorld;\n  }\n\n  // COMPOSITE UNIFORMS\n  if (opts.projectionMatrix !== undefined || opts.viewMatrix !== undefined) {\n    uniforms.viewProjectionMatrix = new Matrix4(opts.projectionMatrix).multiplyRight(\n      opts.viewMatrix\n    );\n  }\n\n  return uniforms;\n}\n\nconst common = `\\\nvarying vec4 project_vPositionWorld;\nvarying vec3 project_vNormalWorld;\n\nvec4 project_getPosition_World() {\n  return project_vPositionWorld;\n}\n\nvec3 project_getNormal_World() {\n  return project_vNormalWorld;\n}\n`;\n\nconst vs = `\\\n${common}\n\n// Unprefixed uniforms\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewProjectionMatrix;\nuniform vec3 cameraPositionWorld;\n\nstruct World {\n  vec3 position;\n  vec3 normal;\n};\n\nWorld world;\n\nvoid project_setPosition(vec4 position) {\n  project_vPositionWorld = position;\n}\n\nvoid project_setNormal(vec3 normal) {\n  project_vNormalWorld = normal;\n}\n\nvoid project_setPositionAndNormal_World(vec3 position, vec3 normal) {\n  world.position = position;\n  world.normal = normal;\n}\n\nvoid project_setPositionAndNormal_Model(vec3 position, vec3 normal) {\n  world.position = (modelMatrix * vec4(position, 1.)).xyz;\n  world.normal = mat3(modelMatrix) * normal;\n}\n\nvec4 project_model_to_clipspace(vec4 position) {\n  return viewProjectionMatrix * modelMatrix * position;\n}\n\nvec4 project_model_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * modelMatrix * vec4(position, 1.);\n}\n\nvec4 project_world_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_view_to_clipspace(vec3 position) {\n  return projectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n`;\n\nconst fs = `\n${common}\\\n`;\n\nexport default {\n  name: 'project',\n  getUniforms,\n  vs,\n  fs\n};\n","// Cheap lighting - single directional light, single dot product, one uniform\n\nimport project from '../project/project';\n\n/* eslint-disable camelcase */\nconst DEFAULT_LIGHT_DIRECTION = new Float32Array([1, 1, 2]);\n\nconst DEFAULT_MODULE_OPTIONS = {\n  lightDirection: DEFAULT_LIGHT_DIRECTION\n};\n\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS) {\n  const uniforms = {};\n  if (opts.lightDirection) {\n    uniforms.dirlight_uLightDirection = opts.lightDirection;\n  }\n  return uniforms;\n}\n\n// TODO - reuse normal from geometry module\nconst vs = null;\n\nconst fs = `\\\nuniform vec3 dirlight_uLightDirection;\n\n/*\n * Returns color attenuated by angle from light source\n */\nvec4 dirlight_filterColor(vec4 color) {\n  vec3 normal = project_getNormal_World();\n  float d = abs(dot(normalize(normal), normalize(dirlight_uLightDirection)));\n  return vec4(color.rgb * d, color.a);\n}\n`;\n\nexport default {\n  name: 'dirlight',\n  vs,\n  fs,\n  getUniforms,\n  dependencies: [project]\n};\n","import {pushContextState, popContextState} from './track-context-state';\nimport {setParameters} from '../unified-parameter-api/set-parameters';\nimport {assert, isObjectEmpty} from '../utils';\n\n// Stores current \"global\" WebGL context settings, changes selected parameters,\n// executes function, restores parameters\nexport function withParameters(gl, parameters, func) {\n  // assertWebGLContext(gl);\n\n  if (isObjectEmpty(parameters)) {\n    // Avoid setting state if no parameters provided. Just call and return\n    return func(gl);\n  }\n\n  const {nocatch = true} = parameters;\n\n  // frameBuffer not supported: use framebuffer API\n  // TODO - is this still true?\n  assert(!parameters.frameBuffer);\n\n  pushContextState(gl);\n  setParameters(gl, parameters);\n\n  // Setup is done, call the function\n  let value;\n\n  if (nocatch) {\n    // Avoid try catch to minimize stack size impact for safe execution paths\n    value = func(gl);\n    popContextState(gl);\n  } else {\n    // Wrap in a try-catch to ensure that parameters are restored on exceptions\n    try {\n      value = func(gl);\n    } finally {\n      popContextState(gl);\n    }\n  }\n\n  return value;\n}\n","// Returns true if given object is empty, false otherwise.\nexport function isObjectEmpty(object) {\n  for (const key in object) {\n    return false;\n  }\n  return true;\n}\n\n// Returns true if WebGL2 context (Heuristic)\nexport function isWebGL2(gl) {\n  return Boolean(gl && gl._version === 2);\n}\n","// Avoid bundling assert polyfill module\nexport default function assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'luma.gl: assertion failed.');\n  }\n}\n","/* Use as\nimport {checkProps} from '../util/check-props;'\n\nconst PROP_CHECKS = {\n  // Removed props no longer supported, print error and link to upgrade guide\n  removedProps: {\n  },\n  // Deprecated props\n  deprecatedProps: {\n    offset: 'accessor',\n    stride: 'accessor',\n    type: 'accessor',\n    size: 'accessor',\n    divisor: 'accessor',\n    normalized: 'accessor',\n    integer: 'accessor'\n  },\n  // Deprecated props that can be autosubstituted, print warning and return updated props object\n  replacedProps: {\n    bytes: 'byteLength'\n  }\n}\n\nclass Buffer {\n  setProps(props) {\n    checkProps('Buffer', props, PROP_CHECKS);\n  }\n}\n*/\nimport log from './log';\n\nexport function checkProps(className, props, propChecks) {\n  const {removedProps = {}, deprecatedProps = {}, replacedProps = {}} = propChecks;\n\n  // removedProps: Removed props no longer supported\n  // print error and link to upgrade guide\n  for (const propName in removedProps) {\n    if (propName in props) {\n      const replacementProp = removedProps[propName];\n      const replacement = replacementProp ? `${className}.${removedProps[propName]}` : 'N/A';\n      log.removed(`${className}.${propName}`, replacement)();\n    }\n  }\n\n  // deprecatedProps: Deprecated props that can not be autosubstituted\n  // print warning and rely on caller to substitute\n  for (const propName in deprecatedProps) {\n    if (propName in props) {\n      const replacementProp = deprecatedProps[propName];\n      log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();\n    }\n  }\n\n  // replacedProps: Deprecated props that can be autosubstituted\n  // print warning and return updated props object\n  let newProps = null;\n  for (const propName in replacedProps) {\n    if (propName in props) {\n      const replacementProp = replacedProps[propName];\n      log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();\n      newProps = newProps || Object.assign({}, props);\n      newProps[replacementProp] = props[propName];\n      delete newProps[propName];\n    }\n  }\n\n  return newProps || props;\n}\n","// import {WebGLRenderingContext, WebGL2RenderingContext} from './webgl-types';\nimport {assert} from '../utils';\n\n// Heuristic testing of contexts (to indentify debug wrappers around gl contexts)\n// const GL_ARRAY_BUFFER = 0x8892;\n\nexport const ERR_CONTEXT = 'Invalid WebGLRenderingContext';\nexport const ERR_WEBGL = ERR_CONTEXT;\nexport const ERR_WEBGL2 = 'Requires WebGL2';\n\nexport function isWebGL(gl) {\n  return Boolean(gl && Number.isFinite(gl._version));\n}\n\nexport function isWebGL2(gl) {\n  return Boolean(gl && gl._version === 2);\n}\n\nexport function assertWebGLContext(gl) {\n  // Need to handle debug context\n  assert(isWebGL(gl), ERR_CONTEXT);\n}\n\nexport function assertWebGL2Context(gl) {\n  // Need to handle debug context\n  assert(isWebGL2(gl), ERR_WEBGL2);\n}\n","import assert from './assert';\n\nconst uidCounters = {};\n\n/**\n * Returns a UID.\n * @param {String} id= - Identifier base name\n * @return {number} uid\n **/\nexport function uid(id = 'id') {\n  uidCounters[id] = uidCounters[id] || 1;\n  const count = uidCounters[id]++;\n  return `${id}-${count}`;\n}\n\n/**\n * Verifies if a given number is power of two or not.\n * @param {object} n - The number to check.\n * @return {Array} Returns true if the given number is power of 2, false otherwise.\n **/\nexport function isPowerOfTwo(n) {\n  assert(typeof n === 'number', 'Input must be a number');\n  return n && (n & (n - 1)) === 0;\n}\n\n// Returns true if given object is empty, false otherwise.\nexport function isObjectEmpty(obj) {\n  let isEmpty = true;\n  /* eslint-disable no-unused-vars  */\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n  /* eslint-enable no-unused-vars  */\n  return isEmpty;\n}\n","import {assert} from '../utils';\n\n// Resolve a WebGL enumeration name (returns itself if already a number)\nexport function getKeyValue(gl, name) {\n  // If not a string, return (assume number)\n  if (typeof name !== 'string') {\n    return name;\n  }\n\n  // If string converts to number, return number\n  const number = Number(name);\n  if (!isNaN(number)) {\n    return number;\n  }\n\n  // Look up string, after removing any 'GL.' or 'gl.' prefix\n  name = name.replace(/^.*\\./, '');\n  const value = gl[name];\n  assert(value !== undefined, `Accessing undefined constant GL.${name}`);\n  return value;\n}\n\nexport function getKey(gl, value) {\n  value = Number(value);\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return `GL.${key}`;\n    }\n  }\n  return String(value);\n}\n\nexport function getKeyType(gl, value) {\n  assert(value !== undefined, 'undefined key');\n  value = Number(value);\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return `GL.${key}`;\n    }\n  }\n  return String(value);\n}\n","import log from './log';\n\n// Install stubs for removed methods\nexport function stubRemovedMethods(instance, className, version, methodNames) {\n  const upgradeMessage = `See luma.gl ${version} Upgrade Guide at \\\nhttp://uber.github.io/luma.gl/#/documentation/overview/upgrade-guide`;\n\n  const prototype = Object.getPrototypeOf(instance);\n\n  methodNames.forEach(methodName => {\n    if (prototype.methodName) {\n      return;\n    }\n\n    prototype[methodName] = () => {\n      log.removed(`Calling removed method ${className}.${methodName}: `, upgradeMessage)();\n      throw new Error(methodName);\n    };\n  });\n}\n","// Feature detection for WebGL\n//\n// Provides a function that enables simple checking of which WebGL features are\n// available in an WebGL1 or WebGL2 environment.\n\nimport WEBGL_FEATURES from './webgl-features-table';\nimport {isWebGL2} from '../webgl-utils';\nimport {assert, log} from '../utils';\n\nconst LOG_UNSUPPORTED_FEATURE = 2;\n\n// Check one feature\nexport function hasFeature(gl, feature) {\n  return hasFeatures(gl, feature);\n}\n\n// Check one or more features\nexport function hasFeatures(gl, features) {\n  features = Array.isArray(features) ? features : [features];\n  return features.every(feature => {\n    return isFeatureSupported(gl, feature);\n  });\n}\n\n// Return a list of supported features\nexport function getFeatures(gl) {\n  gl.luma = gl.luma || {};\n  if (!gl.luma.caps) {\n    gl.luma.caps = {};\n    gl.luma.caps.webgl2 = isWebGL2(gl);\n    for (const cap in WEBGL_FEATURES) {\n      gl.luma.caps[cap] = isFeatureSupported(gl, cap);\n    }\n  }\n  return gl.luma.caps;\n}\n\n// TODO - cache the value\nfunction isFeatureSupported(gl, cap) {\n  const feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n\n  // Get extension name from table\n  const featureDefinition = isWebGL2(gl) ? feature[1] || feature[0] : feature[0];\n\n  let isSupported;\n\n  // Check if the value is dependent on checking one or more extensions\n  if (typeof featureDefinition === 'function') {\n    isSupported = featureDefinition(gl);\n  } else if (Array.isArray(featureDefinition)) {\n    isSupported = true;\n    for (const extension of featureDefinition) {\n      isSupported = isSupported && Boolean(gl.getExtension(extension));\n    }\n  } else if (typeof featureDefinition === 'string') {\n    isSupported = Boolean(gl.getExtension(featureDefinition));\n  } else if (typeof featureDefinition === 'boolean') {\n    isSupported = featureDefinition;\n  } else {\n    assert(false);\n  }\n\n  if (!isSupported) {\n    log.log(LOG_UNSUPPORTED_FEATURE, `Feature: ${cap} not supported`)();\n  }\n\n  return isSupported;\n}\n","// WebGL2 Query (also handles disjoint timer extensions)\n/* global requestAnimationFrame */\nimport Resource from './resource';\nimport {FEATURES, hasFeatures} from '../features';\nimport {isWebGL2} from '../webgl-utils';\nimport {assert} from '../utils';\n\nconst GL_QUERY_RESULT = 0x8866; // Returns a GLuint containing the query result.\nconst GL_QUERY_RESULT_AVAILABLE = 0x8867; // whether query result is available.\n\nconst GL_TIME_ELAPSED_EXT = 0x88bf; // Elapsed time (in nanoseconds).\nconst GL_GPU_DISJOINT_EXT = 0x8fbb; // Whether GPU performed any disjoint operation.\n\nconst GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8c88; // #primitives written to feedback buffers\nconst GL_ANY_SAMPLES_PASSED = 0x8c2f; // Occlusion query (if drawing passed depth test)\nconst GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8d6a; // Occlusion query less accurate/faster version\n\nexport default class Query extends Resource {\n  // Returns true if Query is supported by the WebGL implementation\n  // Can also check whether timestamp queries are available.\n  static isSupported(gl, opts = []) {\n    const webgl2 = isWebGL2(gl);\n\n    // Initial value\n    const hasTimerQuery = hasFeatures(gl, FEATURES.TIMER_QUERY);\n    let supported = webgl2 || hasTimerQuery;\n\n    for (const key of opts) {\n      switch (key) {\n        case 'queries':\n          supported = supported && webgl2;\n          break;\n        case 'timers':\n          supported = supported && hasTimerQuery;\n          break;\n        default:\n          assert(false);\n      }\n    }\n\n    return supported;\n  }\n\n  // Create a query class\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    this.target = null;\n    this._queryPending = false;\n    this._pollingPromise = null;\n\n    Object.seal(this);\n  }\n\n  // Shortcut for timer query (dependent on extension in both WebGL1 and 2)\n  // Measures GPU time delta between this call and a matching `end` call in the\n  // GPU instruction stream.\n  beginTimeElapsedQuery() {\n    return this.begin(GL_TIME_ELAPSED_EXT);\n  }\n\n  // Shortcut for occlusion queries\n  beginOcclusionQuery({conservative = false} = {}) {\n    return this.begin(conservative ? GL_ANY_SAMPLES_PASSED_CONSERVATIVE : GL_ANY_SAMPLES_PASSED);\n  }\n\n  // Shortcut for transformFeedbackQuery\n  beginTransformFeedbackQuery() {\n    return this.begin(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);\n  }\n\n  // Due to OpenGL API limitations, after calling `begin()` on one Query\n  // instance, `end()` must be called on that same instance before\n  // calling `begin()` on another query. While there can be multiple\n  // outstanding queries representing disjoint `begin()`/`end()` intervals.\n  // It is not possible to interleave or overlap `begin` and `end` calls.\n  begin(target) {\n    // Don't start a new query if one is already active.\n    if (this._queryPending) {\n      return this;\n    }\n\n    this.target = target;\n    this.gl.beginQuery(this.target, this.handle);\n\n    return this;\n  }\n\n  // ends the current query\n  end() {\n    // Can't end a new query if the last one hasn't been resolved.\n    if (this._queryPending) {\n      return this;\n    }\n\n    if (this.target) {\n      this.gl.endQuery(this.target);\n      this.target = null;\n      this._queryPending = true;\n    }\n    return this;\n  }\n\n  // Returns true if the query result is available\n  isResultAvailable() {\n    if (!this._queryPending) {\n      return false;\n    }\n\n    const resultAvailable = this.gl.getQueryParameter(this.handle, GL_QUERY_RESULT_AVAILABLE);\n    if (resultAvailable) {\n      this._queryPending = false;\n    }\n    return resultAvailable;\n  }\n\n  // Timing query is disjoint, i.e. results are invalid\n  isTimerDisjoint() {\n    return this.gl.getParameter(GL_GPU_DISJOINT_EXT);\n  }\n\n  // Returns query result.\n  getResult() {\n    return this.gl.getQueryParameter(this.handle, GL_QUERY_RESULT);\n  }\n\n  // Returns the query result, converted to milliseconds to match JavaScript conventions.\n  getTimerMilliseconds() {\n    return this.getResult() / 1e6;\n  }\n\n  // Polls the query\n  createPoll(limit = Number.POSITIVE_INFINITY) {\n    if (this._pollingPromise) {\n      return this._pollingPromise;\n    }\n\n    let counter = 0;\n\n    this._pollingPromise = new Promise((resolve, reject) => {\n      const poll = () => {\n        if (this.isResultAvailable()) {\n          resolve(this.getResult());\n          this._pollingPromise = null;\n        } else if (counter++ > limit) {\n          reject('Timed out');\n          this._pollingPromise = null;\n        } else {\n          requestAnimationFrame(poll);\n        }\n      };\n\n      requestAnimationFrame(poll);\n    });\n\n    return this._pollingPromise;\n  }\n\n  _createHandle() {\n    return Query.isSupported(this.gl) ? this.gl.createQuery() : null;\n  }\n\n  _deleteHandle() {\n    this.gl.deleteQuery(this.handle);\n  }\n}\n","/* global window */\n\n// multiplier need to convert CSS size to Device size\nexport function cssToDeviceRatio(gl) {\n  if (gl.canvas) {\n    return gl.drawingBufferWidth / (gl.canvas.clientWidth || gl.canvas.width || 1);\n  }\n  // use default device pixel ratio\n  return 1;\n}\n\n// Maps CSS pixel position to device pixel position\nexport function cssToDevicePixels(gl, cssPixel, yInvert = true) {\n  const ratio = cssToDeviceRatio(gl);\n  const width = gl.drawingBufferWidth;\n  const height = gl.drawingBufferHeight;\n  return scalePixels(cssPixel, ratio, width, height, yInvert);\n}\n\n// HELPER METHODS\n\n/**\n * Calulates device pixel ratio, used during context creation\n *\n * @param {boolean or Number} useDevicePixels - boolean or a Number\n * @return {Number} - device pixel ratio\n */\nexport function getDevicePixelRatio(useDevicePixels) {\n  const windowRatio = typeof window === 'undefined' ? 1 : window.devicePixelRatio || 1;\n  if (Number.isFinite(useDevicePixels)) {\n    return useDevicePixels <= 0 ? 1 : useDevicePixels;\n  }\n  return useDevicePixels ? windowRatio : 1;\n}\n\n// PRIVATE\n\nfunction scalePixels(pixel, ratio, width, height, yInvert) {\n  const x = scaleX(pixel[0], ratio, width);\n  let y = scaleY(pixel[1], ratio, height, yInvert);\n\n  // Find boundaries of next pixel to provide valid range of device pixel locaitons\n\n  let t = scaleX(pixel[0] + 1, ratio, width);\n  // If next pixel's position is clamped to boundary, use it as is, otherwise subtract 1 for current pixel boundary\n  const xHigh = t === width - 1 ? t : t - 1;\n\n  t = scaleY(pixel[1] + 1, ratio, height, yInvert);\n  let yHigh;\n  if (yInvert) {\n    // If next pixel's position is clamped to boundary, use it as is, otherwise clamp it to valid range\n    t = t === 0 ? t : t + 1;\n    // swap y and yHigh\n    yHigh = y;\n    y = t;\n  } else {\n    // If next pixel's position is clamped to boundary, use it as is, otherwise clamp it to valid range\n    yHigh = t === height - 1 ? t : t - 1;\n    // y remains same\n  }\n  return {\n    x,\n    y,\n    // when ratio < 1, current css pixel and next css pixel may point to same device pixel, set width/height to 1 in those cases.\n    width: Math.max(xHigh - x + 1, 1),\n    height: Math.max(yHigh - y + 1, 1)\n  };\n}\n\nfunction scaleX(x, ratio, width) {\n  // since we are rounding to nearest, when ratio > 1, edge pixels may point to out of bounds value, clamp to the limit\n  const r = Math.min(Math.round(x * ratio), width - 1);\n  return r;\n}\n\nfunction scaleY(y, ratio, height, yInvert) {\n  // since we are rounding to nearest, when ratio > 1, edge pixels may point to out of bounds value, clamp to the limit\n  return yInvert\n    ? Math.max(0, height - 1 - Math.round(y * ratio))\n    : Math.min(Math.round(y * ratio), height - 1);\n}\n","import GL from '@luma.gl/constants';\nimport Framebuffer from './framebuffer';\nimport Renderbuffer from './renderbuffer';\nimport Texture from './texture';\nimport {log} from '../utils';\n\nconst UNIFORM_SETTERS = {\n  // WEBGL1\n\n  /* eslint-disable max-len */\n  [GL.FLOAT]: (gl, location, value) => gl.uniform1fv(location, toFloatArray(value, 1)),\n  [GL.FLOAT_VEC2]: (gl, location, value) => gl.uniform2fv(location, toFloatArray(value, 2)),\n  [GL.FLOAT_VEC3]: (gl, location, value) => gl.uniform3fv(location, toFloatArray(value, 3)),\n  [GL.FLOAT_VEC4]: (gl, location, value) => gl.uniform4fv(location, toFloatArray(value, 4)),\n\n  [GL.INT]: (gl, location, value) => gl.uniform1iv(location, toIntArray(value, 1)),\n  [GL.INT_VEC2]: (gl, location, value) => gl.uniform2iv(location, toIntArray(value, 2)),\n  [GL.INT_VEC3]: (gl, location, value) => gl.uniform3iv(location, toIntArray(value, 3)),\n  [GL.INT_VEC4]: (gl, location, value) => gl.uniform4iv(location, toIntArray(value, 4)),\n\n  [GL.BOOL]: (gl, location, value) => gl.uniform1iv(location, toIntArray(value, 1)),\n  [GL.BOOL_VEC2]: (gl, location, value) => gl.uniform2iv(location, toIntArray(value, 2)),\n  [GL.BOOL_VEC3]: (gl, location, value) => gl.uniform3iv(location, toIntArray(value, 3)),\n  [GL.BOOL_VEC4]: (gl, location, value) => gl.uniform4iv(location, toIntArray(value, 4)),\n\n  // uniformMatrix(false): don't transpose the matrix\n  [GL.FLOAT_MAT2]: (gl, location, value) =>\n    gl.uniformMatrix2fv(location, false, toFloatArray(value, 4)),\n  [GL.FLOAT_MAT3]: (gl, location, value) =>\n    gl.uniformMatrix3fv(location, false, toFloatArray(value, 9)),\n  [GL.FLOAT_MAT4]: (gl, location, value) =>\n    gl.uniformMatrix4fv(location, false, toFloatArray(value, 16)),\n\n  [GL.SAMPLER_2D]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.SAMPLER_CUBE]: (gl, location, value) => gl.uniform1i(location, value),\n\n  // WEBGL2 - unsigned integers, irregular matrices, additional texture samplers\n\n  [GL.UNSIGNED_INT]: (gl, location, value) => gl.uniform1uiv(location, toUIntArray(value, 1)),\n  [GL.UNSIGNED_INT_VEC2]: (gl, location, value) => gl.uniform2uiv(location, toUIntArray(value, 2)),\n  [GL.UNSIGNED_INT_VEC3]: (gl, location, value) => gl.uniform3uiv(location, toUIntArray(value, 3)),\n  [GL.UNSIGNED_INT_VEC4]: (gl, location, value) => gl.uniform4uiv(location, toUIntArray(value, 4)),\n\n  // uniformMatrix(false): don't transpose the matrix\n  [GL.FLOAT_MAT2x3]: (gl, location, value) =>\n    gl.uniformMatrix2x3fv(location, false, toFloatArray(value, 6)),\n  [GL.FLOAT_MAT2x4]: (gl, location, value) =>\n    gl.uniformMatrix2x4fv(location, false, toFloatArray(value, 8)),\n  [GL.FLOAT_MAT3x2]: (gl, location, value) =>\n    gl.uniformMatrix3x2fv(location, false, toFloatArray(value, 6)),\n  [GL.FLOAT_MAT3x4]: (gl, location, value) =>\n    gl.uniformMatrix3x4fv(location, false, toFloatArray(value, 12)),\n  [GL.FLOAT_MAT4x2]: (gl, location, value) =>\n    gl.uniformMatrix4x2fv(location, false, toFloatArray(value, 8)),\n  [GL.FLOAT_MAT4x3]: (gl, location, value) =>\n    gl.uniformMatrix4x3fv(location, false, toFloatArray(value, 12)),\n\n  [GL.SAMPLER_3D]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.SAMPLER_2D_SHADOW]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.SAMPLER_2D_ARRAY]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.SAMPLER_2D_ARRAY_SHADOW]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.SAMPLER_CUBE_SHADOW]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.INT_SAMPLER_2D]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.INT_SAMPLER_3D]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.INT_SAMPLER_CUBE]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.INT_SAMPLER_2D_ARRAY]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.UNSIGNED_INT_SAMPLER_2D]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.UNSIGNED_INT_SAMPLER_3D]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.UNSIGNED_INT_SAMPLER_CUBE]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.UNSIGNED_INT_SAMPLER_2D_ARRAY]: (gl, location, value) => gl.uniform1i(location, value)\n  /* eslint-enable max-len */\n};\n\n// Pre-allocated typed arrays for temporary conversion\nconst FLOAT_ARRAY = {};\nconst INT_ARRAY = {};\nconst UINT_ARRAY = {};\n\nconst array1 = [0];\n\n// Functions to ensure the type of uniform values\n// TODO - Why is this necessary? The uniform*v funtions can consume Arrays\nfunction toTypedArray(value, uniformLength, Type, cache) {\n  // convert boolean uniforms to Number\n  if (uniformLength === 1 && typeof value === 'boolean') {\n    value = value ? 1 : 0;\n  }\n  if (Number.isFinite(value)) {\n    array1[0] = value;\n    value = array1;\n  }\n  const length = value.length;\n  if (length % uniformLength) {\n    log.warn(`Uniform size should be multiples of ${uniformLength}`, value)();\n  }\n\n  if (value instanceof Type) {\n    return value;\n  }\n  let result = cache[length];\n  if (!result) {\n    result = new Type(length);\n    cache[length] = result;\n  }\n  for (let i = 0; i < length; i++) {\n    result[i] = value[i];\n  }\n  return result;\n}\n\nfunction toFloatArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Float32Array, FLOAT_ARRAY);\n}\n\nfunction toIntArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Int32Array, INT_ARRAY);\n}\n\nfunction toUIntArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Uint32Array, UINT_ARRAY);\n}\n\nexport function parseUniformName(name) {\n  // Shortcut to avoid redundant or bad matches\n  if (name[name.length - 1] !== ']') {\n    return {\n      name,\n      length: 1,\n      isArray: false\n    };\n  }\n\n  // if array name then clean the array brackets\n  const UNIFORM_NAME_REGEXP = /([^[]*)(\\[[0-9]+\\])?/;\n  const matches = name.match(UNIFORM_NAME_REGEXP);\n  if (!matches || matches.length < 2) {\n    throw new Error(`Failed to parse GLSL uniform name ${name}`);\n  }\n\n  return {\n    name: matches[1],\n    length: matches[2] || 1,\n    isArray: Boolean(matches[2])\n  };\n}\n\n// Returns a Magic Uniform Setter\n/* eslint-disable complexity */\nexport function getUniformSetter(gl, location, info) {\n  const setter = UNIFORM_SETTERS[info.type];\n  if (!setter) {\n    throw new Error(`Unknown GLSL uniform type ${info.type}`);\n  }\n  return setter.bind(null, gl, location);\n}\n\n// Basic checks of uniform values (with or without knowledge of program)\n// To facilitate early detection of e.g. undefined values in JavaScript\nexport function checkUniformValues(uniforms, source, uniformMap) {\n  for (const uniformName in uniforms) {\n    const value = uniforms[uniformName];\n    const shouldCheck = !uniformMap || Boolean(uniformMap[uniformName]);\n    if (shouldCheck && !checkUniformValue(value)) {\n      // Add space to source\n      source = source ? `${source} ` : '';\n      // Value could be unprintable so write the object on console\n      console.error(`${source} Bad uniform ${uniformName}`, value); // eslint-disable-line\n      /* eslint-enable no-console */\n      throw new Error(`${source} Bad uniform ${uniformName}`);\n    }\n  }\n  return true;\n}\n\n// TODO use type information during validation\nfunction checkUniformValue(value) {\n  if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n    return checkUniformArray(value);\n  }\n\n  // Check if single value is a number\n  if (isFinite(value)) {\n    return true;\n  } else if (value === true || value === false) {\n    return true;\n  } else if (value instanceof Texture) {\n    return true;\n  } else if (value instanceof Renderbuffer) {\n    return true;\n  } else if (value instanceof Framebuffer) {\n    return Boolean(value.texture);\n  }\n  return false;\n}\n\nfunction checkUniformArray(value) {\n  // Check that every element in array is a number, and at least 1 element\n  if (value.length === 0) {\n    return false;\n  }\n\n  const checkLength = Math.min(value.length, 16);\n\n  for (let i = 0; i < checkLength; ++i) {\n    if (!Number.isFinite(value[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Given two values of a uniform, returns `true` if they are equal\n */\nexport function areUniformsEqual(uniform1, uniform2) {\n  if (Array.isArray(uniform1) || ArrayBuffer.isView(uniform1)) {\n    if (!uniform2) {\n      return false;\n    }\n    const len = uniform1.length;\n    if (uniform2.length !== len) {\n      return false;\n    }\n    for (let i = 0; i < len; i++) {\n      if (uniform1[i] !== uniform2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return uniform1 === uniform2;\n}\n\n/**\n * Creates a copy of the uniform\n */\nexport function getUniformCopy(uniform) {\n  if (Array.isArray(uniform) || ArrayBuffer.isView(uniform)) {\n    return uniform.slice();\n  }\n  return uniform;\n}\n","// Supports GLSLIFY style naming of shaders\n// #define SHADER_NAME ...\nexport default function getShaderName(shader, defaultName = 'unnamed') {\n  const SHADER_NAME_REGEXP = /#define[\\s*]SHADER_NAME[\\s*]([A-Za-z0-9_-]+)[\\s*]/;\n  const match = shader.match(SHADER_NAME_REGEXP);\n  return match ? match[1] : defaultName;\n}\n","const GL_FRAGMENT_SHADER = 0x8b30;\nconst GL_VERTEX_SHADER = 0x8b31;\n\nexport default function getShaderTypeName(type) {\n  switch (type) {\n    case GL_FRAGMENT_SHADER:\n      return 'fragment';\n    case GL_VERTEX_SHADER:\n      return 'vertex';\n    default:\n      return 'unknown type';\n  }\n}\n","// TODO - formatGLSLCompilerError should not depend on this\nimport getShaderName from './get-shader-name';\nimport getShaderTypeName from './get-shader-type-name';\n\n// Formats GLSL compiler error log into single string\nexport default function formatGLSLCompilerError(errLog, src, shaderType) {\n  const {shaderName, errors, warnings} = parseGLSLCompilerError(errLog, src, shaderType);\n  return `GLSL compilation error in ${shaderName}\\n\\n${errors}\\n${warnings}`;\n}\n\n/**\n * Parse a GLSL compiler error log into a string showing the source code around each error.\n * Based on https://github.com/wwwtyro/gl-format-compiler-error (public domain)\n */\n/* eslint-disable no-continue, max-statements */\nexport function parseGLSLCompilerError(errLog, src, shaderType, shaderName) {\n  const errorStrings = errLog.split(/\\r?\\n/);\n  const errors = {};\n  const warnings = {};\n\n  // Patch the shader name\n  const name = shaderName || getShaderName(src) || '(unnamed)';\n  const shaderDescription = `${getShaderTypeName(shaderType)} shader ${name}`;\n\n  // Parse the error - note: browser and driver dependent\n  for (let i = 0; i < errorStrings.length; i++) {\n    const errorString = errorStrings[i];\n    if (errorString.length <= 1) {\n      continue;\n    }\n    const segments = errorString.split(':');\n    const type = segments[0];\n    const line = parseInt(segments[2], 10);\n    if (isNaN(line)) {\n      throw new Error(`GLSL compilation error in ${shaderDescription}: ${errLog}`);\n    }\n    if (type !== 'WARNING') {\n      errors[line] = errorString;\n    } else {\n      warnings[line] = errorString;\n    }\n  }\n\n  // Format the error inline with the code\n  const lines = addLineNumbers(src);\n\n  return {\n    shaderName: shaderDescription,\n    errors: formatErrors(errors, lines),\n    warnings: formatErrors(warnings, lines)\n  };\n}\n\n// helper function, outputs annotated errors or warnings\nfunction formatErrors(errors, lines) {\n  let message = '';\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    if (!errors[i + 3] && !errors[i + 2] && !errors[i + 1]) {\n      continue;\n    }\n    message += `${line}\\n`;\n    if (errors[i + 1]) {\n      const error = errors[i + 1];\n      const segments = error.split(':', 3);\n      const type = segments[0];\n      const column = parseInt(segments[1], 10) || 0;\n      const err = error.substring(segments.join(':').length + 1).trim();\n      message += padLeft(`^^^ ${type}: ${err}\\n\\n`, column);\n    }\n  }\n  return message;\n}\n\n/**\n * Prepends line numbers to each line of a string.\n * The line numbers will be left-padded with spaces to ensure an\n * aligned layout when rendered using monospace fonts.\n * @param {String} string - multi-line string to add line numbers to\n * @param {Number} start=1 - number of spaces to add\n * @param {String} delim =': ' - injected between line number and original line\n * @return {String[]} strings - array of string, one per line, with line numbers added\n */\nfunction addLineNumbers(string, start = 1, delim = ': ') {\n  const lines = string.split(/\\r?\\n/);\n  const maxDigits = String(lines.length + start - 1).length;\n  return lines.map((line, i) => {\n    const lineNumber = i + start;\n    const digits = String(lineNumber).length;\n    const prefix = padLeft(lineNumber, maxDigits - digits);\n    return prefix + delim + line;\n  });\n}\n\n/**\n * Pads a string with a number of spaces (space characters) to the left\n * @param {String} string - string to pad\n * @param {Number} digits - number of spaces to add\n * @return {String} string - The padded string\n */\nfunction padLeft(string, digits) {\n  let result = '';\n  for (let i = 0; i < digits; ++i) {\n    result += ' ';\n  }\n  return `${result}${string}`;\n}\n","import GL from '@luma.gl/constants';\nimport {parseGLSLCompilerError, getShaderName} from '../glsl-utils';\nimport {assertWebGLContext} from '../webgl-utils';\nimport {uid, log, assert} from '../utils';\nimport Resource from './resource';\n\nconst ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';\n\n// For now this is an internal class\nexport class Shader extends Resource {\n  static getTypeName(shaderType) {\n    switch (shaderType) {\n      case GL.VERTEX_SHADER:\n        return 'vertex-shader';\n      case GL.FRAGMENT_SHADER:\n        return 'fragment-shader';\n      default:\n        assert(false);\n        return 'unknown';\n    }\n  }\n\n  /* eslint-disable max-statements */\n  constructor(gl, props) {\n    assertWebGLContext(gl);\n\n    // Validate arguments\n    assert(typeof props.source === 'string', ERR_SOURCE);\n\n    // Deduce an id, from shader source, or supplied id, or shader type\n    const id =\n      getShaderName(props.source, null) ||\n      props.id ||\n      uid(`unnamed ${Shader.getTypeName(props.shaderType)}`);\n\n    super(gl, {id});\n\n    this.shaderType = props.shaderType;\n    this.source = props.source;\n\n    this.initialize(props);\n  }\n\n  initialize({source}) {\n    const shaderName = getShaderName(source, null);\n    if (shaderName) {\n      this.id = uid(shaderName);\n    }\n    this._compile(source);\n  }\n\n  // Accessors\n\n  getParameter(pname) {\n    return this.gl.getShaderParameter(this.handle, pname);\n  }\n\n  toString() {\n    return `${Shader.getTypeName(this.shaderType)}:${this.id}`;\n  }\n\n  getName() {\n    return getShaderName(this.source) || 'unnamed-shader';\n  }\n\n  getSource() {\n    return this.gl.getShaderSource(this.handle);\n  }\n\n  // Debug method - Returns translated source if available\n  getTranslatedSource() {\n    const extension = this.gl.getExtension('WEBGL.debug_shaders');\n    return extension\n      ? extension.getTranslatedShaderSource(this.handle)\n      : 'No translated source available. WEBGL.debug_shaders not implemented';\n  }\n\n  // PRIVATE METHODS\n  _compile(source = this.source) {\n    if (!source.startsWith('#version ')) {\n      source = `#version 100\\n${source}`;\n    }\n    this.source = source;\n    this.gl.shaderSource(this.handle, this.source);\n    this.gl.compileShader(this.handle);\n\n    // TODO - For performance reasons, avoid checking shader compilation errors on production?\n    // TODO - Load log even when no error reported, to catch warnings?\n    // https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings\n    const compileStatus = this.getParameter(GL.COMPILE_STATUS);\n    if (!compileStatus) {\n      const infoLog = this.gl.getShaderInfoLog(this.handle);\n      const {shaderName, errors, warnings} = parseGLSLCompilerError(\n        infoLog,\n        this.source,\n        this.shaderType,\n        this.id\n      );\n      log.error(`GLSL compilation errors in ${shaderName}\\n${errors}`)();\n      log.warn(`GLSL compilation warnings in ${shaderName}\\n${warnings}`)();\n      throw new Error(`GLSL compilation errors in ${shaderName}`);\n    }\n  }\n\n  _deleteHandle() {\n    this.gl.deleteShader(this.handle);\n  }\n\n  _getOptsFromHandle() {\n    return {\n      type: this.getParameter(GL.SHADER_TYPE),\n      source: this.getSource()\n    };\n  }\n}\n\nexport class VertexShader extends Shader {\n  constructor(gl, props) {\n    // Signature: new VertexShader(gl, source)\n    if (typeof props === 'string') {\n      props = {source: props};\n    }\n    super(gl, Object.assign({}, props, {shaderType: GL.VERTEX_SHADER}));\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL.VERTEX_SHADER);\n  }\n}\n\nexport class FragmentShader extends Shader {\n  constructor(gl, props) {\n    // Signature: new FragmentShader(gl, source)\n    if (typeof props === 'string') {\n      props = {source: props};\n    }\n\n    super(gl, Object.assign({}, props, {shaderType: GL.FRAGMENT_SHADER}));\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL.FRAGMENT_SHADER);\n  }\n}\n","// Contains metadata describing attribute configurations for a program's shaders\n// Much of this is automatically extracted from shaders after program linking\nimport Accessor from './accessor';\nimport {isWebGL2} from '../webgl-utils';\nimport {decomposeCompositeGLType} from '../webgl-utils/attribute-utils';\n\nexport default class ProgramConfiguration {\n  constructor(program) {\n    this.id = program.id;\n    this.attributeInfos = [];\n    this.attributeInfosByName = {};\n\n    // Locations may not be contiguous the case of matrix attributes\n    // so keep a separate location->attribute map.\n    this.attributeInfosByLocation = [];\n    this.varyingInfos = [];\n    this.varyingInfosByName = {};\n    Object.seal(this);\n    this._readAttributesFromProgram(program);\n    this._readVaryingsFromProgram(program);\n  }\n\n  getAttributeInfo(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return this.attributeInfosByLocation[location];\n    }\n    return this.attributeInfosByName[locationOrName] || null;\n  }\n\n  // Resolves an attribute name or index to an index\n  getAttributeLocation(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.location : -1;\n  }\n\n  getAttributeAccessor(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.accessor : null;\n  }\n\n  getVaryingInfo(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return this.varyingInfos[location];\n    }\n    return this.varyingInfosByName[locationOrName] || null;\n  }\n\n  getVaryingIndex(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.location : -1;\n  }\n\n  getVaryingAccessor(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.accessor : null;\n  }\n\n  // PRIVATE METHODS\n\n  // linkProgram needs to have been called, although linking does not need to have been successful\n  _readAttributesFromProgram(program) {\n    const {gl} = program;\n    const count = gl.getProgramParameter(program.handle, gl.ACTIVE_ATTRIBUTES);\n\n    for (let index = 0; index < count; index++) {\n      const {name, type, size} = gl.getActiveAttrib(program.handle, index);\n      const location = gl.getAttribLocation(program.handle, name);\n      // Add only user provided attributes, for built-in attributes like\n      // `gl_InstanceID` locaiton will be < 0\n      if (location >= 0) {\n        this._addAttribute(location, name, type, size);\n      }\n    }\n\n    this.attributeInfos.sort((a, b) => a.location - b.location);\n  }\n\n  // linkProgram needs to have been called, although linking does not need to have been successful\n  _readVaryingsFromProgram(program) {\n    const {gl} = program;\n    if (!isWebGL2(gl)) {\n      return;\n    }\n\n    const count = gl.getProgramParameter(program.handle, gl.TRANSFORM_FEEDBACK_VARYINGS);\n    for (let location = 0; location < count; location++) {\n      const {name, type, size} = gl.getTransformFeedbackVarying(program.handle, location);\n      this._addVarying(location, name, type, size);\n    }\n\n    this.varyingInfos.sort((a, b) => a.location - b.location);\n  }\n\n  _addAttribute(location, name, compositeType, size) {\n    const {type, components} = decomposeCompositeGLType(compositeType);\n    const accessor = {type, size: size * components};\n    this._inferProperties(location, name, accessor);\n\n    const attributeInfo = {location, name, accessor: new Accessor(accessor)}; // Base values\n    this.attributeInfos.push(attributeInfo);\n    this.attributeInfosByLocation[location] = attributeInfo; // For quick location based lookup\n    this.attributeInfosByName[attributeInfo.name] = attributeInfo; // For quick name based lookup\n  }\n\n  // Extract additional attribute metadata from shader names (based on attribute naming conventions)\n  _inferProperties(location, name, accessor) {\n    if (/instance/i.test(name)) {\n      // Any attribute containing the word \"instance\" will be assumed to be instanced\n      accessor.divisor = 1;\n    }\n  }\n\n  _addVarying(location, name, compositeType, size) {\n    const {type, components} = decomposeCompositeGLType(compositeType);\n    const accessor = new Accessor({type, size: size * components});\n\n    const varying = {location, name, accessor}; // Base values\n    this.varyingInfos.push(varying);\n    this.varyingInfosByName[varying.name] = varying; // For quick name based lookup\n  }\n}\n","import GL from '@luma.gl/constants';\n\nimport Resource from './resource';\nimport Texture from './texture';\nimport Framebuffer from './framebuffer';\nimport {parseUniformName, getUniformSetter} from './uniforms';\nimport {VertexShader, FragmentShader} from './shader';\nimport ProgramConfiguration from './program-configuration';\nimport {checkUniformValues, areUniformsEqual, getUniformCopy} from './uniforms';\n\nimport {withParameters} from '../context';\nimport {assertWebGL2Context, isWebGL2, getKey} from '../webgl-utils';\nimport {getPrimitiveDrawMode} from '../webgl-utils/attribute-utils';\nimport {log, uid, assert} from '../utils';\n\nconst LOG_PROGRAM_PERF_PRIORITY = 4;\n\nconst GL_SEPARATE_ATTRIBS = 0x8c8d;\n\nconst V6_DEPRECATED_METHODS = [\n  'setVertexArray',\n  'setAttributes',\n  'setBuffers',\n  'unsetBuffers',\n\n  'use',\n  'getUniformCount',\n  'getUniformInfo',\n  'getUniformLocation',\n  'getUniformValue',\n\n  'getVarying',\n  'getFragDataLocation',\n  'getAttachedShaders',\n  'getAttributeCount',\n  'getAttributeLocation',\n  'getAttributeInfo'\n];\n\nexport default class Program extends Resource {\n  constructor(gl, props = {}) {\n    super(gl, props);\n\n    this.stubRemovedMethods('Program', 'v6.0', V6_DEPRECATED_METHODS);\n\n    // Experimental flag to avoid deleting Program object while it is cached\n    this._isCached = false;\n\n    this.initialize(props);\n\n    Object.seal(this);\n\n    this._setId(props.id);\n  }\n\n  initialize(props = {}) {\n    const {hash, vs, fs, varyings, bufferMode = GL_SEPARATE_ATTRIBS} = props;\n\n    this.hash = hash || ''; // Used by ProgramManager\n\n    // Create shaders if needed\n    this.vs =\n      typeof vs === 'string' ? new VertexShader(this.gl, {id: `${props.id}-vs`, source: vs}) : vs;\n    this.fs =\n      typeof fs === 'string' ? new FragmentShader(this.gl, {id: `${props.id}-fs`, source: fs}) : fs;\n    assert(this.vs instanceof VertexShader);\n    assert(this.fs instanceof FragmentShader);\n\n    // uniforms\n    this.uniforms = {};\n\n    // Setup varyings if supplied\n    if (varyings && varyings.length > 0) {\n      assertWebGL2Context(this.gl);\n      this.varyings = varyings;\n      this.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n    }\n\n    this._compileAndLink();\n    this._readUniformLocationsFromLinkedProgram();\n    this.configuration = new ProgramConfiguration(this);\n\n    return this.setProps(props);\n  }\n\n  delete(options = {}) {\n    if (this._isCached) {\n      // This object is cached, do not delete\n      return this;\n    }\n    return super.delete(options);\n  }\n\n  setProps(props) {\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms);\n    }\n    return this;\n  }\n\n  // A good thing about the WebGL API is that there are so many ways to draw things ;)\n  // This function unifies those ways into a single call using common parameters with sane defaults\n  draw({\n    logPriority, // Probe log priority, enables Model to do more integrated logging\n\n    drawMode = GL.TRIANGLES,\n    vertexCount,\n    offset = 0,\n    start,\n    end,\n    isIndexed = false,\n    indexType = GL.UNSIGNED_SHORT,\n    isInstanced = false,\n    instanceCount = 0,\n\n    vertexArray = null,\n    transformFeedback,\n    framebuffer,\n    parameters = {},\n\n    // Deprecated\n    uniforms,\n    samplers\n  }) {\n    if (uniforms || samplers) {\n      // DEPRECATED: v7.0 (deprecated earlier but warning not properly implemented)\n      log.deprecated('Program.draw({uniforms})', 'Program.setUniforms(uniforms)')();\n      this.setUniforms(uniforms || {});\n    }\n\n    if (logPriority !== undefined) {\n      const fb = framebuffer ? framebuffer.id : 'default';\n      const message =\n        `mode=${getKey(this.gl, drawMode)} verts=${vertexCount} ` +\n        `instances=${instanceCount} indexType=${getKey(this.gl, indexType)} ` +\n        `isInstanced=${isInstanced} isIndexed=${isIndexed} ` +\n        `Framebuffer=${fb}`;\n      log.log(logPriority, message)();\n    }\n\n    // TODO - move vertex array binding and transform feedback binding to withParameters?\n    assert(vertexArray);\n\n    this.gl.useProgram(this.handle);\n\n    // Note: async textures set as uniforms might still be loading.\n    // Now that all uniforms have been updated, check if any texture\n    // in the uniforms is not yet initialized, then we don't draw\n    if (!this._areTexturesRenderable()) {\n      return false;\n    }\n\n    vertexArray.bindForDraw(vertexCount, instanceCount, () => {\n      if (framebuffer !== undefined) {\n        parameters = Object.assign({}, parameters, {framebuffer});\n      }\n\n      if (transformFeedback) {\n        const primitiveMode = getPrimitiveDrawMode(drawMode);\n        transformFeedback.begin(primitiveMode);\n      }\n\n      this._bindTextures();\n\n      withParameters(this.gl, parameters, () => {\n        // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n        if (isIndexed && isInstanced) {\n          this.gl.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n        } else if (isIndexed && isWebGL2(this.gl) && !isNaN(start) && !isNaN(end)) {\n          this.gl.drawRangeElements(drawMode, start, end, vertexCount, indexType, offset);\n        } else if (isIndexed) {\n          this.gl.drawElements(drawMode, vertexCount, indexType, offset);\n        } else if (isInstanced) {\n          this.gl.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n        } else {\n          this.gl.drawArrays(drawMode, offset, vertexCount);\n        }\n      });\n\n      if (transformFeedback) {\n        transformFeedback.end();\n      }\n    });\n\n    return true;\n  }\n\n  setUniforms(uniforms = {}, _onChangeCallback = () => {}) {\n    // Simple change detection - if all uniforms are unchanged, do nothing\n    let somethingChanged = false;\n    const changedUniforms = {};\n    for (const key in uniforms) {\n      if (!areUniformsEqual(this.uniforms[key], uniforms[key])) {\n        somethingChanged = true;\n        changedUniforms[key] = uniforms[key];\n        this.uniforms[key] = getUniformCopy(uniforms[key]);\n      }\n    }\n\n    if (somethingChanged) {\n      _onChangeCallback();\n      checkUniformValues(changedUniforms, this.id, this._uniformSetters);\n      this._setUniforms(changedUniforms);\n    }\n\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  // stub for shader chache, should reset uniforms to default valiues\n  reset() {}\n\n  // Checks if all texture-values uniforms are renderable (i.e. loaded)\n  // Note: This is currently done before every draw call\n  _areTexturesRenderable() {\n    let texturesRenderable = true;\n\n    for (const uniformName in this.uniforms) {\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter && uniformSetter.textureIndex !== undefined) {\n        let uniform = this.uniforms[uniformName];\n\n        if (uniform instanceof Framebuffer) {\n          const framebuffer = uniform;\n          uniform = framebuffer.texture;\n        }\n\n        if (uniform instanceof Texture) {\n          const texture = uniform;\n          // Check that texture is loaded\n          texturesRenderable = texturesRenderable && texture.loaded;\n        }\n      }\n    }\n\n    return texturesRenderable;\n  }\n\n  // Binds textures\n  // Note: This is currently done before every draw call\n  _bindTextures() {\n    for (const uniformName in this.uniforms) {\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter && uniformSetter.textureIndex !== undefined) {\n        let uniform = this.uniforms[uniformName];\n\n        if (uniform instanceof Framebuffer) {\n          uniform = uniform.texture;\n        }\n        if (uniform instanceof Texture) {\n          const texture = uniform;\n          // Bind texture to index\n          texture.bind(uniformSetter.textureIndex);\n        }\n      }\n    }\n  }\n\n  // Apply a set of uniform values to a program\n  // Only uniforms actually present in the linked program will be updated.\n  _setUniforms(uniforms) {\n    this.gl.useProgram(this.handle);\n\n    for (const uniformName in uniforms) {\n      let uniform = uniforms[uniformName];\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter) {\n        if (uniform instanceof Framebuffer) {\n          uniform = uniform.texture;\n        }\n        if (uniform instanceof Texture) {\n          // eslint-disable-next-line max-depth\n          if (uniformSetter.textureIndex === undefined) {\n            uniformSetter.textureIndex = this._textureIndexCounter++;\n          }\n\n          // Bind texture to index\n          const texture = uniform;\n          const {textureIndex} = uniformSetter;\n\n          texture.bind(textureIndex);\n\n          // Set the uniform sampler to the texture index\n          uniformSetter(textureIndex);\n        } else {\n          // Just set the value\n          uniformSetter(uniform);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createProgram();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  // Extract opts needed to initialize a `Program` from an independently created WebGLProgram handle\n  _getOptionsFromHandle(handle) {\n    const shaderHandles = this.gl.getAttachedShaders(handle);\n    const opts = {};\n    for (const shaderHandle of shaderHandles) {\n      const type = this.gl.getShaderParameter(this.handle, GL.SHADER_TYPE);\n      switch (type) {\n        case GL.VERTEX_SHADER:\n          opts.vs = new VertexShader({handle: shaderHandle});\n          break;\n        case GL.FRAGMENT_SHADER:\n          opts.fs = new FragmentShader({handle: shaderHandle});\n          break;\n        default:\n      }\n    }\n    return opts;\n  }\n\n  _getParameter(pname) {\n    return this.gl.getProgramParameter(this.handle, pname);\n  }\n\n  // If program is not named, name it after shader names\n  // TODO - this.id will already have been initialized\n  _setId(id) {\n    if (!id) {\n      const programName = this._getName();\n      this.id = uid(programName);\n    }\n  }\n\n  // Generate a default name for the program based on names of the shaders\n  _getName() {\n    let programName = this.vs.getName() || this.fs.getName();\n    programName = programName.replace(/shader/i, '');\n    programName = programName ? `${programName}-program` : 'program';\n    return programName;\n  }\n\n  _compileAndLink() {\n    const {gl} = this;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n    gl.linkProgram(this.handle);\n    log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n\n    // Avoid checking program linking error in production\n    if (gl.debug || log.priority > 0) {\n      gl.validateProgram(this.handle);\n      const linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n      if (!linked) {\n        throw new Error(`Error linking: ${gl.getProgramInfoLog(this.handle)}`);\n      }\n    }\n  }\n\n  // query uniform locations and build name to setter map.\n  // TODO - This overlaps with ProgramConfiguration?\n  _readUniformLocationsFromLinkedProgram() {\n    const {gl} = this;\n    this._uniformSetters = {};\n    this._uniformCount = this._getParameter(GL.ACTIVE_UNIFORMS);\n    for (let i = 0; i < this._uniformCount; i++) {\n      const info = this.gl.getActiveUniform(this.handle, i);\n      const {name, isArray} = parseUniformName(info.name);\n      let location = gl.getUniformLocation(this.handle, name);\n      this._uniformSetters[name] = getUniformSetter(gl, location, info, isArray);\n      if (info.size > 1) {\n        for (let l = 0; l < info.size; l++) {\n          location = gl.getUniformLocation(this.handle, `${name}[${l}]`);\n          this._uniformSetters[`${name}[${l}]`] = getUniformSetter(gl, location, info, isArray);\n        }\n      }\n    }\n    this._textureIndexCounter = 0;\n  }\n\n  // TO BE REMOVED in v7?\n\n  // Rretrieves information about active uniforms identifed by their indices (`uniformIndices`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniforms\n  getActiveUniforms(uniformIndices, pname) {\n    return this.gl.getActiveUniforms(this.handle, uniformIndices, pname);\n  }\n\n  // Retrieves the index of a uniform block\n  getUniformBlockIndex(blockName) {\n    return this.gl.getUniformBlockIndex(this.handle, blockName);\n  }\n\n  // Retrieves information about an active uniform block (`blockIndex`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter\n  getActiveUniformBlockParameter(blockIndex, pname) {\n    return this.gl.getActiveUniformBlockParameter(this.handle, blockIndex, pname);\n  }\n\n  // Binds a uniform block (`blockIndex`) to a specific binding point (`blockBinding`)\n  uniformBlockBinding(blockIndex, blockBinding) {\n    this.gl.uniformBlockBinding(this.handle, blockIndex, blockBinding);\n  }\n}\n","import {headlessGL} from '../webgl-utils/webgl-types';\n\nconst ERR_HEADLESSGL_NOT_AVAILABLE =\n  'Failed to create WebGL context in Node.js, headless gl not available';\n\nconst ERR_HEADLESSGL_FAILED =\n  'Failed to create WebGL context in Node.js, headless gl returned null';\n\n// Create headless gl context (for running under Node.js)\nexport function createHeadlessContext(options) {\n  const {width, height, webgl1, webgl2, onError} = options;\n  if (webgl2 && !webgl1) {\n    return onError('headless-gl does not support WebGL2');\n  }\n  if (!headlessGL) {\n    return onError(ERR_HEADLESSGL_NOT_AVAILABLE);\n  }\n  const gl = headlessGL(width, height, options);\n  if (!gl) {\n    return onError(ERR_HEADLESSGL_FAILED);\n  }\n  return gl;\n}\n","// Resizing a webgl canvas\n\n/* global window, document */\nimport {isBrowser} from '../utils';\n\nconst isPage = isBrowser && typeof document !== 'undefined';\nlet isPageLoaded = isPage && document.readyState === 'complete';\n\nlet pageLoadPromise;\n\n/**\n * Returns a promise that resolves when the page is loaded\n * at this point the DOM can be manipulated, and e.g. a new canvas can be inserted\n * @return {Promise} - resolves when the page is loaded\n */\nexport function getPageLoadPromise() {\n  if (!pageLoadPromise) {\n    pageLoadPromise = isPage\n      ? new Promise((resolve, reject) => {\n          if (isPage && document.readyState === 'complete') {\n            isPageLoaded = true;\n            resolve(document);\n            return;\n          }\n          window.onload = () => {\n            isPageLoaded = true;\n            resolve(document);\n          };\n        })\n      : Promise.resolve({});\n  }\n  return pageLoadPromise;\n}\n\n/**\n * Create a canvas\n * @param {Number} width - set to 100%\n * @param {Number} height - set to 100%\n */\nexport function createCanvas({width = 800, height = 600, id = 'gl-canvas', insert = true}) {\n  const canvas = document.createElement('canvas');\n  canvas.id = id;\n  canvas.style.width = Number.isFinite(width) ? `${width}px` : '100%';\n  canvas.style.height = Number.isFinite(height) ? `${height}px` : '100%';\n  // add the canvas to the body element once the page has loaded\n  if (insert) {\n    const body = document.body;\n    body.insertBefore(canvas, body.firstChild);\n    // getPageLoadPromise().then(document => {});\n  }\n  return canvas;\n}\n\nexport function getCanvas({canvas, width, height, onError = () => {}}) {\n  let targetCanvas;\n  if (typeof canvas === 'string') {\n    if (!isPageLoaded) {\n      onError(`createGLContext called on canvas '${canvas}' before page was loaded`);\n    }\n    targetCanvas = document.getElementById(canvas);\n  } else if (canvas) {\n    targetCanvas = canvas;\n  } else {\n    targetCanvas = createCanvas({id: 'lumagl-canvas', width, height, onError});\n  }\n\n  return targetCanvas;\n}\n","/* eslint-disable quotes */\n// WebGLRenderingContext related methods\nimport {trackContextState} from '@luma.gl/webgl-state-tracker';\n\nimport {createHeadlessContext} from './create-headless-context';\nimport {getCanvas} from './create-canvas';\nimport {createBrowserContext} from './create-browser-context';\nimport {getContextDebugInfo} from '../debug/get-context-debug-info';\n\nimport {WebGL2RenderingContext} from '../webgl-utils';\n\nimport {log, isBrowser, assert, getDevicePixelRatio} from '../utils';\nimport {global} from '../utils/globals';\n\nexport const ERR_CONTEXT = 'Invalid WebGLRenderingContext';\nexport const ERR_WEBGL = ERR_CONTEXT;\nexport const ERR_WEBGL2 = 'Requires WebGL2';\n\nexport function isWebGL(gl) {\n  return Boolean(gl && Number.isFinite(gl._version));\n}\n\nexport function isWebGL2(gl) {\n  return Boolean(gl && gl._version === 2);\n}\n\nexport function assertWebGLContext(gl) {\n  // Need to handle debug context\n  assert(isWebGL(gl), ERR_CONTEXT);\n}\n\nexport function assertWebGL2Context(gl) {\n  // Need to handle debug context\n  assert(isWebGL2(gl), ERR_WEBGL2);\n}\n\nconst contextDefaults = {\n  // COMMON CONTEXT PARAMETERS\n  // Attempt to allocate WebGL2 context\n  webgl2: true, // Attempt to create a WebGL2 context (false to force webgl1)\n  webgl1: true, // Attempt to create a WebGL1 context (false to fail if webgl2 not available)\n  throwOnFailure: true,\n  manageState: true,\n  // BROWSER CONTEXT PARAMETERS\n  canvas: null, // A canvas element or a canvas string id\n  debug: false, // Instrument context (at the expense of performance)\n  // HEADLESS CONTEXT PARAMETERS\n  width: 800, // width are height are only used by headless gl\n  height: 600\n  // WEBGL/HEADLESS CONTEXT PARAMETERS\n  // Remaining options are passed through to context creator\n};\n\n/*\n * Change default context creation parameters.\n * Main use case is regression test suite.\n */\nexport function setGLContextDefaults(options = {}) {\n  Object.assign(contextDefaults, {width: 1, height: 1}, options);\n}\n\n/*\n * Creates a context giving access to the WebGL API\n */\n/* eslint-disable complexity, max-statements */\nexport function createGLContext(options = {}) {\n  options = Object.assign({}, contextDefaults, options);\n  const {width, height} = options;\n\n  // Error reporting function, enables exceptions to be disabled\n  function onError(message) {\n    if (options.throwOnError) {\n      throw new Error(message);\n    }\n    return null;\n  }\n\n  let gl;\n  if (isBrowser) {\n    // Get or create a canvas\n    const {canvas} = options;\n    const targetCanvas = getCanvas({canvas, width, height, onError});\n    // Create a WebGL context in the canvas\n    gl = createBrowserContext(targetCanvas, options);\n  } else {\n    // Create a headless-gl context under Node.js\n    gl = createHeadlessContext({...options, width, height, onError});\n  }\n\n  if (!gl) {\n    return null;\n  }\n\n  gl = instrumentGLContext(gl, options);\n\n  // Log some debug info about the newly created context\n  logInfo(gl);\n\n  // Add to seer integration\n  return gl;\n}\n\nexport function instrumentGLContext(gl, options = {}) {\n  // Avoid multiple instrumentations\n  if (gl._instrumented) {\n    return gl;\n  }\n\n  gl._version = gl._version || getVersion(gl);\n\n  options = Object.assign({}, contextDefaults, options);\n  const {manageState, debug} = options;\n\n  // Install context state tracking\n  if (manageState) {\n    trackContextState(gl, {\n      copyState: false,\n      log: (...args) => log.log(1, ...args)()\n    });\n  }\n\n  // Add debug instrumentation to the context\n  if (isBrowser && debug) {\n    if (!global.makeDebugContext) {\n      log.warn('WebGL debug mode not activated. import \"@luma.gl/debug\" to enable.')();\n    } else {\n      gl = global.makeDebugContext(gl, options);\n      // Debug forces log level to at least 1\n      log.priority = Math.max(log.priority, 1);\n    }\n  }\n\n  gl._instrumented = true;\n\n  return gl;\n}\n\nexport function destroyGLContext(gl) {\n  // TODO - Remove from seer integration\n\n  // TODO - Unregister any tracking/polyfills\n\n  // There is no way to delete browser based context\n\n  // Destroy headless gl context\n  const ext = gl.getExtension('STACKGL_destroy_context');\n  if (ext) {\n    ext.destroy();\n  }\n}\n\n/**\n * Resize the canvas' drawing buffer.\n *\n * Can match the canvas CSS size, and optionally also consider devicePixelRatio\n * Can be called every frame\n *\n * Regardless of size, the drawing buffer will always be scaled to the viewport, but\n * for best visual results, usually set to either:\n *  canvas CSS width x canvas CSS height\n *  canvas CSS width * devicePixelRatio x canvas CSS height * devicePixelRatio\n * See http://webgl2fundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html\n *\n * resizeGLContext(gl, {width, height, useDevicePixels})\n */\nexport function resizeGLContext(gl, options = {}) {\n  // Resize browser context\n  if (gl.canvas) {\n    const devicePixelRatio = getDevicePixelRatio(options.useDevicePixels);\n    setDevicePixelRatio(gl, devicePixelRatio, options);\n    return;\n  }\n\n  // Resize headless gl context\n  const ext = gl.getExtension('STACKGL_resize_drawingbuffer');\n  if (ext && `width` in options && `height` in options) {\n    ext.resize(options.width, options.height);\n  }\n}\n\n// HELPER METHODS\n\nfunction logInfo(gl) {\n  const webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';\n  const info = getContextDebugInfo(gl);\n  const driver = info ? `(${info.vendor},${info.renderer})` : '';\n  const debug = gl.debug ? ' debug' : '';\n  log.info(1, `${webGL}${debug} context ${driver}`)();\n}\n\nfunction getVersion(gl) {\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    // WebGL2 context.\n    return 2;\n  }\n  // Must be a WebGL1 context.\n  return 1;\n}\n\n// use devicePixelRatio to set canvas width and height\nfunction setDevicePixelRatio(gl, devicePixelRatio, options) {\n  let devicePixelRatioClamped = false;\n  let aspectRatioValid = false;\n\n  // NOTE: if options.width and options.height not used remove in v8\n  const clientWidth =\n    'width' in options ? options.width : gl.canvas.clientWidth || gl.canvas.width || 1;\n  const clientHeight =\n    'height' in options ? options.height : gl.canvas.clientHeight || gl.canvas.height || 1;\n\n  // Note: when devicePixelRatio is too high, it is possible we might hit system limit for\n  // drawing buffer width and hight, in those cases they get clamped and resulting aspect ration may not be maintained\n  // for those cases, reduce devicePixelRatio.\n  do {\n    gl.canvas.width = Math.ceil(clientWidth * devicePixelRatio);\n    gl.canvas.height = Math.ceil(clientHeight * devicePixelRatio);\n    aspectRatioValid =\n      gl.drawingBufferWidth / clientWidth === gl.drawingBufferHeight / clientHeight;\n    devicePixelRatio = Math.max(devicePixelRatio / 2, 1);\n    devicePixelRatioClamped = devicePixelRatioClamped || !aspectRatioValid;\n  } while (!aspectRatioValid);\n\n  if (devicePixelRatioClamped) {\n    log.warn(`Device pixel ratio clamped`)();\n  }\n}\n","/**\n * Create a WebGL context for a canvas\n * Note calling this multiple time on the same canvas does return the same context\n */\nexport function createBrowserContext(canvas, options) {\n  const {onError = message => null} = options;\n\n  // Try to extract any extra information about why context creation failed\n  const onCreateError = error => onError(`WebGL context: ${error.statusMessage || 'error'}`);\n  canvas.addEventListener('webglcontextcreationerror', onCreateError, false);\n\n  const {webgl1 = true, webgl2 = true} = options;\n  let gl = null;\n  // Prefer webgl2 over webgl1, prefer conformant over experimental\n  if (webgl2) {\n    gl = gl || canvas.getContext('webgl2', options);\n    gl = gl || canvas.getContext('experimental-webgl2', options);\n  }\n  if (webgl1) {\n    gl = gl || canvas.getContext('webgl', options);\n    gl = gl || canvas.getContext('experimental-webgl', options);\n  }\n\n  canvas.removeEventListener('webglcontextcreationerror', onCreateError, false);\n\n  if (!gl) {\n    return onError(`Failed to create ${webgl2 && !webgl1 ? 'WebGL2' : 'WebGL'} context`);\n  }\n\n  return gl;\n}\n","import GL from '@luma.gl/constants';\n\n/**\n * Provides strings identifying the GPU vendor and driver.\n * https://www.khronos.org/registry/webgl/extensions/WEBGL_debug_renderer_info/\n * @param {WebGLRenderingContext} gl - context\n * @return {Object} - 'vendor' and 'renderer' string fields.\n */\nexport function getContextDebugInfo(gl) {\n  const vendorMasked = gl.getParameter(GL.VENDOR);\n  const rendererMasked = gl.getParameter(GL.RENDERER);\n  const ext = gl.getExtension('WEBGL_debug_renderer_info');\n  const vendorUnmasked = ext && gl.getParameter(ext.UNMASKED_VENDOR_WEBGL || GL.VENDOR);\n  const rendererUnmasked = ext && gl.getParameter(ext.UNMASKED_RENDERER_WEBGL || GL.RENDERER);\n  return {\n    vendor: vendorUnmasked || vendorMasked,\n    renderer: rendererUnmasked || rendererMasked,\n    vendorMasked,\n    rendererMasked,\n    version: gl.getParameter(GL.VERSION),\n    shadingLanguageVersion: gl.getParameter(GL.SHADING_LANGUAGE_VERSION)\n  };\n}\n","// Node.js polyfills for requestAnimationFrame and cancelAnimationFrame\n/* global window, setTimeout, clearTimeout */\n\nexport function requestAnimationFrame(callback) {\n  return typeof window !== 'undefined' && window.requestAnimationFrame\n    ? window.requestAnimationFrame(callback)\n    : setTimeout(callback, 1000 / 60);\n}\n\nexport function cancelAnimationFrame(timerId) {\n  return typeof window !== 'undefined' && window.cancelAnimationFrame\n    ? window.cancelAnimationFrame(timerId)\n    : clearTimeout(timerId);\n}\n","/* global OffscreenCanvas */\nimport {\n  isWebGL,\n  createGLContext,\n  instrumentGLContext,\n  resizeGLContext,\n  resetParameters,\n  requestAnimationFrame,\n  cancelAnimationFrame,\n  getPageLoadPromise,\n  Query,\n  lumaStats,\n  // TODO - remove dependency on framebuffer (bundle size impact)\n  Framebuffer\n} from '@luma.gl/webgl';\n\nimport {log, assert} from '../utils';\n\nlet statIdCounter = 0;\n\nexport default class AnimationLoop {\n  /*\n   * @param {HTMLCanvasElement} canvas - if provided, width and height will be passed to context\n   */\n  constructor(props = {}) {\n    const {\n      onCreateContext = opts => createGLContext(opts),\n      onAddHTML = null,\n      onInitialize = () => {},\n      onRender = () => {},\n      onFinalize = () => {},\n\n      gl = null,\n      glOptions = {},\n      debug = false,\n\n      createFramebuffer = false,\n\n      // view parameters\n      autoResizeViewport = true,\n      autoResizeDrawingBuffer = true,\n      stats = lumaStats.get(`animation-loop-${statIdCounter++}`)\n    } = props;\n\n    let {useDevicePixels = true} = props;\n\n    if ('useDevicePixelRatio' in props) {\n      log.deprecated('useDevicePixelRatio', 'useDevicePixels')();\n      useDevicePixels = props.useDevicePixelRatio;\n    }\n\n    this.props = {\n      onCreateContext,\n      onAddHTML,\n      onInitialize,\n      onRender,\n      onFinalize,\n\n      gl,\n      glOptions,\n      debug,\n      createFramebuffer\n    };\n\n    // state\n    this.gl = gl;\n    this.needsRedraw = null;\n    this.timeline = null;\n    this.stats = stats;\n    this.cpuTime = this.stats.get('CPU Time');\n    this.gpuTime = this.stats.get('GPU Time');\n    this.frameRate = this.stats.get('Frame Rate');\n\n    this._initialized = false;\n    this._running = false;\n    this._animationFrameId = null;\n    this._nextFramePromise = null;\n    this._resolveNextFrame = null;\n    this._cpuStartTime = 0;\n\n    this.setProps({\n      autoResizeViewport,\n      autoResizeDrawingBuffer,\n      useDevicePixels\n    });\n\n    // Bind methods\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n\n    this._onMousemove = this._onMousemove.bind(this);\n    this._onMouseleave = this._onMouseleave.bind(this);\n  }\n\n  delete() {\n    this.stop();\n    this._setDisplay(null);\n  }\n\n  setNeedsRedraw(reason) {\n    assert(typeof reason === 'string');\n    this.needsRedraw = this.needsRedraw || reason;\n    return this;\n  }\n\n  setProps(props) {\n    if ('autoResizeViewport' in props) {\n      this.autoResizeViewport = props.autoResizeViewport;\n    }\n    if ('autoResizeDrawingBuffer' in props) {\n      this.autoResizeDrawingBuffer = props.autoResizeDrawingBuffer;\n    }\n    if ('useDevicePixels' in props) {\n      this.useDevicePixels = props.useDevicePixels;\n    }\n    return this;\n  }\n\n  // Starts a render loop if not already running\n  // @param {Object} context - contains frame specific info (E.g. tick, width, height, etc)\n  start(opts = {}) {\n    if (this._running) {\n      return this;\n    }\n    this._running = true;\n    // console.debug(`Starting ${this.constructor.name}`);\n    // Wait for start promise before rendering frame\n    getPageLoadPromise()\n      .then(() => {\n        if (!this._running || this._initialized) {\n          return null;\n        }\n\n        // Create the WebGL context\n        this._createWebGLContext(opts);\n        this._createFramebuffer();\n        this._startEventHandling();\n\n        // Initialize the callback data\n        this._initializeCallbackData();\n        this._updateCallbackData();\n\n        // Default viewport setup, in case onInitialize wants to render\n        this._resizeCanvasDrawingBuffer();\n        this._resizeViewport();\n\n        this._gpuTimeQuery = Query.isSupported(this.gl, ['timers']) ? new Query(this.gl) : null;\n\n        this._initialized = true;\n\n        // Note: onIntialize can return a promise (in case it needs to load resources)\n        return this.onInitialize(this.animationProps);\n      })\n      .then(appContext => {\n        if (this._running) {\n          this._addCallbackData(appContext || {});\n          if (appContext !== false) {\n            this._startLoop();\n          }\n        }\n      });\n    return this;\n  }\n\n  // Redraw now\n  redraw() {\n    this._beginTimers();\n\n    this._setupFrame();\n    this._updateCallbackData();\n\n    this._renderFrame(this.animationProps);\n\n    // clear needsRedraw flag\n    this._clearNeedsRedraw();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/commit\n    // Chrome's offscreen canvas does not require gl.commit\n    if (this.offScreen && this.gl.commit) {\n      this.gl.commit();\n    }\n\n    if (this._resolveNextFrame) {\n      this._resolveNextFrame(this);\n      this._nextFramePromise = null;\n      this._resolveNextFrame = null;\n    }\n\n    this._endTimers();\n\n    return this;\n  }\n\n  // Stops a render loop if already running, finalizing\n  stop() {\n    // console.debug(`Stopping ${this.constructor.name}`);\n    if (this._running) {\n      this._finalizeCallbackData();\n      cancelAnimationFrame(this._animationFrameId);\n      this._nextFramePromise = null;\n      this._resolveNextFrame = null;\n      this._animationFrameId = null;\n      this._running = false;\n    }\n    return this;\n  }\n\n  attachTimeline(timeline) {\n    this.timeline = timeline;\n\n    return this.timeline;\n  }\n\n  detachTimeline() {\n    this.timeline = null;\n  }\n\n  waitForRender() {\n    this.setNeedsRedraw('waitForRender');\n\n    if (!this._nextFramePromise) {\n      this._nextFramePromise = new Promise(resolve => {\n        this._resolveNextFrame = resolve;\n      });\n    }\n    return this._nextFramePromise;\n  }\n\n  async toDataURL() {\n    this.setNeedsRedraw('toDataURL');\n\n    await this.waitForRender();\n\n    return this.gl.canvas.toDataURL();\n  }\n\n  onCreateContext(...args) {\n    return this.props.onCreateContext(...args);\n  }\n\n  onInitialize(...args) {\n    return this.props.onInitialize(...args);\n  }\n\n  onRender(...args) {\n    return this.props.onRender(...args);\n  }\n\n  onFinalize(...args) {\n    return this.props.onFinalize(...args);\n  }\n\n  // DEPRECATED/REMOVED METHODS\n\n  getHTMLControlValue(id, defaultValue = 1) {\n    const element = document.getElementById(id);\n    return element ? Number(element.value) : defaultValue;\n  }\n\n  // Update parameters\n  setViewParameters() {\n    log.removed('AnimationLoop.setViewParameters', 'AnimationLoop.setProps')();\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _startLoop() {\n    const renderFrame = () => {\n      if (!this._running) {\n        return;\n      }\n      this.redraw();\n      this._animationFrameId = this._requestAnimationFrame(renderFrame);\n    };\n\n    // cancel any pending renders to ensure only one loop can ever run\n    cancelAnimationFrame(this._animationFrameId);\n    this._animationFrameId = this._requestAnimationFrame(renderFrame);\n  }\n\n  // PRIVATE METHODS\n\n  _setDisplay(display) {\n    if (this.display) {\n      this.display.delete();\n      this.display.animationLoop = null;\n    }\n\n    // store animation loop on the display\n    if (display) {\n      display.animationLoop = this;\n    }\n\n    this.display = display;\n  }\n\n  _requestAnimationFrame(renderFrameCallback) {\n    // E.g. VR display has a separate animation frame to sync with headset\n    if (this.display && this.display.requestAnimationFrame(renderFrameCallback)) {\n      return;\n    }\n\n    requestAnimationFrame(renderFrameCallback);\n  }\n\n  // Called on each frame, can be overridden to call onRender multiple times\n  // to support e.g. stereoscopic rendering\n  _renderFrame(...args) {\n    // Allow e.g. VR display to render multiple frames.\n    if (this.display) {\n      this.display._renderFrame(...args);\n      return;\n    }\n\n    // call callback\n    this.onRender(...args);\n    // end callback\n  }\n\n  _clearNeedsRedraw() {\n    this.needsRedraw = null;\n  }\n\n  _setupFrame() {\n    if (this._onSetupFrame) {\n      // call callback\n      this._onSetupFrame(this.animationProps);\n      // end callback\n    } else {\n      this._resizeCanvasDrawingBuffer();\n      this._resizeViewport();\n      this._resizeFramebuffer();\n    }\n  }\n\n  // Initialize the  object that will be passed to app callbacks\n  _initializeCallbackData() {\n    this.animationProps = {\n      gl: this.gl,\n\n      stop: this.stop,\n      canvas: this.gl.canvas,\n      framebuffer: this.framebuffer,\n\n      // Initial values\n      useDevicePixels: this.useDevicePixels,\n      needsRedraw: null,\n\n      // Animation props\n      startTime: Date.now(),\n      engineTime: 0,\n      tick: 0,\n      tock: 0,\n\n      // Timeline time for back compatibility\n      time: 0,\n\n      // Experimental\n      _timeline: this.timeline,\n      _loop: this,\n      _animationLoop: this,\n      _mousePosition: null // Event props\n    };\n  }\n\n  // Update the context object that will be passed to app callbacks\n  _updateCallbackData() {\n    const {width, height, aspect} = this._getSizeAndAspect();\n    if (width !== this.animationProps.width || height !== this.animationProps.height) {\n      this.setNeedsRedraw('drawing buffer resized');\n    }\n    if (aspect !== this.animationProps.aspect) {\n      this.setNeedsRedraw('drawing buffer aspect changed');\n    }\n\n    this.animationProps.width = width;\n    this.animationProps.height = height;\n    this.animationProps.aspect = aspect;\n\n    this.animationProps.needsRedraw = this.needsRedraw;\n\n    // Update time properties\n    this.animationProps.engineTime = Date.now() - this.animationProps.startTime;\n\n    if (this.timeline) {\n      this.timeline.update(this.animationProps.engineTime);\n    }\n\n    this.animationProps.tick = Math.floor((this.animationProps.time / 1000) * 60);\n    this.animationProps.tock++;\n\n    // For back compatibility\n    this.animationProps.time = this.timeline\n      ? this.timeline.getTime()\n      : this.animationProps.engineTime;\n\n    // experimental\n    this.animationProps._offScreen = this.offScreen;\n  }\n\n  _finalizeCallbackData() {\n    // call callback\n    this.onFinalize(this.animationProps);\n    // end callback\n  }\n\n  // Add application's data to the app context object\n  _addCallbackData(appContext) {\n    if (typeof appContext === 'object' && appContext !== null) {\n      this.animationProps = Object.assign({}, this.animationProps, appContext);\n    }\n  }\n\n  // Either uses supplied or existing context, or calls provided callback to create one\n  _createWebGLContext(opts) {\n    this.offScreen =\n      opts.canvas &&\n      typeof OffscreenCanvas !== 'undefined' &&\n      opts.canvas instanceof OffscreenCanvas;\n\n    // Create the WebGL context if necessary\n    opts = Object.assign({}, opts, this.props.glOptions);\n    this.gl = this.props.gl ? instrumentGLContext(this.props.gl, opts) : this.onCreateContext(opts);\n\n    if (!isWebGL(this.gl)) {\n      throw new Error('AnimationLoop.onCreateContext - illegal context returned');\n    }\n\n    // Reset the WebGL context.\n    resetParameters(this.gl);\n\n    this._createInfoDiv();\n  }\n\n  _createInfoDiv() {\n    if (this.gl.canvas && this.props.onAddHTML) {\n      /* global document */\n      const wrapperDiv = document.createElement('div');\n      document.body.appendChild(wrapperDiv);\n      wrapperDiv.style.position = 'relative';\n      const div = document.createElement('div');\n      div.style.position = 'absolute';\n      div.style.left = '10px';\n      div.style.bottom = '10px';\n      div.style.width = '300px';\n      div.style.background = 'white';\n      wrapperDiv.appendChild(this.gl.canvas);\n      wrapperDiv.appendChild(div);\n      const html = this.props.onAddHTML(div);\n      if (html) {\n        div.innerHTML = html;\n      }\n    }\n  }\n\n  _getSizeAndAspect() {\n    // https://webglfundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html\n    const width = this.gl.drawingBufferWidth;\n    const height = this.gl.drawingBufferHeight;\n\n    // https://webglfundamentals.org/webgl/lessons/webgl-anti-patterns.html\n    let aspect = 1;\n    const {canvas} = this.gl;\n\n    if (canvas && canvas.clientHeight) {\n      aspect = canvas.clientWidth / canvas.clientHeight;\n    } else if (width > 0 && height > 0) {\n      aspect = width / height;\n    }\n\n    return {width, height, aspect};\n  }\n\n  // Default viewport setup\n  _resizeViewport() {\n    if (this.autoResizeViewport) {\n      this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n    }\n  }\n\n  // Resize the render buffer of the canvas to match canvas client size\n  // Optionally multiplying with devicePixel ratio\n  _resizeCanvasDrawingBuffer() {\n    if (this.autoResizeDrawingBuffer) {\n      resizeGLContext(this.gl, {useDevicePixels: this.useDevicePixels});\n    }\n  }\n\n  // TBD - deprecated?\n  _createFramebuffer() {\n    // Setup default framebuffer\n    if (this.props.createFramebuffer) {\n      this.framebuffer = new Framebuffer(this.gl);\n    }\n  }\n\n  _resizeFramebuffer() {\n    if (this.framebuffer) {\n      this.framebuffer.resize({\n        width: this.gl.drawingBufferWidth,\n        height: this.gl.drawingBufferHeight\n      });\n    }\n  }\n\n  _beginTimers() {\n    this.frameRate.timeEnd();\n    this.frameRate.timeStart();\n\n    // Check if timer for last frame has completed.\n    // GPU timer results are never available in the same\n    // frame they are captured.\n    if (\n      this._gpuTimeQuery &&\n      this._gpuTimeQuery.isResultAvailable() &&\n      !this._gpuTimeQuery.isTimerDisjoint()\n    ) {\n      this.stats.get('GPU Time').addTime(this._gpuTimeQuery.getTimerMilliseconds());\n    }\n\n    if (this._gpuTimeQuery) {\n      // GPU time query start\n      this._gpuTimeQuery.beginTimeElapsedQuery();\n    }\n\n    this.cpuTime.timeStart();\n  }\n\n  _endTimers() {\n    this.cpuTime.timeEnd();\n\n    if (this._gpuTimeQuery) {\n      // GPU time query end. Results will be available on next frame.\n      this._gpuTimeQuery.end();\n    }\n  }\n\n  // Event handling\n\n  _startEventHandling() {\n    const {canvas} = this.gl;\n    if (canvas) {\n      canvas.addEventListener('mousemove', this._onMousemove);\n      canvas.addEventListener('mouseleave', this._onMouseleave);\n    }\n  }\n\n  _onMousemove(e) {\n    this.animationProps._mousePosition = [e.offsetX, e.offsetY];\n  }\n  _onMouseleave(e) {\n    this.animationProps._mousePosition = null;\n  }\n}\n","import {withParameters} from '@luma.gl/core';\n\nexport default class Display {\n  getViews(options) {\n    const {width, height} = options;\n    return [\n      {\n        params: {\n          viewport: [0, 0, width, height],\n          scissor: [0, 0, width, height],\n          scissorTest: true\n        }\n      }\n    ];\n  }\n\n  submitFrame() {\n    return true;\n  }\n\n  // return true if animation frame has been requested\n  requestAnimationFrame(renderFrame) {\n    return false;\n  }\n\n  delete() {}\n\n  // AnimationLoop calls this API\n  _renderFrame(options) {\n    const views = this.getViews(options);\n    if (!views) {\n      return false;\n    }\n\n    const {gl} = this.animationLoop;\n    for (const view of views) {\n      withParameters(gl, view.params, () => this.animationLoop.onRender({...options, ...view}));\n    }\n\n    this.submitFrame();\n    return true;\n  }\n}\n","/* global document */\n\nexport function createEnterVRButton({canvas, title}) {\n  const {top, left, width, height} = canvas.getBoundingClientRect();\n\n  const container = document.createElement('div');\n  container.style.position = 'absolute';\n  container.style.top = `${top}px`;\n  container.style.left = `${left}px`;\n  container.style.width = `${width}px`;\n  container.style.height = `${height}px`;\n  container.style.pointerEvents = 'none';\n  container.style.zIndex = '999';\n  document.body.appendChild(container);\n\n  const button = document.createElement('button');\n  button.style.padding = '16px';\n  button.style.border = '1px solid #fff';\n  button.style.borderRadius = '8px';\n  button.style.background = 'rgba(0,0,0,0.5)';\n  button.style.color = '#fff';\n  button.style.font = 'normal 20px sans-serif';\n  button.style.cursor = 'pointer';\n  button.style.margin = '20px auto';\n  button.style.display = 'block';\n  button.style.pointerEvents = 'all';\n  button.textContent = title;\n  container.appendChild(button);\n\n  return button;\n}\n","/* global window, navigator */\nimport {log} from '@luma.gl/core';\nimport Display from './display';\nimport {createEnterVRButton} from './vr-button';\n\nexport default class VRDisplay extends Display {\n  static isSupported() {\n    return (\n      typeof navigator !== 'undefined' && 'getVRDisplays' in navigator && 'VRFrameData' in window\n    );\n  }\n\n  constructor(props) {\n    super(props);\n\n    this._vrSupported = VRDisplay.isSupported();\n    if (this._vrSupported) {\n      this.vrFrameData = new window.VRFrameData();\n      this.vrPresenting = false;\n      this.vrFrame = false;\n      window.addEventListener('vrdisplaypresentchange', this._vrDisplayPresentChange.bind(this));\n    }\n  }\n\n  delete() {\n    super.delete();\n    this._removeVRButton();\n  }\n\n  getViews(options) {\n    if (this._vrSupported) {\n      this._addVRButton();\n    }\n\n    // Need both vrPresenting and vrFrame\n    // to avoid race conditions when we exit VR\n    // after we schedule an animation frame\n    if (this.vrPresenting && this.vrFrame) {\n      this.vrDisplay.getFrameData(this.vrFrameData);\n\n      const {\n        leftProjectionMatrix,\n        leftViewMatrix,\n        rightProjectionMatrix,\n        rightViewMatrix\n      } = this.vrFrameData;\n\n      const {width, height} = options;\n\n      return [\n        {\n          displayEye: 'left',\n          projectionMatrix: leftProjectionMatrix,\n          viewMatrix: leftViewMatrix,\n          params: {\n            viewport: [0, 0, width * 0.5, height],\n            scissor: [0, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        },\n        {\n          displayEye: 'right',\n          projectionMatrix: rightProjectionMatrix,\n          viewMatrix: rightViewMatrix,\n          params: {\n            viewport: [width * 0.5, 0, width * 0.5, height],\n            scissor: [width * 0.5, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        }\n      ];\n    }\n\n    return super.getViews(options);\n  }\n\n  submitFrame() {\n    if (this.vrPresenting && this.vrFrame) {\n      this.vrDisplay.submitFrame();\n      return true;\n    }\n\n    return false;\n  }\n\n  requestAnimationFrame(renderFrame) {\n    if (this.vrPresenting) {\n      this.vrDisplay.requestAnimationFrame(() => {\n        this.vrFrame = true;\n        renderFrame();\n        this.vrFrame = false;\n      });\n\n      return true;\n    }\n\n    return false;\n  }\n\n  // PRIVATE\n\n  // TODO: Consider resizing canvas to match vrDisplay.getEyeParameters()\n  // TODO: Maybe allow to select display?\n  async _addVRButton() {\n    if (this.vrButton) {\n      return;\n    }\n\n    const canvas = this._getCanvas();\n    if (!canvas) {\n      return;\n    }\n\n    const displays = await navigator.getVRDisplays();\n    if (displays && displays.length) {\n      log.info(2, 'Found VR Displays', displays)();\n\n      this.vrDisplay = displays[0];\n      this.vrButton = createEnterVRButton({\n        canvas,\n        title: `Enter VR (${this.vrDisplay.displayName})`\n      });\n      this.vrButton.onclick = () => this._startDisplay();\n    }\n  }\n\n  _getCanvas() {\n    return this.animationLoop.canvas || (this.animationLoop.gl && this.animationLoop.gl.canvas);\n  }\n\n  _removeVRButton() {\n    if (this.vrButton) {\n      // TODO\n    }\n  }\n\n  _startDisplay() {\n    this.vrDisplay.requestPresent([\n      {\n        source: this._getCanvas()\n      }\n    ]);\n  }\n\n  _vrDisplayPresentChange() {\n    if (this.vrDisplay.isPresenting) {\n      log.info(2, 'Entering VR')();\n\n      this.vrPresenting = true;\n      this.vrButton.style.display = 'none';\n    } else {\n      log.info(2, 'Exiting VR')();\n\n      this.vrPresenting = false;\n      this.vrButton.style.display = 'block';\n    }\n  }\n}\n","let arrayBuffer = null;\n\nexport function getScratchArrayBuffer(byteLength) {\n  if (!arrayBuffer || arrayBuffer.byteLength < byteLength) {\n    arrayBuffer = new ArrayBuffer(byteLength);\n  }\n  return arrayBuffer;\n}\n\nexport function getScratchArray(Type, length) {\n  const scratchArrayBuffer = getScratchArrayBuffer(Type.BYTES_PER_ELEMENT * length);\n  return new Type(scratchArrayBuffer, 0, length); // arrayBuffer, byteOffset, length (in elements)\n}\n\n// Uses copyWithin to significantly speed up typed array value filling\nexport function fillArray({target, source, start = 0, count = 1}) {\n  const length = source.length;\n  const total = count * length;\n  let copied = 0;\n  for (let i = start; copied < length; copied++) {\n    target[i++] = source[copied];\n  }\n\n  while (copied < total) {\n    // If we have copied less than half, copy everything we got\n    // else copy remaining in one operation\n    if (copied < total - copied) {\n      target.copyWithin(start + copied, start, start + copied);\n      copied *= 2;\n    } else {\n      target.copyWithin(start + copied, start, start + total - copied);\n      copied = total;\n    }\n  }\n\n  return target;\n}\n\n/*\n\n// Creates a new Uint8Array based on two different ArrayBuffers\n// @private\n// @param {ArrayBuffers} buffer1 The first buffer.\n// @param {ArrayBuffers} buffer2 The second buffer.\n// @return {ArrayBuffers} The new ArrayBuffer created out of the two.\n//\nexport function copyArrayBuffer(\n  targetBuffer, sourceBuffer, byteOffset, byteLength = sourceBuffer.byteLength\n) {\n  const targetArray = new Uint8Array(targetBuffer, byteOffset, byteLength);\n  const sourceArray = new Uint8Array(sourceBuffer);\n  targetArray.set(sourceArray);\n  return targetBuffer;\n}\n\n*/\n","import GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {isWebGL2} from '../webgl-utils';\nimport {getScratchArray, fillArray} from '../utils/array-utils-flat';\nimport {assert} from '../utils';\nimport {getBrowser} from 'probe.gl';\n\n/* eslint-disable camelcase */\nconst OES_vertex_array_object = 'OES_vertex_array_object';\n\nconst ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';\n\nexport default class VertexArrayObject extends Resource {\n  static isSupported(gl, options = {}) {\n    // Attribute 0 can not be disable on most desktop OpenGL based browsers\n    // and on iOS Safari browser.\n    if (options.constantAttributeZero) {\n      return isWebGL2(gl) || getBrowser() === 'Chrome';\n    }\n\n    // Whether additional objects can be created\n    return isWebGL2(gl) || gl.getExtension(OES_vertex_array_object);\n  }\n\n  // Returns the global (null) vertex array object. Exists even when no extension available\n  static getDefaultArray(gl) {\n    gl.luma = gl.luma || {};\n    if (!gl.luma.defaultVertexArray) {\n      gl.luma.defaultVertexArray = new VertexArrayObject(gl, {handle: null, isDefaultArray: true});\n    }\n    return gl.luma.defaultVertexArray;\n  }\n\n  static getMaxAttributes(gl) {\n    // TODO - should be cached per context\n    VertexArrayObject.MAX_ATTRIBUTES =\n      VertexArrayObject.MAX_ATTRIBUTES || gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    return VertexArrayObject.MAX_ATTRIBUTES;\n  }\n\n  // Note: Constants are stored globally on the WebGL context, not the VAO\n  // So they need to be updated before every render\n  // TODO - use known type (in configuration or passed in) to allow non-typed arrays?\n  // TODO - remember/cache values to avoid setting them unnecessarily?\n  static setConstant(gl, location, array) {\n    switch (array.constructor) {\n      case Float32Array:\n        VertexArrayObject._setConstantFloatArray(gl, location, array);\n        break;\n      case Int32Array:\n        VertexArrayObject._setConstantIntArray(gl, location, array);\n        break;\n      case Uint32Array:\n        VertexArrayObject._setConstantUintArray(gl, location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  // Create a VertexArray\n  constructor(gl, opts = {}) {\n    // Use program's id if program but no id is supplied\n    const id = opts.id || (opts.program && opts.program.id);\n    super(gl, Object.assign({}, opts, {id}));\n\n    this.hasVertexArrays = VertexArrayObject.isSupported(gl);\n    this.buffer = null;\n    this.bufferValue = null;\n    // this.isDefaultArray = opts.isDefaultArray || false;\n\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  delete() {\n    super.delete();\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n  }\n\n  get MAX_ATTRIBUTES() {\n    return VertexArrayObject.getMaxAttributes(this.gl);\n  }\n\n  initialize(props = {}) {\n    return this.setProps(props);\n  }\n\n  setProps(props) {\n    // TODO: decide which props should be supported\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, opts = {}) {\n    assert(!elementBuffer || elementBuffer.target === GL.ELEMENT_ARRAY_BUFFER, ERR_ELEMENTS);\n\n    // The GL.ELEMENT_ARRAY_BUFFER_BINDING is stored on the VertexArrayObject...\n    this.bind(() => {\n      this.gl.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, elementBuffer ? elementBuffer.handle : null);\n    });\n\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a bufferk, enables the location, sets divisor\n  setBuffer(location, buffer, accessor) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer, accessor);\n    }\n\n    const {size, type, stride, offset, normalized, integer, divisor} = accessor;\n\n    const {gl} = this;\n    location = Number(location);\n\n    this.bind(() => {\n      // A non-zero buffer object must be bound to the GL_ARRAY_BUFFER target\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer.handle);\n\n      // WebGL2 supports *integer* data formats, i.e. GPU will see integer values\n      if (integer) {\n        assert(isWebGL2(gl));\n        gl.vertexAttribIPointer(location, size, type, stride, offset);\n      } else {\n        // Attaches ARRAY_BUFFER with specified buffer format to location\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n      }\n      gl.enableVertexAttribArray(location);\n      gl.vertexAttribDivisor(location, divisor || 0);\n\n      // NOTE We don't unbind buffer here, typically another buffer will be bound just after\n    });\n\n    return this;\n  }\n\n  // Enabling an attribute location makes it reference the currently bound buffer\n  // Disabling an attribute location makes it reference the global constant value\n  // TODO - handle single values for size 1 attributes?\n  // TODO - convert classic arrays based on known type?\n  enable(location, enable = true) {\n    // Attribute 0 cannot be disabled in most desktop OpenGL based browsers\n    const disablingAttributeZero =\n      !enable &&\n      location === 0 &&\n      !VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true});\n\n    if (!disablingAttributeZero) {\n      location = Number(location);\n      this.bind(\n        () =>\n          enable\n            ? this.gl.enableVertexAttribArray(location)\n            : this.gl.disableVertexAttribArray(location)\n      );\n    }\n    return this;\n  }\n\n  // Provide a means to create a buffer that is equivalent to a constant.\n  // NOTE: Desktop OpenGL cannot disable attribute 0.\n  // https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-\n  // this-has-significant-performance-penalt\n  getConstantBuffer(elementCount, value, accessor) {\n    // Create buffer only when needed, and reuse it (avoids inflating buffer creation statistics)\n\n    const constantValue = this._normalizeConstantArrayValue(value, accessor);\n\n    const byteLength = constantValue.byteLength * elementCount;\n    const length = constantValue.length * elementCount;\n\n    let updateNeeded = !this.buffer;\n\n    this.buffer = this.buffer || new Buffer(this.gl, byteLength);\n    updateNeeded = updateNeeded || this.buffer.reallocate(byteLength);\n\n    // Reallocate and update contents if needed\n    updateNeeded =\n      updateNeeded || !this._compareConstantArrayValues(constantValue, this.bufferValue);\n\n    if (updateNeeded) {\n      // Create a typed array that is big enough, and fill it with the required data\n      const typedArray = getScratchArray(value.constructor, length);\n      fillArray({target: typedArray, source: constantValue, start: 0, count: length});\n      this.buffer.subData(typedArray);\n      this.bufferValue = value;\n    }\n\n    return this.buffer;\n  }\n\n  // PRIVATE\n\n  // TODO - convert Arrays based on known type? (read type from accessor, don't assume Float32Array)\n  // TODO - handle single values for size 1 attributes?\n  _normalizeConstantArrayValue(arrayValue, accessor) {\n    if (Array.isArray(arrayValue)) {\n      return new Float32Array(arrayValue);\n    }\n    return arrayValue;\n  }\n\n  _compareConstantArrayValues(v1, v2) {\n    if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {\n      return false;\n    }\n    for (let i = 0; i < v1.length; ++i) {\n      if (v1[i] !== v2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  static _setConstantFloatArray(gl, location, array) {\n    switch (array.length) {\n      case 1:\n        gl.vertexAttrib1fv(location, array);\n        break;\n      case 2:\n        gl.vertexAttrib2fv(location, array);\n        break;\n      case 3:\n        gl.vertexAttrib3fv(location, array);\n        break;\n      case 4:\n        gl.vertexAttrib4fv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantIntArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1iv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2iv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3iv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4iv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantUintArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1uiv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2uiv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3uiv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4uiv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  // RESOURCE IMPLEMENTATION\n\n  _createHandle() {\n    this.hasVertexArrays = VertexArrayObject.isSupported(this.gl);\n    if (this.hasVertexArrays) {\n      return this.gl.createVertexArray();\n    }\n    return null;\n  }\n\n  _deleteHandle(handle) {\n    if (this.hasVertexArrays) {\n      this.gl.deleteVertexArray(handle);\n    }\n    return [this.elements];\n    // return [this.elements, ...this.buffers];\n  }\n\n  _bindHandle(handle) {\n    if (this.hasVertexArrays) {\n      this.gl.bindVertexArray(handle);\n    }\n  }\n\n  // Generic getter for information about a vertex attribute at a given position\n  _getParameter(pname, {location}) {\n    assert(Number.isFinite(location));\n    return this.bind(() => {\n      switch (pname) {\n        case GL.VERTEX_ATTRIB_ARRAY_POINTER:\n          return this.gl.getVertexAttribOffset(location, pname);\n        default:\n          return this.gl.getVertexAttrib(location, pname);\n      }\n    });\n  }\n\n  // DEPRECATED\n\n  /*\n  setDivisor(location, divisor) {\n    location = Number(location);\n    this.bind(() => this.gl.vertexAttribDivisor(location, divisor));\n    return this;\n  }\n\n  // match assumed WebGL defaults\n  static resetConstants(gl) {\n    const MAX_ATTRIBUTES = VertexArrayObject.getMaxAttributes(gl);\n    for (let i = 0; i < MAX_ATTRIBUTES; i++) {\n      VertexArrayObject.setConstant(gl, i, [0, 0, 0, 1]);\n    }\n  }\n\n  // Resets all attributes (to default valued constants)\n  resetAttributes() {\n    // WebGL offers disabling, but no clear way to set a VertexArray buffer to `null`\n    // But Chrome does not like buffers that are bound to several binding points.\n    // So we just bind all the attributes to the dummy \"attribute zero\" buffer\n    this.buffer = this.buffer || new Buffer(this.gl, {size: 4});\n\n    for (const location in this.values) {\n      if (this.values[location] instanceof Buffer) {\n        this.gl.disableVertexAttribArray(location);\n        this.gl.bindBuffer(GL.ARRAY_BUFFER, this.buffer.handle);\n        this.gl.vertexAttribPointer(location, 1, GL.FLOAT, false, 0, 0);\n      }\n    }\n\n    this.setElementBuffer(null);\n    return this;\n  }\n  */\n}\n","import GL from '@luma.gl/constants';\nimport Accessor from './accessor';\nimport Buffer from './buffer';\nimport VertexArrayObject from './vertex-array-object';\nimport {log, assert, stubRemovedMethods} from '../utils';\n\nconst ERR_ATTRIBUTE_TYPE =\n  'VertexArray: attributes must be Buffers or constants (i.e. typed array)';\n\n// This is done to support mat type attributes.\n// See section \"Notes about setting mat type attributes\"\n// in vertex-array.md\nconst MULTI_LOCATION_ATTRIBUTE_REGEXP = /^(.+)__LOCATION_([0-9]+)$/;\n\nconst DEPRECATIONS_V6 = [\n  'setBuffers',\n  'setGeneric',\n  'clearBindings',\n  'setLocations',\n  'setGenericValues',\n  'setDivisor',\n  'enable',\n  'disable'\n];\n\nexport default class VertexArray {\n  constructor(gl, opts = {}) {\n    // Use program's id if program is supplied but no id is supplied\n    const id = opts.id || (opts.program && opts.program.id);\n    // super(gl, Object.assign({}, opts, {id}));\n\n    this.id = id;\n    this.gl = gl;\n    this.configuration = null;\n\n    // Extracted information\n    this.elements = null;\n    this.elementsAccessor = null;\n    this.values = null;\n    this.accessors = null;\n    this.unused = null;\n    this.drawParams = null;\n    this.buffer = null; // For attribute 0 on desktops, and created when unbinding buffers\n\n    this.attributes = {};\n\n    this.vertexArrayObject = VertexArrayObject.isSupported(gl)\n      ? new VertexArrayObject(gl)\n      : VertexArrayObject.getDefaultArray(gl);\n\n    // Issue errors when using removed methods\n    stubRemovedMethods(this, 'VertexArray', 'v6.0', DEPRECATIONS_V6);\n\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  delete() {\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n  }\n\n  initialize(props = {}) {\n    this.reset();\n    this.configuration = null;\n    this.bindOnUse = false;\n    return this.setProps(props);\n  }\n\n  // Resets all attributes (to default valued constants)\n  reset() {\n    // this.vertexArrayObject.reset();\n\n    this.elements = null;\n    this.elementsAccessor = null;\n    const {MAX_ATTRIBUTES} = this.vertexArrayObject;\n    this.values = new Array(MAX_ATTRIBUTES).fill(null);\n    this.accessors = new Array(MAX_ATTRIBUTES).fill(null);\n    this.unused = {};\n\n    // Auto detects draw params\n    this.drawParams = null;\n\n    return this;\n  }\n\n  setProps(props) {\n    if ('program' in props) {\n      this.configuration = props.program && props.program.configuration;\n    }\n    if ('configuration' in props) {\n      this.configuration = props.configuration;\n    }\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('elements' in props) {\n      this.setElementBuffer(props.elements);\n    }\n    if ('bindOnUse' in props) {\n      props = props.bindOnUse;\n    }\n    return this;\n  }\n\n  // Automatically called if buffers changed through VertexArray API\n  clearDrawParams() {\n    this.drawParams = null;\n  }\n\n  getDrawParams(appParameters) {\n    // Auto deduced draw parameters\n    this.drawParams = this.drawParams || this._updateDrawParams();\n\n    // Override with any application supplied draw parameters\n    return Object.assign({}, this.drawParams, appParameters);\n  }\n\n  // Set (bind) an array or map of vertex array buffers, either in numbered or named locations.\n  // For names that are not present in `location`, the supplied buffers will be ignored.\n  // if a single buffer of type GL.ELEMENT_ARRAY_BUFFER is present, it will be set as elements\n  //   Signatures:\n  //     {attributeName: buffer}\n  //     {attributeName: [buffer, accessor]}\n  //     {attributeName: (typed) array} => constant\n  setAttributes(attributes) {\n    Object.assign(this.attributes, attributes);\n    this.vertexArrayObject.bind(() => {\n      for (const locationOrName in attributes) {\n        const value = attributes[locationOrName];\n        this._setAttribute(locationOrName, value);\n      }\n      // Make sure we don't leave any bindings\n      this.gl.bindBuffer(GL.ARRAY_BUFFER, null);\n    });\n\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, accessor = {}) {\n    this.elements = elementBuffer; // Save value for debugging\n    this.elementsAccessor = accessor;\n    this.clearDrawParams();\n\n    // Update vertexArray immediately if we have our own array\n    if (!this.vertexArrayObject.isDefaultArray) {\n      this.vertexArrayObject.setElementBuffer(elementBuffer, accessor);\n    }\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a buffer\n  setBuffer(locationOrName, buffer, appAccessor = {}) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer, appAccessor);\n    }\n\n    const {location, accessor} = this._resolveLocationAndAccessor(\n      locationOrName,\n      buffer,\n      buffer.accessor,\n      appAccessor\n    );\n\n    if (location >= 0) {\n      this.values[location] = buffer;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n\n      // Update vertexArray immediately if we have our own array\n      if (!this.vertexArrayObject.isDefaultArray) {\n        this.vertexArrayObject.setBuffer(location, buffer, accessor);\n      }\n    }\n\n    return this;\n  }\n\n  // Set attribute to constant value (small typed array corresponding to one vertex' worth of data)\n  setConstant(locationOrName, arrayValue, appAccessor = {}) {\n    const {location, accessor} = this._resolveLocationAndAccessor(\n      locationOrName,\n      arrayValue,\n      // Ensure that size isn't taken from program for multi-column\n      // attributes\n      Object.assign({size: arrayValue.length}, appAccessor)\n    );\n\n    if (location >= 0) {\n      arrayValue = this.vertexArrayObject._normalizeConstantArrayValue(arrayValue, accessor);\n\n      this.values[location] = arrayValue;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n\n      // Update vertexArray immediately if we have our own array\n      // NOTE: We set the actual constant value later on bind. We can't set the value now since\n      // constants are global and affect all other VertexArrays that have disabled attributes\n      // in the same location.\n      // We do disable the attribute which makes it use the global constant value at that location\n      if (!this.vertexArrayObject.isDefaultArray) {\n        this.vertexArrayObject.enable(location, false);\n      }\n    }\n\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, unbind temporarily to avoid conflicting with TransformFeedback\n  unbindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        // Update vertexArray immediately if we have our own array\n        if (!this.vertexArrayObject.isDefaultArray) {\n          this.vertexArrayObject.setElementBuffer(null);\n        }\n      }\n\n      // Chrome does not like buffers that are bound to several binding points,\n      // so we need to offer and unbind facility\n      // WebGL offers disabling, but no clear way to set a VertexArray buffer to `null`\n      // So we just bind all the attributes to the dummy \"attribute zero\" buffer\n      this.buffer = this.buffer || new Buffer(this.gl, {accessor: {size: 4}});\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        if (this.values[location] instanceof Buffer) {\n          this.gl.disableVertexAttribArray(location);\n          this.gl.bindBuffer(GL.ARRAY_BUFFER, this.buffer.handle);\n          this.gl.vertexAttribPointer(location, 1, GL.FLOAT, false, 0, 0);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, rebind rebind after temporary unbind\n  bindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.setElementBuffer(this.elements);\n      }\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        const buffer = this.values[location];\n        if (buffer instanceof Buffer) {\n          this.setBuffer(location, buffer);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Bind for use\n  // When a vertex array is about to be used, we must:\n  // - Set constant attributes (since these are stored on the context and reset on bind)\n  // - Check if we need to initialize the buffer\n  bindForDraw(vertexCount, instanceCount, func) {\n    let value;\n\n    this.vertexArrayObject.bind(() => {\n      // Make sure that any constant attributes are updated (stored on the context, not the VAO)\n      // Also handles attribute 0\n      this._setConstantAttributes(vertexCount, instanceCount);\n\n      if (!this.vertexArrayObject.hasVertexArrays) {\n        this.bindBuffers();\n      }\n\n      value = func();\n\n      if (!this.vertexArrayObject.hasVertexArrays) {\n        this.unbindBuffers();\n      }\n    });\n\n    return value;\n  }\n\n  // PRIVATE\n\n  // Resolve locations and accessors\n  _resolveLocationAndAccessor(locationOrName, value, valueAccessor, appAccessor) {\n    const {location, name} = this._getAttributeIndex(locationOrName);\n    if (!Number.isFinite(location) || location < 0) {\n      this.unused[locationOrName] = value;\n      log.once(3, () => `unused value ${locationOrName} in ${this.id}`)();\n      return this;\n    }\n\n    const accessInfo = this._getAttributeInfo(name || location);\n\n    // Attribute location wasn't directly found.\n    // Likely due to multi-location attributes (e.g. matrix)\n    if (!accessInfo) {\n      return {\n        location: -1,\n        accessor: null\n      };\n    }\n\n    // Resolve the partial accessors into a final accessor\n    const accessor = Accessor.resolve(accessInfo.accessor, valueAccessor, appAccessor);\n\n    const {size, type} = accessor;\n    assert(Number.isFinite(size) && Number.isFinite(type));\n\n    return {location, accessor};\n  }\n\n  _getAttributeInfo(attributeName) {\n    return this.configuration && this.configuration.getAttributeInfo(attributeName);\n  }\n\n  _getAttributeIndex(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return {location};\n    }\n\n    const multiLocation = MULTI_LOCATION_ATTRIBUTE_REGEXP.exec(locationOrName);\n    const name = multiLocation ? multiLocation[1] : locationOrName;\n    const locationOffset = multiLocation ? Number(multiLocation[2]) : 0;\n\n    if (this.configuration) {\n      return {\n        location: this.configuration.getAttributeLocation(name) + locationOffset,\n        name\n      };\n    }\n\n    return {location: -1};\n  }\n\n  _setAttribute(locationOrName, value) {\n    if (value instanceof Buffer) {\n      //  Signature: {attributeName: Buffer}\n      this.setBuffer(locationOrName, value);\n    } else if (Array.isArray(value) && value.length && value[0] instanceof Buffer) {\n      // Signature: {attributeName: [buffer, accessor]}\n      const buffer = value[0];\n      const accessor = value[1];\n      this.setBuffer(locationOrName, buffer, accessor);\n    } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {\n      // Signature: {attributeName: constant}, constant == short (typed) array\n      const constant = value;\n      this.setConstant(locationOrName, constant);\n    } else if (value.buffer instanceof Buffer) {\n      // luma.gl v7: Support accessor objects with 'buffer' field\n      // for interleaved data\n      // Signature: {attributeName: {...accessor, buffer}}\n      const accessor = value;\n      this.setBuffer(locationOrName, accessor.buffer, accessor);\n    } else {\n      throw new Error(ERR_ATTRIBUTE_TYPE);\n    }\n  }\n\n  // Updates all constant attribute values (constants are used when vertex attributes are disabled).\n  // This needs to be done repeatedly since in contrast to buffer bindings,\n  // constants are stored on the WebGL context, not the VAO\n  _setConstantAttributes(vertexCount, instanceCount) {\n    // TODO - use accessor to determine what length to use\n    const elementCount = Math.max(vertexCount | 0, instanceCount | 0);\n    let constant = this.values[0];\n    if (ArrayBuffer.isView(constant)) {\n      this._setConstantAttributeZero(constant, elementCount);\n    }\n\n    for (let location = 1; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      constant = this.values[location];\n      if (ArrayBuffer.isView(constant)) {\n        this._setConstantAttribute(location, constant);\n      }\n    }\n  }\n\n  _setConstantAttributeZero(constant, elementCount) {\n    if (VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true})) {\n      this._setConstantAttribute(0, constant);\n      return;\n    }\n\n    // Get a dummy buffer populated with repeated constants\n    const buffer = this.vertexArrayObject.getConstantBuffer(elementCount, constant);\n\n    // Set the buffer on location 0\n    this.vertexArrayObject.setBuffer(0, buffer, this.accessors[0]);\n  }\n\n  _setConstantAttribute(location, constant) {\n    VertexArrayObject.setConstant(this.gl, location, constant);\n\n    // If we are using the global VertexArrayObject, we need to disable the attribute now\n    if (this.vertexArrayObject.isDefaultArray) {\n      this.vertexArrayObject.enable(location, false);\n    }\n  }\n\n  // Walks the buffers and updates draw parameters\n  _updateDrawParams() {\n    const drawParams = {\n      isIndexed: false,\n      isInstanced: false,\n      indexCount: Infinity,\n      vertexCount: Infinity,\n      instanceCount: Infinity\n    };\n\n    for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      this._updateDrawParamsForLocation(drawParams, location);\n    }\n\n    if (this.elements) {\n      // indexing is autodetected - buffer with target GL.ELEMENT_ARRAY_BUFFER\n      // index type is saved for drawElement calls\n      drawParams.elementCount = this.elements.getElementCount(this.elements.accessor);\n      drawParams.isIndexed = true;\n      drawParams.indexType = this.elementsAccessor.type || this.elements.accessor.type;\n      drawParams.indexOffset = this.elementsAccessor.offset || 0;\n    }\n\n    // Post-calculation checks\n    if (drawParams.indexCount === Infinity) {\n      drawParams.indexCount = 0;\n    }\n    if (drawParams.vertexCount === Infinity) {\n      drawParams.vertexCount = 0;\n    }\n    if (drawParams.instanceCount === Infinity) {\n      drawParams.instanceCount = 0;\n    }\n\n    return drawParams;\n  }\n\n  _updateDrawParamsForLocation(drawParams, location) {\n    const value = this.values[location];\n    const accessor = this.accessors[location];\n\n    if (!value) {\n      return;\n    }\n\n    // Check if instanced (whether buffer or constant)\n    const {divisor} = accessor;\n    const isInstanced = divisor > 0;\n    drawParams.isInstanced = drawParams.isInstanced || isInstanced;\n\n    if (value instanceof Buffer) {\n      const buffer = value;\n\n      if (isInstanced) {\n        // instance attribute\n        const instanceCount = buffer.getVertexCount(accessor);\n        drawParams.instanceCount = Math.min(drawParams.instanceCount, instanceCount);\n      } else {\n        // normal attribute\n        const vertexCount = buffer.getVertexCount(accessor);\n        drawParams.vertexCount = Math.min(drawParams.vertexCount, vertexCount);\n      }\n    }\n  }\n\n  // DEPRECATED in v6.x - but not warnings not properly implemented\n\n  setElements(elementBuffer = null, accessor = {}) {\n    log.deprecated('setElements', 'setElementBuffer')();\n    return this.setElementBuffer(elementBuffer, accessor);\n  }\n}\n"],"sourceRoot":""}