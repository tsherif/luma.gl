{"version":3,"sources":["webpack:///../examples/lessons/01/app.js","webpack:///./templates/lessons/example-01.jsx"],"names":["AppAnimationLoop","props","_AnimationLoop","call","this","Object","assign","debug","getInfo","onInitialize","gl","_ref","aspect","canvas","program","classes_program","vs","fs","triangleVertexArray","vertex_array","attributes","positions","buffer","Float32Array","squareVertexArray","view","matrix4","translate","projection","perspective","setParameters","clearColor","clearDepth","depthTest","depthFunc","LEQUAL","uMVMatrix","uPMatrix","vertexArray","drawMode","TRIANGLES","vertexCount","TRIANGLE_STRIP","AnimationLoop","window","website","app_AppAnimationLoop","animationLoop","Example","render","console","react_default","a","createElement","animation_loop_example_page","exampleConfig","pageContext","React","Component"],"mappings":"mMAGA,IA4BqBA,sBAKnB,SAAAA,EAAAC,GAAwB,gBAAZA,MAAQ,IAClBC,EAAAC,KAAAC,KAAMC,OAAAC,OAAAL,EAAqB,CAACM,OAAO,MADbH,qGAJjBI,QAAP,WACE,MA9BJ,yKAqCEC,yBAAmC,IAArBC,EAAqBC,EAArBD,GAAYE,GAASD,EAAjBE,OAAiBF,EAATC,QAIlBE,EAAU,IAAAC,EAAA,EAAAL,EAAgB,CAC9BM,GAjCN,uKAkCMC,GAvBN,iGA0BUC,EAAsB,IAAAC,EAAA,EAAAT,EAAoB,CAC9CI,QAD8CA,EAE9CM,WAAY,CACVC,UAAW,IAAAC,EAAA,EAAAZ,EAAe,IAAAa,aAXP,oBADU,QAgB3BC,EAAoB,IAAAL,EAAA,EAAAT,EAAoB,CAC5CI,QAD4CA,EAE5CM,WAAY,CACVC,UAAW,IAAAC,EAAA,EAAAZ,EAAe,IAAAa,aAjBT,2BAFY,QAuB3BE,GAAO,IAAAC,EAAA,GAAAC,UAAwB,SAArC,IACMC,GAAa,IAAAF,EAAA,GAAAG,YAA0B,CAACjB,WAE9CkB,YAAapB,EAAK,CAChBqB,WAAY,OADI,GAEhBC,WAAY,CAFI,GAGhBC,WAHgB,EAIhBC,UAAWxB,EAAGyB,SAGhBzB,QAASA,mBAAsBA,EAA/BA,kBAEAI,cACe,CACXsB,UADWX,EAEXY,SAAUT,IAHdd,KAKQ,CACJwB,YADIpB,EAEJqB,SAAU7B,EAFN8B,UAGJC,YAAa,IAIjBhB,YAAe,KAAfA,IAEAX,cACe,CACXsB,UADWX,EAEXY,SAAUT,IAHdd,KAKQ,CACJwB,YADId,EAEJe,SAAU7B,EAFNgC,eAGJD,YAAa,QAlEyBE,KAwE1C,oBAAAC,QAAkCA,OAAtCC,UACwB,IAAtBC,GACAC,kDCrGmBC,kLACnBC,kBAEE,OADAC,mCAEEC,EAAAC,EAAAC,cAAAC,EAAA,GAA0BX,cAA1BG,EAAwDS,cAAenD,KAAAH,MAAAuD,YAAuBD,oBAJ/DE,IAAMC","file":"component---templates-lessons-example-01-jsx-ac2594b528a03960b989.js","sourcesContent":["import {AnimationLoop, Program, VertexArray, Buffer, setParameters} from '@luma.gl/core';\nimport {Matrix4} from 'math.gl';\n\nconst INFO_HTML = `\n<p>\n  <a href=\"http://learningwebgl.com/blog/?p=28\" target=\"_blank\">\n    A Triangle and a Square\n  </a>\n<p>\nThe classic WebGL Lessons in luma.gl\n`;\n\nconst VERTEX_SHADER = `\\\nattribute vec3 positions;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\n\nvoid main(void) {\n  gl_Position = uPMatrix * uMVMatrix * vec4(positions, 1.0);\n}\n`;\n\nconst FRAGMENT_SHADER = `\\\nprecision highp float;\n\nvoid main(void) {\n  gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}\n`;\n\nexport default class AppAnimationLoop extends AnimationLoop {\n  static getInfo() {\n    return INFO_HTML;\n  }\n\n  constructor(props = {}) {\n    super(Object.assign(props, {debug: true}));\n  }\n\n  onInitialize({gl, canvas, aspect}) {\n    const TRIANGLE_VERTS = [0, 1, 0, -1, -1, 0, 1, -1, 0]; // eslint-disable-line\n    const SQUARE_VERTS = [1, 1, 0, -1, 1, 0, 1, -1, 0, -1, -1, 0]; // eslint-disable-line\n\n    const program = new Program(gl, {\n      vs: VERTEX_SHADER,\n      fs: FRAGMENT_SHADER\n    });\n\n    const triangleVertexArray = new VertexArray(gl, {\n      program,\n      attributes: {\n        positions: new Buffer(gl, new Float32Array(TRIANGLE_VERTS))\n      }\n    });\n\n    const squareVertexArray = new VertexArray(gl, {\n      program,\n      attributes: {\n        positions: new Buffer(gl, new Float32Array(SQUARE_VERTS))\n      }\n    });\n\n    const view = new Matrix4().translate([-1.5, 0, -7]);\n    const projection = new Matrix4().perspective({aspect});\n\n    setParameters(gl, {\n      clearColor: [0, 0, 0, 1],\n      clearDepth: [1],\n      depthTest: true,\n      depthFunc: gl.LEQUAL\n    });\n\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    program\n      .setUniforms({\n        uMVMatrix: view,\n        uPMatrix: projection\n      })\n      .draw({\n        vertexArray: triangleVertexArray,\n        drawMode: gl.TRIANGLES,\n        vertexCount: 3\n      });\n\n    // Draw Square\n    view.translate([3, 0, 0]);\n\n    program\n      .setUniforms({\n        uMVMatrix: view,\n        uPMatrix: projection\n      })\n      .draw({\n        vertexArray: squareVertexArray,\n        drawMode: gl.TRIANGLE_STRIP,\n        vertexCount: 4\n      });\n  }\n}\n\n/* global window */\nif (typeof window !== 'undefined' && !window.website) {\n  const animationLoop = new AppAnimationLoop();\n  animationLoop.start();\n}\n","import React from 'react';\nimport AnimationLoopExamplePage from '../../src/components/animation-loop-example-page';\nimport AnimationLoop from '../../../examples/lessons/01/app';\n\nexport default class Example extends React.Component {\n  render() {\n    console.log(\"example-10 render\", AnimationLoop)\n    return (\n      <AnimationLoopExamplePage AnimationLoop={AnimationLoop} exampleConfig={this.props.pageContext.exampleConfig} />\n    );\n  }\n}\n"],"sourceRoot":""}