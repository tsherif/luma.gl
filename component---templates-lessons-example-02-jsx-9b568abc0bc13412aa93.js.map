{"version":3,"sources":["webpack:///../examples/lessons/02/app.js","webpack:///./templates/lessons/example-02.jsx"],"names":["AppAnimationLoop","getInfo","onInitialize","gl","aspect","program","canvas","vs","fs","triangleVertexArray","attributes","positions","Float32Array","colors","squareVertexArray","view","projection","setParameters","clearColor","clearDepth","depthTest","depthFunc","LEQUAL","uMVMatrix","uPMatrix","vertexArray","drawMode","vertexCount","AnimationLoop","window","animationLoop","Example","render","exampleConfig","this","props","pageContext","React","Component"],"mappings":"4LAGA,IAkCqBA,E,sKACZC,QAAP,WACE,MApCJ,mJ,YAsCEC,yBAAoC,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,OAOVC,GAP2B,EAATC,OAOR,IAAI,EAAJ,IAAgB,CAC9BC,GArCN,2OAsCMC,GAvBN,wGA0BUC,EAAsB,IAAI,EAAJ,IAAoB,CAC9CJ,QAD8C,EAE9CK,WAAY,CACVC,UAAW,IAAI,EAAJ,IAAe,IAAIC,aAdX,CAAC,EAAE,EAAH,eAAvB,KAeIC,OAAQ,IAAI,EAAJ,IAAe,IAAID,aAdP,CAAC,EAAE,EAAH,kBAAxB,QAkBME,EAAoB,IAAI,EAAJ,IAAoB,CAC5CT,QAD4C,EAE5CK,WAAY,CACVC,UAAW,IAAI,EAAJ,IAAe,IAAIC,aAnBb,CAAC,EAAE,EAAH,sBAArB,KAoBIC,OAAQ,IAAI,EAAJ,IAAe,IAAID,aAnBT,CAAC,GAAI,GAAL,gCAAtB,QAuBMG,GAAO,IAAI,EAAJ,aAAwB,SAArC,IACMC,GAAa,IAAI,EAAJ,eAA0B,CAACZ,WAE9Ca,YAAcd,EAAI,CAChBe,WAAY,CAAC,EAAE,EAAH,EADI,GAEhBC,WAAY,CAFI,GAGhBC,WAHgB,EAIhBC,UAAWlB,EAAGmB,SAGhBnB,QAASA,mBAAsBA,EAA/BA,kBAEAE,cACe,CACXkB,UADW,EAEXC,SAAUR,IAHdX,KAKQ,CACJoB,YADI,EAEJC,SAAUvB,EAFN,UAGJwB,YAAa,IAIjBZ,YAAe,CAAC,EAAE,EAAlBA,IAEAV,cACe,CACXkB,UADW,EAEXC,SAAUR,IAHdX,KAKQ,CACJoB,YADI,EAEJC,SAAUvB,EAFN,eAGJwB,YAAa,K,GAlEyBC,KAwE1C,oBAAOC,QAA2BA,OAAtC,UACwB,IAAtB,GACAC,Q,4CC3GmBC,E,gLACnBC,kBACE,OACE,uBAA0BJ,cAA1B,EAAwDK,cAAeC,KAAKC,MAAMC,YAAYH,iB,GAH/DI,IAAMC","file":"component---templates-lessons-example-02-jsx-9b568abc0bc13412aa93.js","sourcesContent":["import {AnimationLoop, Program, VertexArray, Buffer, setParameters} from '@luma.gl/core';\nimport {Matrix4} from 'math.gl';\n\nconst INFO_HTML = `\n<p>\n  <a href=\"http://learningwebgl.com/blog/?p=134\" target=\"_blank\">\n    Adding Color\n  </a>\n<p>\nThe classic WebGL Lessons in luma.gl\n`;\n\nconst VERTEX_SHADER = `\\\nattribute vec3 positions;\nattribute vec4 colors;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\n\nvarying vec4 vColor;\n\nvoid main(void) {\n  gl_Position = uPMatrix * uMVMatrix * vec4(positions, 1.0);\n  vColor = colors;\n}\n`;\n\nconst FRAGMENT_SHADER = `\\\nprecision highp float;\n\nvarying vec4 vColor;\n\nvoid main(void) {\n  gl_FragColor = vColor;\n}\n`;\n\nexport default class AppAnimationLoop extends AnimationLoop {\n  static getInfo() {\n    return INFO_HTML;\n  }\n  onInitialize({gl, aspect, canvas}) {\n    const TRIANGLE_VERTS = [0, 1, 0, -1, -1, 0, 1, -1, 0];\n    const TRIANGLE_COLORS = [1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1];\n\n    const SQUARE_VERTS = [1, 1, 0, -1, 1, 0, 1, -1, 0, -1, -1, 0];\n    const SQUARE_COLORS = [0.5, 0.5, 1, 1, 0.5, 0.5, 1, 1, 0.5, 0.5, 1, 1, 0.5, 0.5, 1, 1];\n\n    const program = new Program(gl, {\n      vs: VERTEX_SHADER,\n      fs: FRAGMENT_SHADER\n    });\n\n    const triangleVertexArray = new VertexArray(gl, {\n      program,\n      attributes: {\n        positions: new Buffer(gl, new Float32Array(TRIANGLE_VERTS)),\n        colors: new Buffer(gl, new Float32Array(TRIANGLE_COLORS))\n      }\n    });\n\n    const squareVertexArray = new VertexArray(gl, {\n      program,\n      attributes: {\n        positions: new Buffer(gl, new Float32Array(SQUARE_VERTS)),\n        colors: new Buffer(gl, new Float32Array(SQUARE_COLORS))\n      }\n    });\n\n    const view = new Matrix4().translate([-1.5, 0, -7]);\n    const projection = new Matrix4().perspective({aspect});\n\n    setParameters(gl, {\n      clearColor: [0, 0, 0, 1],\n      clearDepth: [1],\n      depthTest: true,\n      depthFunc: gl.LEQUAL\n    });\n\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    program\n      .setUniforms({\n        uMVMatrix: view,\n        uPMatrix: projection\n      })\n      .draw({\n        vertexArray: triangleVertexArray,\n        drawMode: gl.TRIANGLES,\n        vertexCount: 3\n      });\n\n    // Draw Square\n    view.translate([3, 0, 0]);\n\n    program\n      .setUniforms({\n        uMVMatrix: view,\n        uPMatrix: projection\n      })\n      .draw({\n        vertexArray: squareVertexArray,\n        drawMode: gl.TRIANGLE_STRIP,\n        vertexCount: 4\n      });\n  }\n}\n\n/* global window */\nif (typeof window !== 'undefined' && !window.website) {\n  const animationLoop = new AppAnimationLoop();\n  animationLoop.start();\n}\n","import React from 'react';\nimport AnimationLoopExamplePage from '../../src/components/animation-loop-example-page';\nimport AnimationLoop from '../../../examples/lessons/02/app';\n\nexport default class Example extends React.Component {\n  render() {\n    return (\n      <AnimationLoopExamplePage AnimationLoop={AnimationLoop} exampleConfig={this.props.pageContext.exampleConfig} />\n    );\n  }\n}\n"],"sourceRoot":""}