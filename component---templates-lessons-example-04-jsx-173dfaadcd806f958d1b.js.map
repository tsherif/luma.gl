{"version":3,"sources":["webpack:///../examples/lessons/04/app.js","webpack:///./templates/lessons/example-04.jsx","webpack:///../modules/core/src/geometries/cube-geometry.js"],"names":["VERTEX_SHADER","FRAGMENT_SHADER","ColoredPyramidGeometry","attributes","positions","Float32Array","colors","size","value","Geometry","ColoredCubeGeometry","CubeGeometry","AppAnimationLoop","getInfo","onInitialize","gl","setParameters","clearColor","clearDepth","depthTest","depthFunc","GL","LEQUAL","pyramid","vs","fs","geometry","cube","onRender","tick","aspect","projection","view","eye","uPMatrix","uMVMatrix","phi","AnimationLoop","window","animationLoop","Example","render","exampleConfig","this","props","pageContext","React","Component","CUBE_INDICES","Uint16Array","CUBE_POSITIONS","CUBE_NORMALS","CUBE_TEX_COORDS","ATTRIBUTES","POSITION","NORMAL","TEXCOORD_0","id","uid","indices"],"mappings":"iTAIA,IASMA,EAAN,2OAeMC,EAAN,qGAWMC,E,YACJ,cAAoB,OAClB,gCAEEC,WAAY,CAIVC,UAAW,IAAIC,aAAa,CAAC,EAAD,oFAJlB,IAkBVC,OAAQ,CACNC,KADM,EAGNC,MAAO,IAAIH,aAAa,CAAC,EAAD,4FAAjB,UAxBI,K,iBADgBI,KA8C/BC,E,YACJ,cAAoB,OAClB,gCAGEP,WAAY,CACVG,OAAQ,CACNC,KADM,EAGNC,MAAO,IAAIH,aAAa,CAAC,EAAD,oMAAjB,UARI,K,iBADaM,KAyCbC,E,uEAEZC,QAAP,WACE,MA7HJ,2J,2BA+HEC,yBAAoB,IAANC,EAAK,EAALA,GAQZ,OAPAC,YAAcD,EAAI,CAChBE,WAAY,CAAC,EAAE,EAAH,EADI,GAEhBC,WAFgB,EAGhBC,WAHgB,EAIhBC,UAAWC,IAAGC,SAGT,CACLC,QAAS,IAAI,EAAJ,IAAc,CACrBC,GADqB,EAErBC,GAFqB,EAGrBC,SAAU,IAAIxB,IAEhByB,KAAM,IAAI,EAAJ,IAAc,CAClBH,GADkB,EAElBC,GAFkB,EAGlBC,SAAU,IAAIhB,M,EAIpBkB,qBAA6C,IAAnCb,EAAkC,EAAlCA,GAAIc,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,OAAQP,EAAgB,EAAhBA,QAASI,EAAO,EAAPA,KACnCZ,QAASM,qBAAsBA,IAA/BN,kBAEA,IAAMgB,GAAa,IAAI,EAAJ,eAA0B,CAACD,WACxCE,GAAO,IAAI,EAAJ,UAAqB,CAACC,IAAK,CAAC,EAAE,EAAH,KAExCV,cACe,CACXW,SADW,EAEXC,UAAWH,oBAEE,SAFFA,gBAGAH,KANfN,OAUA,IAAMa,EAAN,IAAYP,EACZF,cACe,CACXO,SADW,EAEXC,UAAWH,oBAEE,CAAC,IAAI,GAFPA,cAGE,CAACI,EAAI,EAHPJ,MAHfL,Q,GA3C0CU,KAwD1C,oBAAOC,QAA2BA,OAAtC,UACwB,IAAtB,GACAC,Q,4CCpLmBC,E,gLACnBC,kBACE,OACE,uBAA0BJ,cAA1B,EAAwDK,cAAeC,KAAKC,MAAMC,YAAYH,iB,GAH/DI,IAAMC,Y,2GCA3C,IAAMC,EAAe,IAAIC,YAAY,CAAC,EAAD,wFAArC,KAMMC,EAAiB,IAAI7C,aAAa,mLAAxC,IAWM8C,EAAe,IAAI9C,aAAa,2JAAtC,IAgBM+C,EAAkB,IAAI/C,aAAa,+FAAzC,IAeMgD,EAAa,CACjBC,SAAU,CAAC/C,KAAD,EAAUC,MAAO,IAAIH,aAAa6C,IAC5CK,OAAQ,CAAChD,KAAD,EAAUC,MAAO,IAAIH,aAAa8C,IAC1CK,WAAY,CAACjD,KAAD,EAAUC,MAAO,IAAIH,aAAa+C,KAG3BzC,E,oBACnB,mBAAwB,IAAZiC,MAAQ,IAAI,WACfa,OADe,MACVC,YADU,0BAEtB,gCAEED,GAFF,EAGEE,QAAS,CAACpD,KAAD,EAAUC,MAAO,IAAIyC,YAAYD,IAC1C7C,WAAW,OAAD,eAAqByC,EAArB,gBANU,K,iGADgBnC","file":"component---templates-lessons-example-04-jsx-173dfaadcd806f958d1b.js","sourcesContent":["import GL from '@luma.gl/constants';\nimport {AnimationLoop, Model, Geometry, CubeGeometry, setParameters} from '@luma.gl/core';\nimport {Matrix4} from 'math.gl';\n\nconst INFO_HTML = `\n<p>\n  <a href=\"http://learningwebgl.com/blog/?p=370\" target=\"_blank\">\n    Some Real 3D Objects\n  </a>\n<p>\nThe classic WebGL Lessons in luma.gl\n`;\n\nconst VERTEX_SHADER = `\\\nattribute vec3 positions;\nattribute vec4 colors;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\n\nvarying vec4 vColor;\n\nvoid main(void) {\n  gl_Position = uPMatrix * uMVMatrix * vec4(positions, 1.0);\n  vColor = colors;\n}\n`;\n\nconst FRAGMENT_SHADER = `\\\nprecision highp float;\n\nvarying vec4 vColor;\n\nvoid main(void) {\n  gl_FragColor = vColor;\n}\n`;\n\n// Makes a colored pyramid\nclass ColoredPyramidGeometry extends Geometry {\n  constructor(props) {\n    super({\n      ...props,\n      attributes: {\n        /* eslint-disable indent, no-multi-spaces */\n\n        // prettier-ignore\n        positions: new Float32Array([\n           0,  1,  0,\n          -1, -1,  1,\n           1, -1,  1,\n           0,  1,  0,\n           1, -1,  1,\n           1, -1, -1,\n           0,  1,  0,\n           1, -1, -1,\n          -1, -1, -1,\n           0,  1,  0,\n          -1, -1, -1,\n          -1, -1,  1\n        ]),\n        colors: {\n          size: 4,\n          // prettier-ignore\n          value: new Float32Array([\n            1, 0, 0, 1,\n            0, 1, 0, 1,\n            0, 0, 1, 1,\n            1, 0, 0, 1,\n            0, 0, 1, 1,\n            0, 1, 0, 1,\n            1, 0, 0, 1,\n            0, 1, 0, 1,\n            0, 0, 1, 1,\n            1, 0, 0, 1,\n            0, 0, 1, 1,\n            0, 1, 0, 1\n          ])\n        }\n      }\n    });\n  }\n}\n\n// Make a colored cube\nclass ColoredCubeGeometry extends CubeGeometry {\n  constructor(props) {\n    super({\n      ...props,\n      // Add one attribute to the geometry\n      attributes: {\n        colors: {\n          size: 4,\n          // prettier-ignore\n          value: new Float32Array([\n            1, 0, 0, 1,\n            1, 0, 0, 1,\n            1, 0, 0, 1,\n            1, 0, 0, 1,\n            1, 1, 0, 1,\n            1, 1, 0, 1,\n            1, 1, 0, 1,\n            1, 1, 0, 1,\n            0, 1, 0, 1,\n            0, 1, 0, 1,\n            0, 1, 0, 1,\n            0, 1, 0, 1,\n            1, 0.5, 0.5, 1,\n            1, 0.5, 0.5, 1,\n            1, 0.5, 0.5, 1,\n            1, 0.5, 0.5, 1,\n            1, 0, 1, 1,\n            1, 0, 1, 1,\n            1, 0, 1, 1,\n            1, 0, 1, 1,\n            0, 0, 1, 1,\n            0, 0, 1, 1,\n            0, 0, 1, 1,\n            0, 0, 1, 1\n          ])\n        }\n      }\n    });\n  }\n}\n\nexport default class AppAnimationLoop extends AnimationLoop {\n  // .context(() => createGLContext({canvas: 'lesson04-canvas'}))\n  static getInfo() {\n    return INFO_HTML;\n  }\n  onInitialize({gl}) {\n    setParameters(gl, {\n      clearColor: [0, 0, 0, 1],\n      clearDepth: 1,\n      depthTest: true,\n      depthFunc: GL.LEQUAL\n    });\n\n    return {\n      pyramid: new Model(gl, {\n        vs: VERTEX_SHADER,\n        fs: FRAGMENT_SHADER,\n        geometry: new ColoredPyramidGeometry()\n      }),\n      cube: new Model(gl, {\n        vs: VERTEX_SHADER,\n        fs: FRAGMENT_SHADER,\n        geometry: new ColoredCubeGeometry()\n      })\n    };\n  }\n  onRender({gl, tick, aspect, pyramid, cube}) {\n    gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n\n    const projection = new Matrix4().perspective({aspect});\n    const view = new Matrix4().lookAt({eye: [0, 0, 0]});\n\n    pyramid\n      .setUniforms({\n        uPMatrix: projection,\n        uMVMatrix: view\n          .clone()\n          .translate([-1.5, 0, -8])\n          .rotateY(tick * 0.01)\n      })\n      .draw();\n\n    const phi = tick * 0.01;\n    cube\n      .setUniforms({\n        uPMatrix: projection,\n        uMVMatrix: view\n          .clone()\n          .translate([1.5, 0, -8])\n          .rotateXYZ([phi, phi, phi])\n      })\n      .draw();\n  }\n}\n\n/* global window */\nif (typeof window !== 'undefined' && !window.website) {\n  const animationLoop = new AppAnimationLoop();\n  animationLoop.start();\n}\n","import React from 'react';\nimport AnimationLoopExamplePage from '../../src/components/animation-loop-example-page';\nimport AnimationLoop from '../../../examples/lessons/04/app';\n\nexport default class Example extends React.Component {\n  render() {\n    return (\n      <AnimationLoopExamplePage AnimationLoop={AnimationLoop} exampleConfig={this.props.pageContext.exampleConfig} />\n    );\n  }\n}\n","import Geometry from '../geometry/geometry';\nimport {uid} from '../utils';\n\n// prettier-ignore\nconst CUBE_INDICES = new Uint16Array([\n  0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13,\n  14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23\n]);\n\n// prettier-ignore\nconst CUBE_POSITIONS = new Float32Array([\n  -1,  -1,  1, 1,  -1,  1,  1,  1,  1,  -1,  1,  1,\n  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1,  -1,\n  -1,  1,  -1,  -1,  1,  1,  1,  1,  1,  1,  1,  -1,\n  -1,  -1,  -1,  1,  -1,  -1,  1,  -1,  1,  -1,  -1,  1,\n  1,  -1,  -1,  1,  1,  -1,  1,  1,  1,  1,  -1,  1,\n  -1,  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1\n]);\n\n// TODO - could be Uint8\n// prettier-ignore\nconst CUBE_NORMALS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,\n  // Back face\n  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,\n  // Top face\n  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,\n  // Bottom face\n  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,\n  // Right face\n  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,\n  // Left face\n  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0\n]);\n\n// prettier-ignore\nconst CUBE_TEX_COORDS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  1,  1,  0,  1,\n  // Back face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Top face\n  0,  1,  0,  0,  1,  0,  1,  1,\n  // Bottom face\n  1,  1,  0,  1,  0,  0,  1,  0,\n  // Right face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Left face\n  0,  0,  1,  0,  1,  1,  0,  1\n]);\n\nconst ATTRIBUTES = {\n  POSITION: {size: 3, value: new Float32Array(CUBE_POSITIONS)},\n  NORMAL: {size: 3, value: new Float32Array(CUBE_NORMALS)},\n  TEXCOORD_0: {size: 2, value: new Float32Array(CUBE_TEX_COORDS)}\n};\n\nexport default class CubeGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('cube-geometry')} = props;\n    super({\n      ...props,\n      id,\n      indices: {size: 1, value: new Uint16Array(CUBE_INDICES)},\n      attributes: {...ATTRIBUTES, ...props.attributes}\n    });\n  }\n}\n"],"sourceRoot":""}