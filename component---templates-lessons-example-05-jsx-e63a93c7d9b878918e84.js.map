{"version":3,"sources":["webpack:///../examples/lessons/05/app.js","webpack:///./templates/lessons/example-05.jsx","webpack:///../modules/core/src/geometries/cube-geometry.js"],"names":["AppAnimationLoop","getInfo","onInitialize","gl","setParameters","clearColor","clearDepth","depthTest","depthFunc","GL","LEQUAL","cube","geometry","vs","fs","uniforms","uSampler","onRender","tick","aspect","uPMatrix","uMVMatrix","eye","AnimationLoop","window","animationLoop","Example","render","exampleConfig","this","props","pageContext","React","Component","CUBE_INDICES","Uint16Array","CUBE_POSITIONS","Float32Array","CUBE_NORMALS","CUBE_TEX_COORDS","ATTRIBUTES","POSITION","size","value","NORMAL","TEXCOORD_0","CubeGeometry","id","uid","indices","attributes","Geometry"],"mappings":"qMAIA,IAmCqBA,E,+JACZC,QAAP,WACE,MArCJ,2J,2BAwCEC,yBAAoB,IAAD,EAALC,EAAK,EAALA,GASZ,OARAC,YAAcD,IAAD,GACXE,WAAY,CAAC,EAAE,EAAH,EADD,GAEXC,WAFW,EAGXC,WAHW,EAIXC,UAAWC,IAAGC,SACbD,IALU,wBAAbL,IAQO,CACLO,KAAM,IAAI,EAAJ,IAAc,CAClBC,SAAU,IADQ,IAElBC,GA3CR,6PA4CQC,GA9BR,gMA+BQC,SAAU,CACRC,SAAU,IAAI,EAAJ,qB,EAKlBC,qBAAoC,IAA1Bd,EAAyB,EAAzBA,GAAIe,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,OAAQR,EAAO,EAAPA,KAG1B,OAFAR,QAASM,qBAAsBA,IAA/BN,kBAEOQ,EAAA,YACQ,CACXS,UAAU,IAAI,EAAJ,eAA0B,CAACD,WACrCE,WAAW,IAAI,EAAJ,UACD,CAACC,IAAK,CAAC,EAAE,EAAH,KADL,UAEE,CAAC,EAAE,GAFL,cAGE,KAACJ,EAAD,IAAcA,EAHhB,IAG6BA,MAN5C,Q,GA5B0CK,KAyC1C,oBAAOC,QAA2BA,OAAtC,UACwB,IAAtB,GACAC,Q,4CC9EmBC,E,gLAEnBC,kBACE,OACE,uBAA0BJ,cAA1B,EAAwDK,cAAeC,KAAKC,MAAMC,YAAYH,iB,GAJ/DI,IAAMC,Y,2GCA3C,IAAMC,EAAe,IAAIC,YAAY,CAAC,EAAD,wFAArC,KAMMC,EAAiB,IAAIC,aAAa,mLAAxC,IAWMC,EAAe,IAAID,aAAa,2JAAtC,IAgBME,EAAkB,IAAIF,aAAa,+FAAzC,IAeMG,EAAa,CACjBC,SAAU,CAACC,KAAD,EAAUC,MAAO,IAAIN,aAAaD,IAC5CQ,OAAQ,CAACF,KAAD,EAAUC,MAAO,IAAIN,aAAaC,IAC1CO,WAAY,CAACH,KAAD,EAAUC,MAAO,IAAIN,aAAaE,KAG3BO,E,oBACnB,mBAAwB,IAAZhB,MAAQ,IAAI,WACfiB,OADe,MACVC,YADU,0BAEtB,gCAEED,GAFF,EAGEE,QAAS,CAACP,KAAD,EAAUC,MAAO,IAAIR,YAAYD,IAC1CgB,WAAW,OAAD,eAAqBpB,EAArB,gBANU,K,iGADgBqB","file":"component---templates-lessons-example-05-jsx-e63a93c7d9b878918e84.js","sourcesContent":["import GL from '@luma.gl/constants';\nimport {AnimationLoop, Texture2D, setParameters, Model, CubeGeometry} from '@luma.gl/core';\nimport {Matrix4} from 'math.gl';\n\nconst INFO_HTML = `\n<p>\n  <a href=\"http://learningwebgl.com/blog/?p=507\" target=\"_blank\">\n    Introducing Textures\n  </a>\n<p>\nThe classic WebGL Lessons in luma.gl\n`;\n\nconst VERTEX_SHADER = `\\\nattribute vec3 positions;\nattribute vec2 texCoords;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\n\nvarying vec2 vTextureCoord;\nvoid main(void) {\n  gl_Position = uPMatrix * uMVMatrix * vec4(positions, 1.0);\n  vTextureCoord = texCoords;\n}\n`;\n\nconst FRAGMENT_SHADER = `\\\nprecision highp float;\n\nvarying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\n\nvoid main(void) {\n  gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\n}\n`;\n\nexport default class AppAnimationLoop extends AnimationLoop {\n  static getInfo() {\n    return INFO_HTML;\n  }\n\n  onInitialize({gl}) {\n    setParameters(gl, {\n      clearColor: [0, 0, 0, 1],\n      clearDepth: 1,\n      depthTest: true,\n      depthFunc: GL.LEQUAL,\n      [GL.UNPACK_FLIP_Y_WEBGL]: true\n    });\n\n    return {\n      cube: new Model(gl, {\n        geometry: new CubeGeometry(),\n        vs: VERTEX_SHADER,\n        fs: FRAGMENT_SHADER,\n        uniforms: {\n          uSampler: new Texture2D(gl, 'nehe.gif')\n        }\n      })\n    };\n  }\n  onRender({gl, tick, aspect, cube}) {\n    gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n\n    return cube\n      .setUniforms({\n        uPMatrix: new Matrix4().perspective({aspect}),\n        uMVMatrix: new Matrix4()\n          .lookAt({eye: [0, 0, 0]})\n          .translate([0, 0, -5])\n          .rotateXYZ([tick * 0.01, tick * 0.01, tick * 0.01])\n      })\n      .draw();\n  }\n}\n\n/* global window */\nif (typeof window !== 'undefined' && !window.website) {\n  const animationLoop = new AppAnimationLoop();\n  animationLoop.start();\n}\n","import React from 'react';\nimport AnimationLoopExamplePage from '../../src/components/animation-loop-example-page';\nimport AnimationLoop from '../../../examples/lessons/05/app';\n\nexport default class Example extends React.Component {\n\n  render() {\n    return (\n      <AnimationLoopExamplePage AnimationLoop={AnimationLoop} exampleConfig={this.props.pageContext.exampleConfig} />\n    );\n  }\n}\n","import Geometry from '../geometry/geometry';\nimport {uid} from '../utils';\n\n// prettier-ignore\nconst CUBE_INDICES = new Uint16Array([\n  0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13,\n  14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23\n]);\n\n// prettier-ignore\nconst CUBE_POSITIONS = new Float32Array([\n  -1,  -1,  1, 1,  -1,  1,  1,  1,  1,  -1,  1,  1,\n  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1,  -1,\n  -1,  1,  -1,  -1,  1,  1,  1,  1,  1,  1,  1,  -1,\n  -1,  -1,  -1,  1,  -1,  -1,  1,  -1,  1,  -1,  -1,  1,\n  1,  -1,  -1,  1,  1,  -1,  1,  1,  1,  1,  -1,  1,\n  -1,  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1\n]);\n\n// TODO - could be Uint8\n// prettier-ignore\nconst CUBE_NORMALS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,\n  // Back face\n  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,\n  // Top face\n  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,\n  // Bottom face\n  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,\n  // Right face\n  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,\n  // Left face\n  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0\n]);\n\n// prettier-ignore\nconst CUBE_TEX_COORDS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  1,  1,  0,  1,\n  // Back face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Top face\n  0,  1,  0,  0,  1,  0,  1,  1,\n  // Bottom face\n  1,  1,  0,  1,  0,  0,  1,  0,\n  // Right face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Left face\n  0,  0,  1,  0,  1,  1,  0,  1\n]);\n\nconst ATTRIBUTES = {\n  POSITION: {size: 3, value: new Float32Array(CUBE_POSITIONS)},\n  NORMAL: {size: 3, value: new Float32Array(CUBE_NORMALS)},\n  TEXCOORD_0: {size: 2, value: new Float32Array(CUBE_TEX_COORDS)}\n};\n\nexport default class CubeGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('cube-geometry')} = props;\n    super({\n      ...props,\n      id,\n      indices: {size: 1, value: new Uint16Array(CUBE_INDICES)},\n      attributes: {...ATTRIBUTES, ...props.attributes}\n    });\n  }\n}\n"],"sourceRoot":""}