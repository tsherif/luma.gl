{"version":3,"sources":["webpack:///../examples/lessons/15/app.js","webpack:///./templates/lessons/example-15.jsx","webpack:///../modules/core/src/geometries/sphere-geometry.js"],"names":["EARTH_UNIFORMS","uUseColorMap","uUseSpecularMap","uShowSpecularHighlights","uUseLighting","LIGHT_UNIFORMS","uAmbientColor","uPointLightingLocation","uPointLightingSpecularColor","uPointLightingDiffuseColor","AppAnimationLoop","getInfo","onInitialize","canvas","gl","setParameters","clearColor","clearDepth","depthTest","specularTexture","data","parameters","mipmap","colorTexture","earth","geometry","nlat","nlong","radius","fs","vs","uniforms","Object","uColorMapSampler","uSpecularMapSampler","onRender","tick","aspect","GL","uVMatrix","eye","center","up","useLighting","$checked","useSpecularMap","useColorMap","point","position","$value","specular","diffuse","ambientColor","pointLightingLocation","pointLightSpecularColor","pointLightingDiffuseColor","getControlValues","phi","uMMatrix","uPMatrix","fov","Math","near","far","AnimationLoop","$id","id","document","defaultValue","value","Number","isNaN","window","animationLoop","Example","render","exampleConfig","this","props","pageContext","React","Component","SphereGeometry","uid","latRange","longRange","numVertices","positions","Float32Array","normals","texCoords","indices","Uint16Array","y","x","u","v","index","i2","i3","theta","sinTheta","cosTheta","sinPhi","cosPhi","ux","uy","uz","r","numVertsAround","size","attributes","POSITION","NORMAL","TEXCOORD_0","tesselateSphere","Geometry"],"mappings":"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","file":"component---templates-lessons-example-15-jsx-511c11855112de2bcc79.js","sourcesContent":["import GL from '@luma.gl/constants';\nimport {AnimationLoop, Texture2D, setParameters, Model, SphereGeometry} from '@luma.gl/core';\nimport {Matrix4} from 'math.gl';\n\nconst EARTH_UNIFORMS = {\n  uUseColorMap: true,\n  uUseSpecularMap: true,\n  uShowSpecularHighlights: true,\n  uUseLighting: true\n};\n\nconst LIGHT_UNIFORMS = {\n  uAmbientColor: [0.4, 0.4, 0.4],\n  uPointLightingLocation: [-10.0, 4.0, -20.0],\n  uPointLightingSpecularColor: [5.0, 5.0, 5.0],\n  uPointLightingDiffuseColor: [0.8, 0.8, 0.8]\n};\n\nconst FRAGMENT_LIGHTING_VERTEX_SHADER = `\\\nprecision highp float;\n\nattribute vec3 positions;\nattribute vec3 normals;\nattribute vec2 texCoords;\n\nuniform mat4 uMMatrix;\nuniform mat4 uVMatrix;\nuniform mat4 uPMatrix;\n\nvarying vec2 vTextureCoord;\nvarying vec4 vTransformedNormal;\nvarying vec4 vPosition;\n\nvoid main(void) {\n  vPosition = uMMatrix * vec4(positions, 1.0);\n  gl_Position = uPMatrix * uVMatrix * vPosition;\n  vTextureCoord = texCoords;\n  vTransformedNormal = uMMatrix * vec4(normals, 0.0);\n}\n`;\n\nconst FRAGMENT_LIGHTING_FRAGMENT_SHADER = `\\\nprecision highp float;\n\nvarying vec2 vTextureCoord;\nvarying vec4 vTransformedNormal;\nvarying vec4 vPosition;\n\nuniform bool uUseColorMap;\nuniform bool uUseSpecularMap;\nuniform bool uUseLighting;\nuniform vec3 uAmbientColor;\nuniform vec3 uPointLightingLocation;\nuniform vec3 uPointLightingSpecularColor;\nuniform vec3 uPointLightingDiffuseColor;\n\nuniform sampler2D uSpecularMapSampler;\nuniform sampler2D uColorMapSampler;\n\nvoid main(void) {\n  vec3 lightWeighting;\n  if (!uUseLighting) {\n    lightWeighting = vec3(1.0, 1.0, 1.0);\n} else {\n    vec3 lightDirection = normalize(uPointLightingLocation - vPosition.xyz);\n    vec3 normal = normalize(vTransformedNormal.xyz);\n    float specularLightWeighting = 0.0;\n    float shininess = 32.0;\n    if (uUseSpecularMap) {\n      shininess = texture2D(uSpecularMapSampler, vTextureCoord).r * 255.0;\n    }\n    if (shininess < 255.0) {\n       vec3 eyeDirection = normalize(-vPosition.xyz);\n       vec3 reflectionDirection = reflect(-lightDirection, normal);\n       specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), shininess);\n    }\n    float diffuseLightWeighting = max(dot(normal, lightDirection), 0.0);\n    lightWeighting = uAmbientColor\n        + uPointLightingSpecularColor * specularLightWeighting\n        + uPointLightingDiffuseColor * diffuseLightWeighting;\n  }\n  vec4 fragmentColor;\n  fragmentColor = uUseColorMap ?\n    texture2D(uColorMapSampler, vTextureCoord) : vec4(1.0, 1.0, 1.0, 1.0);\n  gl_FragColor = vec4(fragmentColor.rgb * lightWeighting, fragmentColor.a);\n}\n`;\n\nconst INFO_HTML = `\n<p>\n  <a href=\"http://learningwebgl.com/blog/?p=1778\" target=\"_blank\">\n    Specular maps\n  </a>\n\n<div id=\"controls-elements\">\n  <input type=\"checkbox\" id=\"color-map\" checked/> Use color map<br/>\n  <input type=\"checkbox\" id=\"specular-map\" checked/> Use specular map<br/>\n  <input type=\"checkbox\" id=\"lighting\" checked/> Use lighting<br/>\n\n  <br/>\n  <h2>Point light:</h2>\n\n  <div class=\"control-block\">\n    <div class=\"control-row\">\n      <div><b>Location:</b></div>\n      <div>X: <input type=\"text\" id=\"lightPositionX\" value=\"-10.0\"/></div>\n      <div>Y: <input type=\"text\" id=\"lightPositionY\" value=\"4.0\"/></div>\n      <div>Z: <input type=\"text\" id=\"lightPositionZ\" value=\"-20.0\"/></div>\n    </div>\n    <div class=\"control-row\">\n      <div><b>Specular colour:</b></div>\n      <div>R:\n        <input id=\"specularR\" type=\"range\" value=\"0.8\" min=\"0.0\" max=\"1.0\" step=\"0.01\"/>\n      </div>\n      <div>G:\n        <input id=\"specularG\" type=\"range\" value=\"0.8\" min=\"0.0\" max=\"1.0\" step=\"0.01\"/>\n      </div>\n      <div>B:\n        <input id=\"specularB\" type=\"range\" value=\"0.8\" min=\"0.0\" max=\"1.0\" step=\"0.01\"/>\n      </div>\n    </div>\n    <div class=\"control-row\">\n      <div><b>Diffuse colour:</b></div>\n      <div>R:\n        <input id=\"diffuseR\" type=\"range\" value=\"0.8\" min=\"0.0\" max=\"1.0\" step=\"0.01\"/>\n      </div>\n      <div>G:\n        <input id=\"diffuseG\" type=\"range\" value=\"0.8\" min=\"0.0\" max=\"1.0\" step=\"0.01\"/>\n      </div>\n      <div>B:\n        <input id=\"diffuseB\" type=\"range\" value=\"0.8\" min=\"0.0\" max=\"1.0\" step=\"0.01\"/>\n      </div>\n    </div>\n  </div>\n\n  <h2>Ambient light:</h2>\n  <div class=\"control-block\">\n    <div class=\"control-row\">\n      <div><b>Colour:</b></div>\n        <div>R:\n          <input id=\"ambientR\" type=\"range\" value=\"0.2\" min=\"0.0\" max=\"1.0\" step=\"0.01\"/>\n        </div>\n        <div>G:\n          <input id=\"ambientG\" type=\"range\" value=\"0.2\" min=\"0.0\" max=\"1.0\" step=\"0.01\"/>\n        </div>\n        <div>B:\n          <input id=\"ambientB\" type=\"range\" value=\"0.2\" min=\"0.0\" max=\"1.0\" step=\"0.01\"/>\n        </div>\n      </div>\n  </div>\n\n  <br/>\n  Earth texture courtesy of\n  <a href=\"http://www.esa.int/esaEO/SEMGSY2IU7E_index_0.html\">\n    the European Space Agency/Envisat\n  </a>.<br/>\n  <br/>\n</div>\n<p>\n  The classic WebGL Lessons in luma.gl\n`;\n\nexport default class AppAnimationLoop extends AnimationLoop {\n  static getInfo() {\n    return INFO_HTML;\n  }\n\n  onInitialize({canvas, gl}) {\n    setParameters(gl, {\n      clearColor: [0, 0, 0, 1],\n      clearDepth: 1,\n      depthTest: true\n    });\n\n    const specularTexture = new Texture2D(gl, {\n      data: 'earth-specular.gif',\n      parameters: {\n        [gl.TEXTURE_MAG_FILTER]: gl.LINEAR,\n        [gl.TEXTURE_MIN_FILTER]: gl.LINEAR_MIPMAP_NEAREST,\n        [gl.TEXTURE_WRAP_S]: gl.REPEAT,\n        [gl.TEXTURE_WRAP_T]: gl.REPEAT\n      },\n      mipmap: true\n    });\n\n    const colorTexture = new Texture2D(gl, {\n      data: 'earth.jpg',\n      parameters: {\n        [gl.TEXTURE_MAG_FILTER]: gl.LINEAR,\n        [gl.TEXTURE_MIN_FILTER]: gl.LINEAR_MIPMAP_NEAREST,\n        [gl.TEXTURE_WRAP_S]: gl.REPEAT,\n        [gl.TEXTURE_WRAP_T]: gl.REPEAT\n      },\n      mipmap: true\n    });\n\n    const earth = new Model(gl, {\n      geometry: new SphereGeometry({\n        nlat: 30,\n        nlong: 30,\n        radius: 13\n      }),\n      fs: FRAGMENT_LIGHTING_FRAGMENT_SHADER,\n      vs: FRAGMENT_LIGHTING_VERTEX_SHADER,\n      uniforms: Object.assign(\n        {\n          uColorMapSampler: colorTexture,\n          uSpecularMapSampler: specularTexture\n        },\n        EARTH_UNIFORMS,\n        LIGHT_UNIFORMS\n      )\n    });\n\n    return {earth, specularTexture, colorTexture};\n  }\n\n  onRender({gl, tick, aspect, earth}) {\n    gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n\n    // set camera position\n    const uVMatrix = new Matrix4().lookAt({eye: [0, 0, 10], center: [0, 0, 0], up: [-0.5, 1, 0]});\n\n    const {\n      useLighting,\n      useSpecularMap,\n      useColorMap,\n      ambientColor,\n      pointLightingLocation,\n      pointLightSpecularColor,\n      pointLightingDiffuseColor\n    } = getControlValues();\n\n    earth.setUniforms({\n      uUseSpecularMap: useSpecularMap,\n      uUseColorMap: useColorMap,\n      uUseLighting: useLighting\n    });\n\n    if (useLighting) {\n      earth.setUniforms({\n        uAmbientColor: ambientColor,\n        uPointLightingLocation: pointLightingLocation,\n        uPointLightingSpecularColor: pointLightSpecularColor,\n        uPointLightingDiffuseColor: pointLightingDiffuseColor\n      });\n    }\n\n    const phi = tick * 0.01;\n    return earth\n      .setUniforms({\n        uMMatrix: new Matrix4().translate([0, 0, -40]).rotateY(phi),\n        uVMatrix,\n        uPMatrix: new Matrix4().perspective({\n          fov: (45 * Math.PI) / 180,\n          aspect,\n          near: 0.1,\n          far: 100\n        })\n      })\n      .draw();\n  }\n}\n\n/* global document */\nconst $id = id => document.getElementById(id);\nconst $checked = id => ($id(id) ? $id(id).checked : true);\nconst $value = (id, defaultValue = 1) => {\n  const value = $id(id) ? Number($id(id).value) : defaultValue;\n  return isNaN(value) ? 0 : value;\n};\n\n// Read Light settings HTML form\nfunction getControlValues() {\n  const useLighting = $checked('lighting');\n  const useSpecularMap = $checked('specular-map');\n  const useColorMap = $checked('color-map');\n\n  const point = {\n    position: [$value('lightPositionX'), $value('lightPositionY'), $value('lightPositionZ')],\n    specular: [$value('specularR'), $value('specularG'), $value('specularB')],\n    diffuse: [$value('diffuseR'), $value('diffuseG'), $value('diffuseB')]\n  };\n\n  const ambientColor = [$value('ambientR'), $value('ambientG'), $value('ambientB')];\n\n  return {\n    useLighting,\n    useSpecularMap,\n    useColorMap,\n\n    ambientColor: useLighting && ambientColor,\n    pointLightingLocation: useLighting && point.position,\n    pointLightSpecularColor: useLighting && point.specular,\n    pointLightingDiffuseColor: useLighting && point.diffuse\n  };\n}\n\n/* global window */\nif (typeof window !== 'undefined' && !window.website) {\n  const animationLoop = new AppAnimationLoop();\n  animationLoop.start();\n}\n","import React from 'react';\nimport AnimationLoopExamplePage from '../../src/components/animation-loop-example-page';\nimport AnimationLoop from '../../../examples/lessons/15/app';\n\nexport default class Example extends React.Component {\n  render() {\n    return (\n      <AnimationLoopExamplePage AnimationLoop={AnimationLoop} exampleConfig={this.props.pageContext.exampleConfig} />\n    );\n  }\n}\n","import Geometry from '../geometry/geometry';\nimport {uid} from '../utils';\n\nexport default class SphereGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('sphere-geometry')} = props;\n    const {indices, attributes} = tesselateSphere(props);\n    super({\n      ...props,\n      id,\n      indices,\n      attributes: {...attributes, ...props.attributes}\n    });\n  }\n}\n\n// Primitives inspired by TDL http://code.google.com/p/webglsamples/,\n// copyright 2011 Google Inc. new BSD License\n// (http://www.opensource.org/licenses/bsd-license.php).\n/* eslint-disable max-statements, complexity */\nfunction tesselateSphere(props) {\n  const {nlat = 10, nlong = 10} = props;\n  let {radius = 1} = props;\n\n  const startLat = 0;\n  const endLat = Math.PI;\n  const latRange = endLat - startLat;\n  const startLong = 0;\n  const endLong = 2 * Math.PI;\n  const longRange = endLong - startLong;\n  const numVertices = (nlat + 1) * (nlong + 1);\n\n  if (typeof radius === 'number') {\n    const value = radius;\n    radius = (n1, n2, n3, u, v) => value;\n  }\n\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n  const texCoords = new Float32Array(numVertices * 2);\n  const indices = new Uint16Array(nlat * nlong * 6);\n\n  // Create positions, normals and texCoords\n  for (let y = 0; y <= nlat; y++) {\n    for (let x = 0; x <= nlong; x++) {\n      const u = x / nlong;\n      const v = y / nlat;\n\n      const index = x + y * (nlong + 1);\n      const i2 = index * 2;\n      const i3 = index * 3;\n\n      const theta = longRange * u;\n      const phi = latRange * v;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const sinPhi = Math.sin(phi);\n      const cosPhi = Math.cos(phi);\n      const ux = cosTheta * sinPhi;\n      const uy = cosPhi;\n      const uz = sinTheta * sinPhi;\n\n      const r = radius(ux, uy, uz, u, v);\n\n      positions[i3 + 0] = r * ux;\n      positions[i3 + 1] = r * uy;\n      positions[i3 + 2] = r * uz;\n\n      normals[i3 + 0] = ux;\n      normals[i3 + 1] = uy;\n      normals[i3 + 2] = uz;\n\n      texCoords[i2 + 0] = u;\n      texCoords[i2 + 1] = 1 - v;\n    }\n  }\n\n  // Create indices\n  const numVertsAround = nlat + 1;\n  for (let x = 0; x < nlat; x++) {\n    for (let y = 0; y < nlong; y++) {\n      const index = (x * nlong + y) * 6;\n\n      indices[index + 0] = y * numVertsAround + x;\n      indices[index + 1] = y * numVertsAround + x + 1;\n      indices[index + 2] = (y + 1) * numVertsAround + x;\n\n      indices[index + 3] = (y + 1) * numVertsAround + x;\n      indices[index + 4] = y * numVertsAround + x + 1;\n      indices[index + 5] = (y + 1) * numVertsAround + x + 1;\n    }\n  }\n\n  return {\n    indices: {size: 1, value: indices},\n    attributes: {\n      POSITION: {size: 3, value: positions},\n      NORMAL: {size: 3, value: normals},\n      TEXCOORD_0: {size: 2, value: texCoords}\n    }\n  };\n}\n"],"sourceRoot":""}