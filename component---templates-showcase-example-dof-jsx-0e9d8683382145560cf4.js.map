{"version":3,"sources":["webpack:///../node_modules/math.gl/dist/esm/lib/validators.js","webpack:///../node_modules/math.gl/dist/esm/lib/assert.js","webpack:///../node_modules/gl-matrix/esm/vec4.js","webpack:///../modules/engine/src/geometries/cube-geometry.js","webpack:///./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack:///../node_modules/gl-matrix/esm/vec3.js","webpack:///./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///../modules/engine/src/geometry/geometry.js","webpack:///./node_modules/@babel/runtime/helpers/esm/construct.js","webpack:///../node_modules/math.gl/dist/esm/classes/base/matrix.js","webpack:///../node_modules/gl-matrix/esm/mat4.js","webpack:///../node_modules/gl-matrix/esm/vec2.js","webpack:///../node_modules/math.gl/dist/esm/classes/matrix4.js","webpack:///../modules/webgl/src/classes/uniform-buffer-layout.js","webpack:///../examples/showcase/dof/app.js","webpack:///./templates/showcase/example-dof.jsx","webpack:///./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack:///../node_modules/math.gl/dist/esm/lib/common.js","webpack:///./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack:///../node_modules/math.gl/dist/esm/lib/gl-matrix-extras.js","webpack:///../node_modules/gl-matrix/esm/common.js","webpack:///./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","webpack:///./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","webpack:///../node_modules/math.gl/dist/esm/classes/base/math-array.js"],"names":["checkNumber","value","Number","isFinite","Error","concat","checkVector","v","length","callerName","debug","i","validateVector","map","deprecated","method","version","console","warn","assert","condition","message","clone","a","out","fromValues","x","y","z","w","copy","set","add","b","scale","Math","sqrt","squaredLength","normalize","len","dot","lerp","t","ax","ay","az","aw","transformMat4","m","transformQuat","q","qx","qy","qz","qw","ix","iy","iz","iw","exactEquals","equals","a0","a1","a2","a3","b0","b1","b2","b3","abs","max","vec","Float32Array","CUBE_INDICES","Uint16Array","CUBE_POSITIONS","CUBE_NORMALS","CUBE_TEX_COORDS","ATTRIBUTES","POSITION","size","NORMAL","TEXCOORD_0","CubeGeometry","props","id","uid","indices","attributes","Geometry","_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","writable","configurable","cross","bx","by","bz","transformMat3","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","rotateX","c","p","r","cos","sin","rotateY","rotateZ","angle","tempA","tempB","cosine","PI","acos","_slicedToArray","arr","Array","isArray","Symbol","iterator","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","DRAW_MODE","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","drawMode","vertexCount","this","userData","_setAttributes","_calculateVertexCount","getVertexCount","getAttributes","_print","ArrayBuffer","attribute","attributeName","isIndexed","_construct","Parent","args","Class","Reflect","construct","sham","Proxy","Date","e","isNativeReflectConstruct","apply","instance","Function","bind","arguments","_MathArray","Matrix","key","string","printRowMajor","row","RANK","col","ELEMENTS","columnIndex","result","fill","firstIndex","columnVector","multiply","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","fovy","aspect","near","far","nf","f","tan","Infinity","eye","center","up","x0","x1","x2","y0","y1","y2","z0","z1","z2","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","identity","IDENTITY","freeze","ZERO","INDICES","COL0ROW0","COL0ROW1","COL0ROW2","COL0ROW3","COL1ROW0","COL1ROW1","COL1ROW2","COL1ROW3","COL2ROW0","COL2ROW1","COL2ROW2","COL2ROW3","COL3ROW0","COL3ROW1","COL3ROW2","COL3ROW3","constants","_Matrix","Matrix4","array","_this","get","check","m00","m10","m20","m30","m01","m11","m21","m31","m02","m12","m22","m32","m03","m13","m23","m33","xx","yx","yy","zx","zy","zz","wx","wy","wz","_ref","left","right","bottom","top","_computeInfinitePerspectiveOffCenter","rl","tb","_eye","_ref2","_ref2$near","_ref2$far","lr","bt","_ref3","_ref3$fovy","_ref3$aspect","_ref3$focalDistance","focalDistance","_ref3$near","_ref3$far","halfY","ortho","_ref4","_ref4$fov","fov","_ref4$aspect","_ref4$near","_ref4$far","scaleResult","getScale","inverseScale0","inverseScale1","inverseScale2","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","radians","rad","s","_ref5","_ref6","rx","ry","rz","axis","b12","b20","b21","b22","factor","vector","vec4","transformAsPoint","vec3","translate","transformAsVector","column0Row0","column1Row1","column2Row0","column2Row1","column3Row2","GL_FLOAT","GL_INT","GL_UNSIGNED_INT","UniformBufferLayout","layout","_addUniform","data","typedArray","Int32Array","Uint32Array","getBytes","getData","getSubData","index","offset","begin","offsets","end","sizes","subarray","setUniforms","_setValue","values","typeAndComponents","decomposeCompositeGLType","type","count","_alignTo","QUAD_VERTS","focalLength","focusDistance","fStop","texelOffset","InstancedCube","xforms","matrices","matrixBuffer","geometry","vs","fs","isInstanced","instanceCount","uniforms","uTexture","modelMatCol1","buffer","stride","divisor","modelMatCol2","modelMatCol3","modelMatCol4","updateMatrixBuffer","setData","Model","AppAnimationLoop","getInfo","onInitialize","gl","_animationLoop","isDemoSupported","isWebGL2","setParameters","depthTest","depthFunc","GL","LEQUAL","projMat","viewMat","dofUniformsLayout","uDepthRange","uFocusDistance","uBlurCoefficient","uPPM","FLOAT","dofUniforms","target","accessor","dofProgram","sceneFramebuffer","width","height","attachments","format","mipmaps","parameters","dataFormat","dofFramebuffer","depth","focalLengthInput","document","focusDistanceInput","fStopInput","parseFloat","texture","instancedCubes","CUBES_PER_ROW","cubeI","j","rowOffset","NUM_ROWS","rotate","matrix","quadVertexArray","program","aPosition","onRender","tick","magnification","blurCoefficient","ppm","clear","color","framebuffer","box","uProjection","uView","uTexelOffset","uColor","uDepth","vertexArray","isSupported","getAltText","AnimationLoop","window","animationLoop","Example","render","exampleConfig","pageContext","React","Component","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","DEGREES_TO_RADIANS","config","formatValue","_ref$precision","precision","round","EPSILON","toPrecision","isView","func","degrees","epsilon","oldEpsilon","printTypes","printDegrees","_possibleConstructorReturn","self","ReferenceError","_setPrototypeOf","vec2_transformMat4AsVector","vec3_transformMat4AsVector","vec3_transformMat2","ARRAY_TYPE","RANDOM","random","_cache","Map","fn","indexOf","has","Wrapper","enumerable","_Array","MathArray","arrayOrObject","fromObject","toArray","toObject","to","formatString","opts","name","ai","min","minVector","maxVector","_len","vectors","_key","_vectors","_len2","_key2","_i2","_vectors2","_scale","subtract","addScalar","scalar","validate","valid"],"mappings":"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","file":"component---templates-showcase-example-dof-jsx-0e9d8683382145560cf4.js","sourcesContent":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-finite\";\nimport { config } from './common';\nexport function validateVector(v, length) {\n  if (v.length !== length) {\n    return false;\n  }\n\n  for (var i = 0; i < v.length; ++i) {\n    if (!Number.isFinite(v[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function checkNumber(value) {\n  if (!Number.isFinite(value)) {\n    throw new Error(\"Invalid number \".concat(value));\n  }\n\n  return value;\n}\nexport function checkVector(v, length, callerName) {\n  if (config.debug && !validateVector(v, length)) {\n    throw new Error(\"math.gl: \".concat(callerName | '', \" some fields set to invalid numbers'\"));\n  }\n\n  return v;\n}\nvar map = {};\nexport function deprecated(method, version) {\n  if (!map[method]) {\n    map[method] = true;\n    console.warn(\"\".concat(method, \" has been removed in version \").concat(version, \", see upgrade guide for more information\"));\n  }\n}","export default function assert(condition, message) {\n  if (!condition) {\n    throw new Error(\"math.gl assertion \".concat(message));\n  }\n}","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import Geometry from '../geometry/geometry';\nimport {uid} from '@luma.gl/webgl';\n\n// prettier-ignore\nconst CUBE_INDICES = new Uint16Array([\n  0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13,\n  14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23\n]);\n\n// prettier-ignore\nconst CUBE_POSITIONS = new Float32Array([\n  -1,  -1,  1, 1,  -1,  1,  1,  1,  1,  -1,  1,  1,\n  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1,  -1,\n  -1,  1,  -1,  -1,  1,  1,  1,  1,  1,  1,  1,  -1,\n  -1,  -1,  -1,  1,  -1,  -1,  1,  -1,  1,  -1,  -1,  1,\n  1,  -1,  -1,  1,  1,  -1,  1,  1,  1,  1,  -1,  1,\n  -1,  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1\n]);\n\n// TODO - could be Uint8\n// prettier-ignore\nconst CUBE_NORMALS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,\n  // Back face\n  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,\n  // Top face\n  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,\n  // Bottom face\n  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,\n  // Right face\n  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,\n  // Left face\n  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0\n]);\n\n// prettier-ignore\nconst CUBE_TEX_COORDS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  1,  1,  0,  1,\n  // Back face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Top face\n  0,  1,  0,  0,  1,  0,  1,  1,\n  // Bottom face\n  1,  1,  0,  1,  0,  0,  1,  0,\n  // Right face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Left face\n  0,  0,  1,  0,  1,  1,  0,  1\n]);\n\nconst ATTRIBUTES = {\n  POSITION: {size: 3, value: new Float32Array(CUBE_POSITIONS)},\n  NORMAL: {size: 3, value: new Float32Array(CUBE_NORMALS)},\n  TEXCOORD_0: {size: 2, value: new Float32Array(CUBE_TEX_COORDS)}\n};\n\nexport default class CubeGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('cube-geometry')} = props;\n    super({\n      ...props,\n      id,\n      indices: {size: 1, value: new Uint16Array(CUBE_INDICES)},\n      attributes: {...ATTRIBUTES, ...props.attributes}\n    });\n  }\n}\n","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import {uid, assert} from '@luma.gl/webgl';\n\n// Rendering primitives - specify how to extract primitives from vertices.\n// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants\nexport const DRAW_MODE = {\n  POINTS: 0x0000, // draw single points.\n  LINES: 0x0001, // draw lines. Each vertex connects to the one after it.\n  LINE_LOOP: 0x0002, // draw lines. Each set of two vertices is treated as a separate line segment.\n  LINE_STRIP: 0x0003, // draw a connected group of line segments from the first vertex to the last\n  TRIANGLES: 0x0004, // draw triangles. Each set of three vertices creates a separate triangle.\n  TRIANGLE_STRIP: 0x0005, // draw a connected group of triangles.\n  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.\n  // Each vertex connects to the previous and the first vertex in the fan.\n};\n\nexport default class Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n\n  constructor(props = {}) {\n    const {\n      id = uid('geometry'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n\n    // stubRemovedMethods(this, [\n    //   'setNeedsRedraw', 'needsRedraw', 'setAttributes'\n    // ], 'Immutable');\n\n    // stubRemovedMethods(this, [\n    //   'hasAttribute', 'getAttribute', 'getArray'\n    // ], 'Use geometry.attributes and geometry.indices');\n\n    // deprecateMethods(this, ['getAttributes'])\n  }\n\n  get mode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  // Return an object with all attributes plus indices added as a field.\n  getAttributes() {\n    return this.indices ? {indices: this.indices, ...this.attributes} : this.attributes;\n  }\n\n  // PRIVATE\n\n  _print(attributeName) {\n    return `Geometry ${this.id} attribute ${attributeName}`;\n  }\n\n  // Attribute\n  // value: typed array\n  // type: indices, vertices, uvs\n  // size: elements per vertex\n  // target: WebGL buffer type (string or constant)\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {value: indices, size: 1} : indices;\n    }\n\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n\n      // Wrap \"unwrapped\" arrays and try to autodetect their type\n      attribute = ArrayBuffer.isView(attribute) ? {value: attribute} : attribute;\n\n      assert(\n        ArrayBuffer.isView(attribute.value),\n        `${this._print(attributeName)}: must be typed array or object with value as typed array`\n      );\n\n      if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n        attribute.size = 3;\n      }\n\n      // Move indices to separate field\n      if (attributeName === 'indices') {\n        assert(!this.indices);\n        this.indices = attribute;\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n\n    if (this.indices && this.indices.isIndexed !== undefined) {\n      this.indices = Object.assign({}, this.indices);\n      delete this.indices.isIndexed;\n    }\n\n    return this;\n  }\n\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n    let vertexCount = Infinity;\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {value, size, constant} = attribute;\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n\n    assert(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n}\n","import setPrototypeOf from \"./setPrototypeOf\";\n\nfunction isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import \"core-js/modules/es6.array.fill\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport MathArray from './math-array';\nimport { checkNumber } from '../../lib/validators';\nimport { config } from '../../lib/common';\n\nvar Matrix = function (_MathArray) {\n  _inherits(Matrix, _MathArray);\n\n  function Matrix() {\n    _classCallCheck(this, Matrix);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Matrix).apply(this, arguments));\n  }\n\n  _createClass(Matrix, [{\n    key: \"toString\",\n    value: function toString() {\n      var string = '[';\n\n      if (config.printRowMajor) {\n        string += 'row-major:';\n\n        for (var row = 0; row < this.RANK; ++row) {\n          for (var col = 0; col < this.RANK; ++col) {\n            string += \" \".concat(this[col * this.RANK + row]);\n          }\n        }\n      } else {\n        string += 'column-major:';\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          string += \" \".concat(this[i]);\n        }\n      }\n\n      string += ']';\n      return string;\n    }\n  }, {\n    key: \"getElementIndex\",\n    value: function getElementIndex(row, col) {\n      return col * this.RANK + row;\n    }\n  }, {\n    key: \"getElement\",\n    value: function getElement(row, col) {\n      return this[col * this.RANK + row];\n    }\n  }, {\n    key: \"setElement\",\n    value: function setElement(row, col, value) {\n      this[col * this.RANK + row] = checkNumber(value);\n      return this;\n    }\n  }, {\n    key: \"getColumn\",\n    value: function getColumn(columnIndex) {\n      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Array(this.RANK).fill(-0);\n      var firstIndex = columnIndex * this.RANK;\n\n      for (var i = 0; i < this.RANK; ++i) {\n        result[i] = this[firstIndex + i];\n      }\n\n      return result;\n    }\n  }, {\n    key: \"setColumn\",\n    value: function setColumn(columnIndex, columnVector) {\n      var firstIndex = columnIndex * this.RANK;\n\n      for (var i = 0; i < this.RANK; ++i) {\n        this[firstIndex + i] = columnVector[i];\n      }\n\n      return this;\n    }\n  }]);\n\n  return Matrix;\n}(MathArray);\n\nexport { Matrix as default };","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import \"core-js/modules/es6.array.is-array\";\nimport \"core-js/modules/es6.object.freeze\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { checkVector, deprecated } from '../lib/validators';\nimport Matrix from './base/matrix';\nimport { vec2_transformMat4AsVector, vec3_transformMat4AsVector } from '../lib/gl-matrix-extras';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport * as vec4 from 'gl-matrix/vec4';\nvar IDENTITY = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\nvar ZERO = Object.freeze([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nvar INDICES = Object.freeze({\n  COL0ROW0: 0,\n  COL0ROW1: 1,\n  COL0ROW2: 2,\n  COL0ROW3: 3,\n  COL1ROW0: 4,\n  COL1ROW1: 5,\n  COL1ROW2: 6,\n  COL1ROW3: 7,\n  COL2ROW0: 8,\n  COL2ROW1: 9,\n  COL2ROW2: 10,\n  COL2ROW3: 11,\n  COL3ROW0: 12,\n  COL3ROW1: 13,\n  COL3ROW2: 14,\n  COL3ROW3: 15\n});\nvar constants = {};\n\nvar Matrix4 = function (_Matrix) {\n  _inherits(Matrix4, _Matrix);\n\n  _createClass(Matrix4, [{\n    key: \"INDICES\",\n    get: function get() {\n      return INDICES;\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 16;\n    }\n  }, {\n    key: \"RANK\",\n    get: function get() {\n      return 4;\n    }\n  }], [{\n    key: \"IDENTITY\",\n    get: function get() {\n      constants.IDENTITY = constants.IDENTITY || Object.freeze(new Matrix4(IDENTITY));\n      return constants.IDENTITY;\n    }\n  }, {\n    key: \"ZERO\",\n    get: function get() {\n      constants.ZERO = constants.ZERO || Object.freeze(new Matrix4(ZERO));\n      return constants.ZERO;\n    }\n  }]);\n\n  function Matrix4(array) {\n    var _this;\n\n    _classCallCheck(this, Matrix4);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Matrix4).call(this, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0));\n\n    if (arguments.length === 1 && Array.isArray(array)) {\n      _this.copy(array);\n    } else {\n      _this.identity();\n    }\n\n    return _this;\n  }\n\n  _createClass(Matrix4, [{\n    key: \"copy\",\n    value: function copy(array) {\n      this[0] = array[0];\n      this[1] = array[1];\n      this[2] = array[2];\n      this[3] = array[3];\n      this[4] = array[4];\n      this[5] = array[5];\n      this[6] = array[6];\n      this[7] = array[7];\n      this[8] = array[8];\n      this[9] = array[9];\n      this[10] = array[10];\n      this[11] = array[11];\n      this[12] = array[12];\n      this[13] = array[13];\n      this[14] = array[14];\n      this[15] = array[15];\n      return this.check();\n    }\n  }, {\n    key: \"set\",\n    value: function set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m30;\n      this[4] = m01;\n      this[5] = m11;\n      this[6] = m21;\n      this[7] = m31;\n      this[8] = m02;\n      this[9] = m12;\n      this[10] = m22;\n      this[11] = m32;\n      this[12] = m03;\n      this[13] = m13;\n      this[14] = m23;\n      this[15] = m33;\n      return this.check();\n    }\n  }, {\n    key: \"setRowMajor\",\n    value: function setRowMajor(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m30;\n      this[4] = m01;\n      this[5] = m11;\n      this[6] = m21;\n      this[7] = m31;\n      this[8] = m02;\n      this[9] = m12;\n      this[10] = m22;\n      this[11] = m32;\n      this[12] = m03;\n      this[13] = m13;\n      this[14] = m23;\n      this[15] = m33;\n      return this.check();\n    }\n  }, {\n    key: \"toRowMajor\",\n    value: function toRowMajor(result) {\n      result[0] = this[0];\n      result[1] = this[4];\n      result[2] = this[8];\n      result[3] = this[12];\n      result[4] = this[1];\n      result[5] = this[5];\n      result[6] = this[9];\n      result[7] = this[13];\n      result[8] = this[2];\n      result[9] = this[6];\n      result[10] = this[10];\n      result[11] = this[14];\n      result[12] = this[3];\n      result[13] = this[7];\n      result[14] = this[11];\n      result[15] = this[15];\n      return result;\n    }\n  }, {\n    key: \"identity\",\n    value: function identity() {\n      return this.copy(IDENTITY);\n    }\n  }, {\n    key: \"fromQuaternion\",\n    value: function fromQuaternion(q) {\n      mat4.fromQuat(this, q);\n      return this.check();\n    }\n  }, {\n    key: \"frustum\",\n    value: function frustum(_ref) {\n      var left = _ref.left,\n          right = _ref.right,\n          bottom = _ref.bottom,\n          top = _ref.top,\n          near = _ref.near,\n          far = _ref.far;\n\n      if (far === Infinity) {\n        Matrix4._computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);\n      } else {\n        mat4.frustum(this, left, right, bottom, top, near, far);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lookAt\",\n    value: function lookAt(eye, center, up) {\n      if (arguments.length === 1) {\n        var _eye = eye;\n        eye = _eye.eye;\n        center = _eye.center;\n        up = _eye.up;\n      }\n\n      center = center || [0, 0, 0];\n      up = up || [0, 1, 0];\n      mat4.lookAt(this, eye, center, up);\n      return this.check();\n    }\n  }, {\n    key: \"ortho\",\n    value: function ortho(_ref2) {\n      var left = _ref2.left,\n          right = _ref2.right,\n          bottom = _ref2.bottom,\n          top = _ref2.top,\n          _ref2$near = _ref2.near,\n          near = _ref2$near === void 0 ? 0.1 : _ref2$near,\n          _ref2$far = _ref2.far,\n          far = _ref2$far === void 0 ? 500 : _ref2$far;\n      mat4.ortho(this, left, right, bottom, top, near, far);\n      return this.check();\n    }\n  }, {\n    key: \"orthographic\",\n    value: function orthographic(_ref3) {\n      var _ref3$fovy = _ref3.fovy,\n          fovy = _ref3$fovy === void 0 ? 45 * Math.PI / 180 : _ref3$fovy,\n          _ref3$aspect = _ref3.aspect,\n          aspect = _ref3$aspect === void 0 ? 1 : _ref3$aspect,\n          _ref3$focalDistance = _ref3.focalDistance,\n          focalDistance = _ref3$focalDistance === void 0 ? 1 : _ref3$focalDistance,\n          _ref3$near = _ref3.near,\n          near = _ref3$near === void 0 ? 0.1 : _ref3$near,\n          _ref3$far = _ref3.far,\n          far = _ref3$far === void 0 ? 500 : _ref3$far;\n\n      if (fovy > Math.PI * 2) {\n        throw Error('radians');\n      }\n\n      var halfY = fovy / 2;\n      var top = focalDistance * Math.tan(halfY);\n      var right = top * aspect;\n      return new Matrix4().ortho({\n        left: -right,\n        right: right,\n        bottom: -top,\n        top: top,\n        near: near,\n        far: far\n      });\n    }\n  }, {\n    key: \"perspective\",\n    value: function perspective() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          fovy = _ref4.fovy,\n          _ref4$fov = _ref4.fov,\n          fov = _ref4$fov === void 0 ? 45 * Math.PI / 180 : _ref4$fov,\n          _ref4$aspect = _ref4.aspect,\n          aspect = _ref4$aspect === void 0 ? 1 : _ref4$aspect,\n          _ref4$near = _ref4.near,\n          near = _ref4$near === void 0 ? 0.1 : _ref4$near,\n          _ref4$far = _ref4.far,\n          far = _ref4$far === void 0 ? 500 : _ref4$far;\n\n      fovy = fovy || fov;\n\n      if (fovy > Math.PI * 2) {\n        throw Error('radians');\n      }\n\n      mat4.perspective(this, fovy, aspect, near, far);\n      return this.check();\n    }\n  }, {\n    key: \"determinant\",\n    value: function determinant() {\n      return mat4.determinant(this);\n    }\n  }, {\n    key: \"getScale\",\n    value: function getScale() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n      result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);\n      result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);\n      result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);\n      return result;\n    }\n  }, {\n    key: \"getTranslation\",\n    value: function getTranslation() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n      result[0] = this[12];\n      result[1] = this[13];\n      result[2] = this[14];\n      return result;\n    }\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n      var scaleResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var scale = this.getScale(scaleResult || [-0, -0, -0]);\n      var inverseScale0 = 1 / scale[0];\n      var inverseScale1 = 1 / scale[1];\n      var inverseScale2 = 1 / scale[2];\n      result[0] = this[0] * inverseScale0;\n      result[1] = this[1] * inverseScale1;\n      result[2] = this[2] * inverseScale2;\n      result[3] = 0;\n      result[4] = this[4] * inverseScale0;\n      result[5] = this[5] * inverseScale1;\n      result[6] = this[6] * inverseScale2;\n      result[7] = 0;\n      result[8] = this[8] * inverseScale0;\n      result[9] = this[9] * inverseScale1;\n      result[10] = this[10] * inverseScale2;\n      result[11] = 0;\n      result[12] = 0;\n      result[13] = 0;\n      result[14] = 0;\n      result[15] = 1;\n      return result;\n    }\n  }, {\n    key: \"getRotationMatrix3\",\n    value: function getRotationMatrix3() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0, -0, -0, -0, -0, -0, -0];\n      var scaleResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var scale = this.getScale(scaleResult || [-0, -0, -0]);\n      var inverseScale0 = 1 / scale[0];\n      var inverseScale1 = 1 / scale[1];\n      var inverseScale2 = 1 / scale[2];\n      result[0] = this[0] * inverseScale0;\n      result[1] = this[1] * inverseScale1;\n      result[2] = this[2] * inverseScale2;\n      result[3] = this[4] * inverseScale0;\n      result[4] = this[5] * inverseScale1;\n      result[5] = this[6] * inverseScale2;\n      result[6] = this[8] * inverseScale0;\n      result[7] = this[9] * inverseScale1;\n      result[8] = this[10] * inverseScale2;\n      return result;\n    }\n  }, {\n    key: \"transpose\",\n    value: function transpose() {\n      mat4.transpose(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      mat4.invert(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyLeft\",\n    value: function multiplyLeft(a) {\n      mat4.multiply(this, a, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyRight\",\n    value: function multiplyRight(a) {\n      mat4.multiply(this, this, a);\n      return this.check();\n    }\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(radians) {\n      mat4.rotateX(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(radians) {\n      mat4.rotateY(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateZ\",\n    value: function rotateZ(radians) {\n      mat4.rotateZ(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateXYZ\",\n    value: function rotateXYZ(_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 3),\n          rx = _ref6[0],\n          ry = _ref6[1],\n          rz = _ref6[2];\n\n      return this.rotateX(rx).rotateY(ry).rotateZ(rz);\n    }\n  }, {\n    key: \"rotateAxis\",\n    value: function rotateAxis(radians, axis) {\n      mat4.rotate(this, this, radians, axis);\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(factor) {\n      if (Array.isArray(factor)) {\n        mat4.scale(this, this, factor);\n      } else {\n        mat4.scale(this, this, [factor, factor, factor]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(vec) {\n      mat4.translate(this, this, vec);\n      return this.check();\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(vector, result) {\n      if (vector.length === 4) {\n        result = vec4.transformMat4(result || [-0, -0, -0, -0], vector, this);\n        checkVector(result, 4);\n        return result;\n      }\n\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformAsPoint\",\n    value: function transformAsPoint(vector, result) {\n      var length = vector.length;\n\n      switch (length) {\n        case 2:\n          result = vec2.transformMat4(result || [-0, -0], vector, this);\n          break;\n\n        case 3:\n          result = vec3.transformMat4(result || [-0, -0, -0], vector, this);\n          break;\n\n        default:\n          throw new Error('Illegal vector');\n      }\n\n      checkVector(result, vector.length);\n      return result;\n    }\n  }, {\n    key: \"transformAsVector\",\n    value: function transformAsVector(vector, result) {\n      switch (vector.length) {\n        case 2:\n          result = vec2_transformMat4AsVector(result || [-0, -0], vector, this);\n          break;\n\n        case 3:\n          result = vec3_transformMat4AsVector(result || [-0, -0, -0], vector, this);\n          break;\n\n        default:\n          throw new Error('Illegal vector');\n      }\n\n      checkVector(result, vector.length);\n      return result;\n    }\n  }, {\n    key: \"makeRotationX\",\n    value: function makeRotationX(radians) {\n      return this.identity().rotateX(radians);\n    }\n  }, {\n    key: \"makeTranslation\",\n    value: function makeTranslation(x, y, z) {\n      return this.identity().translate([x, y, z]);\n    }\n  }, {\n    key: \"transformPoint\",\n    value: function transformPoint(vector, result) {\n      deprecated('Matrix4.transformPoint', '3.0');\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformVector\",\n    value: function transformVector(vector, result) {\n      deprecated('Matrix4.transformVector', '3.0');\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformDirection\",\n    value: function transformDirection(vector, result) {\n      deprecated('Matrix4.transformDirection', '3.0');\n      return this.transformAsVector(vector, result);\n    }\n  }], [{\n    key: \"_computeInfinitePerspectiveOffCenter\",\n    value: function _computeInfinitePerspectiveOffCenter(result, left, right, bottom, top, near) {\n      var column0Row0 = 2.0 * near / (right - left);\n      var column1Row1 = 2.0 * near / (top - bottom);\n      var column2Row0 = (right + left) / (right - left);\n      var column2Row1 = (top + bottom) / (top - bottom);\n      var column2Row2 = -1.0;\n      var column2Row3 = -1.0;\n      var column3Row2 = -2.0 * near;\n      result[0] = column0Row0;\n      result[1] = 0.0;\n      result[2] = 0.0;\n      result[3] = 0.0;\n      result[4] = 0.0;\n      result[5] = column1Row1;\n      result[6] = 0.0;\n      result[7] = 0.0;\n      result[8] = column2Row0;\n      result[9] = column2Row1;\n      result[10] = column2Row2;\n      result[11] = column2Row3;\n      result[12] = 0.0;\n      result[13] = 0.0;\n      result[14] = column3Row2;\n      result[15] = 0.0;\n      return result;\n    }\n  }]);\n\n  return Matrix4;\n}(Matrix);\n\nexport { Matrix4 as default };","/* eslint-disable camelcase */\nimport {decomposeCompositeGLType} from '../webgl-utils/attribute-utils';\nimport {assert} from '../utils';\n\nconst ERR_ARGUMENT = 'UniformBufferLayout illegal argument';\n\n// Local constants - these will \"collapse\" during minification\nconst GL_FLOAT = 0x1406;\nconst GL_INT = 0x1404;\nconst GL_UNSIGNED_INT = 0x1405;\n\n// Std140 layout for uniforms\nexport default class UniformBufferLayout {\n  constructor(layout) {\n    this.layout = {};\n    this.size = 0;\n\n    // Add layout (type, size and offset) definitions for each uniform in the layout\n    for (const key in layout) {\n      this._addUniform(key, layout[key]);\n    }\n\n    this.size += (4 - (this.size % 4)) % 4;\n\n    // Allocate three typed arrays pointing at same memory\n    const data = new Float32Array(this.size);\n    this.typedArray = {\n      [GL_FLOAT]: data,\n      [GL_INT]: new Int32Array(data.buffer),\n      [GL_UNSIGNED_INT]: new Uint32Array(data.buffer)\n    };\n  }\n\n  // Get number of bytes needed for buffer allocation\n  getBytes() {\n    return this.size * 4;\n  }\n\n  // Get the current data as Float32Array, for bufferSubData\n  getData() {\n    return this.typedArray[GL_FLOAT];\n  }\n\n  // Get offset and data for one object (for bufferSubData)\n  getSubData(index) {\n    let data;\n    let offset;\n    if (index === undefined) {\n      data = this.data;\n      offset = 0;\n    } else {\n      const begin = this.offsets[index];\n      const end = begin + this.sizes[index];\n      data = this.data.subarray(begin, end);\n      offset = begin * 4;\n    }\n    return {data, offset};\n  }\n\n  // Set a map of values\n  setUniforms(values) {\n    for (const key in values) {\n      this._setValue(key, values[key]);\n    }\n    return this;\n  }\n\n  _setValue(key, value) {\n    const layout = this.layout[key];\n    assert(layout, 'UniformLayoutStd140 illegal argument');\n    const typedArray = this.typedArray[layout.type];\n    if (layout.size === 1) {\n      // single value -> just set it\n      typedArray[layout.offset] = value;\n    } else {\n      // vector/matrix -> copy the supplied (typed) array, starting from offset\n      typedArray.set(value, layout.offset);\n    }\n  }\n\n  _addUniform(key, uniformType) {\n    const typeAndComponents = decomposeCompositeGLType(uniformType);\n    assert(typeAndComponents, ERR_ARGUMENT);\n    const {type, components: count} = typeAndComponents;\n\n    // First, align (bump) current offset to an even multiple of current object (1, 2, 4)\n    this.size = this._alignTo(this.size, count);\n    // Use the aligned size as the offset of the current uniform.\n    const offset = this.size;\n    // Then, add our object's padded size ((1, 2, multiple of 4) to the current offset\n    this.size += count;\n\n    this.layout[key] = {type, size: count, offset};\n  }\n\n  // Align offset to 1, 2 or 4 elements (4, 8 or 16 bytes)\n  _alignTo(size, count) {\n    switch (count) {\n      case 1:\n        return size; // Pad upwards to even multiple of 2\n      case 2:\n        return size + (size % 2); // Pad upwards to even multiple of 2\n      default:\n        return size + ((4 - (size % 4)) % 4); // Pad upwards to even multiple of 4\n    }\n  }\n}\n","import GL from '@luma.gl/constants';\nimport {AnimationLoop, Model, CubeGeometry} from '@luma.gl/engine';\nimport {\n  Framebuffer,\n  clear,\n  Program,\n  Texture2D,\n  VertexArray,\n  UniformBufferLayout,\n  Buffer\n} from '@luma.gl/webgl';\nimport {setParameters, isWebGL2} from '@luma.gl/gltools';\nimport {Matrix4, radians} from 'math.gl';\n/* eslint-disable spaced-comment */\n/* global document */\n\n/*\n  Based on: https://github.com/tsherif/picogl.js/blob/master/examples/dof.html\n  Original algorithm: http://www.nutty.ca/?page_id=352&link=depth_of_field\n*/\n\nconst INFO_HTML = `\n<p>\n  <b>Depth of Field</b>.\n<p>\nSeveral instanced luma.gl <code>Cubes</code> rendered with a Depth of Field\npost-processing effect.\n\n<div>\n  Focal Length: <input type=\"range\" id=\"focal-length\" min=\"0.1\" max=\"10.0\" step=\"0.1\">\n</div>\n<div>\n  Focus Distance: <input type=\"range\" id=\"focus-distance\" min=\"0.1\" max=\"10.0\" step=\"0.1\">\n</div>\n<div>\n  F-Stop: <input type=\"range\" id=\"f-stop\" min=\"0.1\" max=\"10.0\" step=\"0.1\">\n</div>\n\n`;\n\nconst ALT_TEXT = \"THIS DEMO REQUIRES WEBLG2, BUT YOUR BROWSER DOESN'T SUPPORT IT\";\n\nconst QUAD_VERTS = [1, 1, 0, -1, 1, 0, 1, -1, 0, -1, -1, 0]; // eslint-disable-line\nconst NUM_ROWS = 5;\nconst CUBES_PER_ROW = 20;\nconst NUM_CUBES = CUBES_PER_ROW * NUM_ROWS;\nconst NEAR = 0.1;\nconst FAR = 30.0;\n\nlet focalLength = 2.0;\nlet focusDistance = 3.0;\nlet fStop = 2.8;\nconst texelOffset = new Float32Array(2);\n\nclass InstancedCube extends Model {\n  constructor(gl, props) {\n    const count = props.count;\n    const xforms = new Array(count);\n    const matrices = new Float32Array(count * 16);\n    const matrixBuffer = new Buffer(gl, matrices.byteLength);\n\n    const vs = `\\\n#version 300 es\n#define SHADER_NAME scene.vs\n\nin vec3 positions;\nin vec3 normals;\nin vec2 texCoords;\nin vec4 modelMatCol1;\nin vec4 modelMatCol2;\nin vec4 modelMatCol3;\nin vec4 modelMatCol4;\n\nuniform mat4 uView;\nuniform mat4 uProjection;\nout vec3 vNormal;\nout vec2 vUV;\n\nvoid main(void) {\n  mat4 modelMat = mat4(\n    modelMatCol1,\n    modelMatCol2,\n    modelMatCol3,\n    modelMatCol4\n  );\n  gl_Position = uProjection * uView * modelMat * vec4(positions, 1.0);\n  vNormal = vec3(modelMat * vec4(normals, 0.0));\n  vUV = texCoords;\n}\n`;\n    const fs = `\\\n#version 300 es\nprecision highp float;\n#define SHADER_NAME scene.fs\n\nin vec3 vNormal;\nin vec2 vUV;\nuniform sampler2D uTexture;\n\nout vec4 fragColor;\nvoid main(void) {\n  float d = clamp(dot(normalize(vNormal), normalize(vec3(1.0, 1.0, 0.2))), 0.0, 1.0);\n  fragColor.rgb = texture(uTexture, vec2(vUV.x, 1.0 - vUV.y)).rgb * (d + 0.1);\n  fragColor.a = 1.0;\n}\n`;\n\n    super(\n      gl,\n      Object.assign({geometry: new CubeGeometry()}, props, {\n        vs,\n        fs,\n        isInstanced: 1,\n        instanceCount: count,\n        uniforms: {\n          uTexture: props.uniforms.uTexture\n        },\n        attributes: {\n          // Attributes are limited to 4 components,\n          // So we have to split the matrices across\n          // 4 attributes. They're reconstructed in\n          // the vertex shader.\n          modelMatCol1: {\n            buffer: matrixBuffer,\n            size: 4,\n            stride: 64,\n            offset: 0,\n            divisor: 1\n          },\n          modelMatCol2: {\n            buffer: matrixBuffer,\n            size: 4,\n            stride: 64,\n            offset: 16,\n            divisor: 1\n          },\n          modelMatCol3: {\n            buffer: matrixBuffer,\n            size: 4,\n            stride: 64,\n            offset: 32,\n            divisor: 1\n          },\n          modelMatCol4: {\n            buffer: matrixBuffer,\n            size: 4,\n            stride: 64,\n            offset: 48,\n            divisor: 1\n          }\n        }\n      })\n    );\n\n    this.count = count;\n    this.xforms = xforms;\n    this.matrices = matrices;\n    this.matrixBuffer = matrixBuffer;\n  }\n\n  updateMatrixBuffer() {\n    this.matrixBuffer.setData(this.matrices);\n  }\n}\n\nconst DOF_VERTEX = `\\\n#version 300 es\n#define SHADER_NAME quad.vs\n\nlayout(location=0) in vec3 aPosition;\n\nvoid main() {\n    gl_Position = vec4(aPosition, 1.0);\n}\n`;\n\nconst DOF_FRAGMENT = `\\\n#version 300 es\nprecision highp float;\n#define SHADER_NAME dof.fs\n\n#define MAX_BLUR 20.0\n\nuniform DOFUniforms {\n  vec2  uDepthRange;\n  float uFocusDistance;\n  float uBlurCoefficient;\n  float uPPM;\n};\n\nuniform vec2 uTexelOffset;\n\nuniform sampler2D uColor;\nuniform sampler2D uDepth;\n\nout vec4 fragColor;\n\nvoid main() {\n    ivec2 fragCoord = ivec2(gl_FragCoord.xy);\n    ivec2 resolution = textureSize(uColor, 0) - 1;\n\n    // Convert to linear depth\n    float ndc = 2.0 * texelFetch(uDepth, fragCoord, 0).r - 1.0;\n    float depth = -(2.0 * uDepthRange.y * uDepthRange.x) / (ndc * (uDepthRange.y - uDepthRange.x) - uDepthRange.y - uDepthRange.x);\n    float deltaDepth = abs(uFocusDistance - depth);\n\n    // Blur more quickly in the foreground.\n    float xdd = depth < uFocusDistance ? abs(uFocusDistance - deltaDepth) : abs(uFocusDistance + deltaDepth);\n    float blurRadius = min(floor(uBlurCoefficient * (deltaDepth / xdd) * uPPM), MAX_BLUR);\n\n    vec4 color = vec4(0.0);\n    if (blurRadius > 1.0) {\n        float halfBlur = blurRadius * 0.5;\n\n        float count = 0.0;\n\n        for (float i = 0.0; i <= MAX_BLUR; ++i) {\n            if (i > blurRadius) {\n                break;\n            }\n\n            // texelFetch outside texture gives vec4(0.0) (undefined in ES 3)\n            ivec2 sampleCoord = clamp(fragCoord + ivec2(((i - halfBlur) * uTexelOffset)), ivec2(0), resolution);\n            color += texelFetch(uColor, sampleCoord, 0);\n\n            ++count;\n        }\n\n        color /= count;\n    } else {\n        color = texelFetch(uColor, fragCoord, 0);\n    }\n\n    fragColor = color;\n}\n`;\n\nexport default class AppAnimationLoop extends AnimationLoop {\n  static getInfo() {\n    return INFO_HTML;\n  }\n\n  constructor(props = {}) {\n    super(props);\n    // Default value is true, so GL context is always created to verify wheter it is WebGL2 or not.\n    this.isDemoSupported = true;\n  }\n\n  onInitialize({gl, _animationLoop}) {\n    this.isDemoSupported = isWebGL2(gl);\n    if (!this.isDemoSupported) {\n      return {};\n    }\n\n    setParameters(gl, {\n      depthTest: true,\n      depthFunc: GL.LEQUAL\n    });\n\n    const projMat = new Matrix4();\n    const viewMat = new Matrix4().lookAt({eye: [0, 0, 8]});\n\n    ///////////////////////////////////////\n    // Create postprocessing pass program.\n    ///////////////////////////////////////\n\n    const dofUniformsLayout = new UniformBufferLayout({\n      uDepthRange: gl.FLOAT_VEC2,\n      uFocusDistance: gl.FLOAT,\n      uBlurCoefficient: gl.FLOAT,\n      uPPM: gl.FLOAT\n    }).setUniforms({\n      uDepthRange: [NEAR, FAR]\n    });\n\n    const dofUniforms = new Buffer(gl, {\n      target: GL.UNIFORM_BUFFER,\n      data: dofUniformsLayout.getData(),\n      accessor: {\n        index: 0\n      }\n    });\n\n    const dofProgram = new Program(gl, {\n      id: 'DOF_PROGRAM',\n      vs: DOF_VERTEX,\n      fs: DOF_FRAGMENT\n    });\n\n    dofProgram.uniformBlockBinding(dofProgram.getUniformBlockIndex('DOFUniforms'), 0);\n\n    //////////////////////\n    // Set up frambuffers.\n    //////////////////////\n\n    // Need to ensure both color and depth targets can be sampled.\n    const sceneFramebuffer = new Framebuffer(gl, {\n      width: gl.drawingBufferWidth,\n      height: gl.drawingBufferHeight,\n      attachments: {\n        [GL.COLOR_ATTACHMENT0]: new Texture2D(gl, {\n          format: GL.RGBA,\n          type: GL.UNSIGNED_BYTE,\n          width: gl.drawingBufferWidth,\n          height: gl.drawingBufferHeight,\n          mipmaps: false,\n          parameters: {\n            [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n            [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n            [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n            [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n          }\n        }),\n        [GL.DEPTH_ATTACHMENT]: new Texture2D(gl, {\n          format: GL.DEPTH_COMPONENT16,\n          type: GL.UNSIGNED_SHORT,\n          dataFormat: GL.DEPTH_COMPONENT,\n          width: gl.drawingBufferWidth,\n          height: gl.drawingBufferHeight,\n          mipmaps: false,\n          parameters: {\n            [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n            [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n            [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n            [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n          }\n        })\n      }\n    });\n\n    // Postprocessing FBO doesn't need a depth attachment.\n    const dofFramebuffer = new Framebuffer(gl, {\n      width: gl.drawingBufferWidth,\n      height: gl.drawingBufferHeight,\n      depth: false\n    });\n\n    /////////////////////\n    // Input handlers.\n    /////////////////////\n\n    const focalLengthInput = document.getElementById('focal-length');\n    const focusDistanceInput = document.getElementById('focus-distance');\n    const fStopInput = document.getElementById('f-stop');\n\n    if (focalLengthInput) {\n      focalLengthInput.value = focalLength;\n      focalLengthInput.addEventListener('input', () => {\n        focalLength = parseFloat(focalLengthInput.value);\n      });\n\n      focusDistanceInput.value = focusDistance;\n      focusDistanceInput.addEventListener('input', () => {\n        focusDistance = parseFloat(focusDistanceInput.value);\n      });\n\n      fStopInput.value = fStop;\n      fStopInput.addEventListener('input', () => {\n        fStop = parseFloat(fStopInput.value);\n      });\n    }\n\n    const texture = new Texture2D(gl, {\n      data: 'vis-logo.png',\n      mipmaps: true,\n      parameters: {\n        [gl.TEXTURE_MAG_FILTER]: gl.LINEAR,\n        [gl.TEXTURE_MIN_FILTER]: gl.LINEAR_MIPMAP_NEAREST\n      }\n    });\n\n    /////////////////////////////////////////////////////\n    // Create instanced model and initialize transform matrices.\n    /////////////////////////////////////////////////////\n\n    const instancedCubes = new InstancedCube(gl, {\n      count: NUM_CUBES,\n      uniforms: {\n        uTexture: texture\n      }\n    });\n\n    let cubeI = 0;\n    for (let j = 0; j < NUM_ROWS; ++j) {\n      const rowOffset = j - Math.floor(NUM_ROWS / 2);\n      for (let i = 0; i < CUBES_PER_ROW; ++i) {\n        const scale = [0.4, 0.4, 0.4];\n        const rotate = [-Math.sin(i * 18.23) * Math.PI, 0, Math.cos(i * 11.27) * Math.PI];\n        const translate = [-i + 2 - rowOffset, 0, -i + 2 + rowOffset];\n        instancedCubes.xforms[cubeI] = {\n          scale,\n          translate,\n          rotate,\n          matrix: new Matrix4()\n            .translate(translate)\n            .rotateXYZ(rotate)\n            .scale(scale)\n        };\n\n        instancedCubes.matrices.set(instancedCubes.xforms[cubeI].matrix, cubeI * 16);\n        ++cubeI;\n      }\n    }\n\n    instancedCubes.updateMatrixBuffer();\n\n    /////////////////////////////////////////////\n    // Full-screen quad VAO for postprocessing\n    // passes.\n    /////////////////////////////////////////////\n\n    const quadVertexArray = new VertexArray(gl, {\n      program: dofProgram,\n      attributes: {\n        aPosition: new Buffer(gl, new Float32Array(QUAD_VERTS))\n      }\n    });\n\n    return {\n      projMat,\n      viewMat,\n      instancedCubes,\n      sceneFramebuffer,\n      dofFramebuffer,\n      quadVertexArray,\n      dofProgram,\n      dofUniforms,\n      dofUniformsLayout\n    };\n  }\n\n  onRender({\n    gl,\n    tick,\n    width,\n    height,\n    aspect,\n    projMat,\n    viewMat,\n    instancedCubes,\n    sceneFramebuffer,\n    dofFramebuffer,\n    quadVertexArray,\n    dofProgram,\n    dofUniforms,\n    dofUniformsLayout\n  }) {\n    if (!this.isDemoSupported) {\n      return;\n    }\n\n    sceneFramebuffer.resize(gl.drawingBufferWidth, gl.drawingBufferHeight);\n    dofFramebuffer.resize(gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n    const magnification = focalLength / Math.max(0.1, Math.abs(focusDistance - focalLength));\n    const blurCoefficient = (focalLength * magnification) / fStop;\n    const ppm =\n      Math.sqrt(\n        gl.drawingBufferWidth * gl.drawingBufferWidth +\n          gl.drawingBufferHeight * gl.drawingBufferHeight\n      ) / 35;\n\n    clear(gl, {color: [0, 0, 0, 1], depth: true, framebuffer: sceneFramebuffer});\n\n    projMat.perspective({fov: radians(75), aspect, near: NEAR, far: FAR});\n    viewMat.lookAt({eye: [3, 1.5, 3], center: [0, 0, 0], up: [0, 1, 0]});\n\n    ////////////////////////////////////////\n    // Update model matrix data and then\n    // update the attribute buffer.\n    ////////////////////////////////////////\n\n    for (let i = 0; i < NUM_CUBES; ++i) {\n      const box = instancedCubes.xforms[i];\n      box.rotate[0] += 0.01;\n      box.rotate[1] += 0.02;\n      box.matrix\n        .identity()\n        .translate(box.translate)\n        .rotateXYZ(box.rotate)\n        .scale(box.scale);\n      instancedCubes.matrices.set(box.matrix, i * 16);\n    }\n\n    instancedCubes.updateMatrixBuffer();\n\n    ////////////////////////////////////\n    // Draw cubes to scene framebuffer.\n    ////////////////////////////////////\n\n    instancedCubes.draw({\n      uniforms: {\n        uProjection: projMat,\n        uView: viewMat\n      },\n      framebuffer: sceneFramebuffer\n    });\n\n    /////////////////\n    // Apply DOF\n    /////////////////\n\n    // Horizontal DOF blur\n    clear(gl, {color: [0, 0, 0, 1], framebuffer: dofFramebuffer});\n\n    // texelOffset determines the direction of the blur\n    texelOffset[0] = 1;\n    texelOffset[1] = 0;\n\n    dofUniformsLayout.setUniforms({\n      uFocusDistance: focusDistance,\n      uBlurCoefficient: blurCoefficient,\n      uPPM: ppm\n    });\n\n    dofUniforms.setData(dofUniformsLayout.getData());\n\n    dofUniforms.bind();\n\n    dofProgram.setUniforms({\n      uTexelOffset: texelOffset,\n      uColor: sceneFramebuffer.color,\n      uDepth: sceneFramebuffer.depth\n    });\n\n    dofProgram.draw({\n      vertexArray: quadVertexArray,\n      drawMode: gl.TRIANGLE_STRIP,\n      vertexCount: 4,\n      framebuffer: dofFramebuffer\n    });\n\n    // Vertical DOF blur\n    clear(gl, {color: [0, 0, 0, 1]});\n\n    texelOffset[0] = 0;\n    texelOffset[1] = 1;\n\n    dofProgram.setUniforms({\n      uTexelOffset: texelOffset,\n      uColor: sceneFramebuffer.color,\n      uDepth: sceneFramebuffer.depth\n    });\n\n    dofProgram.draw({\n      vertexArray: quadVertexArray,\n      drawMode: gl.TRIANGLE_STRIP,\n      vertexCount: 4\n    });\n\n    dofUniforms.unbind();\n  }\n\n  isSupported() {\n    return this.isDemoSupported;\n  }\n\n  getAltText() {\n    return ALT_TEXT;\n  }\n}\n\n/* global window */\nif (typeof window !== 'undefined' && !window.website) {\n  const animationLoop = new AppAnimationLoop();\n  animationLoop.start();\n}\n","import React from 'react';\nimport AnimationLoopExamplePage from '../../src/components/animation-loop-example-page';\nimport AnimationLoop from '../../../examples/showcase/dof/app';\n\nexport default class Example extends React.Component {\n\n  render() {\n    return (\n      <AnimationLoopExamplePage AnimationLoop={AnimationLoop} exampleConfig={this.props.pageContext.exampleConfig} />\n    );\n  }\n}\n","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.array.is-array\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _construct from \"@babel/runtime/helpers/esm/construct\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport assert from './assert';\nvar RADIANS_TO_DEGREES = 1 / Math.PI * 180;\nvar DEGREES_TO_RADIANS = 1 / 180 * Math.PI;\nvar config = {};\nconfig.EPSILON = 1e-12;\nconfig.debug = false;\nconfig.precision = 4;\nconfig.printTypes = false;\nconfig.printDegrees = false;\nconfig.printRowMajor = true;\nexport { config };\nexport function configure() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  for (var key in options) {\n    assert(key in config);\n    config[key] = options[key];\n  }\n\n  return config;\n}\n\nfunction round(value) {\n  return Math.round(value / config.EPSILON) * config.EPSILON;\n}\n\nexport function formatValue(value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$precision = _ref.precision,\n      precision = _ref$precision === void 0 ? config.precision || 4 : _ref$precision;\n\n  value = round(value);\n  return \"\".concat(parseFloat(value.toPrecision(precision)));\n}\nexport function isArray(value) {\n  return Array.isArray(value) || ArrayBuffer.isView(value) && value.length !== undefined;\n}\n\nfunction duplicateArray(array) {\n  return array.clone ? array.clone() : new Array(array.length);\n}\n\nexport function clone(array) {\n  return array.clone ? array.clone() : _construct(Array, _toConsumableArray(array));\n}\n\nfunction map(value, func, result) {\n  if (isArray(value)) {\n    result = result || duplicateArray(value);\n\n    for (var i = 0; i < result.length && i < value.length; ++i) {\n      result[i] = func(value[i], i, result);\n    }\n\n    return result;\n  }\n\n  return func(value);\n}\n\nexport function toRadians(degrees) {\n  return radians(degrees);\n}\nexport function toDegrees(radians) {\n  return degrees(radians);\n}\nexport function radians(degrees, result) {\n  return map(degrees, function (degrees) {\n    return degrees * DEGREES_TO_RADIANS;\n  }, result);\n}\nexport function degrees(radians, result) {\n  return map(radians, function (radians) {\n    return radians * RADIANS_TO_DEGREES;\n  }, result);\n}\nexport function sin(radians) {\n  return map(radians, function (angle) {\n    return Math.sin(angle);\n  });\n}\nexport function cos(radians) {\n  return map(radians, function (angle) {\n    return Math.cos(angle);\n  });\n}\nexport function tan(radians) {\n  return map(radians, function (angle) {\n    return Math.tan(angle);\n  });\n}\nexport function asin(radians) {\n  return map(radians, function (angle) {\n    return Math.asin(angle);\n  });\n}\nexport function acos(radians) {\n  return map(radians, function (angle) {\n    return Math.acos(angle);\n  });\n}\nexport function atan(radians) {\n  return map(radians, function (angle) {\n    return Math.atan(angle);\n  });\n}\nexport function clamp(value, min, max) {\n  return map(value, function (value) {\n    return Math.max(min, Math.min(max, value));\n  });\n}\nexport function lerp(a, b, t) {\n  if (isArray(a)) {\n    return a.map(function (ai, i) {\n      return lerp(ai, b[i], t);\n    });\n  }\n\n  return t * b + (1 - t) * a;\n}\nexport function equals(a, b, epsilon) {\n  var oldEpsilon = config.EPSILON;\n\n  if (epsilon) {\n    config.EPSILON = epsilon;\n  }\n\n  try {\n    if (a === b) {\n      return true;\n    }\n\n    if (isArray(a) && isArray(b)) {\n      if (a.length !== b.length) {\n        return false;\n      }\n\n      for (var i = 0; i < a.length; ++i) {\n        if (!equals(a[i], b[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    if (a && _typeof(a) === 'object' && a.equals) {\n      return a.equals(b);\n    }\n\n    if (b && _typeof(b) === 'object' && b.equals) {\n      return b.equals(a);\n    }\n\n    return Math.abs(a - b) <= config.EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n  } finally {\n    config.EPSILON = oldEpsilon;\n  }\n}\nexport function exactEquals(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a && _typeof(a) === 'object' && b && _typeof(b) === 'object') {\n    if (a.constructor !== b.constructor) {\n      return false;\n    }\n\n    if (a.exactEquals) {\n      return a.exactEquals(b);\n    }\n  }\n\n  if (isArray(a) && isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; ++i) {\n      if (!exactEquals(a[i], b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\nexport function withEpsilon(EPSILON, func) {\n  var oldPrecision = config.EPSILON;\n  config.EPSILON = EPSILON;\n  var value;\n\n  try {\n    value = func();\n  } finally {\n    config.EPSILON = oldPrecision;\n  }\n\n  return value;\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","export function vec2_transformMat4AsVector(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  var w = m[3] * x + m[7] * y || 1.0;\n  out[0] = (m[0] * x + m[4] * y) / w;\n  out[1] = (m[1] * x + m[5] * y) / w;\n  return out;\n}\nexport function vec3_transformMat4AsVector(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n  return out;\n}\nexport function vec3_transformMat2(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  out[2] = a[2];\n  return out;\n}\nexport function vec4_transformMat2(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\nexport function vec4_transformMat3(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  out[0] = m[0] * x + m[3] * y + m[6] * z;\n  out[1] = m[1] * x + m[4] * y + m[7] * z;\n  out[2] = m[2] * x + m[5] * y + m[8] * z;\n  out[3] = a[3];\n  return out;\n}","import \"core-js/modules/es6.typed.float32-array\";\n\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","import getPrototypeOf from \"./getPrototypeOf\";\nimport setPrototypeOf from \"./setPrototypeOf\";\nimport isNativeFunction from \"./isNativeFunction\";\nimport construct from \"./construct\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-finite\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.typed.float32-array\";\nimport \"core-js/modules/es6.array.is-array\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport { config, formatValue, equals as _equals, isArray } from '../../lib/common';\n\nvar MathArray = function (_Array) {\n  _inherits(MathArray, _Array);\n\n  function MathArray() {\n    _classCallCheck(this, MathArray);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MathArray).apply(this, arguments));\n  }\n\n  _createClass(MathArray, [{\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor().copy(this);\n    }\n  }, {\n    key: \"from\",\n    value: function from(arrayOrObject) {\n      return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : this.fromObject(arrayOrObject);\n    }\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(array) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = array[i + offset];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"to\",\n    value: function to(arrayOrObject) {\n      if (arrayOrObject === this) {\n        return this;\n      }\n\n      return isArray(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);\n    }\n  }, {\n    key: \"toTarget\",\n    value: function toTarget(target) {\n      return target ? this.to(target) : this;\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        array[offset + i] = this[i];\n      }\n\n      return array;\n    }\n  }, {\n    key: \"toFloat32Array\",\n    value: function toFloat32Array() {\n      return new Float32Array(this);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.formatString(config);\n    }\n  }, {\n    key: \"formatString\",\n    value: function formatString(opts) {\n      var string = '';\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        string += (i > 0 ? ', ' : '') + formatValue(this[i], opts);\n      }\n\n      return \"\".concat(opts.printTypes ? this.constructor.name : '', \"[\").concat(string, \"]\");\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(array) {\n      if (!array || this.length !== array.length) {\n        return false;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        if (!_equals(this[i], array[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"exactEquals\",\n    value: function exactEquals(array) {\n      if (!array || this.length !== array.length) {\n        return false;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        if (this[i] !== array[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = -this[i];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lerp\",\n    value: function lerp(a, b, t) {\n      if (t === undefined) {\n        t = b;\n        b = a;\n        a = this;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        var ai = a[i];\n        this[i] = ai + t * (b[i] - ai);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"min\",\n    value: function min(vector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(vector[i], this[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"max\",\n    value: function max(vector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.max(vector[i], this[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"clamp\",\n    value: function clamp(minVector, maxVector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(Math.max(this[i], minVector[i]), maxVector[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"add\",\n    value: function add() {\n      for (var _len = arguments.length, vectors = new Array(_len), _key = 0; _key < _len; _key++) {\n        vectors[_key] = arguments[_key];\n      }\n\n      for (var _i = 0, _vectors = vectors; _i < _vectors.length; _i++) {\n        var vector = _vectors[_i];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] += vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract() {\n      for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        vectors[_key2] = arguments[_key2];\n      }\n\n      for (var _i2 = 0, _vectors2 = vectors; _i2 < _vectors2.length; _i2++) {\n        var vector = _vectors2[_i2];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] -= vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(_scale) {\n      if (Array.isArray(_scale)) {\n        return this.multiply(_scale);\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= _scale;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(a) {\n      return this.subtract(a);\n    }\n  }, {\n    key: \"setScalar\",\n    value: function setScalar(a) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = a;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"addScalar\",\n    value: function addScalar(a) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] += a;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"subScalar\",\n    value: function subScalar(a) {\n      return this.addScalar(-a);\n    }\n  }, {\n    key: \"multiplyScalar\",\n    value: function multiplyScalar(scalar) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= scalar;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"divideScalar\",\n    value: function divideScalar(a) {\n      return this.scale(1 / a);\n    }\n  }, {\n    key: \"clampScalar\",\n    value: function clampScalar(min, max) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(Math.max(this[i], min), max);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"multiplyByScalar\",\n    value: function multiplyByScalar(scalar) {\n      return this.scale(scalar);\n    }\n  }, {\n    key: \"check\",\n    value: function check() {\n      if (config.debug && !this.validate(this)) {\n        throw new Error(\"math.gl: \".concat(this.constructor.name, \" some fields set to invalid numbers'\"));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      var valid = this.length === this.ELEMENTS;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        valid = valid && Number.isFinite(this[i]);\n      }\n\n      return valid;\n    }\n  }, {\n    key: \"elements\",\n    get: function get() {\n      return this;\n    }\n  }]);\n\n  return MathArray;\n}(_wrapNativeSuper(Array));\n\nexport { MathArray as default };"],"sourceRoot":""}