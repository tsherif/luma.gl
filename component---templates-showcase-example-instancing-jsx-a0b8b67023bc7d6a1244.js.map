{"version":3,"sources":["webpack:///../modules/engine/src/animation/timeline.js","webpack:///../modules/engine/src/geometries/cube-geometry.js","webpack:///../modules/engine/src/geometry/geometry.js","webpack:///../modules/shadertools/src/modules/project/project.js","webpack:///../modules/shadertools/src/modules/dirlight/dirlight.js","webpack:///../modules/shadertools/src/modules/picking/picking.js","webpack:///../examples/utils/index.js","webpack:///../examples/showcase/instancing/app.js","webpack:///./templates/showcase/example-instancing.jsx"],"names":["channelHandles","animationHandles","Timeline","this","time","channels","animations","playing","lastEngineTime","addChannel","props","delay","duration","Number","rate","handle","channel","repeat","_setChannelTime","set","removeChannel","delete","animationHandle","animation","detachAnimation","isFinished","get","getTime","setTime","Math","animationData","play","pause","reset","attachAnimation","channelHandle","update","engineTime","offsetTime","CUBE_INDICES","Uint16Array","CUBE_POSITIONS","Float32Array","CUBE_NORMALS","CUBE_TEX_COORDS","ATTRIBUTES","POSITION","size","value","NORMAL","TEXCOORD_0","CubeGeometry","id","uid","indices","attributes","Geometry","DRAW_MODE","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","drawMode","vertexCount","userData","_setAttributes","_calculateVertexCount","getVertexCount","getAttributes","_print","ArrayBuffer","attribute","assert","attributeName","isIndexed","Object","IDENTITY_MATRIX","DEFAULT_MODULE_OPTIONS","modelMatrix","viewMatrix","projectionMatrix","cameraPositionWorld","name","getUniforms","opts","prevUniforms","uniforms","vs","common","fs","lightDirection","dependencies","project","pickingSelectedColor","pickingHighlightColor","Uint8Array","pickingActive","pickingAttribute","selectedColor","x","Boolean","MiniAnimationLoop","start","stop","_setDisplay","_getCanvas","canvas","document","dpr","window","getRandom","s","c","n","random","SIDE","InstancedCube","offsets","i","j","y","pickingColors","Uint8ClampedArray","colors","offsetsBuffer","colorsBuffer","pickingColorsBuffer","programManager","ProgramManager","hook","injection","order","POSITIVE_INFINITY","modules","dirlight","isInstanced","instanceCount","geometry","instanceSizes","instanceOffsets","divisor","instanceColors","instancePickingColors","Model","AppAnimationLoop","createFramebuffer","debug","getInfo","onInitialize","gl","_animationLoop","setParameters","clearColor","clearDepth","depthTest","depthFunc","LEQUAL","attachTimeline","timeline","timelineChannels","timeChannel","eyeXChannel","eyeYChannel","eyeZChannel","cube","onRender","animationProps","aspect","tick","framebuffer","_mousePosition","devicePixels","cssToDevicePixels","color","depth","model","picking_uActive","readPixelsToArray","sourceX","sourceY","sourceWidth","sourceHeight","sourceFormat","sourceType","UNSIGNED_BYTE","pickInstance","setUniforms","uTime","uProjection","fov","radians","near","far","uView","center","eye","uModel","draw","onFinalize","AnimationLoop","animationLoop","Example","render","pageContext","exampleConfig","React","Component"],"mappings":"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","file":"component---templates-showcase-example-instancing-jsx-a0b8b67023bc7d6a1244.js","sourcesContent":["let channelHandles = 1;\nlet animationHandles = 1;\n\nexport class Timeline {\n  constructor() {\n    this.time = 0;\n    this.channels = new Map();\n    this.animations = new Map();\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  addChannel(props) {\n    const {delay = 0, duration = Number.POSITIVE_INFINITY, rate = 1, repeat = 1} = props;\n\n    const handle = channelHandles++;\n    const channel = {\n      time: 0,\n      delay,\n      duration,\n      rate,\n      repeat\n    };\n    this._setChannelTime(channel, this.time);\n    this.channels.set(handle, channel);\n\n    return handle;\n  }\n\n  removeChannel(handle) {\n    this.channels.delete(handle);\n\n    for (const [animationHandle, animation] of this.animations) {\n      if (animation.channel === handle) {\n        this.detachAnimation(animationHandle);\n      }\n    }\n  }\n\n  isFinished(handle) {\n    const channel = this.channels.get(handle);\n    if (channel === undefined) {\n      return false;\n    }\n\n    return this.time >= channel.delay + channel.duration * channel.repeat;\n  }\n\n  getTime(handle) {\n    if (handle === undefined) {\n      return this.time;\n    }\n\n    const channel = this.channels.get(handle);\n\n    if (channel === undefined) {\n      return -1;\n    }\n\n    return channel.time;\n  }\n\n  setTime(time) {\n    this.time = Math.max(0, time);\n\n    const channels = this.channels.values();\n    for (const channel of channels) {\n      this._setChannelTime(channel, this.time);\n    }\n\n    const animations = this.animations.values();\n    for (const animationData of animations) {\n      const {animation, channel} = animationData;\n      animation.setTime(this.getTime(channel));\n    }\n  }\n\n  play() {\n    this.playing = true;\n  }\n\n  pause() {\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  reset() {\n    this.setTime(0);\n  }\n\n  attachAnimation(animation, channelHandle) {\n    const animationHandle = animationHandles++;\n\n    this.animations.set(animationHandle, {\n      animation,\n      channel: channelHandle\n    });\n\n    animation.setTime(this.getTime(channelHandle));\n\n    return animationHandle;\n  }\n\n  detachAnimation(handle) {\n    this.animations.delete(handle);\n  }\n\n  update(engineTime) {\n    if (this.playing) {\n      if (this.lastEngineTime === -1) {\n        this.lastEngineTime = engineTime;\n      }\n      this.setTime(this.time + (engineTime - this.lastEngineTime));\n      this.lastEngineTime = engineTime;\n    }\n  }\n\n  _setChannelTime(channel, time) {\n    const offsetTime = time - channel.delay;\n    const totalDuration = channel.duration * channel.repeat;\n    // Note(Tarek): Don't loop on final repeat.\n    if (offsetTime >= totalDuration) {\n      channel.time = channel.duration * channel.rate;\n    } else {\n      channel.time = Math.max(0, offsetTime) % channel.duration;\n      channel.time *= channel.rate;\n    }\n  }\n}\n","import Geometry from '../geometry/geometry';\nimport {uid} from '@luma.gl/webgl';\n\n// prettier-ignore\nconst CUBE_INDICES = new Uint16Array([\n  0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13,\n  14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23\n]);\n\n// prettier-ignore\nconst CUBE_POSITIONS = new Float32Array([\n  -1,  -1,  1, 1,  -1,  1,  1,  1,  1,  -1,  1,  1,\n  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1,  -1,\n  -1,  1,  -1,  -1,  1,  1,  1,  1,  1,  1,  1,  -1,\n  -1,  -1,  -1,  1,  -1,  -1,  1,  -1,  1,  -1,  -1,  1,\n  1,  -1,  -1,  1,  1,  -1,  1,  1,  1,  1,  -1,  1,\n  -1,  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1\n]);\n\n// TODO - could be Uint8\n// prettier-ignore\nconst CUBE_NORMALS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,\n  // Back face\n  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,\n  // Top face\n  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,\n  // Bottom face\n  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,\n  // Right face\n  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,\n  // Left face\n  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0\n]);\n\n// prettier-ignore\nconst CUBE_TEX_COORDS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  1,  1,  0,  1,\n  // Back face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Top face\n  0,  1,  0,  0,  1,  0,  1,  1,\n  // Bottom face\n  1,  1,  0,  1,  0,  0,  1,  0,\n  // Right face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Left face\n  0,  0,  1,  0,  1,  1,  0,  1\n]);\n\nconst ATTRIBUTES = {\n  POSITION: {size: 3, value: new Float32Array(CUBE_POSITIONS)},\n  NORMAL: {size: 3, value: new Float32Array(CUBE_NORMALS)},\n  TEXCOORD_0: {size: 2, value: new Float32Array(CUBE_TEX_COORDS)}\n};\n\nexport default class CubeGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('cube-geometry')} = props;\n    super({\n      ...props,\n      id,\n      indices: {size: 1, value: new Uint16Array(CUBE_INDICES)},\n      attributes: {...ATTRIBUTES, ...props.attributes}\n    });\n  }\n}\n","import {uid, assert} from '@luma.gl/webgl';\n\n// Rendering primitives - specify how to extract primitives from vertices.\n// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants\nexport const DRAW_MODE = {\n  POINTS: 0x0000, // draw single points.\n  LINES: 0x0001, // draw lines. Each vertex connects to the one after it.\n  LINE_LOOP: 0x0002, // draw lines. Each set of two vertices is treated as a separate line segment.\n  LINE_STRIP: 0x0003, // draw a connected group of line segments from the first vertex to the last\n  TRIANGLES: 0x0004, // draw triangles. Each set of three vertices creates a separate triangle.\n  TRIANGLE_STRIP: 0x0005, // draw a connected group of triangles.\n  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.\n  // Each vertex connects to the previous and the first vertex in the fan.\n};\n\nexport default class Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n\n  constructor(props = {}) {\n    const {\n      id = uid('geometry'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n\n    // stubRemovedMethods(this, [\n    //   'setNeedsRedraw', 'needsRedraw', 'setAttributes'\n    // ], 'Immutable');\n\n    // stubRemovedMethods(this, [\n    //   'hasAttribute', 'getAttribute', 'getArray'\n    // ], 'Use geometry.attributes and geometry.indices');\n\n    // deprecateMethods(this, ['getAttributes'])\n  }\n\n  get mode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  // Return an object with all attributes plus indices added as a field.\n  getAttributes() {\n    return this.indices ? {indices: this.indices, ...this.attributes} : this.attributes;\n  }\n\n  // PRIVATE\n\n  _print(attributeName) {\n    return `Geometry ${this.id} attribute ${attributeName}`;\n  }\n\n  // Attribute\n  // value: typed array\n  // type: indices, vertices, uvs\n  // size: elements per vertex\n  // target: WebGL buffer type (string or constant)\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {value: indices, size: 1} : indices;\n    }\n\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n\n      // Wrap \"unwrapped\" arrays and try to autodetect their type\n      attribute = ArrayBuffer.isView(attribute) ? {value: attribute} : attribute;\n\n      assert(\n        ArrayBuffer.isView(attribute.value),\n        `${this._print(attributeName)}: must be typed array or object with value as typed array`\n      );\n\n      if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n        attribute.size = 3;\n      }\n\n      // Move indices to separate field\n      if (attributeName === 'indices') {\n        assert(!this.indices);\n        this.indices = attribute;\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n\n    if (this.indices && this.indices.isIndexed !== undefined) {\n      this.indices = Object.assign({}, this.indices);\n      delete this.indices.isIndexed;\n    }\n\n    return this;\n  }\n\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n    let vertexCount = Infinity;\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {value, size, constant} = attribute;\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n\n    assert(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n}\n","import {Matrix4} from 'math.gl';\n\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\nconst DEFAULT_MODULE_OPTIONS = {\n  modelMatrix: IDENTITY_MATRIX,\n  viewMatrix: IDENTITY_MATRIX,\n  projectionMatrix: IDENTITY_MATRIX,\n  cameraPositionWorld: [0, 0, 0]\n};\n\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS, prevUniforms = {}) {\n  // const viewProjectionInverse = viewProjection.invert();\n  // viewInverseMatrix: view.invert(),\n  // viewProjectionInverseMatrix: viewProjectionInverse\n\n  const uniforms = {};\n  if (opts.modelMatrix !== undefined) {\n    uniforms.modelMatrix = opts.modelMatrix;\n  }\n  if (opts.viewMatrix !== undefined) {\n    uniforms.viewMatrix = opts.viewMatrix;\n  }\n  if (opts.projectionMatrix !== undefined) {\n    uniforms.projectionMatrix = opts.projectionMatrix;\n  }\n  if (opts.cameraPositionWorld !== undefined) {\n    uniforms.cameraPositionWorld = opts.cameraPositionWorld;\n  }\n\n  // COMPOSITE UNIFORMS\n  if (opts.projectionMatrix !== undefined || opts.viewMatrix !== undefined) {\n    uniforms.viewProjectionMatrix = new Matrix4(opts.projectionMatrix).multiplyRight(\n      opts.viewMatrix\n    );\n  }\n\n  return uniforms;\n}\n\nconst common = `\\\nvarying vec4 project_vPositionWorld;\nvarying vec3 project_vNormalWorld;\n\nvec4 project_getPosition_World() {\n  return project_vPositionWorld;\n}\n\nvec3 project_getNormal_World() {\n  return project_vNormalWorld;\n}\n`;\n\nconst vs = `\\\n${common}\n\n// Unprefixed uniforms\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewProjectionMatrix;\nuniform vec3 cameraPositionWorld;\n\nstruct World {\n  vec3 position;\n  vec3 normal;\n};\n\nWorld world;\n\nvoid project_setPosition(vec4 position) {\n  project_vPositionWorld = position;\n}\n\nvoid project_setNormal(vec3 normal) {\n  project_vNormalWorld = normal;\n}\n\nvoid project_setPositionAndNormal_World(vec3 position, vec3 normal) {\n  world.position = position;\n  world.normal = normal;\n}\n\nvoid project_setPositionAndNormal_Model(vec3 position, vec3 normal) {\n  world.position = (modelMatrix * vec4(position, 1.)).xyz;\n  world.normal = mat3(modelMatrix) * normal;\n}\n\nvec4 project_model_to_clipspace(vec4 position) {\n  return viewProjectionMatrix * modelMatrix * position;\n}\n\nvec4 project_model_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * modelMatrix * vec4(position, 1.);\n}\n\nvec4 project_world_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_view_to_clipspace(vec3 position) {\n  return projectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n`;\n\nconst fs = `\n${common}\\\n`;\n\nexport default {\n  name: 'project',\n  getUniforms,\n  vs,\n  fs\n};\n","// Cheap lighting - single directional light, single dot product, one uniform\n\nimport project from '../project/project';\n\n/* eslint-disable camelcase */\nconst DEFAULT_LIGHT_DIRECTION = new Float32Array([1, 1, 2]);\n\nconst DEFAULT_MODULE_OPTIONS = {\n  lightDirection: DEFAULT_LIGHT_DIRECTION\n};\n\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS) {\n  const uniforms = {};\n  if (opts.lightDirection) {\n    uniforms.dirlight_uLightDirection = opts.lightDirection;\n  }\n  return uniforms;\n}\n\n// TODO - reuse normal from geometry module\nconst vs = null;\n\nconst fs = `\\\nuniform vec3 dirlight_uLightDirection;\n\n/*\n * Returns color attenuated by angle from light source\n */\nvec4 dirlight_filterColor(vec4 color) {\n  vec3 normal = project_getNormal_World();\n  float d = abs(dot(normalize(normal), normalize(dirlight_uLightDirection)));\n  return vec4(color.rgb * d, color.a);\n}\n`;\n\nexport default {\n  name: 'dirlight',\n  vs,\n  fs,\n  getUniforms,\n  dependencies: [project]\n};\n","const DEFAULT_HIGHLIGHT_COLOR = new Uint8Array([0, 255, 255, 255]);\n\nconst DEFAULT_MODULE_OPTIONS = {\n  pickingSelectedColor: null, //  Set to a picking color to visually highlight that item\n  pickingHighlightColor: DEFAULT_HIGHLIGHT_COLOR, // Color of visual highlight of \"selected\" item\n  pickingActive: false, // Set to true when rendering to off-screen \"picking\" buffer\n  pickingAttribute: false // Set to true when picking an attribute value instead of object index\n};\n\n/* eslint-disable camelcase */\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS) {\n  const uniforms = {};\n  if (opts.pickingSelectedColor !== undefined) {\n    if (!opts.pickingSelectedColor) {\n      uniforms.picking_uSelectedColorValid = 0;\n    } else {\n      const selectedColor = opts.pickingSelectedColor.slice(0, 3);\n      uniforms.picking_uSelectedColorValid = 1;\n      uniforms.picking_uSelectedColor = selectedColor;\n    }\n  }\n  if (opts.pickingHighlightColor) {\n    uniforms.picking_uHighlightColor = opts.pickingHighlightColor.map(x => x / 255);\n  }\n  if (opts.pickingActive !== undefined) {\n    uniforms.picking_uActive = Boolean(opts.pickingActive);\n    uniforms.picking_uAttribute = Boolean(opts.pickingAttribute);\n  }\n  return uniforms;\n}\n\nconst vs = `\\\nuniform bool picking_uActive;\nuniform bool picking_uAttribute;\nuniform vec3 picking_uSelectedColor;\nuniform bool picking_uSelectedColorValid;\n\nout vec4 picking_vRGBcolor_Avalid;\n\nconst float COLOR_SCALE = 1. / 255.;\n\nbool picking_isColorValid(vec3 color) {\n  return dot(color, vec3(1.0)) > 0.001;\n}\n\nbool isVertexPicked(vec3 vertexColor) {\n  return\n    picking_uSelectedColorValid &&\n    !picking_isColorValid(abs(vertexColor - picking_uSelectedColor));\n}\n\nvoid picking_setPickingColor(vec3 pickingColor) {\n  if (picking_uActive) {\n    // Use alpha as the validity flag. If pickingColor is [0, 0, 0] fragment is non-pickable\n    picking_vRGBcolor_Avalid.a = float(picking_isColorValid(pickingColor));\n\n    if (!picking_uAttribute) {\n      // Stores the picking color so that the fragment shader can render it during picking\n      picking_vRGBcolor_Avalid.rgb = pickingColor * COLOR_SCALE;\n    }\n  } else {\n    // Do the comparison with selected item color in vertex shader as it should mean fewer compares\n    picking_vRGBcolor_Avalid.a = float(isVertexPicked(pickingColor));\n  }\n}\n\nvoid picking_setPickingAttribute(float value) {\n  if (picking_uAttribute) {\n    picking_vRGBcolor_Avalid.r = value;\n  }\n}\nvoid picking_setPickingAttribute(vec2 value) {\n  if (picking_uAttribute) {\n    picking_vRGBcolor_Avalid.rg = value;\n  }\n}\nvoid picking_setPickingAttribute(vec3 value) {\n  if (picking_uAttribute) {\n    picking_vRGBcolor_Avalid.rgb = value;\n  }\n}\n`;\n\nconst fs = `\\\nuniform bool picking_uActive;\nuniform vec3 picking_uSelectedColor;\nuniform vec4 picking_uHighlightColor;\n\nin vec4 picking_vRGBcolor_Avalid;\n\n/*\n * Returns highlight color if this item is selected.\n */\nvec4 picking_filterHighlightColor(vec4 color) {\n  if (picking_uActive) {\n    return color;\n  }\n  bool selected = bool(picking_vRGBcolor_Avalid.a);\n\n  if (selected) {\n    float highLightAlpha = picking_uHighlightColor.a;\n    float blendedAlpha = highLightAlpha + color.a * (1.0 - highLightAlpha);\n    float highLightRatio = highLightAlpha / blendedAlpha;\n\n    vec3 blendedRGB = mix(color.rgb, picking_uHighlightColor.rgb, highLightRatio);\n    return vec4(blendedRGB, blendedAlpha);\n  } else {\n    return color;\n  }\n}\n\n/*\n * Returns picking color if picking enabled else unmodified argument.\n */\nvec4 picking_filterPickingColor(vec4 color) {\n  if (picking_uActive) {\n    if (picking_vRGBcolor_Avalid.a == 0.0) {\n      discard;\n    }\n    return picking_vRGBcolor_Avalid;\n  }\n  return color;\n}\n\n/*\n * Returns picking color if picking is enabled if not\n * highlight color if this item is selected, otherwise unmodified argument.\n */\nvec4 picking_filterColor(vec4 color) {\n  vec4 highightColor = picking_filterHighlightColor(color);\n  return picking_filterPickingColor(highightColor);\n}\n\n`;\n\nexport default {\n  name: 'picking',\n  vs,\n  fs,\n  getUniforms\n};\n","/* global window, document */\n\n// Light class implementing the AnimationLoop interface\n// use by examples w/o creating a gl context\nexport class MiniAnimationLoop {\n  static getInfo() {\n    return '';\n  }\n\n  start() {}\n\n  stop() {}\n\n  delete() {}\n\n  _setDisplay() {}\n\n  _getCanvas(props = {}) {\n    let canvas;\n    if (props.canvas) {\n      canvas = document.getElementById(props.canvas);\n      const dpr = window.devicePixelRatio || 1;\n      canvas.height = canvas.clientHeight * dpr;\n      canvas.width = canvas.clientWidth * dpr;\n    } else {\n      canvas = document.createElement('canvas');\n      canvas.width = 800;\n      canvas.height = 600;\n      document.body.appendChild(canvas);\n    }\n\n    return canvas;\n  }\n}\n\n// Create a deterministic pseudorandom number generator\nexport function getRandom() {\n  let s = 1;\n  let c = 1;\n  return () => {\n    s = Math.sin(c * 17.23);\n    c = Math.cos(s * 27.92);\n    return fract(Math.abs(s * c) * 1432.71);\n  };\n}\n\nfunction fract(n) {\n  return n - Math.floor(n);\n}\n","import {AnimationLoop, CubeGeometry, Timeline, Model, ProgramManager} from '@luma.gl/engine';\nimport {readPixelsToArray, Buffer} from '@luma.gl/webgl';\nimport {setParameters} from '@luma.gl/gltools';\nimport {picking, dirlight} from '@luma.gl/shadertools';\nimport {cssToDevicePixels} from '@luma.gl/webgl';\nimport {Matrix4, radians} from 'math.gl';\nimport {getRandom} from '../../utils';\n\nconst INFO_HTML = `\n<p>\nCube drawn with <b>instanced rendering</b>.\n<p>\nA luma.gl <code>Cube</code>, rendering 65,536 instances in a\nsingle GPU draw call using instanced vertex attributes.\n`;\n\nconst random = getRandom();\n\nconst SIDE = 256;\n\n// Make a cube with 65K instances and attributes to control offset and color of each instance\nclass InstancedCube extends Model {\n  constructor(gl, props) {\n    let offsets = [];\n    for (let i = 0; i < SIDE; i++) {\n      const x = ((-SIDE + 1) * 3) / 2 + i * 3;\n      for (let j = 0; j < SIDE; j++) {\n        const y = ((-SIDE + 1) * 3) / 2 + j * 3;\n        offsets.push(x, y);\n      }\n    }\n    offsets = new Float32Array(offsets);\n\n    const pickingColors = new Uint8ClampedArray(SIDE * SIDE * 2);\n    for (let i = 0; i < SIDE; i++) {\n      for (let j = 0; j < SIDE; j++) {\n        pickingColors[(i * SIDE + j) * 2 + 0] = i;\n        pickingColors[(i * SIDE + j) * 2 + 1] = j;\n      }\n    }\n\n    const colors = new Float32Array(SIDE * SIDE * 3).map((n, i) => random() * 0.75 + 0.25);\n\n    const vs = `\\\nattribute float instanceSizes;\nattribute vec3 positions;\nattribute vec3 normals;\nattribute vec2 instanceOffsets;\nattribute vec3 instanceColors;\nattribute vec2 instancePickingColors;\n\nuniform mat4 uModel;\nuniform mat4 uView;\nuniform mat4 uProjection;\nuniform float uTime;\n\nvarying vec3 color;\n\nvoid main(void) {\n  vec3 normal = vec3(uModel * vec4(normals, 1.0));\n\n  // Set up data for modules\n  color = instanceColors;\n  project_setNormal(normal);\n  vec4 pickColor = vec4(0., instancePickingColors, 1.0);\n  MY_SHADER_HOOK_pickColor(pickColor);\n\n  // Vertex position (z coordinate undulates with time), and model rotates around center\n  float delta = length(instanceOffsets);\n  vec4 offset = vec4(instanceOffsets, sin((uTime + delta) * 0.1) * 16.0, 0);\n  gl_Position = uProjection * uView * (uModel * vec4(positions * instanceSizes, 1.0) + offset);\n}\n`;\n    const fs = `\\\nprecision highp float;\n\nvarying vec3 color;\n\nvoid main(void) {\n  gl_FragColor = vec4(color, 1.);\n  MY_SHADER_HOOK_fragmentColor(gl_FragColor);\n}\n`;\n\n    const offsetsBuffer = new Buffer(gl, offsets);\n    const colorsBuffer = new Buffer(gl, colors);\n    const pickingColorsBuffer = new Buffer(gl, pickingColors);\n\n    const programManager = ProgramManager.getDefaultProgramManager(gl);\n\n    programManager.addShaderHook('vs:MY_SHADER_HOOK_pickColor(inout vec4 color)');\n\n    programManager.addShaderHook('fs:MY_SHADER_HOOK_fragmentColor(inout vec4 color)');\n\n    programManager.addModuleInjection('picking', {\n      hook: 'vs:MY_SHADER_HOOK_pickColor',\n      injection: 'picking_setPickingColor(color.rgb);'\n    });\n\n    programManager.addModuleInjection('dirlight', {\n      hook: 'fs:MY_SHADER_HOOK_fragmentColor',\n      injection: 'color = dirlight_filterColor(color);'\n    });\n\n    programManager.addModuleInjection('picking', {\n      hook: 'fs:MY_SHADER_HOOK_fragmentColor',\n      injection: 'color = picking_filterColor(color);',\n      order: Number.POSITIVE_INFINITY\n    });\n\n    super(\n      gl,\n      Object.assign({}, props, {\n        vs,\n        fs,\n        modules: [dirlight, picking],\n        isInstanced: 1,\n        instanceCount: SIDE * SIDE,\n        geometry: new CubeGeometry(),\n        attributes: {\n          instanceSizes: new Float32Array([1]), // Constant attribute\n          instanceOffsets: [offsetsBuffer, {divisor: 1}],\n          instanceColors: [colorsBuffer, {divisor: 1}],\n          instancePickingColors: [pickingColorsBuffer, {divisor: 1}]\n        }\n      })\n    );\n  }\n}\n\nexport default class AppAnimationLoop extends AnimationLoop {\n  constructor() {\n    super({createFramebuffer: true, debug: true});\n  }\n\n  static getInfo() {\n    return INFO_HTML;\n  }\n\n  onInitialize({gl, _animationLoop}) {\n    setParameters(gl, {\n      clearColor: [0, 0, 0, 1],\n      clearDepth: 1,\n      depthTest: true,\n      depthFunc: gl.LEQUAL\n    });\n\n    this.attachTimeline(new Timeline());\n    this.timeline.play();\n\n    const timelineChannels = {\n      timeChannel: this.timeline.addChannel({\n        rate: 0.01\n      }),\n\n      eyeXChannel: this.timeline.addChannel({\n        rate: 0.0003\n      }),\n\n      eyeYChannel: this.timeline.addChannel({\n        rate: 0.0004\n      }),\n\n      eyeZChannel: this.timeline.addChannel({\n        rate: 0.0002\n      })\n    };\n\n    this.cube = new InstancedCube(gl);\n\n    return {timelineChannels};\n  }\n\n  onRender(animationProps) {\n    const {gl, aspect, tick, timelineChannels} = animationProps;\n    const {framebuffer, _mousePosition} = animationProps;\n    const {timeChannel, eyeXChannel, eyeYChannel, eyeZChannel} = timelineChannels;\n\n    if (_mousePosition) {\n      // use the center pixel location in device pixel range\n      const devicePixels = cssToDevicePixels(gl, _mousePosition);\n      const deviceX = devicePixels.x + Math.floor(devicePixels.width / 2);\n      const deviceY = devicePixels.y + Math.floor(devicePixels.height / 2);\n\n      pickInstance(gl, deviceX, deviceY, this.cube, framebuffer);\n    }\n\n    // Draw the cubes\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    this.cube.setUniforms({\n      uTime: this.timeline.getTime(timeChannel),\n      // Basic projection matrix\n      uProjection: new Matrix4().perspective({fov: radians(60), aspect, near: 1, far: 2048.0}),\n      // Move the eye around the plane\n      uView: new Matrix4().lookAt({\n        center: [0, 0, 0],\n        eye: [\n          (Math.cos(this.timeline.getTime(eyeXChannel)) * SIDE) / 2,\n          (Math.sin(this.timeline.getTime(eyeYChannel)) * SIDE) / 2,\n          ((Math.sin(this.timeline.getTime(eyeZChannel)) + 1) * SIDE) / 4 + 32\n        ]\n      }),\n      // Rotate all the individual cubes\n      uModel: new Matrix4().rotateX(tick * 0.01).rotateY(tick * 0.013)\n    });\n    this.cube.draw();\n  }\n\n  onFinalize({gl}) {\n    this.cube.delete();\n  }\n}\n\nfunction pickInstance(gl, pickX, pickY, model, framebuffer) {\n  framebuffer.clear({color: true, depth: true});\n  // Render picking colors\n  /* eslint-disable camelcase */\n  model.setUniforms({picking_uActive: 1});\n  model.draw({framebuffer});\n  model.setUniforms({picking_uActive: 0});\n\n  const color = readPixelsToArray(framebuffer, {\n    sourceX: pickX,\n    sourceY: pickY,\n    sourceWidth: 1,\n    sourceHeight: 1,\n    sourceFormat: gl.RGBA,\n    sourceType: gl.UNSIGNED_BYTE\n  });\n\n  if (color[0] + color[1] + color[2] > 0) {\n    model.updateModuleSettings({\n      pickingSelectedColor: color\n    });\n  } else {\n    model.updateModuleSettings({\n      pickingSelectedColor: null\n    });\n  }\n}\n\n/* global window */\nif (typeof window !== 'undefined' && !window.website) {\n  const animationLoop = new AppAnimationLoop();\n  animationLoop.start();\n}\n","import React from 'react';\nimport AnimationLoopExamplePage from '../../src/components/animation-loop-example-page';\nimport AnimationLoop from '../../../examples/showcase/instancing/app';\n\nexport default class Example extends React.Component {\n  render() {\n    const { pageContext } = this.props;\n    const exampleConfig = (pageContext && pageContext.exampleConfig) || {};\n    return (\n      <AnimationLoopExamplePage AnimationLoop={AnimationLoop} exampleConfig={exampleConfig} />\n    );\n  }\n}\n"],"sourceRoot":""}