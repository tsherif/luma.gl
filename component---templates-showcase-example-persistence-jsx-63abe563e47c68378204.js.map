{"version":3,"sources":["webpack:///../node_modules/math.gl/dist/esm/lib/validators.js","webpack:///../modules/engine/src/geometries/ico-sphere-geometry.js","webpack:///../examples/showcase/persistence/app.js","webpack:///./templates/showcase/example-persistence.jsx","webpack:///../node_modules/math.gl/dist/esm/lib/assert.js","webpack:///../node_modules/gl-matrix/esm/vec4.js","webpack:///./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack:///../node_modules/gl-matrix/esm/vec3.js","webpack:///./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///../modules/engine/src/geometry/geometry.js","webpack:///./node_modules/@babel/runtime/helpers/esm/construct.js","webpack:///../node_modules/math.gl/dist/esm/classes/base/matrix.js","webpack:///../node_modules/gl-matrix/esm/mat4.js","webpack:///../node_modules/gl-matrix/esm/vec2.js","webpack:///../node_modules/math.gl/dist/esm/classes/matrix4.js","webpack:///../examples/utils/index.js","webpack:///./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack:///../node_modules/math.gl/dist/esm/lib/common.js","webpack:///./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///../node_modules/math.gl/dist/esm/classes/base/vector.js","webpack:///../node_modules/math.gl/dist/esm/classes/vector3.js","webpack:///./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack:///../node_modules/math.gl/dist/esm/lib/gl-matrix-extras.js","webpack:///../node_modules/gl-matrix/esm/common.js","webpack:///./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","webpack:///./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","webpack:///../node_modules/math.gl/dist/esm/classes/base/math-array.js"],"names":["checkNumber","value","Number","isFinite","Error","concat","checkVector","v","length","callerName","debug","i","validateVector","map","deprecated","method","version","console","warn","ICO_POSITIONS","ICO_INDICES","IcoSphereGeometry","props","id","uid","iterations","PI","Math","PI2","positions","indices","getMiddlePoint","pointMemo","key","i1","i2","x1","y1","z1","xm","ym","zm","len","indices2","j","a","b","c","normals","Array","texCoords","i3","in1","in2","in3","iu1","iu2","iu3","theta1","phi1","v1","u1","x2","y2","z2","theta2","phi2","v2","u2","x3","y3","z3","theta3","phi3","v3","u3","vec1","vec2","normal","newIndex","size","Uint16Array","attributes","POSITION","Float32Array","NORMAL","TEXCOORD_0","tesselateIcosaHedron","Geometry","SCREEN_QUAD_VS","random","getRandom","ePos","eRot","nPos","AppAnimationLoop","getInfo","onInitialize","gl","width","height","setParameters","clearColor","clearDepth","depthTest","depthFunc","faceCulling","cullFace","BACK","mainFramebuffer","pingpongFramebuffers","quadGeometry","aPosition","vertexCount","quad","program","vs","fs","geometry","persistenceQuad","sphere","pos","distanceFromCenter","q","axis","theta","rot","onRender","tick","aspect","projection","fov","radians","view","eye","clear","framebuffer","color","depth","modelMatrix","uniforms","uModelView","uView","uProjection","uColor","uLighting","translation","ppi","currentFramebuffer","nextFramebuffer","uScene","uPersistence","uRes","uTexture","AnimationLoop","window","animationLoop","Example","render","exampleConfig","this","pageContext","React","Component","assert","condition","message","clone","out","fromValues","x","y","z","w","copy","set","add","scale","sqrt","squaredLength","normalize","dot","lerp","t","ax","ay","az","aw","transformMat4","m","transformQuat","qx","qy","qz","qw","ix","iy","iz","iw","exactEquals","equals","a0","a1","a2","a3","b0","b1","b2","b3","abs","max","vec","_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","writable","configurable","cross","bx","by","bz","transformMat3","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","rotateX","p","r","cos","sin","rotateY","rotateZ","angle","tempA","tempB","cosine","acos","_slicedToArray","arr","isArray","Symbol","iterator","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","DRAW_MODE","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","drawMode","userData","_setAttributes","_calculateVertexCount","getVertexCount","getAttributes","_print","ArrayBuffer","attribute","attributeName","isIndexed","_construct","Parent","args","Class","Reflect","construct","sham","Proxy","Date","e","isNativeReflectConstruct","apply","instance","Function","bind","arguments","_MathArray","Matrix","string","printRowMajor","row","RANK","col","ELEMENTS","columnIndex","result","fill","firstIndex","columnVector","multiply","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","fovy","near","far","nf","f","tan","Infinity","center","up","x0","y0","z0","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","identity","IDENTITY","freeze","ZERO","INDICES","COL0ROW0","COL0ROW1","COL0ROW2","COL0ROW3","COL1ROW0","COL1ROW1","COL1ROW2","COL1ROW3","COL2ROW0","COL2ROW1","COL2ROW2","COL2ROW3","COL3ROW0","COL3ROW1","COL3ROW2","COL3ROW3","constants","_Matrix","Matrix4","array","_this","get","check","m00","m10","m20","m30","m01","m11","m21","m31","m02","m12","m22","m32","m03","m13","m23","m33","xx","yx","yy","zx","zy","zz","wx","wy","wz","_ref","left","right","bottom","top","_computeInfinitePerspectiveOffCenter","rl","tb","_eye","_ref2","_ref2$near","_ref2$far","lr","bt","_ref3","_ref3$fovy","_ref3$aspect","_ref3$focalDistance","focalDistance","_ref3$near","_ref3$far","halfY","ortho","_ref4","_ref4$fov","_ref4$aspect","_ref4$near","_ref4$far","scaleResult","getScale","inverseScale0","inverseScale1","inverseScale2","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","rad","s","_ref5","_ref6","rx","ry","rz","b12","b20","b21","b22","factor","vector","vec4","transformAsPoint","vec3","translate","transformAsVector","column0Row0","column1Row1","column2Row0","column2Row1","column3Row2","MiniAnimationLoop","start","stop","delete","onFinalize","_setDisplay","_getCanvas","canvas","document","dpr","_getContainer","container","parent","style","position","appendChild","_removeContainer","removeChild","n","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","DEGREES_TO_RADIANS","config","formatValue","_ref$precision","precision","round","EPSILON","parseFloat","toPrecision","isView","func","degrees","epsilon","oldEpsilon","printTypes","printDegrees","_possibleConstructorReturn","self","ReferenceError","Vector","lengthSquared","mathArray","distanceSquared","dist","product","magnitude","_len","vectors","_key","_vectors","_len2","_key2","_i2","_vectors2","distance","subtract","multiplyScalar","ORIGIN","_Vector","Vector3","object","_ref$origin","origin","_ref2$origin","_ref3$origin","matrix4","matrix3","matrix2","quaternion","_setPrototypeOf","vec2_transformMat4AsVector","vec3_transformMat4AsVector","vec3_transformMat2","ARRAY_TYPE","RANDOM","_cache","Map","fn","indexOf","has","Wrapper","enumerable","_Array","MathArray","arrayOrObject","fromObject","offset","toArray","toObject","target","to","formatString","opts","name","ai","min","minVector","maxVector","_scale","addScalar","scalar","validate","valid"],"mappings":"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","file":"component---templates-showcase-example-persistence-jsx-63abe563e47c68378204.js","sourcesContent":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-finite\";\nimport { config } from './common';\nexport function validateVector(v, length) {\n  if (v.length !== length) {\n    return false;\n  }\n\n  for (var i = 0; i < v.length; ++i) {\n    if (!Number.isFinite(v[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function checkNumber(value) {\n  if (!Number.isFinite(value)) {\n    throw new Error(\"Invalid number \".concat(value));\n  }\n\n  return value;\n}\nexport function checkVector(v, length, callerName) {\n  if (config.debug && !validateVector(v, length)) {\n    throw new Error(\"math.gl: \".concat(callerName | '', \" some fields set to invalid numbers'\"));\n  }\n\n  return v;\n}\nvar map = {};\nexport function deprecated(method, version) {\n  if (!map[method]) {\n    map[method] = true;\n    console.warn(\"\".concat(method, \" has been removed in version \").concat(version, \", see upgrade guide for more information\"));\n  }\n}","import {Vector3} from 'math.gl';\nimport Geometry from '../geometry/geometry';\nimport {uid} from '@luma.gl/webgl';\n\n/* eslint-disable comma-spacing, max-statements, complexity */\n\nconst ICO_POSITIONS = [-1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 1, 0, -1, 0, 1, 0, 0];\nconst ICO_INDICES = [3, 4, 5, 3, 5, 1, 3, 1, 0, 3, 0, 4, 4, 0, 2, 4, 2, 5, 2, 0, 1, 5, 2, 1];\n\nexport default class IcoSphereGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('ico-sphere-geometry')} = props;\n    const {indices, attributes} = tesselateIcosaHedron(props);\n    super({\n      ...props,\n      id,\n      indices,\n      attributes: {...attributes, ...props.attributes}\n    });\n  }\n}\n\nfunction tesselateIcosaHedron(props) {\n  const {iterations = 0} = props;\n\n  const PI = Math.PI;\n  const PI2 = PI * 2;\n\n  const positions = [...ICO_POSITIONS];\n  let indices = [...ICO_INDICES];\n\n  positions.push();\n  indices.push();\n\n  const getMiddlePoint = (() => {\n    const pointMemo = {};\n\n    return (i1, i2) => {\n      i1 *= 3;\n      i2 *= 3;\n      const mini = i1 < i2 ? i1 : i2;\n      const maxi = i1 > i2 ? i1 : i2;\n      const key = `${mini}|${maxi}`;\n\n      if (key in pointMemo) {\n        return pointMemo[key];\n      }\n\n      const x1 = positions[i1];\n      const y1 = positions[i1 + 1];\n      const z1 = positions[i1 + 2];\n      const x2 = positions[i2];\n      const y2 = positions[i2 + 1];\n      const z2 = positions[i2 + 2];\n      let xm = (x1 + x2) / 2;\n      let ym = (y1 + y2) / 2;\n      let zm = (z1 + z2) / 2;\n      const len = Math.sqrt(xm * xm + ym * ym + zm * zm);\n\n      xm /= len;\n      ym /= len;\n      zm /= len;\n\n      positions.push(xm, ym, zm);\n\n      return (pointMemo[key] = positions.length / 3 - 1);\n    };\n  })();\n\n  for (let i = 0; i < iterations; i++) {\n    const indices2 = [];\n    for (let j = 0; j < indices.length; j += 3) {\n      const a = getMiddlePoint(indices[j + 0], indices[j + 1]);\n      const b = getMiddlePoint(indices[j + 1], indices[j + 2]);\n      const c = getMiddlePoint(indices[j + 2], indices[j + 0]);\n\n      indices2.push(c, indices[j + 0], a, a, indices[j + 1], b, b, indices[j + 2], c, a, b, c);\n    }\n    indices = indices2;\n  }\n\n  // Calculate texCoords and normals\n  const normals = new Array(positions.length);\n  const texCoords = new Array((positions.length / 3) * 2);\n\n  const l = indices.length;\n  for (let i = l - 3; i >= 0; i -= 3) {\n    const i1 = indices[i + 0];\n    const i2 = indices[i + 1];\n    const i3 = indices[i + 2];\n    const in1 = i1 * 3;\n    const in2 = i2 * 3;\n    const in3 = i3 * 3;\n    const iu1 = i1 * 2;\n    const iu2 = i2 * 2;\n    const iu3 = i3 * 2;\n    const x1 = positions[in1 + 0];\n    const y1 = positions[in1 + 1];\n    const z1 = positions[in1 + 2];\n    const theta1 = Math.acos(z1 / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1));\n    const phi1 = Math.atan2(y1, x1) + PI;\n    const v1 = theta1 / PI;\n    const u1 = 1 - phi1 / PI2;\n    const x2 = positions[in2 + 0];\n    const y2 = positions[in2 + 1];\n    const z2 = positions[in2 + 2];\n    const theta2 = Math.acos(z2 / Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2));\n    const phi2 = Math.atan2(y2, x2) + PI;\n    const v2 = theta2 / PI;\n    const u2 = 1 - phi2 / PI2;\n    const x3 = positions[in3 + 0];\n    const y3 = positions[in3 + 1];\n    const z3 = positions[in3 + 2];\n    const theta3 = Math.acos(z3 / Math.sqrt(x3 * x3 + y3 * y3 + z3 * z3));\n    const phi3 = Math.atan2(y3, x3) + PI;\n    const v3 = theta3 / PI;\n    const u3 = 1 - phi3 / PI2;\n    const vec1 = [x3 - x2, y3 - y2, z3 - z2];\n    const vec2 = [x1 - x2, y1 - y2, z1 - z2];\n    const normal = new Vector3(vec1).cross(vec2).normalize();\n    let newIndex;\n\n    if (\n      (u1 === 0 || u2 === 0 || u3 === 0) &&\n      (u1 === 0 || u1 > 0.5) &&\n      (u2 === 0 || u2 > 0.5) &&\n      (u3 === 0 || u3 > 0.5)\n    ) {\n      positions.push(positions[in1 + 0], positions[in1 + 1], positions[in1 + 2]);\n      newIndex = positions.length / 3 - 1;\n      indices.push(newIndex);\n      texCoords[newIndex * 2 + 0] = 1;\n      texCoords[newIndex * 2 + 1] = v1;\n      normals[newIndex * 3 + 0] = normal.x;\n      normals[newIndex * 3 + 1] = normal.y;\n      normals[newIndex * 3 + 2] = normal.z;\n\n      positions.push(positions[in2 + 0], positions[in2 + 1], positions[in2 + 2]);\n      newIndex = positions.length / 3 - 1;\n      indices.push(newIndex);\n      texCoords[newIndex * 2 + 0] = 1;\n      texCoords[newIndex * 2 + 1] = v2;\n      normals[newIndex * 3 + 0] = normal.x;\n      normals[newIndex * 3 + 1] = normal.y;\n      normals[newIndex * 3 + 2] = normal.z;\n\n      positions.push(positions[in3 + 0], positions[in3 + 1], positions[in3 + 2]);\n      newIndex = positions.length / 3 - 1;\n      indices.push(newIndex);\n      texCoords[newIndex * 2 + 0] = 1;\n      texCoords[newIndex * 2 + 1] = v3;\n      normals[newIndex * 3 + 0] = normal.x;\n      normals[newIndex * 3 + 1] = normal.y;\n      normals[newIndex * 3 + 2] = normal.z;\n    }\n\n    normals[in1 + 0] = normals[in2 + 0] = normals[in3 + 0] = normal.x;\n    normals[in1 + 1] = normals[in2 + 1] = normals[in3 + 1] = normal.y;\n    normals[in1 + 2] = normals[in2 + 2] = normals[in3 + 2] = normal.z;\n\n    texCoords[iu1 + 0] = u1;\n    texCoords[iu1 + 1] = v1;\n\n    texCoords[iu2 + 0] = u2;\n    texCoords[iu2 + 1] = v2;\n\n    texCoords[iu3 + 0] = u3;\n    texCoords[iu3 + 1] = v3;\n  }\n\n  return {\n    indices: {size: 1, value: new Uint16Array(indices)},\n    attributes: {\n      POSITION: {size: 3, value: new Float32Array(positions)},\n      NORMAL: {size: 3, value: new Float32Array(normals)},\n      TEXCOORD_0: {size: 2, value: new Float32Array(texCoords)}\n    }\n  };\n}\n","import {AnimationLoop, Model, Geometry, IcoSphereGeometry} from '@luma.gl/engine';\nimport {clear, Framebuffer, Program} from '@luma.gl/webgl';\nimport {setParameters} from '@luma.gl/gltools';\nimport {Matrix4, Vector3, radians} from 'math.gl';\nimport {getRandom} from '../../utils';\n\nconst INFO_HTML = `\n<p>\n  Electron trails renderings persist across multiple frames.\n<p>\n  Uses multiple luma.gl <code>Framebuffer</code>s to hold previously rendered data between frames.\n</p>\n`;\n\nconst SCREEN_QUAD_VS = `\\\nattribute vec2 aPosition;\n\nvoid main(void) {\n  gl_Position = vec4(aPosition, 0, 1);\n}\n`;\n\nconst SCREEN_QUAD_FS = `\\\nprecision highp float;\n\nuniform sampler2D uTexture;\nuniform vec2 uRes;\n\nvoid main(void) {\n  vec2 p = gl_FragCoord.xy/uRes.xy;\n  gl_FragColor = texture2D(uTexture, p);\n}\n`;\n\nconst PERSISTENCE_FS = `\\\nprecision highp float;\n\nuniform sampler2D uScene;\nuniform sampler2D uPersistence;\nuniform vec2 uRes;\n\nvoid main(void) {\n  vec2 p = gl_FragCoord.xy / uRes.xy;\n  vec4 cS = texture2D(uScene, p);\n  vec4 cP = texture2D(uPersistence, p);\n  gl_FragColor = mix(cS*4.0, cP, 0.9);\n}\n`;\n\nconst SPHERE_VS = `\\\nattribute vec3 positions;\nattribute vec3 normals;\n\nuniform mat4 uModelView;\nuniform mat4 uProjection;\n\nvarying vec3 normal;\n\nvoid main(void) {\n  gl_Position = uProjection * uModelView * vec4(positions, 1.0);\n  normal = vec3((uModelView * vec4(normals, 0.0)));\n}\n`;\n\nconst SPHERE_FS = `\\\nprecision highp float;\n\nuniform vec3 uColor;\nuniform bool uLighting;\n\nvarying vec3 normal;\n\nvoid main(void) {\n  float d = 1.0;\n  if (uLighting) {\n    vec3 l = normalize(vec3(1,1,2));\n    d = dot(normal, l);\n  }\n  gl_FragColor = vec4(uColor * d, 1);\n}\n`;\n\nconst random = getRandom();\n\nconst ELECTRON_COUNT = 64;\nconst ePos = [];\nconst eRot = [];\nconst nPos = [];\n\nlet mainFramebuffer;\nlet pingpongFramebuffers;\nlet quad;\nlet persistenceQuad;\nlet sphere;\n\n/* eslint-disable max-statements */\nexport default class AppAnimationLoop extends AnimationLoop {\n  static getInfo() {\n    return INFO_HTML;\n  }\n\n  onInitialize({gl, width, height}) {\n    setParameters(gl, {\n      clearColor: [0, 0, 0, 1],\n      clearDepth: 1,\n      depthTest: true,\n      depthFunc: gl.LEQUAL,\n      faceCulling: true,\n      cullFace: gl.BACK\n    });\n\n    mainFramebuffer = new Framebuffer(gl, {width, height});\n\n    pingpongFramebuffers = [\n      new Framebuffer(gl, {width, height}),\n      new Framebuffer(gl, {width, height})\n    ];\n\n    const QUAD_POSITIONS = [-1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1];\n\n    const quadGeometry = new Geometry({\n      attributes: {\n        aPosition: {\n          value: new Float32Array(QUAD_POSITIONS),\n          size: 2\n        }\n      },\n      vertexCount: 6\n    });\n\n    quad = new Model(gl, {\n      id: 'quad',\n      program: new Program(gl, {vs: SCREEN_QUAD_VS, fs: SCREEN_QUAD_FS}),\n      geometry: quadGeometry\n    });\n\n    persistenceQuad = new Model(gl, {\n      id: 'persistence-quad',\n      program: new Program(gl, {vs: SCREEN_QUAD_VS, fs: PERSISTENCE_FS}),\n      geometry: quadGeometry\n    });\n\n    sphere = new Model(gl, {\n      id: 'electron',\n      geometry: new IcoSphereGeometry({\n        iterations: 4\n      }),\n      program: new Program(gl, {vs: SPHERE_VS, fs: SPHERE_FS})\n    });\n\n    const dt = 0.0125;\n\n    for (let i = 0; i < ELECTRON_COUNT; i++) {\n      // Place electron cloud at random positions\n      const pos = new Vector3(random() - 0.5, random() - 0.5, random() - 0.5);\n\n      // Push them out a bit\n      const distanceFromCenter = random() + 1.0;\n      pos.normalize().scale(distanceFromCenter);\n      const s = 1.25;\n      pos.scale(s);\n      ePos.push(pos);\n\n      // Get a random vector and cross\n      const q = new Vector3(random() - 0.5, random() - 0.5, random() - 0.5);\n      const axis = pos\n        .clone()\n        .cross(q)\n        .normalize();\n\n      const theta = (4 / distanceFromCenter) * dt;\n      const rot = new Matrix4().rotateAxis(theta, axis);\n      eRot.push(rot);\n    }\n\n    for (let i = 0; i < ELECTRON_COUNT; i++) {\n      let pos = new Vector3(random() - 0.5, random() - 0.5, random() - 0.5);\n      pos = pos.normalize().scale(0.5);\n      nPos.push(pos);\n    }\n  }\n\n  onRender({gl, tick, width, height, aspect}) {\n    mainFramebuffer.resize({width, height});\n    pingpongFramebuffers[0].resize({width, height});\n    pingpongFramebuffers[1].resize({width, height});\n\n    const projection = new Matrix4().perspective({fov: radians(75), aspect});\n    const view = new Matrix4().lookAt({eye: [0, 0, 4]});\n\n    clear(gl, {framebuffer: mainFramebuffer, color: [0, 0, 0, 1.0], depth: 1});\n\n    // Render electrons to framebuffer\n    for (let i = 0; i < ELECTRON_COUNT; i++) {\n      ePos[i] = eRot[i].transformVector(ePos[i]);\n      const modelMatrix = new Matrix4().translate(ePos[i]).scale([0.06125, 0.06125, 0.06125]);\n\n      sphere.draw({\n        framebuffer: mainFramebuffer,\n        uniforms: {\n          uModelView: view.clone().multiplyRight(modelMatrix),\n          uView: view,\n          uProjection: projection,\n          uColor: [0.0, 0.5, 1],\n          uLighting: 0\n        }\n      });\n    }\n\n    // Render core to framebuffer\n    for (let i = 0; i < ELECTRON_COUNT; i++) {\n      const modelMatrix = new Matrix4()\n        .rotateXYZ([tick * 0.013, 0, 0])\n        .rotateXYZ([0, tick * 0.021, 0])\n        .translate(nPos[i]);\n\n      const translation = [modelMatrix[12], modelMatrix[13], modelMatrix[14]];\n      modelMatrix\n        .identity()\n        .translate(translation)\n        .scale([0.25, 0.25, 0.25]);\n\n      sphere.draw({\n        framebuffer: mainFramebuffer,\n        uniforms: {\n          uModelView: view.clone().multiplyRight(modelMatrix),\n          uProjection: projection,\n          uColor: [1, 0.25, 0.25],\n          uLighting: 1\n        }\n      });\n    }\n\n    const ppi = tick % 2;\n    const currentFramebuffer = pingpongFramebuffers[ppi];\n    const nextFramebuffer = pingpongFramebuffers[1 - ppi];\n\n    // Accumulate in persistence buffer\n    clear(gl, {framebuffer: currentFramebuffer, color: true, depth: true});\n    persistenceQuad.draw({\n      framebuffer: currentFramebuffer,\n      uniforms: {\n        uScene: mainFramebuffer.texture,\n        uPersistence: nextFramebuffer.texture,\n        uRes: [width, height]\n      }\n    });\n\n    // Render to screen\n    clear(gl, {color: true, depth: true});\n    quad.draw({\n      uniforms: {\n        uTexture: currentFramebuffer.texture,\n        uRes: [width, height]\n      }\n    });\n  }\n}\n\n/* global window */\nif (typeof window !== 'undefined' && !window.website) {\n  const animationLoop = new AppAnimationLoop();\n  animationLoop.start();\n}\n","import React from 'react';\nimport AnimationLoopExamplePage from '../../src/components/animation-loop-example-page';\nimport AnimationLoop from '../../../examples/showcase/persistence/app';\n\nexport default class Example extends React.Component {\n  render() {\n    return (\n      <AnimationLoopExamplePage AnimationLoop={AnimationLoop} exampleConfig={this.props.pageContext.exampleConfig} />\n    );\n  }\n}\n","export default function assert(condition, message) {\n  if (!condition) {\n    throw new Error(\"math.gl assertion \".concat(message));\n  }\n}","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import {uid, assert} from '@luma.gl/webgl';\n\n// Rendering primitives - specify how to extract primitives from vertices.\n// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants\nexport const DRAW_MODE = {\n  POINTS: 0x0000, // draw single points.\n  LINES: 0x0001, // draw lines. Each vertex connects to the one after it.\n  LINE_LOOP: 0x0002, // draw lines. Each set of two vertices is treated as a separate line segment.\n  LINE_STRIP: 0x0003, // draw a connected group of line segments from the first vertex to the last\n  TRIANGLES: 0x0004, // draw triangles. Each set of three vertices creates a separate triangle.\n  TRIANGLE_STRIP: 0x0005, // draw a connected group of triangles.\n  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.\n  // Each vertex connects to the previous and the first vertex in the fan.\n};\n\nexport default class Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n\n  constructor(props = {}) {\n    const {\n      id = uid('geometry'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n\n    // stubRemovedMethods(this, [\n    //   'setNeedsRedraw', 'needsRedraw', 'setAttributes'\n    // ], 'Immutable');\n\n    // stubRemovedMethods(this, [\n    //   'hasAttribute', 'getAttribute', 'getArray'\n    // ], 'Use geometry.attributes and geometry.indices');\n\n    // deprecateMethods(this, ['getAttributes'])\n  }\n\n  get mode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  // Return an object with all attributes plus indices added as a field.\n  getAttributes() {\n    return this.indices ? {indices: this.indices, ...this.attributes} : this.attributes;\n  }\n\n  // PRIVATE\n\n  _print(attributeName) {\n    return `Geometry ${this.id} attribute ${attributeName}`;\n  }\n\n  // Attribute\n  // value: typed array\n  // type: indices, vertices, uvs\n  // size: elements per vertex\n  // target: WebGL buffer type (string or constant)\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {value: indices, size: 1} : indices;\n    }\n\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n\n      // Wrap \"unwrapped\" arrays and try to autodetect their type\n      attribute = ArrayBuffer.isView(attribute) ? {value: attribute} : attribute;\n\n      assert(\n        ArrayBuffer.isView(attribute.value),\n        `${this._print(attributeName)}: must be typed array or object with value as typed array`\n      );\n\n      if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n        attribute.size = 3;\n      }\n\n      // Move indices to separate field\n      if (attributeName === 'indices') {\n        assert(!this.indices);\n        this.indices = attribute;\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n\n    if (this.indices && this.indices.isIndexed !== undefined) {\n      this.indices = Object.assign({}, this.indices);\n      delete this.indices.isIndexed;\n    }\n\n    return this;\n  }\n\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n    let vertexCount = Infinity;\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {value, size, constant} = attribute;\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n\n    assert(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n}\n","import setPrototypeOf from \"./setPrototypeOf\";\n\nfunction isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import \"core-js/modules/es6.array.fill\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport MathArray from './math-array';\nimport { checkNumber } from '../../lib/validators';\nimport { config } from '../../lib/common';\n\nvar Matrix = function (_MathArray) {\n  _inherits(Matrix, _MathArray);\n\n  function Matrix() {\n    _classCallCheck(this, Matrix);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Matrix).apply(this, arguments));\n  }\n\n  _createClass(Matrix, [{\n    key: \"toString\",\n    value: function toString() {\n      var string = '[';\n\n      if (config.printRowMajor) {\n        string += 'row-major:';\n\n        for (var row = 0; row < this.RANK; ++row) {\n          for (var col = 0; col < this.RANK; ++col) {\n            string += \" \".concat(this[col * this.RANK + row]);\n          }\n        }\n      } else {\n        string += 'column-major:';\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          string += \" \".concat(this[i]);\n        }\n      }\n\n      string += ']';\n      return string;\n    }\n  }, {\n    key: \"getElementIndex\",\n    value: function getElementIndex(row, col) {\n      return col * this.RANK + row;\n    }\n  }, {\n    key: \"getElement\",\n    value: function getElement(row, col) {\n      return this[col * this.RANK + row];\n    }\n  }, {\n    key: \"setElement\",\n    value: function setElement(row, col, value) {\n      this[col * this.RANK + row] = checkNumber(value);\n      return this;\n    }\n  }, {\n    key: \"getColumn\",\n    value: function getColumn(columnIndex) {\n      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Array(this.RANK).fill(-0);\n      var firstIndex = columnIndex * this.RANK;\n\n      for (var i = 0; i < this.RANK; ++i) {\n        result[i] = this[firstIndex + i];\n      }\n\n      return result;\n    }\n  }, {\n    key: \"setColumn\",\n    value: function setColumn(columnIndex, columnVector) {\n      var firstIndex = columnIndex * this.RANK;\n\n      for (var i = 0; i < this.RANK; ++i) {\n        this[firstIndex + i] = columnVector[i];\n      }\n\n      return this;\n    }\n  }]);\n\n  return Matrix;\n}(MathArray);\n\nexport { Matrix as default };","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import \"core-js/modules/es6.array.is-array\";\nimport \"core-js/modules/es6.object.freeze\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { checkVector, deprecated } from '../lib/validators';\nimport Matrix from './base/matrix';\nimport { vec2_transformMat4AsVector, vec3_transformMat4AsVector } from '../lib/gl-matrix-extras';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport * as vec4 from 'gl-matrix/vec4';\nvar IDENTITY = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\nvar ZERO = Object.freeze([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nvar INDICES = Object.freeze({\n  COL0ROW0: 0,\n  COL0ROW1: 1,\n  COL0ROW2: 2,\n  COL0ROW3: 3,\n  COL1ROW0: 4,\n  COL1ROW1: 5,\n  COL1ROW2: 6,\n  COL1ROW3: 7,\n  COL2ROW0: 8,\n  COL2ROW1: 9,\n  COL2ROW2: 10,\n  COL2ROW3: 11,\n  COL3ROW0: 12,\n  COL3ROW1: 13,\n  COL3ROW2: 14,\n  COL3ROW3: 15\n});\nvar constants = {};\n\nvar Matrix4 = function (_Matrix) {\n  _inherits(Matrix4, _Matrix);\n\n  _createClass(Matrix4, [{\n    key: \"INDICES\",\n    get: function get() {\n      return INDICES;\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 16;\n    }\n  }, {\n    key: \"RANK\",\n    get: function get() {\n      return 4;\n    }\n  }], [{\n    key: \"IDENTITY\",\n    get: function get() {\n      constants.IDENTITY = constants.IDENTITY || Object.freeze(new Matrix4(IDENTITY));\n      return constants.IDENTITY;\n    }\n  }, {\n    key: \"ZERO\",\n    get: function get() {\n      constants.ZERO = constants.ZERO || Object.freeze(new Matrix4(ZERO));\n      return constants.ZERO;\n    }\n  }]);\n\n  function Matrix4(array) {\n    var _this;\n\n    _classCallCheck(this, Matrix4);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Matrix4).call(this, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0));\n\n    if (arguments.length === 1 && Array.isArray(array)) {\n      _this.copy(array);\n    } else {\n      _this.identity();\n    }\n\n    return _this;\n  }\n\n  _createClass(Matrix4, [{\n    key: \"copy\",\n    value: function copy(array) {\n      this[0] = array[0];\n      this[1] = array[1];\n      this[2] = array[2];\n      this[3] = array[3];\n      this[4] = array[4];\n      this[5] = array[5];\n      this[6] = array[6];\n      this[7] = array[7];\n      this[8] = array[8];\n      this[9] = array[9];\n      this[10] = array[10];\n      this[11] = array[11];\n      this[12] = array[12];\n      this[13] = array[13];\n      this[14] = array[14];\n      this[15] = array[15];\n      return this.check();\n    }\n  }, {\n    key: \"set\",\n    value: function set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m30;\n      this[4] = m01;\n      this[5] = m11;\n      this[6] = m21;\n      this[7] = m31;\n      this[8] = m02;\n      this[9] = m12;\n      this[10] = m22;\n      this[11] = m32;\n      this[12] = m03;\n      this[13] = m13;\n      this[14] = m23;\n      this[15] = m33;\n      return this.check();\n    }\n  }, {\n    key: \"setRowMajor\",\n    value: function setRowMajor(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m30;\n      this[4] = m01;\n      this[5] = m11;\n      this[6] = m21;\n      this[7] = m31;\n      this[8] = m02;\n      this[9] = m12;\n      this[10] = m22;\n      this[11] = m32;\n      this[12] = m03;\n      this[13] = m13;\n      this[14] = m23;\n      this[15] = m33;\n      return this.check();\n    }\n  }, {\n    key: \"toRowMajor\",\n    value: function toRowMajor(result) {\n      result[0] = this[0];\n      result[1] = this[4];\n      result[2] = this[8];\n      result[3] = this[12];\n      result[4] = this[1];\n      result[5] = this[5];\n      result[6] = this[9];\n      result[7] = this[13];\n      result[8] = this[2];\n      result[9] = this[6];\n      result[10] = this[10];\n      result[11] = this[14];\n      result[12] = this[3];\n      result[13] = this[7];\n      result[14] = this[11];\n      result[15] = this[15];\n      return result;\n    }\n  }, {\n    key: \"identity\",\n    value: function identity() {\n      return this.copy(IDENTITY);\n    }\n  }, {\n    key: \"fromQuaternion\",\n    value: function fromQuaternion(q) {\n      mat4.fromQuat(this, q);\n      return this.check();\n    }\n  }, {\n    key: \"frustum\",\n    value: function frustum(_ref) {\n      var left = _ref.left,\n          right = _ref.right,\n          bottom = _ref.bottom,\n          top = _ref.top,\n          near = _ref.near,\n          far = _ref.far;\n\n      if (far === Infinity) {\n        Matrix4._computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);\n      } else {\n        mat4.frustum(this, left, right, bottom, top, near, far);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lookAt\",\n    value: function lookAt(eye, center, up) {\n      if (arguments.length === 1) {\n        var _eye = eye;\n        eye = _eye.eye;\n        center = _eye.center;\n        up = _eye.up;\n      }\n\n      center = center || [0, 0, 0];\n      up = up || [0, 1, 0];\n      mat4.lookAt(this, eye, center, up);\n      return this.check();\n    }\n  }, {\n    key: \"ortho\",\n    value: function ortho(_ref2) {\n      var left = _ref2.left,\n          right = _ref2.right,\n          bottom = _ref2.bottom,\n          top = _ref2.top,\n          _ref2$near = _ref2.near,\n          near = _ref2$near === void 0 ? 0.1 : _ref2$near,\n          _ref2$far = _ref2.far,\n          far = _ref2$far === void 0 ? 500 : _ref2$far;\n      mat4.ortho(this, left, right, bottom, top, near, far);\n      return this.check();\n    }\n  }, {\n    key: \"orthographic\",\n    value: function orthographic(_ref3) {\n      var _ref3$fovy = _ref3.fovy,\n          fovy = _ref3$fovy === void 0 ? 45 * Math.PI / 180 : _ref3$fovy,\n          _ref3$aspect = _ref3.aspect,\n          aspect = _ref3$aspect === void 0 ? 1 : _ref3$aspect,\n          _ref3$focalDistance = _ref3.focalDistance,\n          focalDistance = _ref3$focalDistance === void 0 ? 1 : _ref3$focalDistance,\n          _ref3$near = _ref3.near,\n          near = _ref3$near === void 0 ? 0.1 : _ref3$near,\n          _ref3$far = _ref3.far,\n          far = _ref3$far === void 0 ? 500 : _ref3$far;\n\n      if (fovy > Math.PI * 2) {\n        throw Error('radians');\n      }\n\n      var halfY = fovy / 2;\n      var top = focalDistance * Math.tan(halfY);\n      var right = top * aspect;\n      return new Matrix4().ortho({\n        left: -right,\n        right: right,\n        bottom: -top,\n        top: top,\n        near: near,\n        far: far\n      });\n    }\n  }, {\n    key: \"perspective\",\n    value: function perspective() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          fovy = _ref4.fovy,\n          _ref4$fov = _ref4.fov,\n          fov = _ref4$fov === void 0 ? 45 * Math.PI / 180 : _ref4$fov,\n          _ref4$aspect = _ref4.aspect,\n          aspect = _ref4$aspect === void 0 ? 1 : _ref4$aspect,\n          _ref4$near = _ref4.near,\n          near = _ref4$near === void 0 ? 0.1 : _ref4$near,\n          _ref4$far = _ref4.far,\n          far = _ref4$far === void 0 ? 500 : _ref4$far;\n\n      fovy = fovy || fov;\n\n      if (fovy > Math.PI * 2) {\n        throw Error('radians');\n      }\n\n      mat4.perspective(this, fovy, aspect, near, far);\n      return this.check();\n    }\n  }, {\n    key: \"determinant\",\n    value: function determinant() {\n      return mat4.determinant(this);\n    }\n  }, {\n    key: \"getScale\",\n    value: function getScale() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n      result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);\n      result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);\n      result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);\n      return result;\n    }\n  }, {\n    key: \"getTranslation\",\n    value: function getTranslation() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n      result[0] = this[12];\n      result[1] = this[13];\n      result[2] = this[14];\n      return result;\n    }\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n      var scaleResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var scale = this.getScale(scaleResult || [-0, -0, -0]);\n      var inverseScale0 = 1 / scale[0];\n      var inverseScale1 = 1 / scale[1];\n      var inverseScale2 = 1 / scale[2];\n      result[0] = this[0] * inverseScale0;\n      result[1] = this[1] * inverseScale1;\n      result[2] = this[2] * inverseScale2;\n      result[3] = 0;\n      result[4] = this[4] * inverseScale0;\n      result[5] = this[5] * inverseScale1;\n      result[6] = this[6] * inverseScale2;\n      result[7] = 0;\n      result[8] = this[8] * inverseScale0;\n      result[9] = this[9] * inverseScale1;\n      result[10] = this[10] * inverseScale2;\n      result[11] = 0;\n      result[12] = 0;\n      result[13] = 0;\n      result[14] = 0;\n      result[15] = 1;\n      return result;\n    }\n  }, {\n    key: \"getRotationMatrix3\",\n    value: function getRotationMatrix3() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0, -0, -0, -0, -0, -0, -0];\n      var scaleResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var scale = this.getScale(scaleResult || [-0, -0, -0]);\n      var inverseScale0 = 1 / scale[0];\n      var inverseScale1 = 1 / scale[1];\n      var inverseScale2 = 1 / scale[2];\n      result[0] = this[0] * inverseScale0;\n      result[1] = this[1] * inverseScale1;\n      result[2] = this[2] * inverseScale2;\n      result[3] = this[4] * inverseScale0;\n      result[4] = this[5] * inverseScale1;\n      result[5] = this[6] * inverseScale2;\n      result[6] = this[8] * inverseScale0;\n      result[7] = this[9] * inverseScale1;\n      result[8] = this[10] * inverseScale2;\n      return result;\n    }\n  }, {\n    key: \"transpose\",\n    value: function transpose() {\n      mat4.transpose(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      mat4.invert(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyLeft\",\n    value: function multiplyLeft(a) {\n      mat4.multiply(this, a, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyRight\",\n    value: function multiplyRight(a) {\n      mat4.multiply(this, this, a);\n      return this.check();\n    }\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(radians) {\n      mat4.rotateX(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(radians) {\n      mat4.rotateY(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateZ\",\n    value: function rotateZ(radians) {\n      mat4.rotateZ(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateXYZ\",\n    value: function rotateXYZ(_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 3),\n          rx = _ref6[0],\n          ry = _ref6[1],\n          rz = _ref6[2];\n\n      return this.rotateX(rx).rotateY(ry).rotateZ(rz);\n    }\n  }, {\n    key: \"rotateAxis\",\n    value: function rotateAxis(radians, axis) {\n      mat4.rotate(this, this, radians, axis);\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(factor) {\n      if (Array.isArray(factor)) {\n        mat4.scale(this, this, factor);\n      } else {\n        mat4.scale(this, this, [factor, factor, factor]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(vec) {\n      mat4.translate(this, this, vec);\n      return this.check();\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(vector, result) {\n      if (vector.length === 4) {\n        result = vec4.transformMat4(result || [-0, -0, -0, -0], vector, this);\n        checkVector(result, 4);\n        return result;\n      }\n\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformAsPoint\",\n    value: function transformAsPoint(vector, result) {\n      var length = vector.length;\n\n      switch (length) {\n        case 2:\n          result = vec2.transformMat4(result || [-0, -0], vector, this);\n          break;\n\n        case 3:\n          result = vec3.transformMat4(result || [-0, -0, -0], vector, this);\n          break;\n\n        default:\n          throw new Error('Illegal vector');\n      }\n\n      checkVector(result, vector.length);\n      return result;\n    }\n  }, {\n    key: \"transformAsVector\",\n    value: function transformAsVector(vector, result) {\n      switch (vector.length) {\n        case 2:\n          result = vec2_transformMat4AsVector(result || [-0, -0], vector, this);\n          break;\n\n        case 3:\n          result = vec3_transformMat4AsVector(result || [-0, -0, -0], vector, this);\n          break;\n\n        default:\n          throw new Error('Illegal vector');\n      }\n\n      checkVector(result, vector.length);\n      return result;\n    }\n  }, {\n    key: \"makeRotationX\",\n    value: function makeRotationX(radians) {\n      return this.identity().rotateX(radians);\n    }\n  }, {\n    key: \"makeTranslation\",\n    value: function makeTranslation(x, y, z) {\n      return this.identity().translate([x, y, z]);\n    }\n  }, {\n    key: \"transformPoint\",\n    value: function transformPoint(vector, result) {\n      deprecated('Matrix4.transformPoint', '3.0');\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformVector\",\n    value: function transformVector(vector, result) {\n      deprecated('Matrix4.transformVector', '3.0');\n      return this.transformAsPoint(vector, result);\n    }\n  }, {\n    key: \"transformDirection\",\n    value: function transformDirection(vector, result) {\n      deprecated('Matrix4.transformDirection', '3.0');\n      return this.transformAsVector(vector, result);\n    }\n  }], [{\n    key: \"_computeInfinitePerspectiveOffCenter\",\n    value: function _computeInfinitePerspectiveOffCenter(result, left, right, bottom, top, near) {\n      var column0Row0 = 2.0 * near / (right - left);\n      var column1Row1 = 2.0 * near / (top - bottom);\n      var column2Row0 = (right + left) / (right - left);\n      var column2Row1 = (top + bottom) / (top - bottom);\n      var column2Row2 = -1.0;\n      var column2Row3 = -1.0;\n      var column3Row2 = -2.0 * near;\n      result[0] = column0Row0;\n      result[1] = 0.0;\n      result[2] = 0.0;\n      result[3] = 0.0;\n      result[4] = 0.0;\n      result[5] = column1Row1;\n      result[6] = 0.0;\n      result[7] = 0.0;\n      result[8] = column2Row0;\n      result[9] = column2Row1;\n      result[10] = column2Row2;\n      result[11] = column2Row3;\n      result[12] = 0.0;\n      result[13] = 0.0;\n      result[14] = column3Row2;\n      result[15] = 0.0;\n      return result;\n    }\n  }]);\n\n  return Matrix4;\n}(Matrix);\n\nexport { Matrix4 as default };","/* global window, document */\n\n// Light class implementing the AnimationLoop interface\n// use by examples w/o creating a gl context\nexport class MiniAnimationLoop {\n  static getInfo() {\n    return '';\n  }\n\n  start() {}\n\n  stop() {}\n\n  delete() {}\n\n  onFinalize() {}\n\n  _setDisplay() {}\n\n  _getCanvas(props = {}) {\n    let canvas;\n    if (props.canvas) {\n      canvas = document.getElementById(props.canvas);\n      const dpr = window.devicePixelRatio || 1;\n      canvas.height = canvas.clientHeight * dpr;\n      canvas.width = canvas.clientWidth * dpr;\n    } else {\n      canvas = document.createElement('canvas');\n      canvas.width = 800;\n      canvas.height = 600;\n      document.body.appendChild(canvas);\n    }\n\n    return canvas;\n  }\n\n  _getContainer(props = {}) {\n    if (this.container) {\n      return this.container;\n    }\n\n    let width;\n    let height;\n\n    this.container = document.createElement('div');\n\n    if (props.canvas) {\n      const canvas = document.getElementById(props.canvas);\n      this.parent = canvas.parentElement;\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n      this.container.style.position = 'relative';\n      this.container.style.top = `-${height}px`;\n    } else {\n      this.parent = document.body;\n      width = 800;\n      height = 800;\n    }\n\n    this.container.style.width = `${width}px`;\n    this.container.style.height = `${height}px`;\n    this.parent.appendChild(this.container);\n\n    return this.container;\n  }\n\n  _removeContainer(props = {}) {\n    this.parent.removeChild(this.container);\n  }\n}\n\n// Create a deterministic pseudorandom number generator\nexport function getRandom() {\n  let s = 1;\n  let c = 1;\n  return () => {\n    s = Math.sin(c * 17.23);\n    c = Math.cos(s * 27.92);\n    return fract(Math.abs(s * c) * 1432.71);\n  };\n}\n\nfunction fract(n) {\n  return n - Math.floor(n);\n}\n","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.array.is-array\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _construct from \"@babel/runtime/helpers/esm/construct\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport assert from './assert';\nvar RADIANS_TO_DEGREES = 1 / Math.PI * 180;\nvar DEGREES_TO_RADIANS = 1 / 180 * Math.PI;\nvar config = {};\nconfig.EPSILON = 1e-12;\nconfig.debug = false;\nconfig.precision = 4;\nconfig.printTypes = false;\nconfig.printDegrees = false;\nconfig.printRowMajor = true;\nexport { config };\nexport function configure() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  for (var key in options) {\n    assert(key in config);\n    config[key] = options[key];\n  }\n\n  return config;\n}\n\nfunction round(value) {\n  return Math.round(value / config.EPSILON) * config.EPSILON;\n}\n\nexport function formatValue(value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$precision = _ref.precision,\n      precision = _ref$precision === void 0 ? config.precision || 4 : _ref$precision;\n\n  value = round(value);\n  return \"\".concat(parseFloat(value.toPrecision(precision)));\n}\nexport function isArray(value) {\n  return Array.isArray(value) || ArrayBuffer.isView(value) && value.length !== undefined;\n}\n\nfunction duplicateArray(array) {\n  return array.clone ? array.clone() : new Array(array.length);\n}\n\nexport function clone(array) {\n  return array.clone ? array.clone() : _construct(Array, _toConsumableArray(array));\n}\n\nfunction map(value, func, result) {\n  if (isArray(value)) {\n    result = result || duplicateArray(value);\n\n    for (var i = 0; i < result.length && i < value.length; ++i) {\n      result[i] = func(value[i], i, result);\n    }\n\n    return result;\n  }\n\n  return func(value);\n}\n\nexport function toRadians(degrees) {\n  return radians(degrees);\n}\nexport function toDegrees(radians) {\n  return degrees(radians);\n}\nexport function radians(degrees, result) {\n  return map(degrees, function (degrees) {\n    return degrees * DEGREES_TO_RADIANS;\n  }, result);\n}\nexport function degrees(radians, result) {\n  return map(radians, function (radians) {\n    return radians * RADIANS_TO_DEGREES;\n  }, result);\n}\nexport function sin(radians) {\n  return map(radians, function (angle) {\n    return Math.sin(angle);\n  });\n}\nexport function cos(radians) {\n  return map(radians, function (angle) {\n    return Math.cos(angle);\n  });\n}\nexport function tan(radians) {\n  return map(radians, function (angle) {\n    return Math.tan(angle);\n  });\n}\nexport function asin(radians) {\n  return map(radians, function (angle) {\n    return Math.asin(angle);\n  });\n}\nexport function acos(radians) {\n  return map(radians, function (angle) {\n    return Math.acos(angle);\n  });\n}\nexport function atan(radians) {\n  return map(radians, function (angle) {\n    return Math.atan(angle);\n  });\n}\nexport function clamp(value, min, max) {\n  return map(value, function (value) {\n    return Math.max(min, Math.min(max, value));\n  });\n}\nexport function lerp(a, b, t) {\n  if (isArray(a)) {\n    return a.map(function (ai, i) {\n      return lerp(ai, b[i], t);\n    });\n  }\n\n  return t * b + (1 - t) * a;\n}\nexport function equals(a, b, epsilon) {\n  var oldEpsilon = config.EPSILON;\n\n  if (epsilon) {\n    config.EPSILON = epsilon;\n  }\n\n  try {\n    if (a === b) {\n      return true;\n    }\n\n    if (isArray(a) && isArray(b)) {\n      if (a.length !== b.length) {\n        return false;\n      }\n\n      for (var i = 0; i < a.length; ++i) {\n        if (!equals(a[i], b[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    if (a && _typeof(a) === 'object' && a.equals) {\n      return a.equals(b);\n    }\n\n    if (b && _typeof(b) === 'object' && b.equals) {\n      return b.equals(a);\n    }\n\n    return Math.abs(a - b) <= config.EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n  } finally {\n    config.EPSILON = oldEpsilon;\n  }\n}\nexport function exactEquals(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a && _typeof(a) === 'object' && b && _typeof(b) === 'object') {\n    if (a.constructor !== b.constructor) {\n      return false;\n    }\n\n    if (a.exactEquals) {\n      return a.exactEquals(b);\n    }\n  }\n\n  if (isArray(a) && isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; ++i) {\n      if (!exactEquals(a[i], b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\nexport function withEpsilon(EPSILON, func) {\n  var oldPrecision = config.EPSILON;\n  config.EPSILON = EPSILON;\n  var value;\n\n  try {\n    value = func();\n  } finally {\n    config.EPSILON = oldPrecision;\n  }\n\n  return value;\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport MathArray from './math-array';\nimport { checkNumber } from '../../lib/validators';\nimport assert from '../../lib/assert';\n\nvar Vector = function (_MathArray) {\n  _inherits(Vector, _MathArray);\n\n  function Vector() {\n    _classCallCheck(this, Vector);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Vector).apply(this, arguments));\n  }\n\n  _createClass(Vector, [{\n    key: \"len\",\n    value: function len() {\n      return Math.sqrt(this.lengthSquared());\n    }\n  }, {\n    key: \"magnitude\",\n    value: function magnitude() {\n      return this.len();\n    }\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared() {\n      var length = 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        length += this[i] * this[i];\n      }\n\n      return length;\n    }\n  }, {\n    key: \"magnitudeSquared\",\n    value: function magnitudeSquared() {\n      return this.lengthSquared();\n    }\n  }, {\n    key: \"distance\",\n    value: function distance(mathArray) {\n      return Math.sqrt(this.distanceSquared(mathArray));\n    }\n  }, {\n    key: \"distanceSquared\",\n    value: function distanceSquared(mathArray) {\n      var length = 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        var dist = this[i] - mathArray[i];\n        length += dist * dist;\n      }\n\n      return checkNumber(length);\n    }\n  }, {\n    key: \"dot\",\n    value: function dot(mathArray) {\n      var product = 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        product += this[i] * mathArray[i];\n      }\n\n      return checkNumber(product);\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      var length = this.magnitude();\n\n      if (length !== 0) {\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] /= length;\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply() {\n      for (var _len = arguments.length, vectors = new Array(_len), _key = 0; _key < _len; _key++) {\n        vectors[_key] = arguments[_key];\n      }\n\n      for (var _i = 0, _vectors = vectors; _i < _vectors.length; _i++) {\n        var vector = _vectors[_i];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] *= vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"divide\",\n    value: function divide() {\n      for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        vectors[_key2] = arguments[_key2];\n      }\n\n      for (var _i2 = 0, _vectors2 = vectors; _i2 < _vectors2.length; _i2++) {\n        var vector = _vectors2[_i2];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] /= vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lengthSq\",\n    value: function lengthSq() {\n      return this.lengthSquared();\n    }\n  }, {\n    key: \"distanceTo\",\n    value: function distanceTo(vector) {\n      return this.distance(vector);\n    }\n  }, {\n    key: \"distanceToSquared\",\n    value: function distanceToSquared(vector) {\n      return this.distanceSquared(vector);\n    }\n  }, {\n    key: \"getComponent\",\n    value: function getComponent(i) {\n      assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n      return checkNumber(this[i]);\n    }\n  }, {\n    key: \"setComponent\",\n    value: function setComponent(i, value) {\n      assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n      this[i] = value;\n      return this.check();\n    }\n  }, {\n    key: \"addVectors\",\n    value: function addVectors(a, b) {\n      return this.copy(a).add(b);\n    }\n  }, {\n    key: \"subVectors\",\n    value: function subVectors(a, b) {\n      return this.copy(a).subtract(b);\n    }\n  }, {\n    key: \"multiplyVectors\",\n    value: function multiplyVectors(a, b) {\n      return this.copy(a).multiply(b);\n    }\n  }, {\n    key: \"addScaledVector\",\n    value: function addScaledVector(a, b) {\n      return this.add(new this.constructor(a).multiplyScalar(b));\n    }\n  }, {\n    key: \"x\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      return this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      return this[1] = checkNumber(value);\n    }\n  }]);\n\n  return Vector;\n}(MathArray);\n\nexport { Vector as default };","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport Vector from './base/vector';\nimport { config, isArray } from '../lib/common';\nimport { checkNumber } from '../lib/validators';\nimport * as vec3 from 'gl-matrix/vec3';\nimport { vec3_transformMat2, vec3_transformMat4AsVector } from '../lib/gl-matrix-extras';\nvar ORIGIN = [0, 0, 0];\n\nvar Vector3 = function (_Vector) {\n  _inherits(Vector3, _Vector);\n\n  function Vector3() {\n    var _this;\n\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    _classCallCheck(this, Vector3);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Vector3).call(this, -0, -0, -0));\n\n    if (arguments.length === 1 && isArray(x)) {\n      _this.copy(x);\n    } else {\n      if (config.debug) {\n        checkNumber(x);\n        checkNumber(y);\n        checkNumber(z);\n      }\n\n      _this[0] = x;\n      _this[1] = y;\n      _this[2] = z;\n    }\n\n    return _this;\n  }\n\n  _createClass(Vector3, [{\n    key: \"set\",\n    value: function set(x, y, z) {\n      this[0] = x;\n      this[1] = y;\n      this[2] = z;\n      return this.check();\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(array) {\n      this[0] = array[0];\n      this[1] = array[1];\n      this[2] = array[2];\n      return this.check();\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(object) {\n      if (config.debug) {\n        checkNumber(object.x);\n        checkNumber(object.y);\n        checkNumber(object.z);\n      }\n\n      this[0] = object.x;\n      this[1] = object.y;\n      this[2] = object.z;\n      return this.check();\n    }\n  }, {\n    key: \"toObject\",\n    value: function toObject(object) {\n      object.x = this[0];\n      object.y = this[1];\n      object.z = this[2];\n      return object;\n    }\n  }, {\n    key: \"angle\",\n    value: function angle(vector) {\n      return vec3.angle(this, vector);\n    }\n  }, {\n    key: \"cross\",\n    value: function cross(vector) {\n      vec3.cross(this, this, vector);\n      return this.check();\n    }\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(_ref) {\n      var radians = _ref.radians,\n          _ref$origin = _ref.origin,\n          origin = _ref$origin === void 0 ? ORIGIN : _ref$origin;\n      vec3.rotateX(this, this, origin, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(_ref2) {\n      var radians = _ref2.radians,\n          _ref2$origin = _ref2.origin,\n          origin = _ref2$origin === void 0 ? ORIGIN : _ref2$origin;\n      vec3.rotateY(this, this, origin, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateZ\",\n    value: function rotateZ(_ref3) {\n      var radians = _ref3.radians,\n          _ref3$origin = _ref3.origin,\n          origin = _ref3$origin === void 0 ? ORIGIN : _ref3$origin;\n      vec3.rotateZ(this, this, origin, radians);\n      return this.check();\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(matrix4) {\n      return this.transformAsPoint(matrix4);\n    }\n  }, {\n    key: \"transformAsPoint\",\n    value: function transformAsPoint(matrix4) {\n      vec3.transformMat4(this, this, matrix4);\n      return this.check();\n    }\n  }, {\n    key: \"transformAsVector\",\n    value: function transformAsVector(matrix4) {\n      vec3_transformMat4AsVector(this, this, matrix4);\n      return this.check();\n    }\n  }, {\n    key: \"transformByMatrix3\",\n    value: function transformByMatrix3(matrix3) {\n      vec3.transformMat3(this, this, matrix3);\n      return this.check();\n    }\n  }, {\n    key: \"transformByMatrix2\",\n    value: function transformByMatrix2(matrix2) {\n      vec3_transformMat2(this, this, matrix2);\n      return this.check();\n    }\n  }, {\n    key: \"transformByQuaternion\",\n    value: function transformByQuaternion(quaternion) {\n      vec3.transformQuat(this, this, quaternion);\n      return this.check();\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 3;\n    }\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      return this[2] = checkNumber(value);\n    }\n  }]);\n\n  return Vector3;\n}(Vector);\n\nexport { Vector3 as default };","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","export function vec2_transformMat4AsVector(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  var w = m[3] * x + m[7] * y || 1.0;\n  out[0] = (m[0] * x + m[4] * y) / w;\n  out[1] = (m[1] * x + m[5] * y) / w;\n  return out;\n}\nexport function vec3_transformMat4AsVector(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n  return out;\n}\nexport function vec3_transformMat2(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  out[2] = a[2];\n  return out;\n}\nexport function vec4_transformMat2(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\nexport function vec4_transformMat3(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  out[0] = m[0] * x + m[3] * y + m[6] * z;\n  out[1] = m[1] * x + m[4] * y + m[7] * z;\n  out[2] = m[2] * x + m[5] * y + m[8] * z;\n  out[3] = a[3];\n  return out;\n}","import \"core-js/modules/es6.typed.float32-array\";\n\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","import getPrototypeOf from \"./getPrototypeOf\";\nimport setPrototypeOf from \"./setPrototypeOf\";\nimport isNativeFunction from \"./isNativeFunction\";\nimport construct from \"./construct\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-finite\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.typed.float32-array\";\nimport \"core-js/modules/es6.array.is-array\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport { config, formatValue, equals as _equals, isArray } from '../../lib/common';\n\nvar MathArray = function (_Array) {\n  _inherits(MathArray, _Array);\n\n  function MathArray() {\n    _classCallCheck(this, MathArray);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MathArray).apply(this, arguments));\n  }\n\n  _createClass(MathArray, [{\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor().copy(this);\n    }\n  }, {\n    key: \"from\",\n    value: function from(arrayOrObject) {\n      return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : this.fromObject(arrayOrObject);\n    }\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(array) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = array[i + offset];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"to\",\n    value: function to(arrayOrObject) {\n      if (arrayOrObject === this) {\n        return this;\n      }\n\n      return isArray(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);\n    }\n  }, {\n    key: \"toTarget\",\n    value: function toTarget(target) {\n      return target ? this.to(target) : this;\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        array[offset + i] = this[i];\n      }\n\n      return array;\n    }\n  }, {\n    key: \"toFloat32Array\",\n    value: function toFloat32Array() {\n      return new Float32Array(this);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.formatString(config);\n    }\n  }, {\n    key: \"formatString\",\n    value: function formatString(opts) {\n      var string = '';\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        string += (i > 0 ? ', ' : '') + formatValue(this[i], opts);\n      }\n\n      return \"\".concat(opts.printTypes ? this.constructor.name : '', \"[\").concat(string, \"]\");\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(array) {\n      if (!array || this.length !== array.length) {\n        return false;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        if (!_equals(this[i], array[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"exactEquals\",\n    value: function exactEquals(array) {\n      if (!array || this.length !== array.length) {\n        return false;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        if (this[i] !== array[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = -this[i];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lerp\",\n    value: function lerp(a, b, t) {\n      if (t === undefined) {\n        t = b;\n        b = a;\n        a = this;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        var ai = a[i];\n        this[i] = ai + t * (b[i] - ai);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"min\",\n    value: function min(vector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(vector[i], this[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"max\",\n    value: function max(vector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.max(vector[i], this[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"clamp\",\n    value: function clamp(minVector, maxVector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(Math.max(this[i], minVector[i]), maxVector[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"add\",\n    value: function add() {\n      for (var _len = arguments.length, vectors = new Array(_len), _key = 0; _key < _len; _key++) {\n        vectors[_key] = arguments[_key];\n      }\n\n      for (var _i = 0, _vectors = vectors; _i < _vectors.length; _i++) {\n        var vector = _vectors[_i];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] += vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract() {\n      for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        vectors[_key2] = arguments[_key2];\n      }\n\n      for (var _i2 = 0, _vectors2 = vectors; _i2 < _vectors2.length; _i2++) {\n        var vector = _vectors2[_i2];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] -= vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(_scale) {\n      if (Array.isArray(_scale)) {\n        return this.multiply(_scale);\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= _scale;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(a) {\n      return this.subtract(a);\n    }\n  }, {\n    key: \"setScalar\",\n    value: function setScalar(a) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = a;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"addScalar\",\n    value: function addScalar(a) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] += a;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"subScalar\",\n    value: function subScalar(a) {\n      return this.addScalar(-a);\n    }\n  }, {\n    key: \"multiplyScalar\",\n    value: function multiplyScalar(scalar) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= scalar;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"divideScalar\",\n    value: function divideScalar(a) {\n      return this.scale(1 / a);\n    }\n  }, {\n    key: \"clampScalar\",\n    value: function clampScalar(min, max) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(Math.max(this[i], min), max);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"multiplyByScalar\",\n    value: function multiplyByScalar(scalar) {\n      return this.scale(scalar);\n    }\n  }, {\n    key: \"check\",\n    value: function check() {\n      if (config.debug && !this.validate(this)) {\n        throw new Error(\"math.gl: \".concat(this.constructor.name, \" some fields set to invalid numbers'\"));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      var valid = this.length === this.ELEMENTS;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        valid = valid && Number.isFinite(this[i]);\n      }\n\n      return valid;\n    }\n  }, {\n    key: \"elements\",\n    get: function get() {\n      return this;\n    }\n  }]);\n\n  return MathArray;\n}(_wrapNativeSuper(Array));\n\nexport { MathArray as default };"],"sourceRoot":""}