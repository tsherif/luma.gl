{"version":3,"sources":["webpack:///../modules/constants/src/index.js","webpack:///./src/components/animation-loop-example-page.jsx","webpack:///../modules/webgl/src/classes/resource.js","webpack:///../modules/webgl/src/classes/buffer.js","webpack:///../modules/webgl/src/webgl-utils/attribute-utils.js","webpack:///../modules/webgl/src/classes/texture.js","webpack:///../modules/webgl2-polyfill/src/polyfill-context.js","webpack:///../modules/webgl/src/utils/globals.js","webpack:///../modules/webgl/src/classes/framebuffer.js","webpack:///../modules/webgl/src/utils/log.js","webpack:///../modules/webgl/src/classes/accessor.js","webpack:///../modules/webgl-state-tracker/src/unified-parameter-api/unified-parameter-api.js","webpack:///../modules/webgl-state-tracker/src/unified-parameter-api/webgl-parameter-tables.js","webpack:///../modules/webgl2-polyfill/src/assert.js","webpack:///../modules/webgl/src/utils/is-browser.js","webpack:///../modules/webgl/src/classes/texture-formats.js","webpack:///../modules/webgl/src/classes/texture-2d.js","webpack:///../modules/webgl/src/classes/renderbuffer-formats.js","webpack:///../modules/webgl/src/classes/renderbuffer.js","webpack:///./src/components/info-panel.jsx","webpack:///../modules/webgl-state-tracker/src/state-tracking/track-context-state.js","webpack:///../modules/webgl-state-tracker/src/utils/deep-array-equal.js","webpack:///../modules/webgl-state-tracker/src/state-tracking/webgl-function-to-parameters-table.js","webpack:///../modules/webgl/src/utils/load-file.js","webpack:///../modules/webgl/src/utils/assert.js","webpack:///../modules/webgl/src/utils/is-electron.js","webpack:///../modules/webgl/src/webgl-utils/typed-array-utils.js","webpack:///../modules/webgl/src/features/webgl-features-table.js","webpack:///../modules/webgl/src/webgl-utils/webgl-types.js","webpack:///../modules/webgl/src/classes/clear.js","webpack:///../modules/webgl/src/webgl-utils/texture-utils.js","webpack:///../modules/webgl/src/classes/texture-cube.js","webpack:///../modules/webgl/src/classes/texture-3d.js","webpack:///../modules/webgl-state-tracker/src/unified-parameter-api/webgl-setter-function-table.js","webpack:///../modules/webgl-state-tracker/src/unified-parameter-api/set-parameters.js","webpack:///../modules/webgl/src/init.js","webpack:///../modules/webgl/src/webgl-utils/format-utils.js","webpack:///../modules/webgl/src/classes/copy-and-blit.js","webpack:///../modules/webgl2-polyfill/src/polyfills/get-parameter-polyfill.js","webpack:///../modules/webgl2-polyfill/src/polyfill-table.js","webpack:///../modules/webgl-state-tracker/src/state-tracking/with-parameters.js","webpack:///../modules/webgl-state-tracker/src/utils/utils.js","webpack:///../modules/webgl-state-tracker/src/utils/assert.js","webpack:///../modules/webgl/src/utils/check-props.js","webpack:///../modules/webgl/src/webgl-utils/webgl-checks.js","webpack:///../modules/webgl/src/utils/utils.js","webpack:///../modules/webgl/src/webgl-utils/constants-to-keys.js","webpack:///../modules/webgl/src/utils/stub-methods.js","webpack:///../modules/webgl/src/classes/query.js","webpack:///../modules/webgl/src/features/features.js","webpack:///../modules/webgl/src/context/create-headless-context.js","webpack:///../modules/webgl/src/context/create-canvas.js","webpack:///../modules/webgl/src/context/context.js","webpack:///../modules/webgl/src/context/create-browser-context.js","webpack:///../modules/webgl/src/debug/get-context-debug-info.js","webpack:///../modules/webgl/src/webgl-utils/request-animation-frame.js","webpack:///../modules/core/src/lib/animation-loop.js","webpack:///../modules/webgl/src/classes/uniforms.js","webpack:///../modules/webgl/src/glsl-utils/get-shader-name.js","webpack:///../modules/webgl/src/glsl-utils/get-shader-type-name.js","webpack:///../modules/webgl/src/glsl-utils/format-glsl-error.js","webpack:///../modules/webgl/src/classes/shader.js","webpack:///../modules/webgl/src/classes/program-configuration.js","webpack:///../modules/webgl/src/classes/program.js","webpack:///../modules/addons/src/webvr/display.js","webpack:///../modules/addons/src/webvr/vr-button.js","webpack:///../modules/addons/src/webvr/vr-display.js","webpack:///../modules/webgl/src/utils/array-utils-flat.js","webpack:///../modules/webgl/src/classes/vertex-array-object.js","webpack:///../modules/webgl/src/classes/vertex-array.js"],"names":["module","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","COLOR_BUFFER_BIT","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","CONSTANT_COLOR","ONE_MINUS_CONSTANT_COLOR","CONSTANT_ALPHA","ONE_MINUS_CONSTANT_ALPHA","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","BLEND_EQUATION","BLEND_EQUATION_RGB","BLEND_EQUATION_ALPHA","BLEND_DST_RGB","BLEND_SRC_RGB","BLEND_DST_ALPHA","BLEND_SRC_ALPHA","BLEND_COLOR","ARRAY_BUFFER_BINDING","ELEMENT_ARRAY_BUFFER_BINDING","LINE_WIDTH","ALIASED_POINT_SIZE_RANGE","ALIASED_LINE_WIDTH_RANGE","CULL_FACE_MODE","FRONT_FACE","DEPTH_RANGE","DEPTH_WRITEMASK","DEPTH_CLEAR_VALUE","DEPTH_FUNC","STENCIL_CLEAR_VALUE","STENCIL_FUNC","STENCIL_FAIL","STENCIL_PASS_DEPTH_FAIL","STENCIL_PASS_DEPTH_PASS","STENCIL_REF","STENCIL_VALUE_MASK","STENCIL_WRITEMASK","STENCIL_BACK_FUNC","STENCIL_BACK_FAIL","STENCIL_BACK_PASS_DEPTH_FAIL","STENCIL_BACK_PASS_DEPTH_PASS","STENCIL_BACK_REF","STENCIL_BACK_VALUE_MASK","STENCIL_BACK_WRITEMASK","VIEWPORT","SCISSOR_BOX","COLOR_CLEAR_VALUE","COLOR_WRITEMASK","UNPACK_ALIGNMENT","PACK_ALIGNMENT","MAX_TEXTURE_SIZE","MAX_VIEWPORT_DIMS","SUBPIXEL_BITS","RED_BITS","GREEN_BITS","BLUE_BITS","ALPHA_BITS","DEPTH_BITS","STENCIL_BITS","POLYGON_OFFSET_UNITS","POLYGON_OFFSET_FACTOR","TEXTURE_BINDING_2D","SAMPLE_BUFFERS","SAMPLES","SAMPLE_COVERAGE_VALUE","SAMPLE_COVERAGE_INVERT","COMPRESSED_TEXTURE_FORMATS","VENDOR","RENDERER","VERSION","IMPLEMENTATION_COLOR_READ_TYPE","IMPLEMENTATION_COLOR_READ_FORMAT","BROWSER_DEFAULT_WEBGL","STATIC_DRAW","STREAM_DRAW","DYNAMIC_DRAW","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","BUFFER_SIZE","BUFFER_USAGE","CURRENT_VERTEX_ATTRIB","VERTEX_ATTRIB_ARRAY_ENABLED","VERTEX_ATTRIB_ARRAY_SIZE","VERTEX_ATTRIB_ARRAY_STRIDE","VERTEX_ATTRIB_ARRAY_TYPE","VERTEX_ATTRIB_ARRAY_NORMALIZED","VERTEX_ATTRIB_ARRAY_POINTER","VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","CULL_FACE","FRONT","BACK","FRONT_AND_BACK","BLEND","DEPTH_TEST","DITHER","POLYGON_OFFSET_FILL","SAMPLE_ALPHA_TO_COVERAGE","SAMPLE_COVERAGE","SCISSOR_TEST","STENCIL_TEST","NO_ERROR","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","CW","CCW","DONT_CARE","FASTEST","NICEST","GENERATE_MIPMAP_HINT","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","DEPTH_COMPONENT","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","FRAGMENT_SHADER","VERTEX_SHADER","COMPILE_STATUS","DELETE_STATUS","LINK_STATUS","VALIDATE_STATUS","ATTACHED_SHADERS","ACTIVE_ATTRIBUTES","ACTIVE_UNIFORMS","MAX_VERTEX_ATTRIBS","MAX_VERTEX_UNIFORM_VECTORS","MAX_VARYING_VECTORS","MAX_COMBINED_TEXTURE_IMAGE_UNITS","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_IMAGE_UNITS","MAX_FRAGMENT_UNIFORM_VECTORS","SHADER_TYPE","SHADING_LANGUAGE_VERSION","CURRENT_PROGRAM","NEVER","ALWAYS","LESS","EQUAL","LEQUAL","GREATER","GEQUAL","NOTEQUAL","KEEP","REPLACE","INCR","DECR","INVERT","INCR_WRAP","DECR_WRAP","NEAREST","LINEAR","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_LINEAR","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_2D","TEXTURE","TEXTURE_CUBE_MAP","TEXTURE_BINDING_CUBE_MAP","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","MAX_CUBE_MAP_TEXTURE_SIZE","TEXTURE0","ACTIVE_TEXTURE","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","TEXTURE_WIDTH","TEXTURE_HEIGHT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","LOW_FLOAT","MEDIUM_FLOAT","HIGH_FLOAT","LOW_INT","MEDIUM_INT","HIGH_INT","FRAMEBUFFER","RENDERBUFFER","RGBA4","RGB5_A1","RGB565","DEPTH_COMPONENT16","STENCIL_INDEX","STENCIL_INDEX8","DEPTH_STENCIL","RENDERBUFFER_WIDTH","RENDERBUFFER_HEIGHT","RENDERBUFFER_INTERNAL_FORMAT","RENDERBUFFER_RED_SIZE","RENDERBUFFER_GREEN_SIZE","RENDERBUFFER_BLUE_SIZE","RENDERBUFFER_ALPHA_SIZE","RENDERBUFFER_DEPTH_SIZE","RENDERBUFFER_STENCIL_SIZE","FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","COLOR_ATTACHMENT0","DEPTH_ATTACHMENT","STENCIL_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","NONE","FRAMEBUFFER_COMPLETE","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","FRAMEBUFFER_BINDING","RENDERBUFFER_BINDING","READ_FRAMEBUFFER","DRAW_FRAMEBUFFER","MAX_RENDERBUFFER_SIZE","INVALID_FRAMEBUFFER_OPERATION","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_COLORSPACE_CONVERSION_WEBGL","READ_BUFFER","UNPACK_ROW_LENGTH","UNPACK_SKIP_ROWS","UNPACK_SKIP_PIXELS","PACK_ROW_LENGTH","PACK_SKIP_ROWS","PACK_SKIP_PIXELS","TEXTURE_BINDING_3D","UNPACK_SKIP_IMAGES","UNPACK_IMAGE_HEIGHT","MAX_3D_TEXTURE_SIZE","MAX_ELEMENTS_VERTICES","MAX_ELEMENTS_INDICES","MAX_TEXTURE_LOD_BIAS","MAX_FRAGMENT_UNIFORM_COMPONENTS","MAX_VERTEX_UNIFORM_COMPONENTS","MAX_ARRAY_TEXTURE_LAYERS","MIN_PROGRAM_TEXEL_OFFSET","MAX_PROGRAM_TEXEL_OFFSET","MAX_VARYING_COMPONENTS","FRAGMENT_SHADER_DERIVATIVE_HINT","RASTERIZER_DISCARD","VERTEX_ARRAY_BINDING","MAX_VERTEX_OUTPUT_COMPONENTS","MAX_FRAGMENT_INPUT_COMPONENTS","MAX_SERVER_WAIT_TIMEOUT","MAX_ELEMENT_INDEX","RED","RGB8","RGBA8","RGB10_A2","TEXTURE_3D","TEXTURE_WRAP_R","TEXTURE_MIN_LOD","TEXTURE_MAX_LOD","TEXTURE_BASE_LEVEL","TEXTURE_MAX_LEVEL","TEXTURE_COMPARE_MODE","TEXTURE_COMPARE_FUNC","SRGB","SRGB8","SRGB8_ALPHA8","COMPARE_REF_TO_TEXTURE","RGBA32F","RGB32F","RGBA16F","RGB16F","TEXTURE_2D_ARRAY","TEXTURE_BINDING_2D_ARRAY","R11F_G11F_B10F","RGB9_E5","RGBA32UI","RGB32UI","RGBA16UI","RGB16UI","RGBA8UI","RGB8UI","RGBA32I","RGB32I","RGBA16I","RGB16I","RGBA8I","RGB8I","RED_INTEGER","RGB_INTEGER","RGBA_INTEGER","R8","RG8","R16F","R32F","RG16F","RG32F","R8I","R8UI","R16I","R16UI","R32I","R32UI","RG8I","RG8UI","RG16I","RG16UI","RG32I","RG32UI","R8_SNORM","RG8_SNORM","RGB8_SNORM","RGBA8_SNORM","RGB10_A2UI","TEXTURE_IMMUTABLE_FORMAT","TEXTURE_IMMUTABLE_LEVELS","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","HALF_FLOAT","RG","RG_INTEGER","INT_2_10_10_10_REV","CURRENT_QUERY","QUERY_RESULT","QUERY_RESULT_AVAILABLE","ANY_SAMPLES_PASSED","ANY_SAMPLES_PASSED_CONSERVATIVE","MAX_DRAW_BUFFERS","DRAW_BUFFER0","DRAW_BUFFER1","DRAW_BUFFER2","DRAW_BUFFER3","DRAW_BUFFER4","DRAW_BUFFER5","DRAW_BUFFER6","DRAW_BUFFER7","DRAW_BUFFER8","DRAW_BUFFER9","DRAW_BUFFER10","DRAW_BUFFER11","DRAW_BUFFER12","DRAW_BUFFER13","DRAW_BUFFER14","DRAW_BUFFER15","MAX_COLOR_ATTACHMENTS","COLOR_ATTACHMENT1","COLOR_ATTACHMENT2","COLOR_ATTACHMENT3","COLOR_ATTACHMENT4","COLOR_ATTACHMENT5","COLOR_ATTACHMENT6","COLOR_ATTACHMENT7","COLOR_ATTACHMENT8","COLOR_ATTACHMENT9","COLOR_ATTACHMENT10","COLOR_ATTACHMENT11","COLOR_ATTACHMENT12","COLOR_ATTACHMENT13","COLOR_ATTACHMENT14","COLOR_ATTACHMENT15","SAMPLER_3D","SAMPLER_2D_SHADOW","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","MAX_SAMPLES","SAMPLER_BINDING","PIXEL_PACK_BUFFER","PIXEL_UNPACK_BUFFER","PIXEL_PACK_BUFFER_BINDING","PIXEL_UNPACK_BUFFER_BINDING","COPY_READ_BUFFER","COPY_WRITE_BUFFER","COPY_READ_BUFFER_BINDING","COPY_WRITE_BUFFER_BINDING","FLOAT_MAT2x3","FLOAT_MAT2x4","FLOAT_MAT3x2","FLOAT_MAT3x4","FLOAT_MAT4x2","FLOAT_MAT4x3","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","UNSIGNED_NORMALIZED","SIGNED_NORMALIZED","VERTEX_ATTRIB_ARRAY_INTEGER","VERTEX_ATTRIB_ARRAY_DIVISOR","TRANSFORM_FEEDBACK_BUFFER_MODE","MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS","TRANSFORM_FEEDBACK_VARYINGS","TRANSFORM_FEEDBACK_BUFFER_START","TRANSFORM_FEEDBACK_BUFFER_SIZE","TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN","MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS","MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS","INTERLEAVED_ATTRIBS","SEPARATE_ATTRIBS","TRANSFORM_FEEDBACK_BUFFER","TRANSFORM_FEEDBACK_BUFFER_BINDING","TRANSFORM_FEEDBACK","TRANSFORM_FEEDBACK_PAUSED","TRANSFORM_FEEDBACK_ACTIVE","TRANSFORM_FEEDBACK_BINDING","FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING","FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE","FRAMEBUFFER_ATTACHMENT_RED_SIZE","FRAMEBUFFER_ATTACHMENT_GREEN_SIZE","FRAMEBUFFER_ATTACHMENT_BLUE_SIZE","FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE","FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE","FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE","FRAMEBUFFER_DEFAULT","DEPTH24_STENCIL8","DRAW_FRAMEBUFFER_BINDING","READ_FRAMEBUFFER_BINDING","RENDERBUFFER_SAMPLES","FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER","FRAMEBUFFER_INCOMPLETE_MULTISAMPLE","UNIFORM_BUFFER","UNIFORM_BUFFER_BINDING","UNIFORM_BUFFER_START","UNIFORM_BUFFER_SIZE","MAX_VERTEX_UNIFORM_BLOCKS","MAX_FRAGMENT_UNIFORM_BLOCKS","MAX_COMBINED_UNIFORM_BLOCKS","MAX_UNIFORM_BUFFER_BINDINGS","MAX_UNIFORM_BLOCK_SIZE","MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS","MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS","UNIFORM_BUFFER_OFFSET_ALIGNMENT","ACTIVE_UNIFORM_BLOCKS","UNIFORM_TYPE","UNIFORM_SIZE","UNIFORM_BLOCK_INDEX","UNIFORM_OFFSET","UNIFORM_ARRAY_STRIDE","UNIFORM_MATRIX_STRIDE","UNIFORM_IS_ROW_MAJOR","UNIFORM_BLOCK_BINDING","UNIFORM_BLOCK_DATA_SIZE","UNIFORM_BLOCK_ACTIVE_UNIFORMS","UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","OBJECT_TYPE","SYNC_CONDITION","SYNC_STATUS","SYNC_FLAGS","SYNC_FENCE","SYNC_GPU_COMMANDS_COMPLETE","UNSIGNALED","SIGNALED","ALREADY_SIGNALED","TIMEOUT_EXPIRED","CONDITION_SATISFIED","WAIT_FAILED","SYNC_FLUSH_COMMANDS_BIT","COLOR","DEPTH","STENCIL","MIN","MAX","DEPTH_COMPONENT24","STREAM_READ","STREAM_COPY","STATIC_READ","STATIC_COPY","DYNAMIC_READ","DYNAMIC_COPY","DEPTH_COMPONENT32F","DEPTH32F_STENCIL8","INVALID_INDEX","TIMEOUT_IGNORED","MAX_CLIENT_WAIT_TIMEOUT_WEBGL","VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE","UNMASKED_VENDOR_WEBGL","UNMASKED_RENDERER_WEBGL","MAX_TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_MAX_ANISOTROPY_EXT","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_R11_EAC","COMPRESSED_SIGNED_R11_EAC","COMPRESSED_RG11_EAC","COMPRESSED_SIGNED_RG11_EAC","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","COMPRESSED_SRGB8_ETC2","COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB_ATC_WEBGL","COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL","COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL","UNSIGNED_INT_24_8_WEBGL","HALF_FLOAT_OES","RGBA32F_EXT","RGB32F_EXT","FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT","UNSIGNED_NORMALIZED_EXT","MIN_EXT","MAX_EXT","SRGB_EXT","SRGB_ALPHA_EXT","SRGB8_ALPHA8_EXT","FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT","FRAGMENT_SHADER_DERIVATIVE_HINT_OES","COLOR_ATTACHMENT0_WEBGL","COLOR_ATTACHMENT1_WEBGL","COLOR_ATTACHMENT2_WEBGL","COLOR_ATTACHMENT3_WEBGL","COLOR_ATTACHMENT4_WEBGL","COLOR_ATTACHMENT5_WEBGL","COLOR_ATTACHMENT6_WEBGL","COLOR_ATTACHMENT7_WEBGL","COLOR_ATTACHMENT8_WEBGL","COLOR_ATTACHMENT9_WEBGL","COLOR_ATTACHMENT10_WEBGL","COLOR_ATTACHMENT11_WEBGL","COLOR_ATTACHMENT12_WEBGL","COLOR_ATTACHMENT13_WEBGL","COLOR_ATTACHMENT14_WEBGL","COLOR_ATTACHMENT15_WEBGL","DRAW_BUFFER0_WEBGL","DRAW_BUFFER1_WEBGL","DRAW_BUFFER2_WEBGL","DRAW_BUFFER3_WEBGL","DRAW_BUFFER4_WEBGL","DRAW_BUFFER5_WEBGL","DRAW_BUFFER6_WEBGL","DRAW_BUFFER7_WEBGL","DRAW_BUFFER8_WEBGL","DRAW_BUFFER9_WEBGL","DRAW_BUFFER10_WEBGL","DRAW_BUFFER11_WEBGL","DRAW_BUFFER12_WEBGL","DRAW_BUFFER13_WEBGL","DRAW_BUFFER14_WEBGL","DRAW_BUFFER15_WEBGL","MAX_COLOR_ATTACHMENTS_WEBGL","MAX_DRAW_BUFFERS_WEBGL","VERTEX_ARRAY_BINDING_OES","QUERY_COUNTER_BITS_EXT","CURRENT_QUERY_EXT","QUERY_RESULT_EXT","QUERY_RESULT_AVAILABLE_EXT","TIME_ELAPSED_EXT","TIMESTAMP_EXT","GPU_DISJOINT_EXT","global","navigator","window","STYLES","EXAMPLE_NOT_SUPPPORTED","display","justifyContent","alignItems","height","STAT_STYLES","position","fontSize","zIndex","color","background","padding","opacity","AnimationLoopExamplePage","props","_this","AnimationLoop","_Component","call","this","animationLoop","componentDidMount","showStats","_setDisplay","_luma_gl_addons__WEBPACK_IMPORTED_MODULE_4__","exampleConfig","path","setPathPrefix","RAW_GITHUB","start","_showStats","componentWillUnmount","stop","delete","_this2","timeWidget","_probe_gl_stats_widget__WEBPACK_IMPORTED_MODULE_5__","stats","container","refs","renderStats","title","css","header","fontWeight","framesPerUpdate","formatters","CPU Time","GPU Time","Frame Rate","resetOnUpdate","lumaStats","memWidget","memStats","GPU Memory","Buffer Memory","Renderbuffer Memory","Texture Memory","animationFrame","updateStats","_stopStats","render","_this$props","name","_this$props$panel","panel","sourceLink","isSupported","altText","getAltText","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","style","controls","getInfo","className","width","border","ref","id","canvas","_info_panel__WEBPACK_IMPORTED_MODULE_6__","Component","ERR_RESOURCE_METHOD_UNDEFINED","Resource","gl","opts","assertWebGLContext","_opts","_opts$userData","userData","uid","constructor","_bound","_handle","handle","undefined","_createHandle","byteLength","_addStats","toString","_ref$deleteChildren","_temp","deleteChildren","children","_deleteHandle","_removeStats","child","bind","funcOrHandle","_bindHandle","value","unbind","getParameter","pname","getKeyValue","assert","parameter","PARAMETERS","isWebgl2","isWebGL2","getExtension","extension","webgl1Default","webgl1","webgl2Default","webgl2","_getParameter","getParameters","_ref2","parameters","keys","values","_iterator","Object","_isArray","Array","isArray","_i","Symbol","iterator","_ref3","length","next","done","key","getKey","setParameter","Error","_setParameter","setParameters","stubRemovedMethods","version","methodNames","initialize","_getOptsFromHandle","_context","luma","_trackAllocatedMemory","bytes","_trackDeallocatedMemory","DEPRECATED_PROPS","offset","stride","type","size","divisor","normalized","integer","instanced","isInstanced","PROP_CHECKS_INITIALIZE","removedProps","replacedProps","deprecatedProps","PROP_CHECKS_SET_PROPS","Buffer","_Resource","target","GL","getElementCount","accessor","Math","Accessor","getVertexCount","ArrayBuffer","data","Number","checkProps","usage","debugData","setAccessor","_setData","_setByteLength","setProps","buffer","_accessor__WEBPACK_IMPORTED_MODULE_7__","reallocate","bytesUsed","setData","subData","_props","_props$offset","_props$srcOffset","srcOffset","bindBuffer","assertWebGL2Context","bufferSubData","_inferType","copyData","sourceBuffer","_ref","_ref$readOffset","readOffset","_ref$writeOffset","writeOffset","getData","_ref2$dstData","dstData","_ref2$srcByteOffset","srcByteOffset","_ref2$dstOffset","dstOffset","_ref2$length","dstAvailableElementCount","dstElementCount","ArrayType","getTypedArrayFromGLType","clamped","sourceAvailableElementCount","_getAvailableElementCount","dstElementOffset","copyElementCount","getBufferSubData","_temp2","_ref3$target","_ref3$index","index","_ref3$offset","bindBufferRange","bindBufferBase","_ref4","_temp3","_ref4$target","_ref4$index","getDebugData","changed","invalidateDebugData","_getTarget","bufferData","getGLTypeFromTypedArray","Float32Array","sourceElementOffset","BYTES_PER_ELEMENT","createBuffer","deleteBuffer","getBufferParameter","setByteLength","log","updateAccessor","GL_BYTE","GL_UNSIGNED_BYTE","GL_SHORT","GL_UNSIGNED_SHORT","GL_POINTS","GL_LINES","GL_LINE_LOOP","GL_LINE_STRIP","GL_TRIANGLES","GL_TRIANGLE_STRIP","GL_TRIANGLE_FAN","GL_FLOAT","COMPOSITE_GL_TYPES","_COMPOSITE_GL_TYPES","getPrimitiveDrawMode","drawMode","decomposeCompositeGLType","compositeGLType","typeAndSize","components","getCompositeGLType","glType","_COMPOSITE_GL_TYPES$g","compType","compComponents","NPOT_MIN_FILTERS","Texture","_props$id","textureUnit","loaded","depth","format","dataFormat","mipmaps","linearFiltering","supported","isFormatSupported","isLinearFilteringSupported","_DEFAULT_TEXTURE_SETT","Promise","resolvedImageData","assign","pixels","_props$pixels","_props$format","_props$border","_props$recreate","recreate","_props$parameters","_props$pixelStore","pixelStore","_props$textureUnit","_props$unpackFlipY","unpackFlipY","_props2$mipmaps","_props3","_props4$depth","_this$_deduceParamete","_deduceParameters","compressed","activeTexture","bindTexture","DEFAULT_TEXTURE_SETTINGS","glSettings","_isNPOT","_updateForNPOT","setImageData","generateMipmap","resize","_ref2$mipmaps","_this3","params","withParameters","_options$target","options","_options$pixels","_options$level","level","_options$format","_options$border","_options$offset","_options$parameters","_options$data","_options$type","_options$width","_options$height","_options$dataFormat","_options$compressed","_this$_deduceParamete2","dataType","_this$_getDataType","_getDataType","channels","DATA_FORMAT_CHANNELS","channelSize","TYPE_SIZES","setSubImageData","_this4","_ref3$pixels","_ref3$data","_ref3$x","x","_ref3$y","y","_ref3$width","_ref3$height","_ref3$level","_ref3$format","_ref3$type","_ref3$dataFormat","_ref3$compressed","_ref3$border","_ref3$parameters","_this$_deduceParamete3","ndarray","_buffer__WEBPACK_IMPORTED_MODULE_8__","compressedTexSubImage2D","texSubImage2D","_webgl_utils__WEBPACK_IMPORTED_MODULE_12__","copyFramebuffer","getActiveUnit","_ref4$compressed","textureFormat","TEXTURE_FORMATS","_this$_deduceImageSiz","_deduceImageSize","ImageData","HTMLImageElement","naturalWidth","naturalHeight","HTMLCanvasElement","ImageBitmap","HTMLVideoElement","videoWidth","videoHeight","createTexture","deleteTexture","getTexParameter","param","_getNPOTParam","texParameterf","texParameteri","isPowerOfTwo","polyfillExtension","target2","defaults","WEBGL2_CONTEXT_POLYFILLS","_defaults$meta","meta","_meta$suffix","suffix","ext","_loop","_Object$keys","_i3","extKey","polyfill","arguments","global_","initializeExtensions","polyfilled","polyfills","_iterator2","_isArray2","_i2","installPolyfills","WEBGL2_CONTEXT_OVERRIDES","originalFunc","installOverrides","__webpack_require__","d","__webpack_exports__","window_","globals","self","document","Framebuffer","attachments","readBuffer","drawBuffers","colorBufferFloat","colorBufferHalfFloat","getDefaultFramebuffer","defaultFramebuffer","_ref2$width","_ref2$height","_ref2$attachments","_ref2$color","_ref2$depth","_ref2$stencil","stencil","_ref2$check","check","attachment","object","_createDefaultAttachments","update","clearAttachments","checkStatus","_ref3$attachments","_ref3$clearAttachment","_ref3$resizeAttachmen","resizeAttachments","attach","prevHandle","_setReadBuffer","_setDrawBuffers","drawingBufferWidth","drawingBufferHeight","attachmentPoint","_ref5","_ref5$clearAttachment","_ref5$resizeAttachmen","newAttachments","bindFramebuffer","descriptor","_renderbuffer__WEBPACK_IMPORTED_MODULE_12__","_attachRenderbuffer","renderbuffer","texture","_descriptor$","layer","_descriptor$2","_attachTexture","_unattach","status","_getFrameBufferStatus","clear","_ref6","_temp4","_ref6$drawBuffers","drawBuffer","clearBuffer","readPixels","readPixelsToBuffer","copyToDataUrl","copyToImage","copyToTexture","blit","invalidate","_ref7$attachments","_ref7","_ref7$x","_ref7$y","getAttachmentParameter","_getAttachmentParameterFallback","getFramebufferAttachmentParameter","getAttachmentParameters","ATTACHMENT_PARAMETERS","_ref8","_attachments","attachmentName","show","priority","message","image","maxHeight","_ref9$target","_temp5","_ref10$target","_temp6","_parameters","defaultAttachments","_texture_2d__WEBPACK_IMPORTED_MODULE_11__","oldAttachment","framebufferRenderbuffer","framebufferTexture2D","_ref11$attachment","_ref11","_ref12$attachment","_ref12","face","mapIndexToCubeMapFace","caps","getFeatures","EXT_sRGB","createFramebuffer","deleteFramebuffer","STATUS","FRAMEBUFFER_ATTACHMENT_PARAMETERS","probe_gl__WEBPACK_IMPORTED_MODULE_0__","enable","DEFAULT_ACCESSOR_VALUES","PROP_CHECKS","_len2","accessors","_key2","_assign","getBytesPerElement","getBytesPerVertex","resolve","_len","_key","_construct","concat","JSON","compositeSetters","glConstant","setter","GL_PARAMETER_SETTERS","cache","mergedValues","compositeSetter","GL_COMPOSITE_PARAMETER_SETTERS","getter","GL_PARAMETER_GETTERS","_webgl_parameter_tables__WEBPACK_IMPORTED_MODULE_8__","state","resetParameters","GL_PARAMETER_DEFAULTS","_GL_PARAMETER_DEFAULT","Int32Array","hint","pixelStorei","_GL_PARAMETER_SETTERS","_toConsumableArray","blendEquation","blendFunc","polygonOffset","sampleCoverage","stencilFuncFront","stencilFuncBack","stencilOpFront","stencilOpBack","isEnabled","_GL_PARAMETER_GETTERS","condition","process","_is_electron__WEBPACK_IMPORTED_MODULE_0__","isBrowser","String","browser","_TEXTURE_FORMATS","types","gl2","_DATA_FORMAT_CHANNELS","_TYPE_SIZES","info","gl1","Texture2D","loadImage","_Texture","EXT_FLOAT_WEBGL2","renderbuffer_formats","_GL$DEPTH_COMPONENT","bpp","Renderbuffer","formats","getSamplesForFormat","_ref3$samples","samples","bindRenderbuffer","renderbufferStorageMultisample","renderbufferStorage","RENDERBUFFER_FORMATS","createRenderbuffer","deleteRenderbuffer","_syncHandle","getRenderbufferParameter","InfoPanel","tabIndex","dangerouslySetInnerHTML","__html","href","PureComponent","installGetterOverride","functionName","originalGetterFunc","configurable","installSetterSpy","originalSetterFunc","_gl$state","_setter","valueChanged","oldValue","apply","GLState","_ref$copyState","copyState","_ref$log","stateStack","_unified_parameter_api_webgl_parameter_tables__WEBPACK_IMPORTED_MODULE_3__","_updateCache","push","pop","oldValues","deepArrayEqual","trackContextState","_ref2$enable","polyfillContext","_webgl_function_to_parameters_table__WEBPACK_IMPORTED_MODULE_2__","GL_STATE_SETTERS","pushContextState","popContextState","isArrayX","isArrayY","i","capability","_update","disable","_update2","_update3","_hint","_update4","framebuffer","_update5","_update6","_update7","blendColor","r","g","b","_update8","mode","_update9","blendEquationSeparate","modeRGB","modeAlpha","_update10","src","dst","_update11","blendFuncSeparate","srcRGB","dstRGB","srcAlpha","dstAlpha","_update12","clearColor","_update13","clearDepth","_update14","clearStencil","s","_update15","colorMask","_update16","cullFace","_update17","depthFunc","func","_update18","depthRange","zNear","zFar","_update19","depthMask","mask","_update20","frontFace","_update21","lineWidth","_update22","factor","units","_update23","invert","_update24","scissor","_update25","stencilMask","_update26","stencilMaskSeparate","_update27","stencilFunc","_update28","stencilFuncSeparate","_update29","stencilOp","fail","zfail","zpass","_update30","stencilOpSeparate","_update31","viewport","_update32","pathPrefix","prefix","loadFile","url","fetch","then","res","reject","Image","crossOrigin","error","isElectron","versions","Boolean","electron","userAgent","ERR_TYPE_DEDUCTION","arrayOrType","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray","Int8Array","Int16Array","_ref$clamped","flipRows","_ref2$bytesPerPixel","bytesPerPixel","temp","bytesPerRow","topOffset","bottomOffset","scalePixels","newWidth","newHeight","newData","c","FEATURES","WEBGL2","VERTEX_ARRAY_OBJECT","TIMER_QUERY","INSTANCED_RENDERING","MULTIPLE_RENDER_TARGETS","ELEMENT_INDEX_UINT32","BLEND_EQUATION_MINMAX","COLOR_ENCODING_SRGB","TEXTURE_DEPTH","TEXTURE_FLOAT","TEXTURE_HALF_FLOAT","TEXTURE_FILTER_LINEAR_FLOAT","TEXTURE_FILTER_LINEAR_HALF_FLOAT","TEXTURE_FILTER_ANISOTROPIC","COLOR_ATTACHMENT_RGBA32F","COLOR_ATTACHMENT_FLOAT","COLOR_ATTACHMENT_HALF_FLOAT","GLSL_FRAG_DATA","GLSL_FRAG_DEPTH","GLSL_DERIVATIVES","GLSL_TEXTURE_LOD","_FEATURES$WEBGL2$FEAT","headlessGL","WebGLBuffer","WebGL2RenderingContext","_utils_globals__WEBPACK_IMPORTED_MODULE_0__","_utils_is_browser__WEBPACK_IMPORTED_MODULE_1__","ERR_HEADLESSGL_LOAD","m","headlessTypes","headless","DummyType","WebGLRenderingContext","WebGLProgram","WebGLShader","WebGLFramebuffer","WebGLRenderbuffer","WebGLTexture","WebGLUniformLocation","WebGLActiveInfo","WebGLShaderPrecisionFormat","GL_DEPTH_BUFFER_BIT","GL_STENCIL_BUFFER_BIT","GL_COLOR_BUFFER_BIT","GL_COLOR","GL_DEPTH","GL_STENCIL","GL_DEPTH_STENCIL","ERR_ARGUMENTS","_ref$framebuffer","_ref$color","_ref$depth","_ref$stencil","clearFlags","_ref2$framebuffer","_ref2$buffer","_ref2$drawBuffer","_ref2$value","cloneTextureFrom","refTexture","overrides","TextureType","toFramebuffer","_classes_framebuffer__WEBPACK_IMPORTED_MODULE_4__","FACES","TextureCube","_props$mipmaps","setCubeMapImageData","subImage","_ref$x","_ref$y","_ref$mipmapLevel","mipmapLevel","_subImage","_callee","_ref2$border","_ref2$format","_ref2$type","imageDataMap","resolvedFaces","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_7___default","wrap","prev","all","map","facePixels","sent","lodLevel","setImageDataForFace","imageData","Texture3D","_ref$level","_ref$dataFormat","_ref$border","_ref$type","_ref$offset","_ref$parameters","texImage3D","_buffer__WEBPACK_IMPORTED_MODULE_7__","array","webgl_setter_function_table","_framebuffer","blend","args","cull","depthTest","dither","derivativeHint","mipmapHint","polygonOffsetFill","scissorTest","stencilTest","_value","backMask","_args","backFunc","backRef","_args2","sfail","dpfail","dppass","backSfail","backDpfail","backDppass","glSetParameters","FUNCTION_STYLE_PARAMETER_SETTERS","__VERSION__","StatsManager","Map","get","has","set","is_browser","modules","nodeIO","glFormatToComponents","readPixelsToArray","source","_ref$sourceX","sourceX","_ref$sourceY","sourceY","_ref$sourceFormat","sourceFormat","_ref$sourceAttachment","sourceAttachment","_ref$target","sourceWidth","sourceHeight","sourceType","_getFramebuffer","getFramebuffer","pixelArray","getPixelArray","_ref3$sourceAttachmen","_ref3$targetMaxHeight","targetMaxHeight","MAX_SAFE_INTEGER","_scalePixels","context","toDataURL","classes_framebuffer","getWebGL2ValueOrZero","WEBGL_PARAMETERS","_WEBGL_PARAMETERS","polyfill_table_isWebGL2","_WEBGL2_CONTEXT_POLYF","createVertexArray","deleteVertexArray","bindVertexArray","isVertexArray","vertexAttribDivisor","location","drawElementsInstanced","drawArraysInstanced","createQuery","deleteQuery","beginQuery","endQuery","getQuery","getQueryObject","getQueryParameter","getVertexAttrib","result","_getExtensionData","getExtensionData","getProgramParameter","program","getInternalformatParameter","extensions","originalGetParameter","limit","_track_context_state__WEBPACK_IMPORTED_MODULE_0__","_unified_parameter_api_set_parameters__WEBPACK_IMPORTED_MODULE_1__","_utils__WEBPACK_IMPORTED_MODULE_2__","_utils__WEBPACK_IMPORTED_MODULE_3__","isObjectEmpty","_parameters$nocatch","nocatch","propChecks","_propChecks$removedPr","_propChecks$deprecate","_propChecks$replacedP","propName","replacement","_propName","replacementProp","newProps","_propName2","ERR_CONTEXT","ERR_WEBGL2","isWebGL","_version","_assert__WEBPACK_IMPORTED_MODULE_0__","uidCounters","n","obj","isEmpty","number","isNaN","_log__WEBPACK_IMPORTED_MODULE_0__","instance","upgradeMessage","prototype","methodName","Query","_queryPending","_pollingPromise","hasTimerQuery","hasFeatures","beginTimeElapsedQuery","begin","beginOcclusionQuery","_ref2$conservative","conservative","beginTransformFeedbackQuery","end","isResultAvailable","resultAvailable","isTimerDisjoint","getResult","getTimerMilliseconds","createPoll","POSITIVE_INFINITY","counter","requestAnimationFrame","poll","features","every","feature","isFeatureSupported","cap","_webgl_features_table__WEBPACK_IMPORTED_MODULE_3__","WEBGL_FEATURES","featureDefinition","ERR_HEADLESSGL_NOT_AVAILABLE","ERR_HEADLESSGL_FAILED","pageLoadPromise","isPage","isPageLoaded","getCanvas","targetCanvas","_ref2$onError","onError","_ref$width","_ref$height","_ref$id","_ref$insert","insert","body","firstChild","createCanvas","contextDefaults","throwOnFailure","manageState","debug","createGLContext","_options","throwOnError","_options$onError","onCreateError","_options$webgl","_options$webgl2","createBrowserContext","webgl_types","createHeadlessContext","webGL","vendorMasked","rendererMasked","vendor","renderer","shadingLanguageVersion","getContextDebugInfo","driver","logInfo","instrumentGLContext","_instrumented","getVersion","_options3","makeDebugContext","cancelAnimationFrame","timerId","clearTimeout","statIdCounter","_props$onCreateContex","onCreateContext","_props$onAddHTML","onAddHTML","_props$onInitialize","onInitialize","_props$onRender","onRender","_props$onFinalize","onFinalize","_props$gl","_props$glOptions","glOptions","_props$debug","_props$createFramebuf","_props$autoResizeView","autoResizeViewport","_props$autoResizeDraw","autoResizeDrawingBuffer","_props$stats","_props2$useDevicePixe","useDevicePixels","needsRedraw","timeline","cpuTime","gpuTime","frameRate","_initialized","_running","_animationFrameId","_nextFramePromise","_resolveNextFrame","_cpuStartTime","_onMousemove","_onMouseleave","setNeedsRedraw","reason","getPageLoadPromise","_createWebGLContext","_createFramebuffer","_startEventHandling","_initializeCallbackData","_updateCallbackData","_resizeCanvasDrawingBuffer","_resizeViewport","_gpuTimeQuery","query","animationProps","appContext","_addCallbackData","_startLoop","redraw","_beginTimers","_setupFrame","_renderFrame","_clearNeedsRedraw","offScreen","commit","_endTimers","_finalizeCallbackData","attachTimeline","detachTimeline","waitForRender","regenerator_default","abrupt","_this$props2","_this$props3","_this$props4","getHTMLControlValue","defaultValue","element","setViewParameters","_requestAnimationFrame","renderFrame","callback","renderFrameCallback","setTimeout","_this$display","_onSetupFrame","_resizeFramebuffer","startTime","Date","now","engineTime","tick","tock","time","_timeline","_animationLoop","_mousePosition","_this$_getSizeAndAspe","_getSizeAndAspect","aspect","getTime","_offScreen","OffscreenCanvas","_createInfoDiv","wrapperDiv","div","html","clientHeight","devicePixelRatio","clientWidth","resizeGLContext","timeEnd","timeStart","addTime","e","offsetX","offsetY","UNIFORM_SETTERS","_UNIFORM_SETTERS","toFloatArray","toIntArray","toUIntArray","FLOAT_ARRAY","INT_ARRAY","UINT_ARRAY","array1","toTypedArray","uniformLength","Type","parseUniformName","matches","getUniformSetter","checkUniformValue","checkLength","checkUniformArray","isFinite","classes_texture","areUniformsEqual","uniform1","uniform2","len","getShaderName","shader","defaultName","match","GL_FRAGMENT_SHADER","GL_VERTEX_SHADER","parseGLSLCompilerError","errLog","shaderType","shaderName","errorStrings","errors","warnings","shaderDescription","getShaderTypeName","errorString","segments","line","parseInt","lines","string","delim","maxDigits","lineNumber","digits","padLeft","addLineNumbers","formatErrors","column","trim","ERR_SOURCE","Shader","_inheritsLoose","getTypeName","_proto","_compile","getShaderParameter","getName","getSource","getShaderSource","getTranslatedSource","shaderSource","compileShader","_parseGLSLCompilerErr","getShaderInfoLog","deleteShader","resource","VertexShader","_Shader","createShader","shader_Shader","FragmentShader","_Shader2","ProgramConfiguration","attributeInfos","attributeInfosByName","attributeInfosByLocation","varyingInfos","varyingInfosByName","_readAttributesFromProgram","_readVaryingsFromProgram","getAttributeInfo","locationOrName","getAttributeLocation","attributeInfo","getAttributeAccessor","getVaryingInfo","getVaryingIndex","varying","getVaryingAccessor","count","_gl$getActiveAttrib","_addAttribute","sort","_gl$getTransformFeedb","_addVarying","_decomposeCompositeGL","compositeType","_inferProperties","classes_accessor","test","_decomposeCompositeGL2","V6_DEPRECATED_METHODS","Program","_isCached","_setId","vs","fs","varyings","_props$bufferMode","bufferMode","shader_VertexShader","shader_FragmentShader","uniforms","transformFeedbackVaryings","_compileAndLink","_readUniformLocationsFromLinkedProgram","configuration","program_configuration_ProgramConfiguration","setUniforms","draw","logPriority","_ref$drawMode","vertexCount","_ref$isIndexed","isIndexed","_ref$indexType","indexType","_ref$isInstanced","_ref$instanceCount","instanceCount","_ref$vertexArray","vertexArray","transformFeedback","samplers","fb","useProgram","_areTexturesRenderable","primitiveMode","_bindTextures","drawRangeElements","drawElements","drawArrays","_onChangeCallback","uniform","somethingChanged","changedUniforms","slice","uniformMap","uniformName","console","checkUniformValues","_setUniforms","reset","texturesRenderable","uniformSetter","_uniformSetters","textureIndex","createProgram","deleteProgram","_getOptionsFromHandle","getAttachedShaders","shaderHandle","programName","_getName","_uniformCount","getActiveUniform","_parseUniformName","l","_textureIndexCounter","getActiveUniforms","uniformIndices","getUniformBlockIndex","blockName","getActiveUniformBlockParameter","blockIndex","uniformBlockBinding","blockBinding","Display","getViews","submitFrame","views","view","createEnterVRButton","_canvas$getBoundingCl","getBoundingClientRect","top","left","button","VRDisplay","_Display","_vrSupported","vrFrameData","VRFrameData","vrPresenting","vrFrame","_vrDisplayPresentChange","_assertThisInitialized","_removeVRButton","_addVRButton","vrDisplay","getFrameData","_this$vrFrameData","leftProjectionMatrix","leftViewMatrix","rightProjectionMatrix","rightViewMatrix","displayEye","projectionMatrix","viewMatrix","displays","vrButton","_getCanvas","getVRDisplays","displayName","onclick","_startDisplay","requestPresent","isPresenting","arrayBuffer","getScratchArray","VertexArrayObject","hasVertexArrays","bufferValue","constantAttributeZero","getBrowser","getDefaultArray","defaultVertexArray","getMaxAttributes","MAX_ATTRIBUTES","setConstant","setElementBuffer","elementBuffer","setBuffer","_enable","enableVertexAttribArray","disableVertexAttribArray","getConstantBuffer","constantValue","_normalizeConstantArrayValue","elementCount","updateNeeded","classes_buffer","_compareConstantArrayValues","typedArray","_ref$start","_ref$count","total","copied","fillArray","arrayValue","v1","v2","_setConstantFloatArray","_setConstantIntArray","_setConstantUintArray","elements","getVertexAttribOffset","MULTI_LOCATION_ATTRIBUTE_REGEXP","DEPRECATIONS_V6","VertexArray","elementsAccessor","unused","drawParams","vertexArrayObject","vertex_array_object_VertexArrayObject","bindOnUse","fill","setAttributes","attributes","clearDrawParams","getDrawParams","_updateDrawParams","appParameters","_setAttribute","isDefaultArray","appAccessor","_this$_resolveLocatio","_resolveLocationAndAccessor","_this$_resolveLocatio2","unbindBuffers","vertexAttribPointer","bindBuffers","bindForDraw","_setConstantAttributes","_this5","_this$_getAttributeIn","_getAttributeIndex","accessInfo","_getAttributeInfo","attributeName","multiLocation","locationOffset","constant","_accessor","_setConstantAttributeZero","_setConstantAttribute","isDefault","indexCount","Infinity","_updateDrawParamsForLocation","setElements"],"mappings":"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","file":"1-6a74c0a776c268d1ec8b.js","sourcesContent":["// GL constants, copied from Mozilla documentation\n// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants\n\n// Standard WebGL 1 constants\n// These constants are defined on the WebGLRenderingContext interface.\n\n/* eslint-disable key-spacing, max-len, no-inline-comments, camelcase */\n// eslint-disable-next-line\nmodule.exports = {\n  // Clearing buffers\n  // Constants passed to clear() to clear buffer masks.\n\n  DEPTH_BUFFER_BIT: 0x00000100,\n  STENCIL_BUFFER_BIT: 0x00000400,\n  COLOR_BUFFER_BIT: 0x00004000,\n\n  // Rendering primitives\n  // Constants passed to drawElements() or drawArrays() to specify what kind of primitive to render.\n\n  POINTS: 0x0000,\n  LINES: 0x0001,\n  LINE_LOOP: 0x0002,\n  LINE_STRIP: 0x0003,\n  TRIANGLES: 0x0004,\n  TRIANGLE_STRIP: 0x0005,\n  TRIANGLE_FAN: 0x0006,\n\n  // Blending modes\n  // Constants passed to blendFunc() or blendFuncSeparate() to specify the blending mode (for both, RBG and alpha, or separately).\n\n  ZERO: 0,\n  ONE: 1,\n  SRC_COLOR: 0x0300,\n  ONE_MINUS_SRC_COLOR: 0x0301,\n  SRC_ALPHA: 0x0302,\n  ONE_MINUS_SRC_ALPHA: 0x0303,\n  DST_ALPHA: 0x0304,\n  ONE_MINUS_DST_ALPHA: 0x0305,\n  DST_COLOR: 0x0306,\n  ONE_MINUS_DST_COLOR: 0x0307,\n  SRC_ALPHA_SATURATE: 0x0308,\n  CONSTANT_COLOR: 0x8001,\n  ONE_MINUS_CONSTANT_COLOR: 0x8002,\n  CONSTANT_ALPHA: 0x8003,\n  ONE_MINUS_CONSTANT_ALPHA: 0x8004,\n\n  // Blending equations\n  // Constants passed to blendEquation() or blendEquationSeparate() to control\n  // how the blending is calculated (for both, RBG and alpha, or separately).\n\n  FUNC_ADD: 0x8006,\n  FUNC_SUBTRACT: 0x800a,\n  FUNC_REVERSE_SUBTRACT: 0x800b,\n\n  // Getting GL parameter information\n  // Constants passed to getParameter() to specify what information to return.\n\n  BLEND_EQUATION: 0x8009,\n  BLEND_EQUATION_RGB: 0x8009,\n  BLEND_EQUATION_ALPHA: 0x883d,\n  BLEND_DST_RGB: 0x80c8,\n  BLEND_SRC_RGB: 0x80c9,\n  BLEND_DST_ALPHA: 0x80ca,\n  BLEND_SRC_ALPHA: 0x80cb,\n  BLEND_COLOR: 0x8005,\n  ARRAY_BUFFER_BINDING: 0x8894,\n  ELEMENT_ARRAY_BUFFER_BINDING: 0x8895,\n  LINE_WIDTH: 0x0b21,\n  ALIASED_POINT_SIZE_RANGE: 0x846d,\n  ALIASED_LINE_WIDTH_RANGE: 0x846e,\n  CULL_FACE_MODE: 0x0b45,\n  FRONT_FACE: 0x0b46,\n  DEPTH_RANGE: 0x0b70,\n  DEPTH_WRITEMASK: 0x0b72,\n  DEPTH_CLEAR_VALUE: 0x0b73,\n  DEPTH_FUNC: 0x0b74,\n  STENCIL_CLEAR_VALUE: 0x0b91,\n  STENCIL_FUNC: 0x0b92,\n  STENCIL_FAIL: 0x0b94,\n  STENCIL_PASS_DEPTH_FAIL: 0x0b95,\n  STENCIL_PASS_DEPTH_PASS: 0x0b96,\n  STENCIL_REF: 0x0b97,\n  STENCIL_VALUE_MASK: 0x0b93,\n  STENCIL_WRITEMASK: 0x0b98,\n  STENCIL_BACK_FUNC: 0x8800,\n  STENCIL_BACK_FAIL: 0x8801,\n  STENCIL_BACK_PASS_DEPTH_FAIL: 0x8802,\n  STENCIL_BACK_PASS_DEPTH_PASS: 0x8803,\n  STENCIL_BACK_REF: 0x8ca3,\n  STENCIL_BACK_VALUE_MASK: 0x8ca4,\n  STENCIL_BACK_WRITEMASK: 0x8ca5,\n  VIEWPORT: 0x0ba2,\n  SCISSOR_BOX: 0x0c10,\n  COLOR_CLEAR_VALUE: 0x0c22,\n  COLOR_WRITEMASK: 0x0c23,\n  UNPACK_ALIGNMENT: 0x0cf5,\n  PACK_ALIGNMENT: 0x0d05,\n  MAX_TEXTURE_SIZE: 0x0d33,\n  MAX_VIEWPORT_DIMS: 0x0d3a,\n  SUBPIXEL_BITS: 0x0d50,\n  RED_BITS: 0x0d52,\n  GREEN_BITS: 0x0d53,\n  BLUE_BITS: 0x0d54,\n  ALPHA_BITS: 0x0d55,\n  DEPTH_BITS: 0x0d56,\n  STENCIL_BITS: 0x0d57,\n  POLYGON_OFFSET_UNITS: 0x2a00,\n  POLYGON_OFFSET_FACTOR: 0x8038,\n  TEXTURE_BINDING_2D: 0x8069,\n  SAMPLE_BUFFERS: 0x80a8,\n  SAMPLES: 0x80a9,\n  SAMPLE_COVERAGE_VALUE: 0x80aa,\n  SAMPLE_COVERAGE_INVERT: 0x80ab,\n  COMPRESSED_TEXTURE_FORMATS: 0x86a3,\n  VENDOR: 0x1f00,\n  RENDERER: 0x1f01,\n  VERSION: 0x1f02,\n  IMPLEMENTATION_COLOR_READ_TYPE: 0x8b9a,\n  IMPLEMENTATION_COLOR_READ_FORMAT: 0x8b9b,\n  BROWSER_DEFAULT_WEBGL: 0x9244,\n\n  // Buffers\n  // Constants passed to bufferData(), bufferSubData(), bindBuffer(), or\n  // getBufferParameter().\n\n  STATIC_DRAW: 0x88e4,\n  STREAM_DRAW: 0x88e0,\n  DYNAMIC_DRAW: 0x88e8,\n  ARRAY_BUFFER: 0x8892,\n  ELEMENT_ARRAY_BUFFER: 0x8893,\n  BUFFER_SIZE: 0x8764,\n  BUFFER_USAGE: 0x8765,\n\n  // Vertex attributes\n  // Constants passed to getVertexAttrib().\n\n  CURRENT_VERTEX_ATTRIB: 0x8626,\n  VERTEX_ATTRIB_ARRAY_ENABLED: 0x8622,\n  VERTEX_ATTRIB_ARRAY_SIZE: 0x8623,\n  VERTEX_ATTRIB_ARRAY_STRIDE: 0x8624,\n  VERTEX_ATTRIB_ARRAY_TYPE: 0x8625,\n  VERTEX_ATTRIB_ARRAY_NORMALIZED: 0x886a,\n  VERTEX_ATTRIB_ARRAY_POINTER: 0x8645,\n  VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 0x889f,\n\n  // Culling\n  // Constants passed to cullFace().\n\n  CULL_FACE: 0x0b44,\n  FRONT: 0x0404,\n  BACK: 0x0405,\n  FRONT_AND_BACK: 0x0408,\n\n  // Enabling and disabling\n  // Constants passed to enable() or disable().\n\n  BLEND: 0x0be2,\n  DEPTH_TEST: 0x0b71,\n  DITHER: 0x0bd0,\n  POLYGON_OFFSET_FILL: 0x8037,\n  SAMPLE_ALPHA_TO_COVERAGE: 0x809e,\n  SAMPLE_COVERAGE: 0x80a0,\n  SCISSOR_TEST: 0x0c11,\n  STENCIL_TEST: 0x0b90,\n\n  // Errors\n  // Constants returned from getError().\n\n  NO_ERROR: 0,\n  INVALID_ENUM: 0x0500,\n  INVALID_VALUE: 0x0501,\n  INVALID_OPERATION: 0x0502,\n  OUT_OF_MEMORY: 0x0505,\n  CONTEXT_LOST_WEBGL: 0x9242,\n\n  // Front face directions\n  // Constants passed to frontFace().\n\n  CW: 0x0900,\n  CCW: 0x0901,\n\n  // Hints\n  // Constants passed to hint()\n\n  DONT_CARE: 0x1100,\n  FASTEST: 0x1101,\n  NICEST: 0x1102,\n  GENERATE_MIPMAP_HINT: 0x8192,\n\n  // Data types\n\n  BYTE: 0x1400,\n  UNSIGNED_BYTE: 0x1401,\n  SHORT: 0x1402,\n  UNSIGNED_SHORT: 0x1403,\n  INT: 0x1404,\n  UNSIGNED_INT: 0x1405,\n  FLOAT: 0x1406,\n\n  // Pixel formats\n\n  DEPTH_COMPONENT: 0x1902,\n  ALPHA: 0x1906,\n  RGB: 0x1907,\n  RGBA: 0x1908,\n  LUMINANCE: 0x1909,\n  LUMINANCE_ALPHA: 0x190a,\n\n  // Pixel types\n\n  // UNSIGNED_BYTE: 0x1401,\n  UNSIGNED_SHORT_4_4_4_4: 0x8033,\n  UNSIGNED_SHORT_5_5_5_1: 0x8034,\n  UNSIGNED_SHORT_5_6_5: 0x8363,\n\n  // Shaders\n  // Constants passed to createShader() or getShaderParameter()\n\n  FRAGMENT_SHADER: 0x8b30,\n  VERTEX_SHADER: 0x8b31,\n  COMPILE_STATUS: 0x8b81,\n  DELETE_STATUS: 0x8b80,\n  LINK_STATUS: 0x8b82,\n  VALIDATE_STATUS: 0x8b83,\n  ATTACHED_SHADERS: 0x8b85,\n  ACTIVE_ATTRIBUTES: 0x8b89,\n  ACTIVE_UNIFORMS: 0x8b86,\n  MAX_VERTEX_ATTRIBS: 0x8869,\n  MAX_VERTEX_UNIFORM_VECTORS: 0x8dfb,\n  MAX_VARYING_VECTORS: 0x8dfc,\n  MAX_COMBINED_TEXTURE_IMAGE_UNITS: 0x8b4d,\n  MAX_VERTEX_TEXTURE_IMAGE_UNITS: 0x8b4c,\n  MAX_TEXTURE_IMAGE_UNITS: 0x8872,\n  MAX_FRAGMENT_UNIFORM_VECTORS: 0x8dfd,\n  SHADER_TYPE: 0x8b4f,\n  SHADING_LANGUAGE_VERSION: 0x8b8c,\n  CURRENT_PROGRAM: 0x8b8d,\n\n  // Depth or stencil tests\n  // Constants passed to depthFunc() or stencilFunc().\n\n  NEVER: 0x0200,\n  ALWAYS: 0x0207,\n  LESS: 0x0201,\n  EQUAL: 0x0202,\n  LEQUAL: 0x0203,\n  GREATER: 0x0204,\n  GEQUAL: 0x0206,\n  NOTEQUAL: 0x0205,\n\n  // Stencil actions\n  // Constants passed to stencilOp().\n\n  KEEP: 0x1e00,\n  REPLACE: 0x1e01,\n  INCR: 0x1e02,\n  DECR: 0x1e03,\n  INVERT: 0x150a,\n  INCR_WRAP: 0x8507,\n  DECR_WRAP: 0x8508,\n\n  // Textures\n  // Constants passed to texParameteri(),\n  // texParameterf(), bindTexture(), texImage2D(), and others.\n\n  NEAREST: 0x2600,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_NEAREST: 0x2700,\n  LINEAR_MIPMAP_NEAREST: 0x2701,\n  NEAREST_MIPMAP_LINEAR: 0x2702,\n  LINEAR_MIPMAP_LINEAR: 0x2703,\n  TEXTURE_MAG_FILTER: 0x2800,\n  TEXTURE_MIN_FILTER: 0x2801,\n  TEXTURE_WRAP_S: 0x2802,\n  TEXTURE_WRAP_T: 0x2803,\n  TEXTURE_2D: 0x0de1,\n  TEXTURE: 0x1702,\n  TEXTURE_CUBE_MAP: 0x8513,\n  TEXTURE_BINDING_CUBE_MAP: 0x8514,\n  TEXTURE_CUBE_MAP_POSITIVE_X: 0x8515,\n  TEXTURE_CUBE_MAP_NEGATIVE_X: 0x8516,\n  TEXTURE_CUBE_MAP_POSITIVE_Y: 0x8517,\n  TEXTURE_CUBE_MAP_NEGATIVE_Y: 0x8518,\n  TEXTURE_CUBE_MAP_POSITIVE_Z: 0x8519,\n  TEXTURE_CUBE_MAP_NEGATIVE_Z: 0x851a,\n  MAX_CUBE_MAP_TEXTURE_SIZE: 0x851c,\n  // TEXTURE0 - 31 0x84C0 - 0x84DF A texture unit.\n  TEXTURE0: 0x84c0,\n  ACTIVE_TEXTURE: 0x84e0,\n  REPEAT: 0x2901,\n  CLAMP_TO_EDGE: 0x812f,\n  MIRRORED_REPEAT: 0x8370,\n\n  // Emulation\n  TEXTURE_WIDTH: 0x1000,\n  TEXTURE_HEIGHT: 0x1001,\n\n  // Uniform types\n\n  FLOAT_VEC2: 0x8b50,\n  FLOAT_VEC3: 0x8b51,\n  FLOAT_VEC4: 0x8b52,\n  INT_VEC2: 0x8b53,\n  INT_VEC3: 0x8b54,\n  INT_VEC4: 0x8b55,\n  BOOL: 0x8b56,\n  BOOL_VEC2: 0x8b57,\n  BOOL_VEC3: 0x8b58,\n  BOOL_VEC4: 0x8b59,\n  FLOAT_MAT2: 0x8b5a,\n  FLOAT_MAT3: 0x8b5b,\n  FLOAT_MAT4: 0x8b5c,\n  SAMPLER_2D: 0x8b5e,\n  SAMPLER_CUBE: 0x8b60,\n\n  // Shader precision-specified types\n\n  LOW_FLOAT: 0x8df0,\n  MEDIUM_FLOAT: 0x8df1,\n  HIGH_FLOAT: 0x8df2,\n  LOW_INT: 0x8df3,\n  MEDIUM_INT: 0x8df4,\n  HIGH_INT: 0x8df5,\n\n  // Framebuffers and renderbuffers\n\n  FRAMEBUFFER: 0x8d40,\n  RENDERBUFFER: 0x8d41,\n  RGBA4: 0x8056,\n  RGB5_A1: 0x8057,\n  RGB565: 0x8d62,\n  DEPTH_COMPONENT16: 0x81a5,\n  STENCIL_INDEX: 0x1901,\n  STENCIL_INDEX8: 0x8d48,\n  DEPTH_STENCIL: 0x84f9,\n  RENDERBUFFER_WIDTH: 0x8d42,\n  RENDERBUFFER_HEIGHT: 0x8d43,\n  RENDERBUFFER_INTERNAL_FORMAT: 0x8d44,\n  RENDERBUFFER_RED_SIZE: 0x8d50,\n  RENDERBUFFER_GREEN_SIZE: 0x8d51,\n  RENDERBUFFER_BLUE_SIZE: 0x8d52,\n  RENDERBUFFER_ALPHA_SIZE: 0x8d53,\n  RENDERBUFFER_DEPTH_SIZE: 0x8d54,\n  RENDERBUFFER_STENCIL_SIZE: 0x8d55,\n  FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 0x8cd0,\n  FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 0x8cd1,\n  FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 0x8cd2,\n  FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 0x8cd3,\n  COLOR_ATTACHMENT0: 0x8ce0,\n  DEPTH_ATTACHMENT: 0x8d00,\n  STENCIL_ATTACHMENT: 0x8d20,\n  DEPTH_STENCIL_ATTACHMENT: 0x821a,\n  NONE: 0,\n  FRAMEBUFFER_COMPLETE: 0x8cd5,\n  FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 0x8cd6,\n  FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 0x8cd7,\n  FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 0x8cd9,\n  FRAMEBUFFER_UNSUPPORTED: 0x8cdd,\n  FRAMEBUFFER_BINDING: 0x8ca6,\n  RENDERBUFFER_BINDING: 0x8ca7,\n  READ_FRAMEBUFFER: 0x8ca8,\n  DRAW_FRAMEBUFFER: 0x8ca9,\n  MAX_RENDERBUFFER_SIZE: 0x84e8,\n  INVALID_FRAMEBUFFER_OPERATION: 0x0506,\n\n  // Pixel storage modes\n  // Constants passed to pixelStorei().\n\n  UNPACK_FLIP_Y_WEBGL: 0x9240,\n  UNPACK_PREMULTIPLY_ALPHA_WEBGL: 0x9241,\n  UNPACK_COLORSPACE_CONVERSION_WEBGL: 0x9243,\n\n  // /////////////////////////////////////////////////////\n  // Additional constants defined WebGL 2\n  // These constants are defined on the WebGL2RenderingContext interface.\n  // All WebGL 1 constants are also available in a WebGL 2 context.\n  // /////////////////////////////////////////////////////\n\n  // Getting GL parameter information\n  // Constants passed to getParameter()\n  // to specify what information to return.\n\n  READ_BUFFER: 0x0c02,\n  UNPACK_ROW_LENGTH: 0x0cf2,\n  UNPACK_SKIP_ROWS: 0x0cf3,\n  UNPACK_SKIP_PIXELS: 0x0cf4,\n  PACK_ROW_LENGTH: 0x0d02,\n  PACK_SKIP_ROWS: 0x0d03,\n  PACK_SKIP_PIXELS: 0x0d04,\n  TEXTURE_BINDING_3D: 0x806a,\n  UNPACK_SKIP_IMAGES: 0x806d,\n  UNPACK_IMAGE_HEIGHT: 0x806e,\n  MAX_3D_TEXTURE_SIZE: 0x8073,\n  MAX_ELEMENTS_VERTICES: 0x80e8,\n  MAX_ELEMENTS_INDICES: 0x80e9,\n  MAX_TEXTURE_LOD_BIAS: 0x84fd,\n  MAX_FRAGMENT_UNIFORM_COMPONENTS: 0x8b49,\n  MAX_VERTEX_UNIFORM_COMPONENTS: 0x8b4a,\n  MAX_ARRAY_TEXTURE_LAYERS: 0x88ff,\n  MIN_PROGRAM_TEXEL_OFFSET: 0x8904,\n  MAX_PROGRAM_TEXEL_OFFSET: 0x8905,\n  MAX_VARYING_COMPONENTS: 0x8b4b,\n  FRAGMENT_SHADER_DERIVATIVE_HINT: 0x8b8b,\n  RASTERIZER_DISCARD: 0x8c89,\n  VERTEX_ARRAY_BINDING: 0x85b5,\n  MAX_VERTEX_OUTPUT_COMPONENTS: 0x9122,\n  MAX_FRAGMENT_INPUT_COMPONENTS: 0x9125,\n  MAX_SERVER_WAIT_TIMEOUT: 0x9111,\n  MAX_ELEMENT_INDEX: 0x8d6b,\n\n  // Textures\n  // Constants passed to texParameteri(),\n  // texParameterf(), bindTexture(), texImage2D(), and others.\n\n  RED: 0x1903,\n  RGB8: 0x8051,\n  RGBA8: 0x8058,\n  RGB10_A2: 0x8059,\n  TEXTURE_3D: 0x806f,\n  TEXTURE_WRAP_R: 0x8072,\n  TEXTURE_MIN_LOD: 0x813a,\n  TEXTURE_MAX_LOD: 0x813b,\n  TEXTURE_BASE_LEVEL: 0x813c,\n  TEXTURE_MAX_LEVEL: 0x813d,\n  TEXTURE_COMPARE_MODE: 0x884c,\n  TEXTURE_COMPARE_FUNC: 0x884d,\n  SRGB: 0x8c40,\n  SRGB8: 0x8c41,\n  SRGB8_ALPHA8: 0x8c43,\n  COMPARE_REF_TO_TEXTURE: 0x884e,\n  RGBA32F: 0x8814,\n  RGB32F: 0x8815,\n  RGBA16F: 0x881a,\n  RGB16F: 0x881b,\n  TEXTURE_2D_ARRAY: 0x8c1a,\n  TEXTURE_BINDING_2D_ARRAY: 0x8c1d,\n  R11F_G11F_B10F: 0x8c3a,\n  RGB9_E5: 0x8c3d,\n  RGBA32UI: 0x8d70,\n  RGB32UI: 0x8d71,\n  RGBA16UI: 0x8d76,\n  RGB16UI: 0x8d77,\n  RGBA8UI: 0x8d7c,\n  RGB8UI: 0x8d7d,\n  RGBA32I: 0x8d82,\n  RGB32I: 0x8d83,\n  RGBA16I: 0x8d88,\n  RGB16I: 0x8d89,\n  RGBA8I: 0x8d8e,\n  RGB8I: 0x8d8f,\n  RED_INTEGER: 0x8d94,\n  RGB_INTEGER: 0x8d98,\n  RGBA_INTEGER: 0x8d99,\n  R8: 0x8229,\n  RG8: 0x822b,\n  R16F: 0x822d,\n  R32F: 0x822e,\n  RG16F: 0x822f,\n  RG32F: 0x8230,\n  R8I: 0x8231,\n  R8UI: 0x8232,\n  R16I: 0x8233,\n  R16UI: 0x8234,\n  R32I: 0x8235,\n  R32UI: 0x8236,\n  RG8I: 0x8237,\n  RG8UI: 0x8238,\n  RG16I: 0x8239,\n  RG16UI: 0x823a,\n  RG32I: 0x823b,\n  RG32UI: 0x823c,\n  R8_SNORM: 0x8f94,\n  RG8_SNORM: 0x8f95,\n  RGB8_SNORM: 0x8f96,\n  RGBA8_SNORM: 0x8f97,\n  RGB10_A2UI: 0x906f,\n\n  /* covered by extension\n  COMPRESSED_R11_EAC : 0x9270,\n  COMPRESSED_SIGNED_R11_EAC: 0x9271,\n  COMPRESSED_RG11_EAC: 0x9272,\n  COMPRESSED_SIGNED_RG11_EAC : 0x9273,\n  COMPRESSED_RGB8_ETC2 : 0x9274,\n  COMPRESSED_SRGB8_ETC2: 0x9275,\n  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 : 0x9276,\n  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC : 0x9277,\n  COMPRESSED_RGBA8_ETC2_EAC: 0x9278,\n  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : 0x9279,\n  */\n  TEXTURE_IMMUTABLE_FORMAT: 0x912f,\n  TEXTURE_IMMUTABLE_LEVELS: 0x82df,\n\n  // Pixel types\n\n  UNSIGNED_INT_2_10_10_10_REV: 0x8368,\n  UNSIGNED_INT_10F_11F_11F_REV: 0x8c3b,\n  UNSIGNED_INT_5_9_9_9_REV: 0x8c3e,\n  FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8dad,\n  UNSIGNED_INT_24_8: 0x84fa,\n  HALF_FLOAT: 0x140b,\n  RG: 0x8227,\n  RG_INTEGER: 0x8228,\n  INT_2_10_10_10_REV: 0x8d9f,\n\n  // Queries\n\n  CURRENT_QUERY: 0x8865,\n  QUERY_RESULT: 0x8866,\n  QUERY_RESULT_AVAILABLE: 0x8867,\n  ANY_SAMPLES_PASSED: 0x8c2f,\n  ANY_SAMPLES_PASSED_CONSERVATIVE: 0x8d6a,\n\n  // Draw buffers\n\n  MAX_DRAW_BUFFERS: 0x8824,\n  DRAW_BUFFER0: 0x8825,\n  DRAW_BUFFER1: 0x8826,\n  DRAW_BUFFER2: 0x8827,\n  DRAW_BUFFER3: 0x8828,\n  DRAW_BUFFER4: 0x8829,\n  DRAW_BUFFER5: 0x882a,\n  DRAW_BUFFER6: 0x882b,\n  DRAW_BUFFER7: 0x882c,\n  DRAW_BUFFER8: 0x882d,\n  DRAW_BUFFER9: 0x882e,\n  DRAW_BUFFER10: 0x882f,\n  DRAW_BUFFER11: 0x8830,\n  DRAW_BUFFER12: 0x8831,\n  DRAW_BUFFER13: 0x8832,\n  DRAW_BUFFER14: 0x8833,\n  DRAW_BUFFER15: 0x8834,\n  MAX_COLOR_ATTACHMENTS: 0x8cdf,\n  COLOR_ATTACHMENT1: 0x8ce1,\n  COLOR_ATTACHMENT2: 0x8ce2,\n  COLOR_ATTACHMENT3: 0x8ce3,\n  COLOR_ATTACHMENT4: 0x8ce4,\n  COLOR_ATTACHMENT5: 0x8ce5,\n  COLOR_ATTACHMENT6: 0x8ce6,\n  COLOR_ATTACHMENT7: 0x8ce7,\n  COLOR_ATTACHMENT8: 0x8ce8,\n  COLOR_ATTACHMENT9: 0x8ce9,\n  COLOR_ATTACHMENT10: 0x8cea,\n  COLOR_ATTACHMENT11: 0x8ceb,\n  COLOR_ATTACHMENT12: 0x8cec,\n  COLOR_ATTACHMENT13: 0x8ced,\n  COLOR_ATTACHMENT14: 0x8cee,\n  COLOR_ATTACHMENT15: 0x8cef,\n\n  // Samplers\n\n  SAMPLER_3D: 0x8b5f,\n  SAMPLER_2D_SHADOW: 0x8b62,\n  SAMPLER_2D_ARRAY: 0x8dc1,\n  SAMPLER_2D_ARRAY_SHADOW: 0x8dc4,\n  SAMPLER_CUBE_SHADOW: 0x8dc5,\n  INT_SAMPLER_2D: 0x8dca,\n  INT_SAMPLER_3D: 0x8dcb,\n  INT_SAMPLER_CUBE: 0x8dcc,\n  INT_SAMPLER_2D_ARRAY: 0x8dcf,\n  UNSIGNED_INT_SAMPLER_2D: 0x8dd2,\n  UNSIGNED_INT_SAMPLER_3D: 0x8dd3,\n  UNSIGNED_INT_SAMPLER_CUBE: 0x8dd4,\n  UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8dd7,\n  MAX_SAMPLES: 0x8d57,\n  SAMPLER_BINDING: 0x8919,\n\n  // Buffers\n\n  PIXEL_PACK_BUFFER: 0x88eb,\n  PIXEL_UNPACK_BUFFER: 0x88ec,\n  PIXEL_PACK_BUFFER_BINDING: 0x88ed,\n  PIXEL_UNPACK_BUFFER_BINDING: 0x88ef,\n  COPY_READ_BUFFER: 0x8f36,\n  COPY_WRITE_BUFFER: 0x8f37,\n  COPY_READ_BUFFER_BINDING: 0x8f36,\n  COPY_WRITE_BUFFER_BINDING: 0x8f37,\n\n  // Data types\n\n  FLOAT_MAT2x3: 0x8b65,\n  FLOAT_MAT2x4: 0x8b66,\n  FLOAT_MAT3x2: 0x8b67,\n  FLOAT_MAT3x4: 0x8b68,\n  FLOAT_MAT4x2: 0x8b69,\n  FLOAT_MAT4x3: 0x8b6a,\n  UNSIGNED_INT_VEC2: 0x8dc6,\n  UNSIGNED_INT_VEC3: 0x8dc7,\n  UNSIGNED_INT_VEC4: 0x8dc8,\n  UNSIGNED_NORMALIZED: 0x8c17,\n  SIGNED_NORMALIZED: 0x8f9c,\n\n  // Vertex attributes\n\n  VERTEX_ATTRIB_ARRAY_INTEGER: 0x88fd,\n  VERTEX_ATTRIB_ARRAY_DIVISOR: 0x88fe,\n\n  // Transform feedback\n\n  TRANSFORM_FEEDBACK_BUFFER_MODE: 0x8c7f,\n  MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 0x8c80,\n  TRANSFORM_FEEDBACK_VARYINGS: 0x8c83,\n  TRANSFORM_FEEDBACK_BUFFER_START: 0x8c84,\n  TRANSFORM_FEEDBACK_BUFFER_SIZE: 0x8c85,\n  TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 0x8c88,\n  MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 0x8c8a,\n  MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 0x8c8b,\n  INTERLEAVED_ATTRIBS: 0x8c8c,\n  SEPARATE_ATTRIBS: 0x8c8d,\n  TRANSFORM_FEEDBACK_BUFFER: 0x8c8e,\n  TRANSFORM_FEEDBACK_BUFFER_BINDING: 0x8c8f,\n  TRANSFORM_FEEDBACK: 0x8e22,\n  TRANSFORM_FEEDBACK_PAUSED: 0x8e23,\n  TRANSFORM_FEEDBACK_ACTIVE: 0x8e24,\n  TRANSFORM_FEEDBACK_BINDING: 0x8e25,\n\n  // Framebuffers and renderbuffers\n\n  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 0x8210,\n  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 0x8211,\n  FRAMEBUFFER_ATTACHMENT_RED_SIZE: 0x8212,\n  FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 0x8213,\n  FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 0x8214,\n  FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 0x8215,\n  FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 0x8216,\n  FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 0x8217,\n  FRAMEBUFFER_DEFAULT: 0x8218,\n  // DEPTH_STENCIL_ATTACHMENT : 0x821A,\n  // DEPTH_STENCIL: 0x84F9,\n  DEPTH24_STENCIL8: 0x88f0,\n  DRAW_FRAMEBUFFER_BINDING: 0x8ca6,\n  READ_FRAMEBUFFER_BINDING: 0x8caa,\n  RENDERBUFFER_SAMPLES: 0x8cab,\n  FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 0x8cd4,\n  FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 0x8d56,\n\n  // Uniforms\n\n  UNIFORM_BUFFER: 0x8a11,\n  UNIFORM_BUFFER_BINDING: 0x8a28,\n  UNIFORM_BUFFER_START: 0x8a29,\n  UNIFORM_BUFFER_SIZE: 0x8a2a,\n  MAX_VERTEX_UNIFORM_BLOCKS: 0x8a2b,\n  MAX_FRAGMENT_UNIFORM_BLOCKS: 0x8a2d,\n  MAX_COMBINED_UNIFORM_BLOCKS: 0x8a2e,\n  MAX_UNIFORM_BUFFER_BINDINGS: 0x8a2f,\n  MAX_UNIFORM_BLOCK_SIZE: 0x8a30,\n  MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 0x8a31,\n  MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 0x8a33,\n  UNIFORM_BUFFER_OFFSET_ALIGNMENT: 0x8a34,\n  ACTIVE_UNIFORM_BLOCKS: 0x8a36,\n  UNIFORM_TYPE: 0x8a37,\n  UNIFORM_SIZE: 0x8a38,\n  UNIFORM_BLOCK_INDEX: 0x8a3a,\n  UNIFORM_OFFSET: 0x8a3b,\n  UNIFORM_ARRAY_STRIDE: 0x8a3c,\n  UNIFORM_MATRIX_STRIDE: 0x8a3d,\n  UNIFORM_IS_ROW_MAJOR: 0x8a3e,\n  UNIFORM_BLOCK_BINDING: 0x8a3f,\n  UNIFORM_BLOCK_DATA_SIZE: 0x8a40,\n  UNIFORM_BLOCK_ACTIVE_UNIFORMS: 0x8a42,\n  UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 0x8a43,\n  UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 0x8a44,\n  UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 0x8a46,\n\n  // Sync objects\n\n  OBJECT_TYPE: 0x9112,\n  SYNC_CONDITION: 0x9113,\n  SYNC_STATUS: 0x9114,\n  SYNC_FLAGS: 0x9115,\n  SYNC_FENCE: 0x9116,\n  SYNC_GPU_COMMANDS_COMPLETE: 0x9117,\n  UNSIGNALED: 0x9118,\n  SIGNALED: 0x9119,\n  ALREADY_SIGNALED: 0x911a,\n  TIMEOUT_EXPIRED: 0x911b,\n  CONDITION_SATISFIED: 0x911c,\n  WAIT_FAILED: 0x911d,\n  SYNC_FLUSH_COMMANDS_BIT: 0x00000001,\n\n  // Miscellaneous constants\n\n  COLOR: 0x1800,\n  DEPTH: 0x1801,\n  STENCIL: 0x1802,\n  MIN: 0x8007,\n  MAX: 0x8008,\n  DEPTH_COMPONENT24: 0x81a6,\n  STREAM_READ: 0x88e1,\n  STREAM_COPY: 0x88e2,\n  STATIC_READ: 0x88e5,\n  STATIC_COPY: 0x88e6,\n  DYNAMIC_READ: 0x88e9,\n  DYNAMIC_COPY: 0x88ea,\n  DEPTH_COMPONENT32F: 0x8cac,\n  DEPTH32F_STENCIL8: 0x8cad,\n  INVALID_INDEX: 0xffffffff,\n  TIMEOUT_IGNORED: -1,\n  MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 0x9247,\n\n  // Constants defined in WebGL extensions\n\n  // ANGLE_instanced_arrays\n\n  VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: 0x88fe,\n\n  // WEBGL_debug_renderer_info\n\n  UNMASKED_VENDOR_WEBGL: 0x9245,\n  UNMASKED_RENDERER_WEBGL: 0x9246,\n\n  // EXT_texture_filter_anisotropic\n\n  MAX_TEXTURE_MAX_ANISOTROPY_EXT: 0x84ff,\n  TEXTURE_MAX_ANISOTROPY_EXT: 0x84fe,\n\n  // WEBGL_compressed_texture_s3tc\n\n  COMPRESSED_RGB_S3TC_DXT1_EXT: 0x83f0,\n  COMPRESSED_RGBA_S3TC_DXT1_EXT: 0x83f1,\n  COMPRESSED_RGBA_S3TC_DXT3_EXT: 0x83f2,\n  COMPRESSED_RGBA_S3TC_DXT5_EXT: 0x83f3,\n\n  // WEBGL_compressed_texture_es3\n\n  COMPRESSED_R11_EAC: 0x9270,\n  COMPRESSED_SIGNED_R11_EAC: 0x9271,\n  COMPRESSED_RG11_EAC: 0x9272,\n  COMPRESSED_SIGNED_RG11_EAC: 0x9273,\n  COMPRESSED_RGB8_ETC2: 0x9274,\n  COMPRESSED_RGBA8_ETC2_EAC: 0x9275,\n  COMPRESSED_SRGB8_ETC2: 0x9276,\n  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: 0x9277,\n  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9278,\n  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9279,\n\n  // WEBGL_compressed_texture_pvrtc\n\n  COMPRESSED_RGB_PVRTC_4BPPV1_IMG: 0x8c00,\n  COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: 0x8c02,\n  COMPRESSED_RGB_PVRTC_2BPPV1_IMG: 0x8c01,\n  COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: 0x8c03,\n\n  // WEBGL_compressed_texture_etc1\n\n  COMPRESSED_RGB_ETC1_WEBGL: 0x8d64,\n\n  // WEBGL_compressed_texture_atc\n\n  COMPRESSED_RGB_ATC_WEBGL: 0x8c92,\n  COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL: 0x8c92,\n  COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL: 0x87ee,\n\n  // WEBGL_depth_texture\n\n  UNSIGNED_INT_24_8_WEBGL: 0x84fa,\n\n  // OES_texture_half_float\n\n  HALF_FLOAT_OES: 0x8d61,\n\n  // WEBGL_color_buffer_float\n\n  RGBA32F_EXT: 0x8814,\n  RGB32F_EXT: 0x8815,\n  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: 0x8211,\n  UNSIGNED_NORMALIZED_EXT: 0x8c17,\n\n  // EXT_blend_minmax\n\n  MIN_EXT: 0x8007,\n  MAX_EXT: 0x8008,\n\n  // EXT_sRGB\n\n  SRGB_EXT: 0x8c40,\n  SRGB_ALPHA_EXT: 0x8c42,\n  SRGB8_ALPHA8_EXT: 0x8c43,\n  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: 0x8210,\n\n  // OES_standard_derivatives\n\n  FRAGMENT_SHADER_DERIVATIVE_HINT_OES: 0x8b8b,\n\n  // WEBGL_draw_buffers\n\n  COLOR_ATTACHMENT0_WEBGL: 0x8ce0,\n  COLOR_ATTACHMENT1_WEBGL: 0x8ce1,\n  COLOR_ATTACHMENT2_WEBGL: 0x8ce2,\n  COLOR_ATTACHMENT3_WEBGL: 0x8ce3,\n  COLOR_ATTACHMENT4_WEBGL: 0x8ce4,\n  COLOR_ATTACHMENT5_WEBGL: 0x8ce5,\n  COLOR_ATTACHMENT6_WEBGL: 0x8ce6,\n  COLOR_ATTACHMENT7_WEBGL: 0x8ce7,\n  COLOR_ATTACHMENT8_WEBGL: 0x8ce8,\n  COLOR_ATTACHMENT9_WEBGL: 0x8ce9,\n  COLOR_ATTACHMENT10_WEBGL: 0x8cea,\n  COLOR_ATTACHMENT11_WEBGL: 0x8ceb,\n  COLOR_ATTACHMENT12_WEBGL: 0x8cec,\n  COLOR_ATTACHMENT13_WEBGL: 0x8ced,\n  COLOR_ATTACHMENT14_WEBGL: 0x8cee,\n  COLOR_ATTACHMENT15_WEBGL: 0x8cef,\n  DRAW_BUFFER0_WEBGL: 0x8825,\n  DRAW_BUFFER1_WEBGL: 0x8826,\n  DRAW_BUFFER2_WEBGL: 0x8827,\n  DRAW_BUFFER3_WEBGL: 0x8828,\n  DRAW_BUFFER4_WEBGL: 0x8829,\n  DRAW_BUFFER5_WEBGL: 0x882a,\n  DRAW_BUFFER6_WEBGL: 0x882b,\n  DRAW_BUFFER7_WEBGL: 0x882c,\n  DRAW_BUFFER8_WEBGL: 0x882d,\n  DRAW_BUFFER9_WEBGL: 0x882e,\n  DRAW_BUFFER10_WEBGL: 0x882f,\n  DRAW_BUFFER11_WEBGL: 0x8830,\n  DRAW_BUFFER12_WEBGL: 0x8831,\n  DRAW_BUFFER13_WEBGL: 0x8832,\n  DRAW_BUFFER14_WEBGL: 0x8833,\n  DRAW_BUFFER15_WEBGL: 0x8834,\n  MAX_COLOR_ATTACHMENTS_WEBGL: 0x8cdf,\n  MAX_DRAW_BUFFERS_WEBGL: 0x8824,\n\n  // OES_vertex_array_object\n\n  VERTEX_ARRAY_BINDING_OES: 0x85b5,\n\n  // EXT_disjoint_timer_query\n\n  QUERY_COUNTER_BITS_EXT: 0x8864,\n  CURRENT_QUERY_EXT: 0x8865,\n  QUERY_RESULT_EXT: 0x8866,\n  QUERY_RESULT_AVAILABLE_EXT: 0x8867,\n  TIME_ELAPSED_EXT: 0x88bf,\n  TIMESTAMP_EXT: 0x8e28,\n  GPU_DISJOINT_EXT: 0x8fbb // A Boolean indicating whether or not the GPU performed any disjoint operation.\n};\n","import React, {Component} from 'react'; // eslint-disable-line\nimport PropTypes from 'prop-types';\nimport {lumaStats, setPathPrefix} from '@luma.gl/core';\nimport {VRDisplay} from '@luma.gl/addons';\nimport StatsWidget from '@probe.gl/stats-widget';\n\nimport InfoPanel from './info-panel';\n\n// WORKAROUND FOR luma.gl VRDisplay\nif (typeof global !== 'undefined' && !global.navigator) {\n  global.navigator = {};\n}\n\nif (typeof window !== 'undefined') {\n  window.website = true;\n}\n\nconst STYLES = {\n  EXAMPLE_NOT_SUPPPORTED: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100vh'\n  }\n};\n\nconst STAT_STYLES = {\n  position: 'fixed',\n  fontSize: '12px',\n  zIndex: 10000,\n  color: '#fff',\n  background: '#000',\n  padding: '8px',\n  opacity: 0.8\n};\n\nconst propTypes = {\n  AnimationLoop: PropTypes.func.isRequired,\n  exampleConfig: PropTypes.object.isRequired,\n  canvas: PropTypes.string\n};\n\nconst defaultProps = {\n  canvas: 'example-canvas'\n};\n\nconst DEFAULT_ALT_TEXT = 'THIS EXAMPLE IS NOT SUPPORTED';\n\nexport default class AnimationLoopExamplePage extends Component {\n  constructor(props) {\n    super(props);\n    const {AnimationLoop} = this.props;\n    this.animationLoop = new AnimationLoop();\n  }\n\n  componentDidMount() {\n    const {showStats} = this.props;\n\n    this.animationLoop._setDisplay(new VRDisplay());\n\n    // Ensure the example can find its images\n    // TODO - ideally ocular-gatsby should extract images from example source?\n    const {exampleConfig} = this.props;\n    if (exampleConfig && exampleConfig.path) {\n      const RAW_GITHUB = 'https://raw.githubusercontent.com/uber/luma.gl/master';\n      setPathPrefix(`${RAW_GITHUB}/${exampleConfig.path}`);\n    }\n\n    // Start the actual example\n    this.animationLoop.start(this.props);\n\n    // animationLoop.stats.reset();\n\n    if (showStats) {\n      this._showStats(this.animationLoop);\n    }\n  }\n\n  componentWillUnmount() {\n    this.animationLoop.stop(this.props);\n    this.animationLoop.delete();\n    this.animationLoop = null;\n    // this._stopStats();\n  }\n\n  _showStats(animationLoop) {\n    const timeWidget = new StatsWidget(animationLoop.stats, {\n      container: this.refs.renderStats,\n      title: 'Render Time',\n      css: {\n        header: {\n          fontWeight: 'bold'\n        }\n      },\n      framesPerUpdate: 60,\n      formatters: {\n        'CPU Time': 'averageTime',\n        'GPU Time': 'averageTime',\n        'Frame Rate': 'fps'\n      },\n      resetOnUpdate: {\n        'CPU Time': true,\n        'GPU Time': true,\n        'Frame Rate': true\n      }\n    });\n\n    lumaStats.get('Memory Usage').reset();\n    const memWidget = new StatsWidget(lumaStats.get('Memory Usage'), {\n      container: this.refs.memStats,\n      css: {\n        header: {\n          fontWeight: 'bold'\n        }\n      },\n      framesPerUpdate: 60,\n      formatters: {\n        'GPU Memory': 'memory',\n        'Buffer Memory': 'memory',\n        'Renderbuffer Memory': 'memory',\n        'Texture Memory': 'memory'\n      }\n    });\n\n    const updateStats = () => {\n      timeWidget.update();\n      memWidget.update();\n      this.animationFrame = window.requestAnimationFrame(updateStats);\n    };\n\n    this.animationFrame = window.requestAnimationFrame(updateStats);\n  }\n\n  _stopStats() {\n    window.cancelAnimationFrame(this.animationFrame);\n  }\n\n  render() {\n    const {name, panel = true, stats, sourceLink} = this.props;\n\n    const notSupported = this.animationLoop.isSupported && !this.animationLoop.isSupported();\n\n    if (notSupported) {\n      const altText = this.animationLoop.getAltText ? this.animationLoop.getAltText() : DEFAULT_ALT_TEXT;\n      return (\n        <div style={STYLES.EXAMPLE_NOT_SUPPPORTED}>\n          <h2> {altText} </h2>\n        </div>\n      );\n    }\n\n    // HTML is stored on the app\n    const controls = this.props.AnimationLoop.getInfo() ||\n      (this.animationLoop.getInfo && this.animationLoop.getInfo());\n\n    return (\n      <div className=\"fg\" style={{width: '100%', height: '100%', padding: 0, border: 0}}>\n        {\n          stats ?\n          <div ref=\"stats\" className=\"stats\" style={STAT_STYLES}>\n            <div ref=\"renderStats\" className=\"renderStats\"/>\n            <div ref=\"memStats\" className=\"memStats\"/>\n          </div> : null\n        }\n        <canvas\n          id={this.props.canvas}\n          style={{width: '100%', height: '100%', padding: 0, border: 0}}\n        />\n        {panel ? <InfoPanel name={name} controls={controls} sourceLink={sourceLink} /> : null}\n      </div>\n    );\n  }\n}\n\nAnimationLoopExamplePage.propTypes = propTypes;\nAnimationLoopExamplePage.defaultProps = defaultProps;\nAnimationLoopExamplePage.displayName = 'AnimationLoop';\n","import {lumaStats} from '../init';\nimport {assertWebGLContext, isWebGL2, getKey, getKeyValue} from '../webgl-utils';\nimport {uid, assert, stubRemovedMethods} from '../utils';\n\nconst ERR_RESOURCE_METHOD_UNDEFINED = 'Resource subclass must define virtual methods';\n\n// TODO - Handle context loss\n// function glGetContextLossCount(gl) {\n//   return (gl.luma && gl.luma.glCount) || 0;\n// }\n\nexport default class Resource {\n  constructor(gl, opts = {}) {\n    assertWebGLContext(gl);\n\n    const {id, userData = {}} = opts;\n    this.gl = gl;\n    // this.ext = polyfillContext(gl);\n    this.id = id || uid(this.constructor.name);\n    this.userData = userData;\n    this._bound = false;\n\n    // Set the handle\n    // If handle was provided, use it, otherwise create a new handle\n\n    // TODO - Stores the handle with context loss information\n    // this.glCount = glGetContextLossCount(this.gl);\n\n    // Default VertexArray needs to be created with null handle, so compare against undefined\n    this._handle = opts.handle;\n    if (this._handle === undefined) {\n      this._handle = this._createHandle();\n    }\n\n    // Only meaningful for resources that allocate GPU memory\n    this.byteLength = 0;\n\n    this._addStats();\n  }\n\n  toString() {\n    return `${this.constructor.name}(${this.id})`;\n  }\n\n  get handle() {\n    // TODO - Add context loss handling\n    // Will regenerate and reinitialize the handle if necessary\n    // const glCount = glGetContextLossCount(this.gl);\n    // if (this.glCount !== glCount) {\n    //   this._handle = this._createHandle(this.opts);\n    //   this._glCount = glCount;\n    //   // Reinitialize object\n    //   this.initialize(this.opts);\n    // }\n    return this._handle;\n  }\n\n  delete({deleteChildren = false} = {}) {\n    // Delete this object, and get refs to any children\n    const children = this._handle && this._deleteHandle(this._handle);\n    if (this._handle) {\n      this._removeStats();\n    }\n    this._handle = null;\n\n    // Optionally, recursively delete the children\n    if (children && deleteChildren) {\n      children.filter(Boolean).forEach(child => {\n        child.delete();\n      });\n    }\n\n    return this;\n  }\n\n  bind(funcOrHandle = this.handle) {\n    if (typeof funcOrHandle !== 'function') {\n      this._bindHandle(funcOrHandle);\n      return this;\n    }\n\n    let value;\n\n    if (!this._bound) {\n      this._bindHandle(this.handle);\n      this._bound = true;\n\n      value = funcOrHandle();\n\n      this._bound = false;\n      this._bindHandle(null);\n    } else {\n      value = funcOrHandle();\n    }\n\n    return value;\n  }\n\n  unbind() {\n    this.bind(null);\n  }\n\n  /**\n   * Query a Resource parameter\n   *\n   * @param {GLenum} pname\n   * @return {GLint|GLfloat|GLenum} param\n   */\n  getParameter(pname, opts = {}) {\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n\n    const parameters = this.constructor.PARAMETERS || {};\n\n    // Use parameter definitions to handle unsupported parameters\n    const parameter = parameters[pname];\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n\n      // Check if we can query for this parameter\n      const parameterAvailable =\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        const webgl1Default = parameter.webgl1;\n        const webgl2Default = 'webgl2' in parameter ? parameter.webgl2 : parameter.webgl1;\n        const defaultValue = isWebgl2 ? webgl2Default : webgl1Default;\n        return defaultValue;\n      }\n    }\n\n    // If unknown parameter - Could be a valid parameter not covered by PARAMS\n    // Attempt to query for it and let WebGL report errors\n    return this._getParameter(pname, opts);\n  }\n\n  // Many resources support a getParameter call -\n  // getParameters will get all parameters - slow but useful for debugging\n  // eslint-disable-next-line complexity\n  getParameters(opts = {}) {\n    const {parameters, keys} = {};\n\n    // Get parameter definitions for this Resource\n    const PARAMETERS = this.constructor.PARAMETERS || {};\n\n    const isWebgl2 = isWebGL2(this.gl);\n\n    const values = {};\n\n    // Query all parameters if no list provided\n    const parameterKeys = parameters || Object.keys(PARAMETERS);\n\n    // WEBGL limits\n    for (const pname of parameterKeys) {\n      const parameter = PARAMETERS[pname];\n\n      // Check if this parameter is available on this platform\n      const parameterAvailable =\n        parameter &&\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (parameterAvailable) {\n        const key = keys ? getKey(this.gl, pname) : pname;\n        values[key] = this.getParameter(pname, opts);\n        if (keys && parameter.type === 'GLenum') {\n          values[key] = getKey(this.gl, values[key]);\n        }\n      }\n    }\n\n    return values;\n  }\n\n  /**\n   * Update a Resource setting\n   *\n   * @todo - cache parameter to avoid issuing WebGL calls?\n   *\n   * @param {GLenum} pname - parameter (GL constant, value or key)\n   * @param {GLint|GLfloat|GLenum} value\n   * @return {Resource} returns self to enable chaining\n   */\n  setParameter(pname, value) {\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n\n    const parameters = this.constructor.PARAMETERS || {};\n\n    const parameter = parameters[pname];\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n\n      // Check if this parameter is available on this platform\n      const parameterAvailable =\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        throw new Error('Parameter not available on this platform');\n      }\n\n      // Handle string keys\n      if (parameter.type === 'GLenum') {\n        value = getKeyValue(value);\n      }\n    }\n\n    // If unknown parameter - Could be a valid parameter not covered by PARAMS\n    // attempt to set it and let WebGL report errors\n    this._setParameter(pname, value);\n    return this;\n  }\n\n  /*\n   * Batch update resource parameters\n   * Assumes the subclass supports a setParameter call\n   */\n  setParameters(parameters) {\n    for (const pname in parameters) {\n      this.setParameter(pname, parameters[pname]);\n    }\n    return this;\n  }\n\n  // Install stubs for removed methods\n  stubRemovedMethods(className, version, methodNames) {\n    return stubRemovedMethods(this, className, version, methodNames);\n  }\n\n  // PUBLIC VIRTUAL METHODS\n  initialize(opts) {}\n\n  // PROTECTED METHODS - These must be overridden by subclass\n  _createHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _deleteHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _bindHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _getOptsFromHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _getParameter(pname, opts) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  /**\n   * @param {GLenum} pname\n   * @param {GLint|GLfloat|GLenum} param\n   * @return {Sampler} returns self to enable chaining\n   */\n  _setParameter(pname, value) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  // PRIVATE METHODS\n\n  _context() {\n    this.gl.luma = this.gl.luma || {};\n    return this.gl.luma;\n  }\n\n  _addStats() {\n    const name = this.constructor.name;\n    const stats = lumaStats.get('Resource Counts');\n\n    stats.get('Resources Created').incrementCount();\n    stats.get(`${name}s Created`).incrementCount();\n    stats.get(`${name}s Active`).incrementCount();\n  }\n\n  _removeStats() {\n    const name = this.constructor.name;\n    const stats = lumaStats.get('Resource Counts');\n\n    stats.get(`${name}s Active`).decrementCount();\n  }\n\n  _trackAllocatedMemory(bytes, name = this.constructor.name) {\n    const stats = lumaStats.get('Memory Usage');\n\n    stats.get('GPU Memory').addCount(bytes);\n    stats.get(`${name} Memory`).addCount(bytes);\n    this.byteLength = bytes;\n  }\n\n  _trackDeallocatedMemory(name = this.constructor.name) {\n    const stats = lumaStats.get('Memory Usage');\n\n    stats.get('GPU Memory').subtractCount(this.byteLength);\n    stats.get(`${name} Memory`).subtractCount(this.byteLength);\n    this.byteLength = 0;\n  }\n}\n","import GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport Accessor from './accessor';\nimport {\n  assertWebGL2Context,\n  getGLTypeFromTypedArray,\n  getTypedArrayFromGLType\n} from '../webgl-utils';\nimport {log, assert, checkProps} from '../utils';\n\nconst DEBUG_DATA_LENGTH = 10;\n\n// Shared prop checks for constructor and setProps\nconst DEPRECATED_PROPS = {\n  offset: 'accessor.offset',\n  stride: 'accessor.stride',\n  type: 'accessor.type',\n  size: 'accessor.size',\n  divisor: 'accessor.divisor',\n  normalized: 'accessor.normalized',\n  integer: 'accessor.integer',\n  instanced: 'accessor.divisor',\n  isInstanced: 'accessor.divisor'\n};\n\n// Prop checks for constructor\nconst PROP_CHECKS_INITIALIZE = {\n  removedProps: {},\n  replacedProps: {\n    bytes: 'byteLength'\n  },\n  // new Buffer() with individual accessor props is still used in apps, emit warnings\n  deprecatedProps: DEPRECATED_PROPS\n};\n\n// Prop checks for setProps\nconst PROP_CHECKS_SET_PROPS = {\n  // Buffer.setProps() with individual accessor props is rare => emit errors\n  removedProps: DEPRECATED_PROPS\n};\n\nexport default class Buffer extends Resource {\n  constructor(gl, props = {}) {\n    super(gl, props);\n\n    this.stubRemovedMethods('Buffer', 'v6.0', ['layout', 'setLayout', 'getIndexedParameter']);\n    // this.stubRemovedMethods('Buffer', 'v7.0', ['updateAccessor']);\n\n    // In WebGL1, need to make sure we use GL.ELEMENT_ARRAY_BUFFER when initializing element buffers\n    // otherwise buffer type will lock to generic (non-element) buffer\n    // In WebGL2, we can use GL.COPY_READ_BUFFER which avoids locking the type here\n    this.target = props.target || (this.gl.webgl2 ? GL.COPY_READ_BUFFER : GL.ARRAY_BUFFER);\n\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  // returns number of elements in the buffer (assuming that the full buffer is used)\n  getElementCount(accessor = this.accessor) {\n    return Math.round(this.byteLength / Accessor.getBytesPerElement(accessor));\n  }\n\n  // returns number of vertices in the buffer (assuming that the full buffer is used)\n  getVertexCount(accessor = this.accessor) {\n    return Math.round(this.byteLength / Accessor.getBytesPerVertex(accessor));\n  }\n\n  // Creates and initializes the buffer object's data store.\n  // Signature: `new Buffer(gl, {data: new Float32Array(...)})`\n  // Signature: `new Buffer(gl, new Float32Array(...))`\n  // Signature: `new Buffer(gl, 100)`\n  initialize(props = {}) {\n    // Signature `new Buffer(gl, new Float32Array(...)`\n    if (ArrayBuffer.isView(props)) {\n      props = {data: props};\n    }\n\n    // Signature: `new Buffer(gl, 100)`\n    if (Number.isFinite(props)) {\n      props = {byteLength: props};\n    }\n\n    props = checkProps('Buffer', props, PROP_CHECKS_INITIALIZE);\n\n    // Initialize member fields\n    this.usage = props.usage || GL.STATIC_DRAW;\n    this.debugData = null;\n\n    // Deprecated: Merge main props and accessor\n    this.setAccessor(Object.assign({}, props, props.accessor));\n\n    // Set data: (re)initializes the buffer\n    if (props.data) {\n      this._setData(props.data);\n    } else {\n      this._setByteLength(props.byteLength || 0);\n    }\n\n    return this;\n  }\n\n  setProps(props) {\n    props = checkProps('Buffer', props, PROP_CHECKS_SET_PROPS);\n\n    if ('accessor' in props) {\n      this.setAccessor(props.accessor);\n    }\n\n    return this;\n  }\n\n  // Optionally stores an accessor with the buffer, makes it easier to use it as an attribute later\n  // {type, size = 1, offset = 0, stride = 0, normalized = false, integer = false, divisor = 0}\n  setAccessor(accessor) {\n    // NOTE: From luma.gl v7.0, Accessors have an optional `buffer `field\n    // (mainly to support \"interleaving\")\n    // To avoid confusion, ensure `buffer.accessor` does not have a `buffer.accessor.buffer` field:\n    accessor = Object.assign({}, accessor);\n    delete accessor.buffer;\n\n    // This new statement ensures that an \"accessor object\" is re-packaged as an Accessor instance\n    this.accessor = new Accessor(accessor);\n    return this;\n  }\n\n  // Allocate a bigger GPU buffer (if the current buffer is not big enough).\n  // If a reallocation is triggered it clears the buffer\n  // Returns:\n  //  `true`: buffer was reallocated, data was cleared\n  //  `false`: buffer was big enough, data is intact\n  reallocate(byteLength) {\n    if (byteLength > this.byteLength) {\n      this._setByteLength(byteLength);\n      return true;\n    }\n    this.bytesUsed = byteLength;\n    return false;\n  }\n\n  // Update with new data. Reinitializes the buffer\n  setData(props) {\n    return this.initialize(props);\n  }\n\n  // Updates a subset of a buffer object's data store.\n  // Data (Typed Array or ArrayBuffer), length is inferred unless provided\n  // Offset into buffer\n  // WebGL2 only: Offset into srcData\n  // WebGL2 only: Number of bytes to be copied\n  subData(props) {\n    // Signature: buffer.subData(new Float32Array([...]))\n    if (ArrayBuffer.isView(props)) {\n      props = {data: props};\n    }\n\n    const {data, offset = 0, srcOffset = 0} = props;\n    const byteLength = props.byteLength || props.length;\n\n    assert(data);\n\n    // Create the buffer - binding it here for the first time locks the type\n    // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type\n    const target = this.gl.webgl2 ? GL.COPY_WRITE_BUFFER : this.target;\n    this.gl.bindBuffer(target, this.handle);\n    // WebGL2: subData supports additional srcOffset and length parameters\n    if (srcOffset !== 0 || byteLength !== undefined) {\n      assertWebGL2Context(this.gl);\n      this.gl.bufferSubData(this.target, offset, data, srcOffset, byteLength);\n    } else {\n      this.gl.bufferSubData(target, offset, data);\n    }\n    this.gl.bindBuffer(target, null);\n\n    // TODO - update local `data` if offsets are right\n    this.debugData = null;\n\n    this._inferType(data);\n\n    return this;\n  }\n\n  // WEBGL2 ONLY: Copies part of the data of another buffer into this buffer\n  copyData({sourceBuffer, readOffset = 0, writeOffset = 0, size}) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n\n    // Use GL.COPY_READ_BUFFER+GL.COPY_WRITE_BUFFER avoid disturbing other targets and locking type\n    gl.bindBuffer(GL.COPY_READ_BUFFER, sourceBuffer.handle);\n    gl.bindBuffer(GL.COPY_WRITE_BUFFER, this.handle);\n    gl.copyBufferSubData(GL.COPY_READ_BUFFER, GL.COPY_WRITE_BUFFER, readOffset, writeOffset, size);\n    gl.bindBuffer(GL.COPY_READ_BUFFER, null);\n    gl.bindBuffer(GL.COPY_WRITE_BUFFER, null);\n\n    // TODO - update local `data` if offsets are 0\n    this.debugData = null;\n\n    return this;\n  }\n\n  // WEBGL2 ONLY: Reads data from buffer into an ArrayBufferView or SharedArrayBuffer.\n  getData({dstData = null, srcByteOffset = 0, dstOffset = 0, length = 0} = {}) {\n    assertWebGL2Context(this.gl);\n\n    const ArrayType = getTypedArrayFromGLType(this.accessor.type || GL.FLOAT, {clamped: false});\n    const sourceAvailableElementCount = this._getAvailableElementCount(srcByteOffset);\n\n    const dstElementOffset = dstOffset;\n\n    let dstAvailableElementCount;\n    let dstElementCount;\n    if (dstData) {\n      dstElementCount = dstData.length;\n      dstAvailableElementCount = dstElementCount - dstElementOffset;\n    } else {\n      // Allocate ArrayBufferView with enough size to copy all eligible data.\n      dstAvailableElementCount = Math.min(\n        sourceAvailableElementCount,\n        length || sourceAvailableElementCount\n      );\n      dstElementCount = dstElementOffset + dstAvailableElementCount;\n    }\n\n    const copyElementCount = Math.min(sourceAvailableElementCount, dstAvailableElementCount);\n    length = length || copyElementCount;\n    assert(length <= copyElementCount);\n    dstData = dstData || new ArrayType(dstElementCount);\n\n    // Use GL.COPY_READ_BUFFER to avoid disturbing other targets and locking type\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, this.handle);\n    this.gl.getBufferSubData(GL.COPY_READ_BUFFER, srcByteOffset, dstData, dstOffset, length);\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, null);\n\n    // TODO - update local `data` if offsets are 0\n    return dstData;\n  }\n\n  /**\n   * Binds a buffer to a given binding point (target).\n   *   GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER take an index, and optionally a range.\n   *   - GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER need an index to affect state\n   *   - GL.UNIFORM_BUFFER: `offset` must be aligned to GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT.\n   *   - GL.UNIFORM_BUFFER: `size` must be a minimum of GL.UNIFORM_BLOCK_SIZE_DATA.\n   */\n  bind({\n    target = this.target, // target for the bind operation\n    index = this.accessor && this.accessor.index, // index = index of target (indexed bind point)\n    offset = 0,\n    size\n  } = {}) {\n    // NOTE: While GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER could\n    // be used as direct binding points, they will not affect transform feedback or\n    // uniform buffer state. Instead indexed bindings need to be made.\n    if (target === GL.UNIFORM_BUFFER || target === GL.TRANSFORM_FEEDBACK_BUFFER) {\n      if (size !== undefined) {\n        this.gl.bindBufferRange(target, index, this.handle, offset, size);\n      } else {\n        assert(offset === 0); // Make sure offset wasn't supplied\n        this.gl.bindBufferBase(target, index, this.handle);\n      }\n    } else {\n      this.gl.bindBuffer(target, this.handle);\n    }\n\n    return this;\n  }\n\n  unbind({target = this.target, index = this.accessor && this.accessor.index} = {}) {\n    const isIndexedBuffer = target === GL.UNIFORM_BUFFER || target === GL.TRANSFORM_FEEDBACK_BUFFER;\n    if (isIndexedBuffer) {\n      this.gl.bindBufferBase(target, index, null);\n    } else {\n      this.gl.bindBuffer(target, null);\n    }\n    return this;\n  }\n\n  // PROTECTED METHODS (INTENDED FOR USE BY OTHER FRAMEWORK CODE ONLY)\n\n  // Returns a short initial data array\n  getDebugData() {\n    if (!this.debugData) {\n      this.debugData = this.getData({length: DEBUG_DATA_LENGTH});\n      return {data: this.debugData, changed: true};\n    }\n    return {data: this.debugData, changed: false};\n  }\n\n  invalidateDebugData() {\n    this.debugData = null;\n  }\n\n  // PRIVATE METHODS\n\n  // Allocate a new buffer and initialize to contents of typed array\n  _setData(data, usage = this.usage) {\n    assert(ArrayBuffer.isView(data));\n\n    this._trackDeallocatedMemory();\n\n    const target = this._getTarget();\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, data, usage);\n    this.gl.bindBuffer(target, null);\n\n    this.usage = usage;\n    this.debugData = data.slice(0, DEBUG_DATA_LENGTH);\n    this.bytesUsed = data.byteLength;\n\n    this._trackAllocatedMemory(data.byteLength);\n\n    // infer GL type from supplied typed array\n    const type = getGLTypeFromTypedArray(data);\n    assert(type);\n    this.setAccessor(new Accessor(this.accessor, {type}));\n    return this;\n  }\n\n  // Allocate a GPU buffer of specified size.\n  _setByteLength(byteLength, usage = this.usage) {\n    assert(byteLength >= 0);\n\n    this._trackDeallocatedMemory();\n\n    // Workaround needed for Safari (#291):\n    // gl.bufferData with size equal to 0 crashes. Instead create zero sized array.\n    let data = byteLength;\n    if (byteLength === 0) {\n      data = new Float32Array(0);\n    }\n\n    const target = this._getTarget();\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, data, usage);\n    this.gl.bindBuffer(target, null);\n\n    this.usage = usage;\n    this.debugData = null;\n    this.bytesUsed = byteLength;\n\n    this._trackAllocatedMemory(byteLength);\n\n    return this;\n  }\n\n  // Binding a buffer for the first time locks the type\n  // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type\n  _getTarget() {\n    return this.gl.webgl2 ? GL.COPY_WRITE_BUFFER : this.target;\n  }\n\n  _getAvailableElementCount(srcByteOffset) {\n    const ArrayType = getTypedArrayFromGLType(this.accessor.type || GL.FLOAT, {clamped: false});\n    const sourceElementOffset = srcByteOffset / ArrayType.BYTES_PER_ELEMENT;\n    return this.getElementCount() - sourceElementOffset;\n  }\n\n  // Automatically infers type from typed array passed to setData\n  // Note: No longer that useful, since type is now autodeduced from the compiled shaders\n  _inferType(data) {\n    if (!this.accessor.type) {\n      this.setAccessor(new Accessor(this.accessor, {type: getGLTypeFromTypedArray(data)}));\n    }\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createBuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteBuffer(this.handle);\n    this._trackDeallocatedMemory();\n  }\n\n  _getParameter(pname) {\n    this.gl.bindBuffer(this.target, this.handle);\n    const value = this.gl.getBufferParameter(this.target, pname);\n    this.gl.bindBuffer(this.target, null);\n    return value;\n  }\n\n  // DEPRECATIONS - v7.0\n  get type() {\n    log.deprecated('Buffer.type', 'Buffer.accessor.type')();\n    return this.accessor.type;\n  }\n\n  get bytes() {\n    log.deprecated('Buffer.bytes', 'Buffer.byteLength')();\n    return this.byteLength;\n  }\n\n  // DEPRECATIONS - v6.0\n  // Deprecated in v6.x, but not warnings not properly implemented\n  setByteLength(byteLength) {\n    log.deprecated('setByteLength', 'reallocate')();\n    return this.reallocate(byteLength);\n  }\n\n  // Deprecated in v6.x, but not warnings not properly implemented\n  updateAccessor(opts) {\n    log.deprecated('updateAccessor(...)', 'setAccessor(new Accessor(buffer.accessor, ...)')();\n    this.accessor = new Accessor(this.accessor, opts);\n    return this;\n  }\n}\n","/* eslint-disable camelcase */\nimport {assert} from '../utils';\n\nconst GL_BYTE = 0x1400;\nconst GL_UNSIGNED_BYTE = 0x1401;\nconst GL_SHORT = 0x1402;\nconst GL_UNSIGNED_SHORT = 0x1403;\n\nconst GL_POINTS = 0x0;\nconst GL_LINES = 0x1;\nconst GL_LINE_LOOP = 0x2;\nconst GL_LINE_STRIP = 0x3;\nconst GL_TRIANGLES = 0x4;\nconst GL_TRIANGLE_STRIP = 0x5;\nconst GL_TRIANGLE_FAN = 0x6;\n\n// Local constants - these will \"collapse\" during minification\nconst GL_FLOAT = 0x1406;\nconst GL_FLOAT_VEC2 = 0x8b50;\nconst GL_FLOAT_VEC3 = 0x8b51;\nconst GL_FLOAT_VEC4 = 0x8b52;\n\nconst GL_INT = 0x1404;\nconst GL_INT_VEC2 = 0x8b53;\nconst GL_INT_VEC3 = 0x8b54;\nconst GL_INT_VEC4 = 0x8b55;\n\nconst GL_UNSIGNED_INT = 0x1405;\nconst GL_UNSIGNED_INT_VEC2 = 0x8dc6;\nconst GL_UNSIGNED_INT_VEC3 = 0x8dc7;\nconst GL_UNSIGNED_INT_VEC4 = 0x8dc8;\n\nconst GL_BOOL = 0x8b56;\nconst GL_BOOL_VEC2 = 0x8b57;\nconst GL_BOOL_VEC3 = 0x8b58;\nconst GL_BOOL_VEC4 = 0x8b59;\n\nconst GL_FLOAT_MAT2 = 0x8b5a;\nconst GL_FLOAT_MAT3 = 0x8b5b;\nconst GL_FLOAT_MAT4 = 0x8b5c;\n\nconst GL_FLOAT_MAT2x3 = 0x8b65;\nconst GL_FLOAT_MAT2x4 = 0x8b66;\nconst GL_FLOAT_MAT3x2 = 0x8b67;\nconst GL_FLOAT_MAT3x4 = 0x8b68;\nconst GL_FLOAT_MAT4x2 = 0x8b69;\nconst GL_FLOAT_MAT4x3 = 0x8b6a;\n\n// Composite types table\nconst COMPOSITE_GL_TYPES = {\n  [GL_FLOAT]: [GL_FLOAT, 1, 'float'],\n  [GL_FLOAT_VEC2]: [GL_FLOAT, 2, 'vec2'],\n  [GL_FLOAT_VEC3]: [GL_FLOAT, 3, 'vec3'],\n  [GL_FLOAT_VEC4]: [GL_FLOAT, 4, 'vec4'],\n\n  [GL_INT]: [GL_INT, 1, 'int'],\n  [GL_INT_VEC2]: [GL_INT, 2, 'ivec2'],\n  [GL_INT_VEC3]: [GL_INT, 3, 'ivec3'],\n  [GL_INT_VEC4]: [GL_INT, 4, 'ivec4'],\n\n  [GL_UNSIGNED_INT]: [GL_UNSIGNED_INT, 1, 'uint'],\n  [GL_UNSIGNED_INT_VEC2]: [GL_UNSIGNED_INT, 2, 'uvec2'],\n  [GL_UNSIGNED_INT_VEC3]: [GL_UNSIGNED_INT, 3, 'uvec3'],\n  [GL_UNSIGNED_INT_VEC4]: [GL_UNSIGNED_INT, 4, 'uvec4'],\n\n  [GL_BOOL]: [GL_FLOAT, 1, 'bool'],\n  [GL_BOOL_VEC2]: [GL_FLOAT, 2, 'bvec2'],\n  [GL_BOOL_VEC3]: [GL_FLOAT, 3, 'bvec3'],\n  [GL_BOOL_VEC4]: [GL_FLOAT, 4, 'bvec4'],\n\n  [GL_FLOAT_MAT2]: [GL_FLOAT, 8, 'mat2'], // 4\n  [GL_FLOAT_MAT2x3]: [GL_FLOAT, 8, 'mat2x3'], // 6\n  [GL_FLOAT_MAT2x4]: [GL_FLOAT, 8, 'mat2x4'], // 8\n\n  [GL_FLOAT_MAT3]: [GL_FLOAT, 12, 'mat3'], // 9\n  [GL_FLOAT_MAT3x2]: [GL_FLOAT, 12, 'mat3x2'], // 6\n  [GL_FLOAT_MAT3x4]: [GL_FLOAT, 12, 'mat3x4'], // 12\n\n  [GL_FLOAT_MAT4]: [GL_FLOAT, 16, 'mat4'], // 16\n  [GL_FLOAT_MAT4x2]: [GL_FLOAT, 16, 'mat4x2'], // 8\n  [GL_FLOAT_MAT4x3]: [GL_FLOAT, 16, 'mat4x3'] // 12\n};\n\n// Counts the number of complete primitives given a number of vertices and a drawMode\nexport function getPrimitiveDrawMode(drawMode) {\n  switch (drawMode) {\n    case GL_POINTS:\n      return GL_POINTS;\n    case GL_LINES:\n      return GL_LINES;\n    case GL_LINE_STRIP:\n      return GL_LINES;\n    case GL_LINE_LOOP:\n      return GL_LINES;\n    case GL_TRIANGLES:\n      return GL_TRIANGLES;\n    case GL_TRIANGLE_STRIP:\n      return GL_TRIANGLES;\n    case GL_TRIANGLE_FAN:\n      return GL_TRIANGLES;\n    default:\n      assert(false);\n      return 0;\n  }\n}\n\n// Counts the number of complete \"primitives\" given a number of vertices and a drawMode\nexport function getPrimitiveCount({drawMode, vertexCount}) {\n  switch (drawMode) {\n    case GL_POINTS:\n    case GL_LINE_LOOP:\n      return vertexCount;\n    case GL_LINES:\n      return vertexCount / 2;\n    case GL_LINE_STRIP:\n      return vertexCount - 1;\n    case GL_TRIANGLES:\n      return vertexCount / 3;\n    case GL_TRIANGLE_STRIP:\n    case GL_TRIANGLE_FAN:\n      return vertexCount - 2;\n    default:\n      assert(false);\n      return 0;\n  }\n}\n\n// Counts the number of vertices after splitting the vertex stream into separate \"primitives\"\nexport function getVertexCount({drawMode, vertexCount}) {\n  const primitiveCount = getPrimitiveCount({drawMode, vertexCount});\n  switch (getPrimitiveDrawMode(drawMode)) {\n    case GL_POINTS:\n      return primitiveCount;\n    case GL_LINES:\n      return primitiveCount * 2;\n    case GL_TRIANGLES:\n      return primitiveCount * 3;\n    default:\n      assert(false);\n      return 0;\n  }\n}\n\n// Decomposes a composite type GL.VEC3 into a basic type (GL.FLOAT) and components (3)\nexport function decomposeCompositeGLType(compositeGLType) {\n  const typeAndSize = COMPOSITE_GL_TYPES[compositeGLType];\n  if (!typeAndSize) {\n    return null;\n  }\n  const [type, components] = typeAndSize;\n  return {type, components};\n}\n\nexport function getCompositeGLType(type, components) {\n  switch (type) {\n    case GL_BYTE:\n    case GL_UNSIGNED_BYTE:\n    case GL_SHORT:\n    case GL_UNSIGNED_SHORT:\n      type = GL_FLOAT;\n      break;\n    default:\n  }\n\n  for (const glType in COMPOSITE_GL_TYPES) {\n    const [compType, compComponents, name] = COMPOSITE_GL_TYPES[glType];\n    if (compType === type && compComponents === components) {\n      return {glType, name};\n    }\n  }\n  return null;\n}\n","import GL from '@luma.gl/constants';\n\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {\n  TEXTURE_FORMATS,\n  DATA_FORMAT_CHANNELS,\n  TYPE_SIZES,\n  isFormatSupported,\n  isLinearFilteringSupported\n} from './texture-formats';\n\nimport {withParameters} from '../context';\nimport {isWebGL2, assertWebGL2Context, WebGLBuffer} from '../webgl-utils';\nimport {log, uid, isPowerOfTwo, assert} from '../utils';\n\n// Supported min filters for NPOT texture.\nconst NPOT_MIN_FILTERS = [GL.LINEAR, GL.NEAREST];\n\nexport default class Texture extends Resource {\n  static isSupported(gl, {format, linearFiltering} = {}) {\n    let supported = true;\n    if (format) {\n      supported = supported && isFormatSupported(gl, format);\n      supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));\n    }\n    return supported;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n  constructor(gl, props) {\n    const {\n      id = uid('texture'),\n      handle,\n      target\n      // , magFilter, minFilter, wrapS, wrapT\n    } = props;\n\n    super(gl, {id, handle});\n\n    this.target = target;\n    this.textureUnit = undefined;\n\n    // Program.draw() checks the loaded flag of all textures to avoid\n    // Textures that are still loading from promises\n    // Set to true as soon as texture has been initialized with valid data\n    this.loaded = false;\n\n    this.width = undefined;\n    this.height = undefined;\n    this.depth = undefined;\n    this.format = undefined;\n    this.type = undefined;\n    this.dataFormat = undefined;\n    this.border = undefined;\n    this.textureUnit = undefined;\n    this.mipmaps = undefined;\n  }\n\n  toString() {\n    return `Texture(${this.id},${this.width}x${this.height})`;\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(props = {}) {\n    let data = props.data;\n\n    if (data instanceof Promise) {\n      data.then(resolvedImageData =>\n        this.initialize(\n          Object.assign({}, props, {\n            pixels: resolvedImageData,\n            data: resolvedImageData\n          })\n        )\n      );\n      return this;\n    }\n\n    const {\n      pixels = null,\n      format = GL.RGBA,\n      border = 0,\n      recreate = false,\n      parameters = {},\n      pixelStore = {},\n      textureUnit = undefined,\n      // Deprecated parameters\n      unpackFlipY = true\n    } = props;\n\n    let {mipmaps = true} = props;\n\n    // pixels variable is for API compatibility purpose\n    if (!data) {\n      // TODO - This looks backwards? Commenting out for now until we decide\n      // which prop to use\n      // log.deprecated('data', 'pixels')();\n      data = pixels;\n    }\n\n    let {width, height, dataFormat, type} = props;\n    const {depth = 0} = props;\n\n    // Deduce width and height\n    ({width, height, dataFormat, type} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed: false,\n      data,\n      width,\n      height\n    }));\n\n    // Store opts for accessors\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.format = format;\n    this.type = type;\n    this.dataFormat = dataFormat;\n    this.border = border;\n    this.textureUnit = textureUnit;\n\n    if (Number.isFinite(this.textureUnit)) {\n      this.gl.activeTexture(GL.TEXTURE0 + this.textureUnit);\n      this.gl.bindTexture(this.target, this.handle);\n    }\n\n    // Note: luma.gl defaults to GL.UNPACK_FLIP_Y_WEBGL = true;\n    // TODO - compare v4 and v3\n    const DEFAULT_TEXTURE_SETTINGS = {\n      // Pixel store\n      [GL.UNPACK_FLIP_Y_WEBGL]: unpackFlipY\n    };\n    const glSettings = Object.assign({}, DEFAULT_TEXTURE_SETTINGS, pixelStore);\n\n    if (mipmaps && this._isNPOT()) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      mipmaps = false;\n\n      this._updateForNPOT(parameters);\n    }\n\n    this.mipmaps = mipmaps;\n\n    this.setImageData({\n      data,\n      width,\n      height,\n      depth,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps,\n      parameters: glSettings\n    });\n\n    if (mipmaps) {\n      this.generateMipmap();\n    }\n\n    // Set texture sampler parameters\n    this.setParameters(parameters);\n\n    // TODO - Store data to enable auto recreate on context loss\n    if (recreate) {\n      this.data = data;\n    }\n\n    return this;\n  }\n\n  // If size has changed, reinitializes with current format\n  // note clears image and mipmaps\n  resize({height, width, mipmaps = false}) {\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({\n        width,\n        height,\n        format: this.format,\n        type: this.type,\n        dataFormat: this.dataFormat,\n        border: this.border,\n        mipmaps\n      });\n    }\n    return this;\n  }\n\n  // Call to regenerate mipmaps after modifying texture(s)\n  generateMipmap(params = {}) {\n    if (this._isNPOT()) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      return this;\n    }\n\n    this.mipmaps = true;\n\n    this.gl.bindTexture(this.target, this.handle);\n    withParameters(this.gl, params, () => {\n      this.gl.generateMipmap(this.target);\n    });\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  /*\n   * Allocates storage\n   * @param {*} pixels -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} width -\n   * @param {GLint} height -\n   * @param {GLint} mipMapLevel -\n   * @param {GLenum} format - format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  /* eslint-disable max-len, max-statements, complexity */\n  setImageData(options) {\n    this._trackDeallocatedMemory('Texture');\n\n    const {\n      target = this.target,\n      pixels = null,\n      level = 0,\n      format = this.format,\n      border = this.border,\n      offset = 0,\n      parameters = {}\n    } = options;\n\n    let {\n      data = null,\n      type = this.type,\n      width = this.width,\n      height = this.height,\n      dataFormat = this.dataFormat,\n      compressed = false\n    } = options;\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    const {gl} = this;\n    gl.bindTexture(this.target, this.handle);\n\n    let dataType = null;\n    ({data, dataType} = this._getDataType({data, compressed}));\n\n    withParameters(this.gl, parameters, () => {\n      switch (dataType) {\n        case 'null':\n          gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          break;\n        case 'typed-array':\n          // Looks like this assert is not necessary, as offset is ignored under WebGL1\n          // assert((offset === 0 || isWebGL2(gl)), 'offset supported in WebGL2 only');\n          gl.texImage2D(\n            target,\n            level,\n            format,\n            width,\n            height,\n            border,\n            dataFormat,\n            type,\n            data,\n            offset\n          );\n          break;\n        case 'buffer':\n          // WebGL2 enables creating textures directly from a WebGL buffer\n          assertWebGL2Context(gl);\n          gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle || data);\n          gl.texImage2D(target, level, format, width, height, border, dataFormat, type, offset);\n          gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n          break;\n        case 'browser-object':\n          if (isWebGL2(gl)) {\n            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          } else {\n            gl.texImage2D(target, level, format, dataFormat, type, data);\n          }\n          break;\n        case 'compressed':\n          gl.compressedTexImage2D(target, level, format, width, height, border, data);\n          break;\n        default:\n          assert(false, 'Unknown image data type');\n      }\n    });\n\n    if (data && data.byteLength) {\n      this._trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      // NOTE(Tarek): Default to RGBA bytes\n      const channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n      const channelSize = TYPE_SIZES[this.type] || 1;\n\n      this._trackAllocatedMemory(this.width * this.height * channels * channelSize, 'Texture');\n    }\n\n    this.loaded = true;\n\n    return this;\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Redefines an area of an existing texture\n   * Note: does not allocate storage\n   */\n  /*\n   * Redefines an area of an existing texture\n   * @param {*} pixels, data -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} x - xOffset from where texture to be updated\n   * @param {GLint} y - yOffset from where texture to be updated\n   * @param {GLint} width - width of the sub image to be updated\n   * @param {GLint} height - height of the sub image to be updated\n   * @param {GLint} level - mip level to be updated\n   * @param {GLenum} format - internal format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer or ArrayBufferView\n   * @param {GLenum} dataFormat - format of image data.\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  setSubImageData({\n    target = this.target,\n    pixels = null,\n    data = null,\n    x = 0,\n    y = 0,\n    width = this.width,\n    height = this.height,\n    level = 0,\n    format = this.format,\n    type = this.type,\n    dataFormat = this.dataFormat,\n    compressed = false,\n    offset = 0,\n    border = this.border,\n    parameters = {}\n  }) {\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    assert(this.depth === 0, 'texSubImage not supported for 3D textures');\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    // Support ndarrays\n    if (data && data.data) {\n      const ndarray = data;\n      data = ndarray.data;\n      width = ndarray.shape[0];\n      height = ndarray.shape[1];\n    }\n\n    // Support buffers\n    if (data instanceof Buffer) {\n      data = data.handle;\n    }\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withParameters(this.gl, parameters, () => {\n      // TODO - x,y parameters\n      if (compressed) {\n        this.gl.compressedTexSubImage2D(target, level, x, y, width, height, format, data);\n      } else if (data === null) {\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, null);\n      } else if (ArrayBuffer.isView(data)) {\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data, offset);\n      } else if (data instanceof WebGLBuffer) {\n        // WebGL2 allows us to create texture directly from a WebGL buffer\n        assertWebGL2Context(this.gl);\n        // This texImage2D signature uses currently bound GL.PIXEL_UNPACK_BUFFER\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data);\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, offset);\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n      } else if (isWebGL2(this.gl)) {\n        // Assume data is a browser supported object (ImageData, Canvas, ...)\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data);\n      } else {\n        this.gl.texSubImage2D(target, level, x, y, dataFormat, type, data);\n      }\n    });\n\n    this.gl.bindTexture(this.target, null);\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Defines a two-dimensional texture image or cube-map texture image with\n   * pixels from the current framebuffer (rather than from client memory).\n   * (gl.copyTexImage2D wrapper)\n   *\n   * Note that binding a texture into a Framebuffer's color buffer and\n   * rendering can be faster.\n   */\n  copyFramebuffer(opts = {}) {\n    log.error(\n      'Texture.copyFramebuffer({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  getActiveUnit() {\n    return this.gl.getParameter(GL.ACTIVE_TEXTURE) - GL.TEXTURE0;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n\n  bind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, this.handle);\n    return textureUnit;\n  }\n\n  unbind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, null);\n    return textureUnit;\n  }\n\n  // PRIVATE METHODS\n\n  _getDataType({data, compressed = false}) {\n    if (compressed) {\n      return {data, dataType: 'compressed'};\n    }\n    if (data === null) {\n      return {data, dataType: 'null'};\n    }\n    if (ArrayBuffer.isView(data)) {\n      return {data, dataType: 'typed-array'};\n    }\n    if (data instanceof Buffer) {\n      return {data: data.handle, dataType: 'buffer'};\n    }\n    if (data instanceof WebGLBuffer) {\n      return {data, dataType: 'buffer'};\n    }\n    // Assume data is a browser supported object (ImageData, Canvas, ...)\n    return {data, dataType: 'browser-object'};\n  }\n\n  /* Copied from texture-2d.js\n  // WebGL2\n  setPixels(opts = {}) {\n    const {\n      buffer,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n\n    // This signature of texImage2D uses currently bound GL.PIXEL_UNPACK_BUFFER\n    gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, buffer.target);\n    // And as always, we must also bind the texture itself\n    this.bind();\n\n    gl.texImage2D(gl.TEXTURE_2D,\n      mipmapLevel, format, width, height, border, format, type, buffer.target);\n\n    this.unbind();\n    gl.bindBuffer(GL.GL.PIXEL_UNPACK_BUFFER, null);\n    return this;\n  }\n\n  setImageDataFromCompressedBuffer(opts) {\n    const {\n      buffer,\n      // offset = 0,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      internalFormat = GL.RGBA,\n      // format = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n    gl.compressedTexImage2D(this.target,\n      mipmapLevel, internalFormat, width, height, border, buffer);\n    // gl.compressedTexSubImage2D(target,\n    //   level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);\n    return this;\n  }\n\n  copySubImage(opts) {\n    const {\n      // pixels,\n      // offset = 0,\n      // x,\n      // y,\n      // width,\n      // height,\n      // mipmapLevel = 0,\n      // internalFormat = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      // border = 0\n    } = opts;\n\n    // if (pixels instanceof ArrayBufferView) {\n    //   gl.texSubImage2D(target, level, x, y, width, height, format, type, pixels);\n    // }\n    // gl.texSubImage2D(target, level, x, y, format, type, ? pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLImageElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLCanvasElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLVideoElement pixels);\n    // // Additional signature in a WebGL 2 context:\n    // gl.texSubImage2D(target, level, x, y, format, type, GLintptr offset);\n  }\n  */\n\n  // HELPER METHODS\n\n  _deduceParameters(opts) {\n    const {format, data} = opts;\n    let {width, height, dataFormat, type, compressed} = opts;\n\n    // Deduce format and type from format\n    const textureFormat = TEXTURE_FORMATS[format];\n    dataFormat = dataFormat || (textureFormat && textureFormat.dataFormat);\n    type = type || (textureFormat && textureFormat.types[0]);\n\n    // Deduce compression from format\n    compressed = compressed || (textureFormat && textureFormat.compressed);\n\n    ({width, height} = this._deduceImageSize(data, width, height));\n\n    return {dataFormat, type, compressed, width, height, format, data};\n  }\n\n  /* global ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement, ImageBitmap */\n  // eslint-disable-next-line complexity\n  _deduceImageSize(data, width, height) {\n    let size;\n\n    if (typeof ImageData !== 'undefined' && data instanceof ImageData) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\n      size = {width: data.naturalWidth, height: data.naturalHeight};\n    } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\n      size = {width: data.videoWidth, height: data.videoHeight};\n    } else if (!data) {\n      size = {width: width >= 0 ? width : 1, height: height >= 0 ? height : 1};\n    } else {\n      size = {width, height};\n    }\n\n    assert(size, 'Could not deduced texture size');\n    assert(\n      width === undefined || size.width === width,\n      'Deduced texture width does not match supplied width'\n    );\n    assert(\n      height === undefined || size.height === height,\n      'Deduced texture height does not match supplied height'\n    );\n\n    return size;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createTexture();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTexture(this.handle);\n    this._trackDeallocatedMemory('Texture');\n  }\n\n  _getParameter(pname) {\n    switch (pname) {\n      case GL.TEXTURE_WIDTH:\n        return this.width;\n      case GL.TEXTURE_HEIGHT:\n        return this.height;\n      default:\n        this.gl.bindTexture(this.target, this.handle);\n        const value = this.gl.getTexParameter(this.target, pname);\n        this.gl.bindTexture(this.target, null);\n        return value;\n    }\n  }\n\n  _setParameter(pname, param) {\n    this.gl.bindTexture(this.target, this.handle);\n\n    // NOTE: Apply NPOT workaround\n    param = this._getNPOTParam(pname, param);\n\n    // Apparently there are some integer/float conversion rules that made\n    // the WebGL committe expose two parameter setting functions in JavaScript.\n    // For now, pick the float version for parameters specified as GLfloat.\n    switch (pname) {\n      case GL.TEXTURE_MIN_LOD:\n      case GL.TEXTURE_MAX_LOD:\n        this.gl.texParameterf(this.handle, pname, param);\n        break;\n\n      case GL.TEXTURE_WIDTH:\n      case GL.TEXTURE_HEIGHT:\n        assert(false);\n        break;\n\n      default:\n        this.gl.texParameteri(this.target, pname, param);\n        break;\n    }\n\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  _isNPOT() {\n    if (isWebGL2(this.gl)) {\n      // NPOT restriction is only for WebGL1\n      return false;\n    }\n    // Width and height not available, consider it is not NPOT texture\n    if (!this.width || !this.height) {\n      return false;\n    }\n    return !isPowerOfTwo(this.width) || !isPowerOfTwo(this.height);\n  }\n\n  // Update default settings which are not supported by NPOT textures.\n  _updateForNPOT(parameters) {\n    if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n      parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_S to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_T to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;\n    }\n  }\n\n  _getNPOTParam(pname, param) {\n    if (this._isNPOT()) {\n      switch (pname) {\n        case GL.TEXTURE_MIN_FILTER:\n          if (NPOT_MIN_FILTERS.indexOf(param) === -1) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n            param = GL.LINEAR;\n          }\n          break;\n        case GL.TEXTURE_WRAP_S:\n        case GL.TEXTURE_WRAP_T:\n          if (param !== GL.CLAMP_TO_EDGE) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, ${getKey(this.gl, pname)} to CLAMP_TO_EDGE`)();\n            param = GL.CLAMP_TO_EDGE;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    return param;\n  }\n}\n","// WebGL1/WebGL2 extension polyfill support\n//\n// Provides a function that creates polyfills for WebGL2 functions based\n// on available extensions and installs them on a supplied target (could be\n// the WebGLContext or its prototype, or a separate object).\n//\n// This is intended to be a stand-alone file with minimal dependencies,\n// easy to reuse or repurpose in other projects.\n\n/* eslint-disable camelcase, brace-style */\nimport assert from './assert';\n\nimport {WEBGL2_CONTEXT_POLYFILLS, WEBGL2_CONTEXT_OVERRIDES} from './polyfill-table';\n\n// Registers extensions, polyfills or mock functions for extensions in the polyfills list\n// TODO - remove use of name `luma`.\nexport default function polyfillContext(gl) {\n  gl.luma = gl.luma || {};\n  initializeExtensions(gl);\n  if (!gl.luma.polyfilled) {\n    installPolyfills(gl, WEBGL2_CONTEXT_POLYFILLS);\n    installOverrides(gl, {target: gl.luma, target2: gl});\n    gl.luma.polyfilled = true;\n  }\n  return gl;\n}\n\n// TODO - is this still required?\n/* global window, global */\nconst global_ = typeof global !== 'undefined' ? global : window;\nglobal_.polyfillContext = polyfillContext;\n\nfunction initializeExtensions(gl) {\n  gl.luma.extensions = {};\n  // `getSupportedExtensions` can return null when context is lost.\n  const EXTENSIONS = gl.getSupportedExtensions() || [];\n  for (const extension of EXTENSIONS) {\n    gl.luma[extension] = gl.getExtension(extension);\n  }\n}\n\n// Install simple overrides (mostly get* functions)\nfunction installOverrides(gl, {target, target2}) {\n  Object.keys(WEBGL2_CONTEXT_OVERRIDES).forEach(key => {\n    if (typeof WEBGL2_CONTEXT_OVERRIDES[key] === 'function') {\n      // install an override, if no implementation was detected\n      const originalFunc = gl[key] ? gl[key].bind(gl) : () => {};\n      const polyfill = WEBGL2_CONTEXT_OVERRIDES[key].bind(null, gl, originalFunc);\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  });\n}\n\nfunction installPolyfills(gl, polyfills) {\n  for (const extension of Object.getOwnPropertyNames(polyfills)) {\n    if (extension !== 'overrides') {\n      polyfillExtension(gl, {extension, target: gl.luma, target2: gl});\n    }\n  }\n}\n\n// Polyfills a single WebGL extension into the `target` object\nfunction polyfillExtension(gl, {extension, target, target2}) {\n  const defaults = WEBGL2_CONTEXT_POLYFILLS[extension];\n  assert(defaults);\n\n  const {meta = {}} = defaults;\n  const {suffix = ''} = meta;\n\n  const ext = gl.getExtension(extension);\n\n  for (const key of Object.keys(defaults)) {\n    const extKey = `${key}${suffix}`;\n\n    let polyfill = null;\n    if (key === 'meta') {\n      // ignore\n    } else if (typeof gl[key] === 'function') {\n      // WebGL2 implementation is already\n    } else if (ext && typeof ext[extKey] === 'function') {\n      // pick extension implemenentation,if available\n      polyfill = (...args) => ext[extKey](...args);\n    } else if (typeof defaults[key] === 'function') {\n      // pick the mock implementation, if no implementation was detected\n      polyfill = defaults[key].bind(target);\n    }\n\n    if (polyfill) {\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  }\n}\n","/* eslint-disable no-restricted-globals */\n/* global self, window, global, document */\n/* eslint-disable no-restricted-globals */\nconst globals = {\n  self: typeof self !== 'undefined' && self,\n  window: typeof window !== 'undefined' && window,\n  global: typeof global !== 'undefined' && global,\n  document: typeof document !== 'undefined' && document\n};\n\nconst self_ = globals.self || globals.window || globals.global;\nconst window_ = globals.window || globals.self || globals.global;\nconst global_ = globals.global || globals.self || globals.window;\nconst document_ = globals.document || {};\n\nexport {self_ as self, window_ as window, global_ as global, document_ as document};\n","import GL from '@luma.gl/constants';\n\nimport Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport {clear, clearBuffer} from './clear';\nimport {copyToDataUrl} from './copy-and-blit.js';\n\nimport {getFeatures} from '../features';\n\nimport {isWebGL2, assertWebGL2Context, getKey} from '../webgl-utils';\n\nimport {log, assert} from '../utils';\n\nconst ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\n\nexport default class Framebuffer extends Resource {\n  static isSupported(\n    gl,\n    {\n      colorBufferFloat, // Whether floating point textures can be rendered and read\n      colorBufferHalfFloat // Whether half float textures can be rendered and read\n    } = {}\n  ) {\n    let supported = true;\n    supported =\n      colorBufferFloat &&\n      gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'WEBGL.color_buffer_float');\n    supported =\n      colorBufferHalfFloat &&\n      gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'EXT_color_buffer_half_float');\n    return supported;\n  }\n\n  // Create a Framebuffer wrapper for the default framebuffer (target === null)\n  static getDefaultFramebuffer(gl) {\n    gl.luma = gl.luma || {};\n    gl.luma.defaultFramebuffer =\n      gl.luma.defaultFramebuffer ||\n      new Framebuffer(gl, {\n        id: 'default-framebuffer',\n        handle: null,\n        attachments: {}\n      });\n    // TODO - can we query for and get a handle to the GL.FRONT renderbuffer?\n    return gl.luma.defaultFramebuffer;\n  }\n\n  get MAX_COLOR_ATTACHMENTS() {\n    return this.gl.getParameter(this.gl.MAX_COLOR_ATTACHMENTS);\n  }\n\n  get MAX_DRAW_BUFFERS() {\n    return this.gl.getParameter(this.gl.MAX_DRAW_BUFFERS);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // Public members\n    this.width = null;\n    this.height = null;\n    this.attachments = {};\n    this.readBuffer = GL.COLOR_ATTACHMENT0;\n    this.drawBuffers = [GL.COLOR_ATTACHMENT0];\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  get color() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get texture() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get depth() {\n    return (\n      this.attachments[GL.DEPTH_ATTACHMENT] || this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] || null\n    );\n  }\n\n  get stencil() {\n    return (\n      this.attachments[GL.STENCIL_ATTACHMENT] ||\n      this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] ||\n      null\n    );\n  }\n\n  initialize({\n    width = 1,\n    height = 1,\n    attachments = null,\n    color = true,\n    depth = true,\n    stencil = false,\n    check = true,\n    readBuffer,\n    drawBuffers\n  }) {\n    assert(width >= 0 && height >= 0, 'Width and height need to be integers');\n\n    // Store actual width and height for diffing\n    this.width = width;\n    this.height = height;\n\n    // Resize any provided attachments - note that resize only resizes if needed\n    // Note: A framebuffer has no separate size, it is defined by its attachments (which must agree)\n    if (attachments) {\n      for (const attachment in attachments) {\n        const target = attachments[attachment];\n        const object = Array.isArray(target) ? target[0] : target;\n        object.resize({width, height});\n      }\n    } else {\n      // Create any requested default attachments\n      attachments = this._createDefaultAttachments(color, depth, stencil, width, height);\n    }\n\n    this.update({clearAttachments: true, attachments, readBuffer, drawBuffers});\n\n    // Checks that framebuffer was properly set up, if not, throws an explanatory error\n    if (attachments && check) {\n      this.checkStatus();\n    }\n  }\n\n  update({\n    attachments = {},\n    readBuffer,\n    drawBuffers,\n    clearAttachments = false,\n    resizeAttachments = true\n  }) {\n    this.attach(attachments, {clearAttachments, resizeAttachments});\n\n    const {gl} = this;\n    // Multiple render target support, set read buffer and draw buffers\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    if (readBuffer) {\n      this._setReadBuffer(readBuffer);\n    }\n    if (drawBuffers) {\n      this._setDrawBuffers(drawBuffers);\n    }\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // Attachment resize is expected to be a noop if size is same\n  resize({width, height} = {}) {\n    // for default framebuffer, just update the stored size\n    if (this.handle === null) {\n      assert(width === undefined && height === undefined);\n      this.width = this.gl.drawingBufferWidth;\n      this.height = this.gl.drawingBufferHeight;\n      return this;\n    }\n\n    if (width === undefined) {\n      width = this.gl.drawingBufferWidth;\n    }\n    if (height === undefined) {\n      height = this.gl.drawingBufferHeight;\n    }\n\n    if (width !== this.width && height !== this.height) {\n      log.log(2, `Resizing framebuffer ${this.id} to ${width}x${height}`)();\n    }\n    for (const attachmentPoint in this.attachments) {\n      this.attachments[attachmentPoint].resize({width, height});\n    }\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  // Attach from a map of attachments\n  attach(attachments, {clearAttachments = false, resizeAttachments = true} = {}) {\n    const newAttachments = {};\n\n    // Any current attachments need to be removed, add null values to map\n    if (clearAttachments) {\n      Object.keys(this.attachments).forEach(key => {\n        newAttachments[key] = null;\n      });\n    }\n\n    // Overlay the new attachments\n    Object.assign(newAttachments, attachments);\n\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    // Walk the attachments\n    for (const key in newAttachments) {\n      // Ensure key is not undefined\n      assert(key !== undefined, 'Misspelled framebuffer binding point?');\n\n      const attachment = Number(key);\n\n      const descriptor = newAttachments[attachment];\n      let object = descriptor;\n      if (!object) {\n        this._unattach(attachment);\n      } else if (object instanceof Renderbuffer) {\n        this._attachRenderbuffer({attachment, renderbuffer: object});\n      } else if (Array.isArray(descriptor)) {\n        const [texture, layer = 0, level = 0] = descriptor;\n        object = texture;\n        this._attachTexture({attachment, texture, layer, level});\n      } else {\n        this._attachTexture({attachment, texture: object, layer: 0, level: 0});\n      }\n\n      // Resize objects\n      if (resizeAttachments && object) {\n        object.resize({width: this.width, height: this.height});\n      }\n    }\n\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    // Assign to attachments and remove any nulls to get a clean attachment map\n    Object.assign(this.attachments, attachments);\n    Object.keys(this.attachments)\n      .filter(key => !this.attachments[key])\n      .forEach(key => {\n        delete this.attachments[key];\n      });\n  }\n\n  checkStatus() {\n    const {gl} = this;\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    const status = gl.checkFramebufferStatus(GL.FRAMEBUFFER);\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n      throw new Error(_getFrameBufferStatus(status));\n    }\n    return this;\n  }\n\n  clear({color, depth, stencil, drawBuffers = []} = {}) {\n    // Bind framebuffer and delegate to global clear functions\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    if (color || depth || stencil) {\n      clear(this.gl, {color, depth, stencil});\n    }\n\n    drawBuffers.forEach((value, drawBuffer) => {\n      clearBuffer({drawBuffer, value});\n    });\n\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // NOTE: Slow requires roundtrip to GPU\n  // App can provide pixelArray or have it auto allocated by this method\n  // @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n  //  newly allocated by this method unless provided by app.\n  readPixels(opts = {}) {\n    log.error(\n      'Framebuffer.readPixels() is no logner supported, use readPixelsToArray(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads data into provided buffer object asynchronously\n  // This function doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n  readPixelsToBuffer(opts = {}) {\n    log.error(\n      'Framebuffer.readPixelsToBuffer()is no logner supported, use readPixelsToBuffer(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels as a dataUrl\n  copyToDataUrl(opts = {}) {\n    log.error(\n      'Framebuffer.copyToDataUrl() is no logner supported, use copyToDataUrl(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels into an HTML Image\n  copyToImage(opts = {}) {\n    log.error('Framebuffer.copyToImage() is no logner supported, use copyToImage(framebuffer)')();\n    return null;\n  }\n\n  // copyToFramebuffer({width, height}) {\n  //   const scaleX = width / this.width;\n  //   const scaleY = height / this.height;\n  //   const scale = Math.min(scaleX, scaleY);\n  //   width = width * scale;\n  //   height = height * scale;\n  //   const scaledFramebuffer = new Framebuffer(this.gl, {width, height});\n  //   this.blit();\n  // }\n\n  // Copy a rectangle from a framebuffer attachment into a texture (at an offset)\n  // NOTE: assumes texture has enough storage allocated\n  // eslint-disable-next-line complexity\n  copyToTexture(opts = {}) {\n    log.error(\n      'Framebuffer.copyToTexture({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  // WEBGL2 INTERFACE\n\n  // Copies a rectangle of pixels between framebuffers\n  // eslint-disable-next-line complexity\n  blit(opts = {}) {\n    log.error('Framebuffer.blit({...}) is no logner supported, use blit(source, target, opts)')();\n    return null;\n  }\n\n  // signals to the GL that it need not preserve all pixels of a specified region of the framebuffer\n  invalidate({attachments = [], x = 0, y = 0, width, height}) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n    const prevHandle = gl.bindFramebuffer(GL.READ_FRAMEBUFFER, this.handle);\n    const invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n    if (invalidateAll) {\n      gl.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments);\n    } else {\n      gl.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments, x, y, width, height);\n    }\n    gl.bindFramebuffer(GL.READ_FRAMEBUFFER, prevHandle);\n    return this;\n  }\n\n  // Return the value for `pname` of the specified attachment.\n  // The type returned is the type of the requested pname\n  getAttachmentParameter(attachment, pname, keys) {\n    let value = this._getAttachmentParameterFallback(pname);\n    if (value === null) {\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n      value = this.gl.getFramebufferAttachmentParameter(GL.FRAMEBUFFER, attachment, pname);\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, null);\n    }\n    if (keys && value > 1000) {\n      value = getKey(this.gl, value);\n    }\n    return value;\n  }\n\n  getAttachmentParameters(\n    attachment = GL.COLOR_ATTACHMENT0,\n    keys,\n    parameters = this.constructor.ATTACHMENT_PARAMETERS || []\n  ) {\n    const values = {};\n    for (const pname of parameters) {\n      const key = keys ? getKey(this.gl, pname) : pname;\n      values[key] = this.getAttachmentParameter(attachment, pname, keys);\n    }\n    return values;\n  }\n\n  getParameters(keys = true) {\n    const attachments = Object.keys(this.attachments);\n    // if (this === this.gl.luma.defaultFramebuffer) {\n    //   attachments = [GL.COLOR_ATTACHMENT0, GL.DEPTH_STENCIL_ATTACHMENT];\n    // }\n    const parameters = {};\n    for (const attachmentName of attachments) {\n      const attachment = Number(attachmentName);\n      const key = keys ? getKey(this.gl, attachment) : attachment;\n      parameters[key] = this.getAttachmentParameters(attachment, keys);\n    }\n    return parameters;\n  }\n\n  // DEBUG\n\n  // Note: Will only work when called in an event handler\n  show() {\n    /* global window */\n    if (typeof window !== 'undefined') {\n      window.open(copyToDataUrl(this), 'luma-debug-texture');\n    }\n    return this;\n  }\n\n  log(priority = 0, message = '') {\n    if (priority > log.priority || typeof window === 'undefined') {\n      return this;\n    }\n    message = message || `Framebuffer ${this.id}`;\n    const image = copyToDataUrl(this, {maxHeight: 100});\n    log.image({priority, message, image}, message)();\n    return this;\n  }\n\n  // WEBGL INTERFACE\n  bind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, this.handle);\n    return this;\n  }\n\n  unbind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _createDefaultAttachments(color, depth, stencil, width, height) {\n    let defaultAttachments = null;\n\n    // Add a color buffer if requested and not supplied\n    if (color) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.COLOR_ATTACHMENT0] = new Texture2D(this.gl, {\n        id: `${this.id}-color0`,\n        pixels: null, // reserves texture memory, but texels are undefined\n        format: GL.RGBA,\n        type: GL.UNSIGNED_BYTE,\n        width,\n        height,\n        // Note: Mipmapping can be disabled by texture resource when we resize the texture\n        // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant\n        // behavior we always disable mipmaps.\n        mipmaps: false,\n        // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.\n        // Use LINEAR so subpixel algos like fxaa work.\n        // Set WRAP modes that support NPOT textures too.\n        parameters: {\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n        }\n      });\n    }\n\n    if (depth && stencil) {\n      // TODO - handle separate stencil\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_STENCIL_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth-stencil`,\n        format: GL.DEPTH24_STENCIL8,\n        width,\n        height: 111\n      });\n      // TODO - optional texture\n      // new Texture2D(this.gl, {\n      //   id: `${this.id}-depth-stencil`,\n      //   format: GL.DEPTH24_STENCIL8,\n      //   dataFormat: GL.DEPTH_STENCIL,\n      //   type: GL.UNSIGNED_INT_24_8,\n      //   width,\n      //   height,\n      //   mipmaps: false\n      // });\n    } else if (depth) {\n      // Add a depth buffer if requested and not supplied\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth`,\n        format: GL.DEPTH_COMPONENT16,\n        width,\n        height\n      });\n    } else if (stencil) {\n      // TODO - handle separate stencil\n      assert(false);\n    }\n\n    return defaultAttachments;\n  }\n\n  _unattach(attachment) {\n    const oldAttachment = this.attachments[attachment];\n    if (!oldAttachment) {\n      return;\n    }\n    if (oldAttachment instanceof Renderbuffer) {\n      // render buffer\n      this.gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, null);\n    } else {\n      // Must be a texture attachment\n      this.gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, null, 0);\n    }\n    delete this.attachments[attachment];\n  }\n\n  _attachRenderbuffer({attachment = GL.COLOR_ATTACHMENT0, renderbuffer}) {\n    const {gl} = this;\n    // TODO - is the bind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer.handle);\n    gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, renderbuffer.handle);\n    // TODO - is the unbind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.attachments[attachment] = renderbuffer;\n  }\n\n  // layer = 0 - index into Texture2DArray and Texture3D or face for `TextureCubeMap`\n  // level = 0 - mipmapLevel (must be 0 in WebGL1)\n  _attachTexture({attachment = GL.COLOR_ATTACHMENT0, texture, layer, level}) {\n    const {gl} = this;\n    gl.bindTexture(texture.target, texture.handle);\n\n    switch (texture.target) {\n      case GL.TEXTURE_2D_ARRAY:\n      case GL.TEXTURE_3D:\n        gl.framebufferTextureLayer(GL.FRAMEBUFFER, attachment, texture.target, level, layer);\n        break;\n\n      case GL.TEXTURE_CUBE_MAP:\n        // layer must be a cubemap face (or if index, converted to cube map face)\n        const face = mapIndexToCubeMapFace(layer);\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, face, texture.handle, level);\n        break;\n\n      case GL.TEXTURE_2D:\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, texture.handle, level);\n        break;\n\n      default:\n        assert(false, 'Illegal texture type');\n    }\n\n    gl.bindTexture(texture.target, null);\n    this.attachments[attachment] = texture;\n  }\n\n  // Expects framebuffer to be bound\n  _setReadBuffer(readBuffer) {\n    const {gl} = this;\n    if (isWebGL2(gl)) {\n      gl.readBuffer(readBuffer);\n    } else {\n      // Setting to color attachment 0 is a noop, so allow it in WebGL1\n      assert(\n        readBuffer === GL.COLOR_ATTACHMENT0 || readBuffer === GL.BACK,\n        ERR_MULTIPLE_RENDERTARGETS\n      );\n    }\n    this.readBuffer = readBuffer;\n  }\n\n  // Expects framebuffer to be bound\n  _setDrawBuffers(drawBuffers) {\n    const {gl} = this;\n    if (isWebGL2(gl)) {\n      gl.drawBuffers(drawBuffers);\n    } else {\n      const ext = gl.getExtension('WEBGL.draw_buffers');\n      if (ext) {\n        ext.drawBuffersWEBGL(drawBuffers);\n      } else {\n        // Setting a single draw buffer to color attachment 0 is a noop, allow in WebGL1\n        assert(\n          drawBuffers.length === 1 &&\n            (drawBuffers[0] === GL.COLOR_ATTACHMENT0 || drawBuffers[0] === GL.BACK),\n          ERR_MULTIPLE_RENDERTARGETS\n        );\n      }\n    }\n    this.drawBuffers = drawBuffers;\n  }\n\n  // Attempt to provide workable defaults for WebGL2 symbols under WebGL1\n  // null means OK to query\n  // TODO - move to webgl1 polyfills\n  /* eslint-disable complexity */\n  _getAttachmentParameterFallback(pname) {\n    const caps = getFeatures(this.gl);\n\n    switch (pname) {\n      case GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: // GLint\n        return !caps.webgl2 ? 0 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: // GLint\n        return !caps.webgl2 ? 8 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: // GLenum\n        return !caps.webgl2 ? GL.UNSIGNED_INT : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:\n        return !caps.webgl2 && !caps.EXT_sRGB ? GL.LINEAR : null;\n      default:\n        return null;\n    }\n  }\n  /* eslint-enable complexity */\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createFramebuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteFramebuffer(this.handle);\n  }\n\n  _bindHandle(handle) {\n    return this.gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  }\n}\n\n// PUBLIC METHODS\n\n// Map an index to a cube map face constant\nfunction mapIndexToCubeMapFace(layer) {\n  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)\n  // if smaller assume layer is index, otherwise assume it is already a cube map face constant\n  return layer < GL.TEXTURE_CUBE_MAP_POSITIVE_X ? layer + GL.TEXTURE_CUBE_MAP_POSITIVE_X : layer;\n}\n\n// Helper METHODS\n// Get a string describing the framebuffer error if installed\nfunction _getFrameBufferStatus(status) {\n  // Use error mapping if installed\n  const STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || `Framebuffer error ${status}`;\n}\n\nexport const FRAMEBUFFER_ATTACHMENT_PARAMETERS = [\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, // WebGLRenderbuffer or WebGLTexture\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, // GL.RENDERBUFFER, GL.TEXTURE, GL.NONE\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, // GL.TEXTURE_CUBE_MAP_POSITIVE_X, etc.\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, // GLint\n  // EXT_sRGB or WebGL2\n  GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, // GL.LINEAR, GL.SRBG\n  // WebGL2\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE // GLint\n  // GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE\n  // GL.FLOAT, GL.INT, GL.UNSIGNED_INT, GL.SIGNED_NORMALIZED, OR GL.UNSIGNED_NORMALIZED.\n];\n\nFramebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;\n","import {Log} from 'probe.gl';\n\nexport default new Log({id: 'luma'}).enable();\n","import GL from '@luma.gl/constants';\nimport {getTypedArrayFromGLType} from '../webgl-utils';\nimport {checkProps, assert} from '../utils';\n\nconst DEFAULT_ACCESSOR_VALUES = {\n  offset: 0,\n  stride: 0,\n  type: GL.FLOAT,\n  size: 1,\n  divisor: 0,\n  normalized: false,\n  integer: false\n};\n\nconst PROP_CHECKS = {\n  deprecatedProps: {\n    instanced: 'divisor',\n    isInstanced: 'divisor'\n  }\n};\n\nexport default class Accessor {\n  static getBytesPerElement(accessor) {\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || GL.FLOAT);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n\n  static getBytesPerVertex(accessor) {\n    assert(accessor.size);\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || GL.FLOAT);\n    return ArrayType.BYTES_PER_ELEMENT * accessor.size;\n  }\n\n  // Combines (merges) a list of accessors. On top of default values\n  // Usually [programAccessor, bufferAccessor, appAccessor]\n  // All props will be set in the returned object.\n  // TODO check for conflicts between values in the supplied accessors\n  static resolve(...accessors) {\n    return new Accessor(...[DEFAULT_ACCESSOR_VALUES, ...accessors]); // Default values\n  }\n\n  constructor(...accessors) {\n    accessors.forEach(accessor => this._assign(accessor)); // Merge in sequence\n    Object.freeze(this);\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  // ACCESSORS\n\n  // TODO - remove>\n  get BYTES_PER_ELEMENT() {\n    return Accessor.getBytesPerElement(this);\n  }\n\n  get BYTES_PER_VERTEX() {\n    return Accessor.getBytesPerVertex(this);\n  }\n\n  // PRIVATE\n\n  // eslint-disable-next-line complexity, max-statements\n  _assign(props = {}) {\n    props = checkProps('Accessor', props, PROP_CHECKS);\n\n    if (props.type !== undefined) {\n      this.type = props.type;\n\n      // Auto-deduce integer type?\n      if (props.type === GL.INT || props.type === GL.UNSIGNED_INT) {\n        this.integer = true;\n      }\n    }\n    if (props.size !== undefined) {\n      this.size = props.size;\n    }\n    if (props.offset !== undefined) {\n      this.offset = props.offset;\n    }\n    if (props.stride !== undefined) {\n      this.stride = props.stride;\n    }\n    if (props.normalized !== undefined) {\n      this.normalized = props.normalized;\n    }\n    if (props.integer !== undefined) {\n      this.integer = props.integer;\n    }\n\n    // INSTANCE DIVISOR\n    if (props.divisor !== undefined) {\n      this.divisor = props.divisor;\n    }\n\n    // Buffer is optional\n    if (props.buffer !== undefined) {\n      this.buffer = props.buffer;\n    }\n\n    // The binding index (for binding e.g. Transform feedbacks and Uniform buffers)\n    // TODO - should this be part of accessor?\n    if (props.index !== undefined) {\n      if (typeof index === 'boolean') {\n        this.index = props.index ? 1 : 0;\n      } else {\n        this.index = props.index;\n      }\n    }\n\n    // DEPRECATED\n    if (props.instanced !== undefined) {\n      this.divisor = props.instanced ? 1 : 0;\n    }\n    if (props.isInstanced !== undefined) {\n      this.divisor = props.isInstanced ? 1 : 0;\n    }\n\n    return this;\n  }\n}\n\n// TEST EXPORTS\nexport {DEFAULT_ACCESSOR_VALUES};\n","// Provides a unified API for getting and setting any WebGL parameter\n// Also knows default values of all parameters, enabling fast cache initialization\n// Provides base functionality for the state caching.\nimport {\n  GL_PARAMETER_DEFAULTS,\n  GL_PARAMETER_SETTERS,\n  GL_COMPOSITE_PARAMETER_SETTERS,\n  GL_PARAMETER_GETTERS\n} from './webgl-parameter-tables';\n\nimport deepArrayEqual from '../utils/deep-array-equal';\nimport {assert} from '../utils';\n\n// PUBLIC METHODS\n\n// Sets any single GL parameter regardless of function (gl.getParameter/gl.isEnabled...)\n// Returns the previous value\n// Note: limited to parameter values\nexport function setParameter(gl, key, value) {\n  const getter = GL_PARAMETER_GETTERS[key];\n  const prevValue = getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));\n  const setter = GL_PARAMETER_SETTERS[key];\n  assert(typeof setter === 'function');\n  setter(gl, value, Number(key));\n  return prevValue;\n}\n\n// Sets any GL parameter regardless of function (gl.blendMode, ...)\n// Note: requires a `cache` object to be set on the context (gl.state.cache)\n// This object is used to fill in any missing values for composite setter functions\nexport function setParameters(gl, values) {\n  const compositeSetters = {};\n\n  // HANDLE PRIMITIVE SETTERS (and make note of any composite setters)\n\n  for (const key in values) {\n    const glConstant = Number(key);\n    const setter = GL_PARAMETER_SETTERS[key];\n    if (setter) {\n      // Composite setters should only be called once, so save them\n      if (typeof setter === 'string') {\n        compositeSetters[setter] = true;\n      } else {\n        // if (gl[glConstant] !== undefined) {\n        // TODO - added above check since this is being called on WebGL2 values in WebGL1...\n        // TODO - deep equal on values? only call setter if value has changed?\n        // NOTE - the setter will automatically update this.state\n        setter(gl, values[key], glConstant);\n      }\n    }\n  }\n\n  // HANDLE COMPOSITE SETTERS\n\n  // NOTE: any non-provided values needed by composite setters are filled in from state cache\n  // The cache parameter is automatically retrieved from the context\n  // This depends on `trackContextState`, which is technically a \"circular\" dependency.\n  // But it is too inconvenient to always require a cache parameter here.\n  // This is the ONLY external dependency in this module/\n  const cache = gl.state && gl.state.cache;\n  if (cache) {\n    const mergedValues = Object.assign({}, cache, values);\n\n    for (const key in compositeSetters) {\n      // TODO - avoid calling composite setters if values have not changed.\n      const compositeSetter = GL_COMPOSITE_PARAMETER_SETTERS[key];\n      // Note - if `trackContextState` has been called,\n      // the setter will automatically update this.state.cache\n      compositeSetter(gl, mergedValues);\n    }\n  }\n  // Add a log for the else case?\n}\n\n// Queries any single GL parameter regardless of function (gl.getParameter/gl.isEnabled...)\nexport function getParameter(gl, key) {\n  const getter = GL_PARAMETER_GETTERS[key];\n  return getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));\n}\n\n// Copies the state from a context (gl.getParameter should not be overriden)\n// Reads the entire WebGL state from a context\n// Caveat: This generates a huge amount of synchronous driver roundtrips and should be\n// considered a very slow operation, to be used only if/when a context already manipulated\n// by external code needs to be synchronized for the first time\n// @return {Object} - a newly created map, with values keyed by GL parameters\nexport function getParameters(gl, parameters) {\n  // default to querying all parameters\n  parameters = parameters || GL_PARAMETER_DEFAULTS;\n  // support both arrays of parameters and objects (keys represent parameters)\n  const parameterKeys = Array.isArray(parameters) ? parameters : Object.keys(parameters);\n\n  const state = {};\n  for (const key of parameterKeys) {\n    state[key] = getParameter(gl, key);\n  }\n  return state;\n}\n\nexport function getDefaultParameters(gl) {\n  // TODO - Query GL.VIEWPORT and GL.SCISSOR_BOX since these are dynamic\n  return Object.assign({}, GL_PARAMETER_DEFAULTS, {\n    // TODO: For viewport and scissor default values are set at the time of\n    // context creation based on canvas size, we can query them here but it will\n    // not match with what we have in GL_PARAMETER_DEFAULTS table, we should revisit.\n    // [GL.VIEWPORT]: gl.constructor.prototype.getParameter.call(gl, GL.VIEWPORT),\n    // [GL.SCISSOR_BOX]: gl.constructor.prototype.getParameter.call(gl, GL.SCISSOR_BOX)\n  });\n}\n\n// Reset all parameters to a pure context state\nexport function resetParameters(gl) {\n  setParameters(gl, getDefaultParameters(gl));\n}\n\n// Get all parameters that have been modified from a pure context state\nexport function getModifiedParameters(gl) {\n  const values = getParameters(gl, Object.keys(GL_PARAMETER_DEFAULTS));\n  const modified = {};\n  for (const key in GL_PARAMETER_DEFAULTS) {\n    if (!deepArrayEqual(values[key], GL_PARAMETER_DEFAULTS[key])) {\n      modified[key] = values[key];\n    }\n  }\n  return modified;\n}\n","// Tables describing WebGL parameters\nimport GL from '@luma.gl/constants';\nimport {isWebGL2} from '../utils';\n\n// DEFAULT SETTINGS - FOR FAST CACHE INITIALIZATION AND CONTEXT RESETS\n\nexport const GL_PARAMETER_DEFAULTS = {\n  [GL.BLEND]: false,\n  [GL.BLEND_COLOR]: new Float32Array([0, 0, 0, 0]),\n  [GL.BLEND_EQUATION_RGB]: GL.FUNC_ADD,\n  [GL.BLEND_EQUATION_ALPHA]: GL.FUNC_ADD,\n  [GL.BLEND_SRC_RGB]: GL.ONE,\n  [GL.BLEND_DST_RGB]: GL.ZERO,\n  [GL.BLEND_SRC_ALPHA]: GL.ONE,\n  [GL.BLEND_DST_ALPHA]: GL.ZERO,\n  [GL.COLOR_CLEAR_VALUE]: new Float32Array([0, 0, 0, 0]), // TBD\n  [GL.COLOR_WRITEMASK]: [true, true, true, true],\n  [GL.CULL_FACE]: false,\n  [GL.CULL_FACE_MODE]: GL.BACK,\n  [GL.DEPTH_TEST]: false,\n  [GL.DEPTH_CLEAR_VALUE]: 1,\n  [GL.DEPTH_FUNC]: GL.LESS,\n  [GL.DEPTH_RANGE]: new Float32Array([0, 1]), // TBD\n  [GL.DEPTH_WRITEMASK]: true,\n  [GL.DITHER]: true,\n  // FRAMEBUFFER_BINDING and DRAW_FRAMEBUFFER_BINDING(WebGL2) refer same state.\n  [GL.FRAMEBUFFER_BINDING]: null,\n  [GL.FRONT_FACE]: GL.CCW,\n  [GL.GENERATE_MIPMAP_HINT]: GL.DONT_CARE,\n  [GL.LINE_WIDTH]: 1,\n  [GL.POLYGON_OFFSET_FILL]: false,\n  [GL.POLYGON_OFFSET_FACTOR]: 0,\n  [GL.POLYGON_OFFSET_UNITS]: 0,\n  [GL.SAMPLE_COVERAGE_VALUE]: 1.0,\n  [GL.SAMPLE_COVERAGE_INVERT]: false,\n  [GL.SCISSOR_TEST]: false,\n  // Note: Dynamic value. If scissor test enabled we expect users to set correct scissor box\n  [GL.SCISSOR_BOX]: new Int32Array([0, 0, 1024, 1024]),\n  [GL.STENCIL_TEST]: false,\n  [GL.STENCIL_CLEAR_VALUE]: 0,\n  [GL.STENCIL_WRITEMASK]: 0xffffffff,\n  [GL.STENCIL_BACK_WRITEMASK]: 0xffffffff,\n  [GL.STENCIL_FUNC]: GL.ALWAYS,\n  [GL.STENCIL_REF]: 0,\n  [GL.STENCIL_VALUE_MASK]: 0xffffffff,\n  [GL.STENCIL_BACK_FUNC]: GL.ALWAYS,\n  [GL.STENCIL_BACK_REF]: 0,\n  [GL.STENCIL_BACK_VALUE_MASK]: 0xffffffff,\n  [GL.STENCIL_FAIL]: GL.KEEP,\n  [GL.STENCIL_PASS_DEPTH_FAIL]: GL.KEEP,\n  [GL.STENCIL_PASS_DEPTH_PASS]: GL.KEEP,\n  [GL.STENCIL_BACK_FAIL]: GL.KEEP,\n  [GL.STENCIL_BACK_PASS_DEPTH_FAIL]: GL.KEEP,\n  [GL.STENCIL_BACK_PASS_DEPTH_PASS]: GL.KEEP,\n  // Dynamic value: We use [0, 0, 1024, 1024] as default, but usually this is updated in each frame.\n  [GL.VIEWPORT]: new Int32Array([0, 0, 1024, 1024]),\n  // WEBGL1 PIXEL PACK/UNPACK MODES\n  [GL.PACK_ALIGNMENT]: 4,\n  [GL.UNPACK_ALIGNMENT]: 4,\n  [GL.UNPACK_FLIP_Y_WEBGL]: false,\n  [GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL]: false,\n  [GL.UNPACK_COLORSPACE_CONVERSION_WEBGL]: GL.BROWSER_DEFAULT_WEBGL,\n\n  // WEBGL2 / EXTENSIONS\n  // gl1: 'OES_standard_derivatives'\n  [GL.FRAGMENT_SHADER_DERIVATIVE_HINT]: GL.DONT_CARE,\n  [GL.READ_FRAMEBUFFER_BINDING]: null,\n  [GL.RASTERIZER_DISCARD]: false,\n  [GL.PACK_ROW_LENGTH]: 0,\n  [GL.PACK_SKIP_PIXELS]: 0,\n  [GL.PACK_SKIP_ROWS]: 0,\n  [GL.UNPACK_ROW_LENGTH]: 0,\n  [GL.UNPACK_IMAGE_HEIGHT]: 0,\n  [GL.UNPACK_SKIP_PIXELS]: 0,\n  [GL.UNPACK_SKIP_ROWS]: 0,\n  [GL.UNPACK_SKIP_IMAGES]: 0\n};\n\n// SETTER TABLES - ENABLES SETTING ANY PARAMETER WITH A COMMON API\n\nconst enable = (gl, value, key) => (value ? gl.enable(key) : gl.disable(key));\nconst hint = (gl, value, key) => gl.hint(key, value);\nconst pixelStorei = (gl, value, key) => gl.pixelStorei(key, value);\n\nconst drawFramebuffer = (gl, value) => {\n  const target = isWebGL2(gl) ? GL.DRAW_FRAMEBUFFER : GL.FRAMEBUFFER;\n  return gl.bindFramebuffer(target, value);\n};\nconst readFramebuffer = (gl, value) => {\n  return gl.bindFramebuffer(GL.READ_FRAMEBUFFER, value);\n};\n\n// Map from WebGL parameter names to corresponding WebGL setter functions\n// WegGL constants are read by parameter names, but set by function names\n// NOTE: When value type is a string, it will be handled by 'GL_COMPOSITE_PARAMETER_SETTERS'\nexport const GL_PARAMETER_SETTERS = {\n  [GL.BLEND]: enable,\n  [GL.BLEND_COLOR]: (gl, value) => gl.blendColor(...value),\n  [GL.BLEND_EQUATION_RGB]: 'blendEquation',\n  [GL.BLEND_EQUATION_ALPHA]: 'blendEquation',\n  [GL.BLEND_SRC_RGB]: 'blendFunc',\n  [GL.BLEND_DST_RGB]: 'blendFunc',\n  [GL.BLEND_SRC_ALPHA]: 'blendFunc',\n  [GL.BLEND_DST_ALPHA]: 'blendFunc',\n  [GL.COLOR_CLEAR_VALUE]: (gl, value) => gl.clearColor(...value),\n  [GL.COLOR_WRITEMASK]: (gl, value) => gl.colorMask(...value),\n  [GL.CULL_FACE]: enable,\n  [GL.CULL_FACE_MODE]: (gl, value) => gl.cullFace(value),\n  [GL.DEPTH_TEST]: enable,\n  [GL.DEPTH_CLEAR_VALUE]: (gl, value) => gl.clearDepth(value),\n  [GL.DEPTH_FUNC]: (gl, value) => gl.depthFunc(value),\n  [GL.DEPTH_RANGE]: (gl, value) => gl.depthRange(...value),\n  [GL.DEPTH_WRITEMASK]: (gl, value) => gl.depthMask(value),\n  [GL.DITHER]: enable,\n  [GL.FRAGMENT_SHADER_DERIVATIVE_HINT]: hint,\n  // NOTE: FRAMEBUFFER_BINDING and DRAW_FRAMEBUFFER_BINDING(WebGL2) refer same state.\n  [GL.FRAMEBUFFER_BINDING]: drawFramebuffer,\n  [GL.FRONT_FACE]: (gl, value) => gl.frontFace(value),\n  [GL.GENERATE_MIPMAP_HINT]: hint,\n  [GL.LINE_WIDTH]: (gl, value) => gl.lineWidth(value),\n  [GL.POLYGON_OFFSET_FILL]: enable,\n  [GL.POLYGON_OFFSET_FACTOR]: 'polygonOffset',\n  [GL.POLYGON_OFFSET_UNITS]: 'polygonOffset',\n  [GL.RASTERIZER_DISCARD]: enable,\n  [GL.SAMPLE_COVERAGE_VALUE]: 'sampleCoverage',\n  [GL.SAMPLE_COVERAGE_INVERT]: 'sampleCoverage',\n  [GL.SCISSOR_TEST]: enable,\n  [GL.SCISSOR_BOX]: (gl, value) => gl.scissor(...value),\n  [GL.STENCIL_TEST]: enable,\n  [GL.STENCIL_CLEAR_VALUE]: (gl, value) => gl.clearStencil(value),\n  [GL.STENCIL_WRITEMASK]: (gl, value) => gl.stencilMaskSeparate(GL.FRONT, value),\n  [GL.STENCIL_BACK_WRITEMASK]: (gl, value) => gl.stencilMaskSeparate(GL.BACK, value),\n  [GL.STENCIL_FUNC]: 'stencilFuncFront',\n  [GL.STENCIL_REF]: 'stencilFuncFront',\n  [GL.STENCIL_VALUE_MASK]: 'stencilFuncFront',\n  [GL.STENCIL_BACK_FUNC]: 'stencilFuncBack',\n  [GL.STENCIL_BACK_REF]: 'stencilFuncBack',\n  [GL.STENCIL_BACK_VALUE_MASK]: 'stencilFuncBack',\n  [GL.STENCIL_FAIL]: 'stencilOpFront',\n  [GL.STENCIL_PASS_DEPTH_FAIL]: 'stencilOpFront',\n  [GL.STENCIL_PASS_DEPTH_PASS]: 'stencilOpFront',\n  [GL.STENCIL_BACK_FAIL]: 'stencilOpBack',\n  [GL.STENCIL_BACK_PASS_DEPTH_FAIL]: 'stencilOpBack',\n  [GL.STENCIL_BACK_PASS_DEPTH_PASS]: 'stencilOpBack',\n  [GL.VIEWPORT]: (gl, value) => gl.viewport(...value),\n\n  // WEBGL1 PIXEL PACK/UNPACK MODES\n  [GL.PACK_ALIGNMENT]: pixelStorei,\n  [GL.UNPACK_ALIGNMENT]: pixelStorei,\n  [GL.UNPACK_FLIP_Y_WEBGL]: pixelStorei,\n  [GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL]: pixelStorei,\n  [GL.UNPACK_COLORSPACE_CONVERSION_WEBGL]: pixelStorei,\n\n  // WEBGL2 PIXEL PACK/UNPACK MODES\n  // RASTERIZER_DISCARD ...\n  [GL.PACK_ROW_LENGTH]: pixelStorei,\n  [GL.PACK_SKIP_PIXELS]: pixelStorei,\n  [GL.PACK_SKIP_ROWS]: pixelStorei,\n  [GL.READ_FRAMEBUFFER_BINDING]: readFramebuffer,\n  [GL.UNPACK_ROW_LENGTH]: pixelStorei,\n  [GL.UNPACK_IMAGE_HEIGHT]: pixelStorei,\n  [GL.UNPACK_SKIP_PIXELS]: pixelStorei,\n  [GL.UNPACK_SKIP_ROWS]: pixelStorei,\n  [GL.UNPACK_SKIP_IMAGES]: pixelStorei\n};\n\n// COMPOSITE_WEBGL_PARAMETER_\nexport const GL_COMPOSITE_PARAMETER_SETTERS = {\n  blendEquation: (gl, values) =>\n    gl.blendEquationSeparate(values[GL.BLEND_EQUATION_RGB], values[GL.BLEND_EQUATION_ALPHA]),\n  blendFunc: (gl, values) =>\n    gl.blendFuncSeparate(\n      values[GL.BLEND_SRC_RGB],\n      values[GL.BLEND_DST_RGB],\n      values[GL.BLEND_SRC_ALPHA],\n      values[GL.BLEND_DST_ALPHA]\n    ),\n  polygonOffset: (gl, values) =>\n    gl.polygonOffset(values[GL.POLYGON_OFFSET_FACTOR], values[GL.POLYGON_OFFSET_UNITS]),\n  sampleCoverage: (gl, values) =>\n    gl.sampleCoverage(values[GL.SAMPLE_COVERAGE_VALUE], values[GL.SAMPLE_COVERAGE_INVERT]),\n  stencilFuncFront: (gl, values) =>\n    gl.stencilFuncSeparate(\n      GL.FRONT,\n      values[GL.STENCIL_FUNC],\n      values[GL.STENCIL_REF],\n      values[GL.STENCIL_VALUE_MASK]\n    ),\n  stencilFuncBack: (gl, values) =>\n    gl.stencilFuncSeparate(\n      GL.BACK,\n      values[GL.STENCIL_BACK_FUNC],\n      values[GL.STENCIL_BACK_REF],\n      values[GL.STENCIL_BACK_VALUE_MASK]\n    ),\n  stencilOpFront: (gl, values) =>\n    gl.stencilOpSeparate(\n      GL.FRONT,\n      values[GL.STENCIL_FAIL],\n      values[GL.STENCIL_PASS_DEPTH_FAIL],\n      values[GL.STENCIL_PASS_DEPTH_PASS]\n    ),\n  stencilOpBack: (gl, values) =>\n    gl.stencilOpSeparate(\n      GL.BACK,\n      values[GL.STENCIL_BACK_FAIL],\n      values[GL.STENCIL_BACK_PASS_DEPTH_FAIL],\n      values[GL.STENCIL_BACK_PASS_DEPTH_PASS]\n    )\n};\n\n// GETTER TABLE - FOR READING OUT AN ENTIRE CONTEXT\n\nconst isEnabled = (gl, key) => gl.isEnabled(key);\n\n// Exceptions for any keys that cannot be queried by gl.getParameters\nexport const GL_PARAMETER_GETTERS = {\n  [GL.BLEND]: isEnabled,\n  [GL.CULL_FACE]: isEnabled,\n  [GL.DEPTH_TEST]: isEnabled,\n  [GL.DITHER]: isEnabled,\n  [GL.POLYGON_OFFSET_FILL]: isEnabled,\n  [GL.SAMPLE_ALPHA_TO_COVERAGE]: isEnabled,\n  [GL.SAMPLE_COVERAGE]: isEnabled,\n  [GL.SCISSOR_TEST]: isEnabled,\n  [GL.STENCIL_TEST]: isEnabled,\n\n  // WebGL 2\n  [GL.RASTERIZER_DISCARD]: isEnabled\n};\n","export default function assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'webgl2-polyfill: assertion failed.');\n  }\n}\n","// This function is needed in initialization stages,\n// make sure it can be imported in isolation\n/* global process */\n\nimport isElectron from './is-electron';\n\nconst isNode =\n  typeof process === 'object' && String(process) === '[object process]' && !process.browser;\n\nconst isBrowser = !isNode || isElectron;\n\n// document does not exist on worker thread\nexport const isBrowserMainThread = isBrowser && typeof document !== 'undefined';\n\nexport default isBrowser;\n","import GL from '@luma.gl/constants';\nimport {isWebGL2} from '../webgl-utils';\n\n// const S3TC = 'WEBGL_compressed_texture_s3tc';\n// const PVRTC = 'WEBGL_compressed_texture_pvrtc';\n// const ES3 = 'WEBGL_compressed_texture_es3';\n// const ETC1 = 'WEBGL_compressed_texture_etc1';\n// const SRGB = 'EXT_sRGB';\n// const DEPTH = 'WEBGL_depth_texture';\n\n// Legal combinations for internalFormat, format and type\nexport const TEXTURE_FORMATS = {\n  // Unsized texture format - more performance\n  [GL.RGB]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5]},\n  // TODO: format: GL.RGBA type: GL.FLOAT is supported in WebGL1 when 'OES_texure_float' is suported\n  // we need to update this table structure to specify extensions (gl1: 'OES_texure_float', gl2: false) for each type.\n  [GL.RGBA]: {\n    dataFormat: GL.RGBA,\n    types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4, GL.UNSIGNED_SHORT_5_5_5_1]\n  },\n  [GL.ALPHA]: {dataFormat: GL.ALPHA, types: [GL.UNSIGNED_BYTE]},\n  [GL.LUMINANCE]: {dataFormat: GL.LUMINANCE, types: [GL.UNSIGNED_BYTE]},\n  [GL.LUMINANCE_ALPHA]: {dataFormat: GL.LUMINANCE_ALPHA, types: [GL.UNSIGNED_BYTE]},\n\n  // 32 bit floats\n  [GL.R32F]: {dataFormat: GL.RED, types: [GL.FLOAT], gl2: true},\n  [GL.RG32F]: {dataFormat: GL.RG, types: [GL.FLOAT], gl2: true},\n  [GL.RGB32F]: {dataFormat: GL.RGB, types: [GL.FLOAT], gl2: true},\n  [GL.RGBA32F]: {dataFormat: GL.RGBA, types: [GL.FLOAT], gl2: true}\n\n  // [GL.DEPTH_COMPONENT]: {types: [GL.UNSIGNED_SHORT, GL.UNSIGNED_INT, GL.UNSIGNED_INT_24_8], gl1: DEPTH},\n  // [GL.DEPTH_STENCIL]: {gl1: DEPTH},\n\n  // Sized texture format - more performance\n  // R\n  // [GL.R8]: {dataFormat: GL.RED, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // [GL.R16F]: {dataFormat: GL.RED, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.R8UI]: {dataFormat: GL.RED_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RG\n  // [GL.RG8]: {dataFormat: GL.RG, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // [GL.RG16F]: {dataFormat: GL.RG, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RG8UI]: {dataFormat: GL.RG_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RGB\n  // [GL.RGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.SRGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.RGB565]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5], gl2: true},\n  // [GL.R11F_G11F_B10F]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_INT_10F_11F_11F_REV, GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RGB9_E5]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_half_float'},\n  // [GL.RGB16F]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_float'},\n  // [GL.RGB8UI]: {dataFormat: GL.RGB_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RGBA\n  // [GL.RGBA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.SRGB8_ALPHA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.RGB5_A1]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_5_5_1], gl2: true},\n  // [GL.RGBA4]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4], gl2: true},\n  // [GL.RGBA16F]: {dataFormat: GL.RGBA, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RGBA8UI]: {dataFormat: GL.RGBA_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true}\n\n  // Compressed formats\n\n  // WEBGL_compressed_texture_s3tc\n\n  // [GL.COMPRESSED_RGB_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT3_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT5_EXT]: {compressed: true, gl1: S3TC},\n\n  // WEBGL_compressed_texture_es3\n\n  // [GL.COMPRESSED_R11_EAC]: {compressed: true, gl1: ES3}, // RED\n  // [GL.COMPRESSED_SIGNED_R11_EAC]: {compressed: true, gl1: ES3}, // RED\n  // [GL.COMPRESSED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG\n  // [GL.COMPRESSED_SIGNED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG\n  // [GL.COMPRESSED_RGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB\n  // [GL.COMPRESSED_RGBA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RBG\n  // [GL.COMPRESSED_SRGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB\n  // [GL.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RGBA\n  // [GL.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA\n  // [GL.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA\n  /* WebGL2 guaranteed availability compressed formats?\n  COMPRESSED_R11_EAC RED\n  COMPRESSED_SIGNED_R11_EAC RED\n  COMPRESSED_RG11_EAC RG\n  COMPRESSED_SIGNED_RG11_EAC RG\n  COMPRESSED_RGB8_ETC2 RGB\n  COMPRESSED_SRGB8_ETC2 RGB\n  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA\n  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA\n  COMPRESSED_RGBA8_ETC2_EAC RGBA\n  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\n  */\n\n  // WEBGL_compressed_texture_pvrtc\n\n  // [GL.COMPRESSED_RGB_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGB_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n\n  // WEBGL_compressed_texture_etc1\n\n  // [GL.COMPRESSED_RGB_ETC1_WEBGL]: {compressed: true, gl1: ETC1},\n\n  // WEBGL_compressed_texture_atc\n\n  // [GL.COMPRESSED_RGB_ATC_WEBGL]: {compressed: true, gl1: ETC1},\n  // [GL.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL]: {compressed: true, gl1: ETC1},\n  // [GL.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL]: {compressed: true, gl1: ETC1}\n};\n\nexport const DATA_FORMAT_CHANNELS = {\n  [GL.RED]: 1,\n  [GL.RED_INTEGER]: 1,\n  [GL.RG]: 2,\n  [GL.RG_INTEGER]: 2,\n  [GL.RGB]: 3,\n  [GL.RGB_INTEGER]: 3,\n  [GL.RGBA]: 4,\n  [GL.RGBA_INTEGER]: 4,\n  [GL.DEPTH_COMPONENT]: 1,\n  [GL.DEPTH_STENCIL]: 1,\n  [GL.ALPHA]: 1,\n  [GL.LUMINANCE]: 1,\n  [GL.LUMINANCE_ALPHA]: 2\n};\n\nexport const TYPE_SIZES = {\n  [GL.FLOAT]: 4,\n  [GL.UNSIGNED_INT]: 4,\n  [GL.INT]: 4,\n  [GL.UNSIGNED_SHORT]: 2,\n  [GL.SHORT]: 2,\n  [GL.HALF_FLOAT]: 2,\n  [GL.BYTE]: 1,\n  [GL.UNSIGNED_BYTE]: 1\n};\n\nexport function isFormatSupported(gl, format) {\n  const info = TEXTURE_FORMATS[format];\n  if (!info) {\n    return false;\n  }\n  if (info.gl1 === undefined && info.gl2 === undefined) {\n    // No info - always supported\n    return true;\n  }\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n  return typeof value === 'string' ? gl.getExtension(value) : value;\n}\n\nexport function isLinearFilteringSupported(gl, format) {\n  const info = TEXTURE_FORMATS[format];\n  switch (info && info.types[0]) {\n    // Both WebGL1 and WebGL2?\n    case GL.FLOAT:\n      return gl.getExtension('OES_texture_float_linear');\n    // Not in WebGL2?\n    case GL.HALF_FLOAT:\n      return gl.getExtension('OES_texture_half_float_linear');\n    default:\n      return true;\n  }\n}\n","import GL from '@luma.gl/constants';\nimport Texture from './texture';\nimport {assertWebGLContext} from '../webgl-utils';\nimport {loadImage} from '../utils/load-file';\n\nexport default class Texture2D extends Texture {\n  static isSupported(gl, opts) {\n    return Texture.isSupported(gl, opts);\n  }\n\n  constructor(gl, props = {}) {\n    assertWebGLContext(gl);\n\n    // Signature: new Texture2D(gl, url | Promise)\n    if (props instanceof Promise || typeof props === 'string') {\n      props = {data: props};\n    }\n\n    // Signature: new Texture2D(gl, {data: url})\n    if (typeof props.data === 'string') {\n      props = Object.assign({}, props, {data: loadImage(props.data)});\n    }\n\n    super(gl, Object.assign({}, props, {target: GL.TEXTURE_2D}));\n\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n}\n","import GL from '@luma.gl/constants';\n\n// Define local extension strings to optimize minification\n// const SRGB = 'EXT_sRGB';\n// const EXT_FLOAT_WEBGL1 = 'WEBGL.color_buffer_float';\nconst EXT_FLOAT_WEBGL2 = 'EXT_color_buffer_float';\n// const EXT_HALF_FLOAT_WEBGL1 = 'EXT_color_buffer_half_float';\n\n// NOTE(Tarek): bpp === \"bytes per pixel\", used for\n// memory usage calculations.\nexport default {\n  [GL.DEPTH_COMPONENT16]: {bpp: 2}, // 16 depth bits.\n  [GL.DEPTH_COMPONENT24]: {gl2: true, bpp: 3},\n  [GL.DEPTH_COMPONENT32F]: {gl2: true, bpp: 4},\n\n  [GL.STENCIL_INDEX8]: {bpp: 1}, // 8 stencil bits.\n\n  [GL.DEPTH_STENCIL]: {bpp: 4},\n  [GL.DEPTH24_STENCIL8]: {gl2: true, bpp: 4},\n  [GL.DEPTH32F_STENCIL8]: {gl2: true, bpp: 5},\n\n  // When using a WebGL 1 context, color renderbuffer formats are limited\n  [GL.RGBA4]: {bpp: 2},\n  [GL.RGB565]: {bpp: 2},\n  [GL.RGB5_A1]: {bpp: 2},\n\n  // When using a WebGL 2 context, the following values are available additionally:\n  [GL.R8]: {gl2: true, bpp: 1},\n  [GL.R8UI]: {gl2: true, bpp: 1},\n  [GL.R8I]: {gl2: true, bpp: 1},\n  [GL.R16UI]: {gl2: true, bpp: 2},\n  [GL.R16I]: {gl2: true, bpp: 2},\n  [GL.R32UI]: {gl2: true, bpp: 4},\n  [GL.R32I]: {gl2: true, bpp: 4},\n  [GL.RG8]: {gl2: true, bpp: 2},\n  [GL.RG8UI]: {gl2: true, bpp: 2},\n  [GL.RG8I]: {gl2: true, bpp: 2},\n  [GL.RG16UI]: {gl2: true, bpp: 4},\n  [GL.RG16I]: {gl2: true, bpp: 4},\n  [GL.RG32UI]: {gl2: true, bpp: 8},\n  [GL.RG32I]: {gl2: true, bpp: 8},\n  [GL.RGB8]: {gl2: true, bpp: 3},\n  [GL.RGBA8]: {gl2: true, bpp: 4},\n  // [GL.SRGB8_ALPHA8]: {gl2: true, gl1: SRGB}, // When using the EXT_sRGB WebGL1 extension\n  [GL.RGB10_A2]: {gl2: true, bpp: 4},\n  [GL.RGBA8UI]: {gl2: true, bpp: 4},\n  [GL.RGBA8I]: {gl2: true, bpp: 4},\n  [GL.RGB10_A2UI]: {gl2: true, bpp: 4},\n  [GL.RGBA16UI]: {gl2: true, bpp: 8},\n  [GL.RGBA16I]: {gl2: true, bpp: 8},\n  [GL.RGBA32I]: {gl2: true, bpp: 16},\n  [GL.RGBA32UI]: {gl2: true, bpp: 16},\n\n  // When using a WebGL 2 context and the EXT_color_buffer_float WebGL2 extension\n  [GL.R16F]: {gl2: EXT_FLOAT_WEBGL2, bpp: 2},\n  [GL.RG16F]: {gl2: EXT_FLOAT_WEBGL2, bpp: 4},\n  [GL.RGBA16F]: {gl2: EXT_FLOAT_WEBGL2, bpp: 8},\n  [GL.R32F]: {gl2: EXT_FLOAT_WEBGL2, bpp: 4},\n  [GL.RG32F]: {gl2: EXT_FLOAT_WEBGL2, bpp: 8},\n  // TODO - can't get WEBGL.color_buffer_float to work on renderbuffers\n  [GL.RGBA32F]: {gl2: EXT_FLOAT_WEBGL2, bpp: 16},\n  // [GL.RGBA32F]: {gl2: EXT_FLOAT_WEBGL2, gl1: EXT_FLOAT_WEBGL1},\n  [GL.R11F_G11F_B10F]: {gl2: EXT_FLOAT_WEBGL2, bpp: 4}\n};\n","/* eslint-disable no-inline-comments */\nimport GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport RENDERBUFFER_FORMATS from './renderbuffer-formats';\nimport {isWebGL2} from '../webgl-utils';\nimport {assert} from '../utils';\n\nfunction isFormatSupported(gl, format, formats) {\n  const info = formats[format];\n  if (!info) {\n    return false;\n  }\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n  if (typeof value === 'string') {\n    return gl.getExtension(value);\n  }\n  return value;\n}\n\nexport default class Renderbuffer extends Resource {\n  static isSupported(gl, {format} = {}) {\n    return !format || isFormatSupported(gl, format, RENDERBUFFER_FORMATS);\n  }\n\n  static getSamplesForFormat(gl, {format}) {\n    // Polyfilled to return [0] under WebGL1\n    return gl.getInternalformatParameter(GL.RENDERBUFFER, format, GL.SAMPLES);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  // Creates and initializes a renderbuffer object's data store\n  initialize({format, width = 1, height = 1, samples = 0}) {\n    assert(format, 'Needs format');\n\n    this._trackDeallocatedMemory();\n\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, this.handle);\n\n    if (samples !== 0 && isWebGL2(this.gl)) {\n      this.gl.renderbufferStorageMultisample(GL.RENDERBUFFER, samples, format, width, height);\n    } else {\n      this.gl.renderbufferStorage(GL.RENDERBUFFER, format, width, height);\n    }\n\n    // this.gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.format = format;\n    this.width = width;\n    this.height = height;\n    this.samples = samples;\n\n    this._trackAllocatedMemory(\n      this.width * this.height * (this.samples || 1) * RENDERBUFFER_FORMATS[this.format].bpp\n    );\n\n    return this;\n  }\n\n  resize({width, height}) {\n    // Don't resize if width/height haven't changed\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({width, height, format: this.format, samples: this.samples});\n    }\n    return this;\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createRenderbuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteRenderbuffer(this.handle);\n    this._trackDeallocatedMemory();\n  }\n\n  _bindHandle(handle) {\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, handle);\n  }\n\n  _syncHandle(handle) {\n    this.format = this.getParameter(GL.RENDERBUFFER_INTERNAL_FORMAT);\n    this.width = this.getParameter(GL.RENDERBUFFER_WIDTH);\n    this.height = this.getParameter(GL.RENDERBUFFER_HEIGHT);\n    this.samples = this.getParameter(GL.RENDERBUFFER_SAMPLES);\n  }\n\n  // @param {Boolean} opt.autobind=true - method call will bind/unbind object\n  // @returns {GLenum|GLint} - depends on pname\n  _getParameter(pname) {\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, this.handle);\n    const value = this.gl.getRenderbufferParameter(GL.RENDERBUFFER, pname);\n    // this.gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n    return value;\n  }\n}\n","import React, {PureComponent} from 'react';\n\nexport default class InfoPanel extends PureComponent {\n  render() {\n    const { name, controls, sourceLink} = this.props;\n\n    return (\n      <div className=\"options-panel top-right\" tabIndex=\"0\">\n        <h3>{name}</h3>\n        <div className=\"control-panel\" dangerouslySetInnerHTML={{__html: controls}} />\n\n        {sourceLink && (\n          <div className=\"source-link\">\n            <a href={sourceLink} target=\"_new\">\n              {'View Code ↗'}\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","// Support for listening to context state changes and intercepting state queries\n//\n// NOTE: this system does not handle buffer bindings\nimport GL_STATE_SETTERS from './webgl-function-to-parameters-table';\nimport {GL_PARAMETER_DEFAULTS} from '../unified-parameter-api/webgl-parameter-tables';\nimport {setParameters, getParameters} from '../unified-parameter-api/unified-parameter-api';\nimport {assert, deepArrayEqual} from '../utils';\n\n// HELPER FUNCTIONS - INSTALL GET/SET INTERCEPTORS (SPYS) ON THE CONTEXT\n\n// Overrides a WebGLRenderingContext state \"getter\" function\n// to return values directly from cache\nfunction installGetterOverride(gl, functionName) {\n  // Get the original function from the WebGLRenderingContext\n  const originalGetterFunc = gl[functionName].bind(gl);\n\n  // Wrap it with a spy so that we can update our state cache when it gets called\n  gl[functionName] = function get(...params) {\n    const pname = params[0];\n\n    // WebGL limits are not prepopulated in the cache, we must\n    // query first time. They are all primitive (single value)\n    if (!(pname in gl.state.cache)) {\n      gl.state.cache[pname] = originalGetterFunc(...params);\n    }\n\n    // Optionally call the original function to do a \"hard\" query from the WebGLRenderingContext\n    return gl.state.enable\n      ? // Call the getter the params so that it can e.g. serve from a cache\n        gl.state.cache[pname]\n      : // Optionally call the original function to do a \"hard\" query from the WebGLRenderingContext\n        originalGetterFunc(...params);\n  };\n\n  // Set the name of this anonymous function to help in debugging and profiling\n  Object.defineProperty(gl[functionName], 'name', {\n    value: `${functionName}-from-cache`,\n    configurable: false\n  });\n}\n\n// Overrides a WebGLRenderingContext state \"setter\" function\n// to call a setter spy before the actual setter. Allows us to keep a cache\n// updated with a copy of the WebGL context state.\nfunction installSetterSpy(gl, functionName, setter) {\n  // Get the original function from the WebGLRenderingContext\n  const originalSetterFunc = gl[functionName].bind(gl);\n\n  // Wrap it with a spy so that we can update our state cache when it gets called\n  gl[functionName] = function set(...params) {\n    // Update the value\n    // Call the setter with the state cache and the params so that it can store the parameters\n    const {valueChanged, oldValue} = setter(gl.state._updateCache, ...params);\n\n    // Call the original WebGLRenderingContext func to make sure the context actually gets updated\n    if (valueChanged) {\n      gl.state.log(`gl.${functionName}`, ...params); // eslint-disable-line\n      originalSetterFunc(...params);\n    }\n\n    // Note: if the original function fails to set the value, our state cache will be bad\n    // No solution for this at the moment, but assuming that this is unlikely to be a real problem\n    // We could call the setter after the originalSetterFunc. Concern is that this would\n    // cause different behavior in debug mode, where originalSetterFunc can throw exceptions\n\n    return oldValue;\n  };\n\n  // Set the name of this anonymous function to help in debugging and profiling\n  Object.defineProperty(gl[functionName], 'name', {\n    value: `${functionName}-to-cache`,\n    configurable: false\n  });\n}\n\n// HELPER CLASS - GLState\n\n/* eslint-disable no-shadow */\nclass GLState {\n  constructor(\n    gl,\n    {\n      copyState = false, // Copy cache from params (slow) or initialize from WebGL defaults (fast)\n      log = () => {} // Logging function, called when gl parameter change calls are actually issued\n    } = {}\n  ) {\n    this.gl = gl;\n    this.stateStack = [];\n    this.enable = true;\n    this.cache = copyState ? getParameters(gl) : Object.assign({}, GL_PARAMETER_DEFAULTS);\n    this.log = log;\n\n    this._updateCache = this._updateCache.bind(this);\n    Object.seal(this);\n  }\n\n  push(values = {}) {\n    this.stateStack.push({});\n  }\n\n  pop() {\n    assert(this.stateStack.length > 0);\n    // Use the saved values in the state stack to restore parameters\n    const oldValues = this.stateStack[this.stateStack.length - 1];\n    setParameters(this.gl, oldValues, this.cache);\n    // Don't pop until we have reset parameters (to make sure other \"stack frames\" are not affected)\n    this.stateStack.pop();\n  }\n\n  // interceptor for context set functions - update our cache and our stack\n  // values (Object) - the key values for this setter\n  _updateCache(values) {\n    let valueChanged = false;\n    let oldValue; // = undefined\n\n    const oldValues = this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1];\n\n    for (const key in values) {\n      assert(key !== undefined);\n      // Check that value hasn't already been shadowed\n      if (!deepArrayEqual(values[key], this.cache[key])) {\n        valueChanged = true;\n        oldValue = this.cache[key];\n\n        // First, save current value being shadowed\n        // If a state stack frame is active, save the current parameter values for pop\n        // but first check that value hasn't already been shadowed and saved\n        if (oldValues && !(key in oldValues)) {\n          oldValues[key] = this.cache[key];\n        }\n\n        // Save current value being shadowed\n        this.cache[key] = values[key];\n      }\n    }\n\n    return {valueChanged, oldValue};\n  }\n}\n\n// PUBLIC API\n\n/**\n * Initialize WebGL state caching on a context\n * can be called multiple times to enable/disable\n * @param {WebGLRenderingContext} - context\n */\n// After calling this function, context state will be cached\n// gl.state.push() and gl.state.pop() will be available for saving,\n// temporarily modifying, and then restoring state.\nexport default function trackContextState(gl, {enable = true, copyState} = {}) {\n  assert(copyState !== undefined);\n  if (!gl.state) {\n    /* global window, global */\n    const global_ = typeof global !== 'undefined' ? global : window;\n    if (global_.polyfillContext) {\n      global_.polyfillContext(gl);\n    }\n\n    // Create a state cache\n    gl.state = new GLState(gl, {copyState, enable});\n\n    // intercept all setter functions in the table\n    for (const key in GL_STATE_SETTERS) {\n      const setter = GL_STATE_SETTERS[key];\n      installSetterSpy(gl, key, setter);\n    }\n\n    // intercept all getter functions in the table\n    installGetterOverride(gl, 'getParameter');\n    installGetterOverride(gl, 'isEnabled');\n  }\n\n  gl.state.enable = enable;\n\n  return gl;\n}\n\nexport function pushContextState(gl) {\n  if (!gl.state) {\n    trackContextState(gl, {copyState: false});\n  }\n  gl.state.push();\n}\n\nexport function popContextState(gl) {\n  assert(gl.state);\n  gl.state.pop();\n}\n","export default function deepArrayEqual(x, y) {\n  if (x === y) {\n    return true;\n  }\n  const isArrayX = Array.isArray(x) || ArrayBuffer.isView(x);\n  const isArrayY = Array.isArray(y) || ArrayBuffer.isView(y);\n  if (isArrayX && isArrayY && x.length === y.length) {\n    for (let i = 0; i < x.length; ++i) {\n      if (x[i] !== y[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n","// Replacements for WebGL state setting functions that call supplied 'update'\n// function setting the individual parameters.\n// i.e. these \"setters\" map functions to gl parameters\n\n// The 'update' function is used to interceptor WEBGL functions that set\n// WebGLRenderingContext state so that state changes can be tracked.\n\n// It also enables checking values against cache and avoid unnecessary WebGL\n// set/get operations.\n\nimport GL from '@luma.gl/constants';\n\nexport default {\n  // GENERIC SETTERS\n\n  enable: (update, capability) =>\n    update({\n      [capability]: true\n    }),\n  disable: (update, capability) =>\n    update({\n      [capability]: false\n    }),\n  pixelStorei: (update, pname, value) =>\n    update({\n      [pname]: value\n    }),\n  hint: (update, pname, hint) =>\n    update({\n      [pname]: hint\n    }),\n\n  // SPECIFIC SETTERS\n\n  bindFramebuffer: (update, target, framebuffer) => {\n    switch (target) {\n      case GL.FRAMEBUFFER:\n        return update({\n          [GL.DRAW_FRAMEBUFFER_BINDING]: framebuffer,\n          [GL.READ_FRAMEBUFFER_BINDING]: framebuffer\n        });\n      case GL.DRAW_FRAMEBUFFER:\n        return update({[GL.DRAW_FRAMEBUFFER_BINDING]: framebuffer});\n      case GL.READ_FRAMEBUFFER:\n        return update({[GL.READ_FRAMEBUFFER_BINDING]: framebuffer});\n      default:\n        return null;\n    }\n  },\n  blendColor: (update, r, g, b, a) =>\n    update({\n      [GL.BLEND_COLOR]: new Float32Array([r, g, b, a])\n    }),\n\n  blendEquation: (update, mode) =>\n    update({\n      [GL.BLEND_EQUATION_RGB]: mode,\n      [GL.BLEND_EQUATION_ALPHA]: mode\n    }),\n\n  blendEquationSeparate: (update, modeRGB, modeAlpha) =>\n    update({\n      [GL.BLEND_EQUATION_RGB]: modeRGB,\n      [GL.BLEND_EQUATION_ALPHA]: modeAlpha\n    }),\n\n  blendFunc: (update, src, dst) =>\n    update({\n      [GL.BLEND_SRC_RGB]: src,\n      [GL.BLEND_DST_RGB]: dst,\n      [GL.BLEND_SRC_ALPHA]: src,\n      [GL.BLEND_DST_ALPHA]: dst\n    }),\n\n  blendFuncSeparate: (update, srcRGB, dstRGB, srcAlpha, dstAlpha) =>\n    update({\n      [GL.BLEND_SRC_RGB]: srcRGB,\n      [GL.BLEND_DST_RGB]: dstRGB,\n      [GL.BLEND_SRC_ALPHA]: srcAlpha,\n      [GL.BLEND_DST_ALPHA]: dstAlpha\n    }),\n\n  clearColor: (update, r, g, b, a) =>\n    update({\n      [GL.COLOR_CLEAR_VALUE]: new Float32Array([r, g, b, a])\n    }),\n\n  clearDepth: (update, depth) =>\n    update({\n      [GL.DEPTH_CLEAR_VALUE]: depth\n    }),\n\n  clearStencil: (update, s) =>\n    update({\n      [GL.STENCIL_CLEAR_VALUE]: s\n    }),\n\n  colorMask: (update, r, g, b, a) =>\n    update({\n      [GL.COLOR_WRITEMASK]: [r, g, b, a]\n    }),\n\n  cullFace: (update, mode) =>\n    update({\n      [GL.CULL_FACE_MODE]: mode\n    }),\n\n  depthFunc: (update, func) =>\n    update({\n      [GL.DEPTH_FUNC]: func\n    }),\n\n  depthRange: (update, zNear, zFar) =>\n    update({\n      [GL.DEPTH_RANGE]: new Float32Array([zNear, zFar])\n    }),\n\n  depthMask: (update, mask) =>\n    update({\n      [GL.DEPTH_WRITEMASK]: mask\n    }),\n\n  frontFace: (update, face) =>\n    update({\n      [GL.FRONT_FACE]: face\n    }),\n\n  lineWidth: (update, width) =>\n    update({\n      [GL.LINE_WIDTH]: width\n    }),\n\n  polygonOffset: (update, factor, units) =>\n    update({\n      [GL.POLYGON_OFFSET_FACTOR]: factor,\n      [GL.POLYGON_OFFSET_UNITS]: units\n    }),\n\n  sampleCoverage: (update, value, invert) =>\n    update({\n      [GL.SAMPLE_COVERAGE_VALUE]: value,\n      [GL.SAMPLE_COVERAGE_INVERT]: invert\n    }),\n\n  scissor: (update, x, y, width, height) =>\n    update({\n      [GL.SCISSOR_BOX]: new Int32Array([x, y, width, height])\n    }),\n\n  stencilMask: (update, mask) =>\n    update({\n      [GL.STENCIL_WRITEMASK]: mask,\n      [GL.STENCIL_BACK_WRITEMASK]: mask\n    }),\n\n  stencilMaskSeparate: (update, face, mask) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_WRITEMASK : GL.STENCIL_BACK_WRITEMASK]: mask\n    }),\n\n  stencilFunc: (update, func, ref, mask) =>\n    update({\n      [GL.STENCIL_FUNC]: func,\n      [GL.STENCIL_REF]: ref,\n      [GL.STENCIL_VALUE_MASK]: mask,\n      [GL.STENCIL_BACK_FUNC]: func,\n      [GL.STENCIL_BACK_REF]: ref,\n      [GL.STENCIL_BACK_VALUE_MASK]: mask\n    }),\n\n  stencilFuncSeparate: (update, face, func, ref, mask) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_FUNC : GL.STENCIL_BACK_FUNC]: func,\n      [face === GL.FRONT ? GL.STENCIL_REF : GL.STENCIL_BACK_REF]: ref,\n      [face === GL.FRONT ? GL.STENCIL_VALUE_MASK : GL.STENCIL_BACK_VALUE_MASK]: mask\n    }),\n\n  stencilOp: (update, fail, zfail, zpass) =>\n    update({\n      [GL.STENCIL_FAIL]: fail,\n      [GL.STENCIL_PASS_DEPTH_FAIL]: zfail,\n      [GL.STENCIL_PASS_DEPTH_PASS]: zpass,\n      [GL.STENCIL_BACK_FAIL]: fail,\n      [GL.STENCIL_BACK_PASS_DEPTH_FAIL]: zfail,\n      [GL.STENCIL_BACK_PASS_DEPTH_PASS]: zpass\n    }),\n\n  stencilOpSeparate: (update, face, fail, zfail, zpass) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_FAIL : GL.STENCIL_BACK_FAIL]: fail,\n      [face === GL.FRONT ? GL.STENCIL_PASS_DEPTH_FAIL : GL.STENCIL_BACK_PASS_DEPTH_FAIL]: zfail,\n      [face === GL.FRONT ? GL.STENCIL_PASS_DEPTH_PASS : GL.STENCIL_BACK_PASS_DEPTH_PASS]: zpass\n    }),\n\n  viewport: (update, x, y, width, height) =>\n    update({\n      [GL.VIEWPORT]: new Int32Array([x, y, width, height])\n    })\n};\n","/* global fetch, Image */\nimport {assert} from '../utils';\n\nlet pathPrefix = '';\n\n/*\n * Set a relative path prefix\n */\nexport function setPathPrefix(prefix) {\n  pathPrefix = prefix;\n}\n\n// Reads raw file data from:\nexport function loadFile(url, options = {}) {\n  assert(typeof url === 'string');\n  url = pathPrefix + url;\n  const dataType = options.dataType || 'text';\n  return fetch(url, options).then(res => res[dataType]());\n}\n\n/*\n * Loads images asynchronously\n * image.crossOrigin can be set via opts.crossOrigin, default to 'anonymous'\n * returns a promise tracking the load\n */\nexport function loadImage(url, opts) {\n  assert(typeof url === 'string');\n  url = pathPrefix + url;\n  return new Promise((resolve, reject) => {\n    try {\n      const image = new Image();\n      image.onload = () => resolve(image);\n      image.onerror = () => reject(new Error(`Could not load image ${url}.`));\n      image.crossOrigin = (opts && opts.crossOrigin) || 'anonymous';\n      image.src = url;\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n","// Recommendation is to ignore message but current test suite checks agains the\n// message so keep it for now.\nexport default function assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'luma.gl: assertion failed.');\n  }\n}\n","// based on https://github.com/cheton/is-electron\n// https://github.com/electron/electron/issues/2288\n/* global window, process, navigator */\nfunction isElectron() {\n  // Renderer process\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.process === 'object' &&\n    window.process.type === 'renderer'\n  ) {\n    return true;\n  }\n  // Main process\n  if (\n    typeof process !== 'undefined' &&\n    typeof process.versions === 'object' &&\n    Boolean(process.versions.electron)\n  ) {\n    return true;\n  }\n  // Detect the user agent when the `nodeIntegration` option is set to true\n  if (\n    typeof navigator === 'object' &&\n    typeof navigator.userAgent === 'string' &&\n    navigator.userAgent.indexOf('Electron') >= 0\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport default isElectron();\n","import GL from '@luma.gl/constants';\n\nconst ERR_TYPE_DEDUCTION = 'Failed to deduce GL constant from typed array';\n\n// Converts TYPED ARRAYS to corresponding GL constant\n// Used to auto deduce gl parameter types\nexport function getGLTypeFromTypedArray(arrayOrType) {\n  // If typed array, look up constructor\n  const type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n  switch (type) {\n    case Float32Array:\n      return GL.FLOAT;\n    case Uint16Array:\n      return GL.UNSIGNED_SHORT;\n    case Uint32Array:\n      return GL.UNSIGNED_INT;\n    case Uint8Array:\n      return GL.UNSIGNED_BYTE;\n    case Uint8ClampedArray:\n      return GL.UNSIGNED_BYTE;\n    case Int8Array:\n      return GL.BYTE;\n    case Int16Array:\n      return GL.SHORT;\n    case Int32Array:\n      return GL.INT;\n    default:\n      throw new Error(ERR_TYPE_DEDUCTION);\n  }\n}\n\n// Converts GL constant to corresponding TYPED ARRAY\n// Used to auto deduce gl parameter types\n\n/* eslint-disable complexity */\nexport function getTypedArrayFromGLType(glType, {clamped = true} = {}) {\n  // Sorted in some order of likelihood to reduce amount of comparisons\n  switch (glType) {\n    case GL.FLOAT:\n      return Float32Array;\n    case GL.UNSIGNED_SHORT:\n    case GL.UNSIGNED_SHORT_5_6_5:\n    case GL.UNSIGNED_SHORT_4_4_4_4:\n    case GL.UNSIGNED_SHORT_5_5_5_1:\n      return Uint16Array;\n    case GL.UNSIGNED_INT:\n      return Uint32Array;\n    case GL.UNSIGNED_BYTE:\n      return clamped ? Uint8ClampedArray : Uint8Array;\n    case GL.BYTE:\n      return Int8Array;\n    case GL.SHORT:\n      return Int16Array;\n    case GL.INT:\n      return Int32Array;\n    default:\n      throw new Error('Failed to deduce typed array type from GL constant');\n  }\n}\n/* eslint-enable complexity */\n\n// Flip rows (can be used on arrays returned from `Framebuffer.readPixels`)\n// https://stackoverflow.com/questions/41969562/\n// how-can-i-flip-the-result-of-webglrenderingcontext-readpixels\nexport function flipRows({data, width, height, bytesPerPixel = 4, temp}) {\n  const bytesPerRow = width * bytesPerPixel;\n\n  // make a temp buffer to hold one row\n  temp = temp || new Uint8Array(bytesPerRow);\n  for (let y = 0; y < height / 2; ++y) {\n    const topOffset = y * bytesPerRow;\n    const bottomOffset = (height - y - 1) * bytesPerRow;\n    // make copy of a row on the top half\n    temp.set(data.subarray(topOffset, topOffset + bytesPerRow));\n    // copy a row from the bottom half to the top\n    data.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);\n    // copy the copy of the top half row to the bottom half\n    data.set(temp, bottomOffset);\n  }\n}\n\nexport function scalePixels({data, width, height}) {\n  const newWidth = Math.round(width / 2);\n  const newHeight = Math.round(height / 2);\n  const newData = new Uint8Array(newWidth * newHeight * 4);\n  for (let y = 0; y < newHeight; y++) {\n    for (let x = 0; x < newWidth; x++) {\n      for (let c = 0; c < 4; c++) {\n        newData[(y * newWidth + x) * 4 + c] = data[(y * 2 * width + x * 2) * 4 + c];\n      }\n    }\n  }\n  return {data: newData, width: newWidth, height: newHeight};\n}\n","import {isWebGL2} from '../webgl-utils';\n\n// TODO - this should be the default export, test cases need updating\nexport const FEATURES = {\n  WEBGL2: 'WEBGL2',\n\n  // API SUPPORT\n  VERTEX_ARRAY_OBJECT: 'VERTEX_ARRAY_OBJECT',\n  TIMER_QUERY: 'TIMER_QUERY',\n  INSTANCED_RENDERING: 'INSTANCED_RENDERING',\n  MULTIPLE_RENDER_TARGETS: 'MULTIPLE_RENDER_TARGETS',\n\n  // FEATURES\n  ELEMENT_INDEX_UINT32: 'ELEMENT_INDEX_UINT32',\n  BLEND_EQUATION_MINMAX: 'BLEND_EQUATION_MINMAX',\n\n  // TEXTURES: '// TEXTURES', RENDERBUFFERS\n  COLOR_ENCODING_SRGB: 'COLOR_ENCODING_SRGB',\n\n  // TEXTURES\n  TEXTURE_DEPTH: 'TEXTURE_DEPTH',\n  TEXTURE_FLOAT: 'TEXTURE_FLOAT',\n  TEXTURE_HALF_FLOAT: 'TEXTURE_HALF_FLOAT',\n\n  TEXTURE_FILTER_LINEAR_FLOAT: 'TEXTURE_FILTER_LINEAR_FLOAT',\n  TEXTURE_FILTER_LINEAR_HALF_FLOAT: 'TEXTURE_FILTER_LINEAR_HALF_FLOAT',\n  TEXTURE_FILTER_ANISOTROPIC: 'TEXTURE_FILTER_ANISOTROPIC',\n\n  // FRAMEBUFFERS: '// FRAMEBUFFERS', TEXTURES AND RENDERBUFFERS\n  COLOR_ATTACHMENT_RGBA32F: 'COLOR_ATTACHMENT_RGBA32F',\n  COLOR_ATTACHMENT_FLOAT: 'COLOR_ATTACHMENT_FLOAT',\n  COLOR_ATTACHMENT_HALF_FLOAT: 'COLOR_ATTACHMENT_HALF_FLOAT',\n\n  // GLSL extensions\n  GLSL_FRAG_DATA: 'GLSL_FRAG_DATA',\n  GLSL_FRAG_DEPTH: 'GLSL_FRAG_DEPTH',\n  GLSL_DERIVATIVES: 'GLSL_DERIVATIVES',\n  GLSL_TEXTURE_LOD: 'GLSL_TEXTURE_LOD'\n};\n\n// Defines luma.gl \"feature\" names and semantics\nexport default {\n  [FEATURES.WEBGL2]: [gl => isWebGL2(gl)],\n\n  // API SUPPORT\n  [FEATURES.VERTEX_ARRAY_OBJECT]: ['OES_vertex_array_object', true],\n  [FEATURES.TIMER_QUERY]: ['EXT_disjoint_timer_query', 'EXT_disjoint_timer_query_webgl2'],\n  [FEATURES.INSTANCED_RENDERING]: ['ANGLE_instanced_arrays', true],\n  [FEATURES.MULTIPLE_RENDER_TARGETS]: ['WEBGL_draw_buffers', true],\n\n  // FEATURES\n  [FEATURES.ELEMENT_INDEX_UINT32]: ['OES_element_index_uint', true],\n  [FEATURES.BLEND_EQUATION_MINMAX]: ['EXT_blend_minmax', true],\n\n  // TEXTURES, RENDERBUFFERS\n  [FEATURES.COLOR_ENCODING_SRGB]: ['EXT_sRGB', true],\n\n  // TEXTURES\n  [FEATURES.TEXTURE_DEPTH]: ['WEBGL_depth_texture', true],\n  [FEATURES.TEXTURE_FLOAT]: ['OES_texture_float', true],\n  [FEATURES.TEXTURE_HALF_FLOAT]: ['OES_texture_half_float', true],\n\n  [FEATURES.TEXTURE_FILTER_LINEAR_FLOAT]: ['OES_texture_float_linear'],\n  [FEATURES.TEXTURE_FILTER_LINEAR_HALF_FLOAT]: ['OES_texture_half_float_linear'],\n  [FEATURES.TEXTURE_FILTER_ANISOTROPIC]: ['EXT_texture_filter_anisotropic'],\n\n  // FRAMEBUFFERS, TEXTURES AND RENDERBUFFERS\n  [FEATURES.COLOR_ATTACHMENT_RGBA32F]: ['WEBGL_color_buffer_float', 'EXT_color_buffer_float'],\n  [FEATURES.COLOR_ATTACHMENT_FLOAT]: [false, 'EXT_color_buffer_float'],\n  [FEATURES.COLOR_ATTACHMENT_HALF_FLOAT]: [false, 'EXT_color_buffer_half_float'],\n\n  // GLSL extensions\n  [FEATURES.GLSL_FRAG_DATA]: ['WEBGL_draw_buffers', true],\n  [FEATURES.GLSL_FRAG_DEPTH]: ['EXT_frag_depth', true],\n  [FEATURES.GLSL_DERIVATIVES]: ['OES_standard_derivatives', true],\n  [FEATURES.GLSL_TEXTURE_LOD]: ['EXT_shader_texture_lod', true]\n};\n","// WEBGL BUILT-IN TYPES\n// 1) Exports all WebGL constants as {GL}\n// 2) Enables app to \"import\" WebGL types\n//    - Importing these types makes them known to eslint etc.\n//    - Provides dummy types for WebGL2 when not available to streamline\n//      library code.\n//    - Exports types from headless gl when running under Node.js\n\n/* eslint-disable quotes, no-console */\nimport {global} from '../utils/globals';\nimport isBrowser from '../utils/is-browser';\n\nexport const ERR_HEADLESSGL_LOAD = `\\\nluma.gl: loaded under Node.js without headless gl installed, meaning that WebGL \\\ncontexts can not be created. This may not be an error. For example, this is a \\\ntypical configuration for isorender applications running on the server.`;\n\n// TODO(Tarek): OOGLY HACK to avoid webpack requiring headless\n//   browser bundles. Will be removed in 8.0 when we\n//   remove automatic headless context creation\nconst m = module;\n\n// Load headless gl dynamically, if available\nexport let headlessTypes = null;\nexport function headlessGL(...args) {\n  const headless = m.require('gl');\n  if (!headless) {\n    throw new Error(ERR_HEADLESSGL_LOAD);\n  }\n  return headless(...args);\n}\n\nif (!isBrowser) {\n  try {\n    headlessTypes = m.require('gl/wrap');\n  } catch (error) {\n    // /* global console */\n    // console.info(ERR_HEADLESSGL_LOAD);\n  }\n}\n\nclass DummyType {}\n\nconst {\n  WebGLRenderingContext = DummyType,\n  WebGLProgram = DummyType,\n  WebGLShader = DummyType,\n  WebGLBuffer = DummyType,\n  WebGLFramebuffer = DummyType,\n  WebGLRenderbuffer = DummyType,\n  WebGLTexture = DummyType,\n  WebGLUniformLocation = DummyType,\n  WebGLActiveInfo = DummyType,\n  WebGLShaderPrecisionFormat = DummyType\n} = headlessTypes || global;\n\nexport const webGLTypesAvailable =\n  WebGLRenderingContext !== DummyType &&\n  WebGLProgram !== DummyType &&\n  WebGLShader !== DummyType &&\n  WebGLBuffer !== DummyType &&\n  WebGLFramebuffer !== DummyType &&\n  WebGLRenderbuffer !== DummyType &&\n  WebGLTexture !== DummyType &&\n  WebGLUniformLocation !== DummyType &&\n  WebGLActiveInfo !== DummyType &&\n  WebGLShaderPrecisionFormat !== DummyType;\n\n// Ensures that WebGL2RenderingContext is defined in non-WebGL2 environments\n// so that apps can test their gl contexts with instanceof\n// E.g. if (gl instanceof WebGL2RenderingContext) { }\nfunction getWebGL2RenderingContext() {\n  class WebGL2RenderingContextNotSupported {}\n  return global.WebGL2RenderingContext || WebGL2RenderingContextNotSupported;\n}\n\n// Ensure that Image is defined under Node.js\nfunction getImage() {\n  class ImageNotSupported {}\n  return global.Image || ImageNotSupported;\n}\n\nconst WebGL2RenderingContext = getWebGL2RenderingContext();\nconst Image = getImage();\n\n// Export the standard WebGL types\nexport {\n  Image,\n  WebGLRenderingContext,\n  WebGLProgram,\n  WebGLShader,\n  WebGLBuffer,\n  WebGLFramebuffer,\n  WebGLRenderbuffer,\n  WebGLTexture,\n  WebGLUniformLocation,\n  WebGLActiveInfo,\n  WebGLShaderPrecisionFormat,\n  WebGL2RenderingContext\n};\n","import {withParameters} from '../context';\nimport {assertWebGL2Context} from '../webgl-utils';\nimport {assert} from '../utils';\n\n// Should collapse during minification\nconst GL_DEPTH_BUFFER_BIT = 0x00000100;\nconst GL_STENCIL_BUFFER_BIT = 0x00000400;\nconst GL_COLOR_BUFFER_BIT = 0x00004000;\n\nconst GL_COLOR = 0x1800;\nconst GL_DEPTH = 0x1801;\nconst GL_STENCIL = 0x1802;\nconst GL_DEPTH_STENCIL = 0x84f9;\n\n// Should disappear if asserts are removed\nconst ERR_ARGUMENTS = 'clear: bad arguments';\n\n// Optionally clears depth, color and stencil buffers\nexport function clear(gl, {framebuffer = null, color = null, depth = null, stencil = null} = {}) {\n  const parameters = {};\n\n  if (framebuffer) {\n    parameters.framebuffer = framebuffer;\n  }\n\n  let clearFlags = 0;\n\n  if (color) {\n    clearFlags |= GL_COLOR_BUFFER_BIT;\n    if (color !== true) {\n      parameters.clearColor = color;\n    }\n  }\n\n  if (depth) {\n    clearFlags |= GL_DEPTH_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearDepth = depth;\n    }\n  }\n\n  if (stencil) {\n    clearFlags |= GL_STENCIL_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearStencil = depth;\n    }\n  }\n\n  assert(clearFlags !== 0, ERR_ARGUMENTS);\n\n  // Temporarily set any clear \"colors\" and call clear\n  withParameters(gl, parameters, () => {\n    gl.clear(clearFlags);\n  });\n}\n\n// WebGL2 - clear a specific drawing buffer\nexport function clearBuffer(\n  gl,\n  {framebuffer = null, buffer = GL_COLOR, drawBuffer = 0, value = [0, 0, 0, 0]} = {}\n) {\n  assertWebGL2Context(gl);\n\n  withParameters(gl, {framebuffer}, () => {\n    // Method selection per OpenGL ES 3 docs\n    switch (buffer) {\n      case GL_COLOR:\n        switch (value.constructor) {\n          case Int32Array:\n            gl.clearBufferiv(buffer, drawBuffer, value);\n            break;\n          case Uint32Array:\n            gl.clearBufferuiv(buffer, drawBuffer, value);\n            break;\n          case Float32Array:\n          default:\n            gl.clearBufferfv(buffer, drawBuffer, value);\n        }\n        break;\n\n      case GL_DEPTH:\n        gl.clearBufferfv(GL_DEPTH, 0, [value]);\n        break;\n\n      case GL_STENCIL:\n        gl.clearBufferiv(GL_STENCIL, 0, [value]);\n        break;\n\n      case GL_DEPTH_STENCIL:\n        const [depth, stencil] = value;\n        gl.clearBufferfi(GL_DEPTH_STENCIL, 0, depth, stencil);\n        break;\n\n      default:\n        assert(false, ERR_ARGUMENTS);\n    }\n  });\n}\n","// TODO: Two subdirectories must not depend on each other (classes vs utils)!\nimport Texture2D from '../classes/texture-2d';\nimport TextureCube from '../classes/texture-cube';\nimport Texture3D from '../classes/texture-3d';\nimport Framebuffer from '../classes/framebuffer';\nimport GL from '@luma.gl/constants';\nimport {assert} from '../utils';\n\n// Clone a new texture object from a reference texture object.\nexport function cloneTextureFrom(refTexture, overrides) {\n  assert(\n    refTexture instanceof Texture2D ||\n      refTexture instanceof TextureCube ||\n      refTexture instanceof Texture3D\n  );\n\n  const TextureType = refTexture.constructor;\n\n  const {gl, width, height, format, type, dataFormat, border, mipmaps} = refTexture;\n\n  const textureOptions = Object.assign(\n    {\n      width,\n      height,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps\n    },\n    overrides\n  );\n\n  // TODO: move this to `Texture` class as instance method and use this.constructor\n  return new TextureType(gl, textureOptions);\n}\n\n// Wraps a given texture into a framebuffer object, that can be further used\n// to read data from the texture object.\nexport function toFramebuffer(texture, opts) {\n  const {gl, width, height, id} = texture;\n  const framebuffer = new Framebuffer(\n    gl,\n    Object.assign({}, opts, {\n      id: `framebuffer-for-${id}`,\n      width,\n      height,\n      attachments: {\n        [GL.COLOR_ATTACHMENT0]: texture\n      }\n    })\n  );\n  return framebuffer;\n}\n","import GL from '@luma.gl/constants';\nimport Texture from './texture';\nimport {assertWebGLContext} from '../webgl-utils';\nimport {log} from '../utils';\n\nconst FACES = [\n  GL.TEXTURE_CUBE_MAP_POSITIVE_X,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_X,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Y,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Z,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Z\n];\n\nexport default class TextureCube extends Texture {\n  constructor(gl, props = {}) {\n    assertWebGLContext(gl);\n\n    super(gl, Object.assign({}, props, {target: GL.TEXTURE_CUBE_MAP}));\n\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(props = {}) {\n    const {/* format = GL.RGBA, */ mipmaps = true, parameters = {}} = props;\n\n    // let {width = 1, height = 1, type = GL.UNSIGNED_BYTE, dataFormat} = props;\n\n    // Deduce width and height based on one of the faces\n    // ({type, dataFormat} = this._deduceParameters({format, type, dataFormat}));\n    // ({width, height} = this._deduceImageSize({\n    //   data: props[GL.TEXTURE_CUBE_MAP_POSITIVE_X],\n    //   width,\n    //   height\n    // }));\n\n    // Enforce cube\n    // assert(width === height);\n\n    // Temporarily apply any pixel store paramaters and build textures\n    // withParameters(this.gl, props, () => {\n    //   for (const face of CUBE_MAP_FACES) {\n    //     this.setImageData({\n    //       target: face,\n    //       data: props[face],\n    //       width, height, format, type, dataFormat, border, mipmaps\n    //     });\n    //   }\n    // });\n\n    // Store props for accessors\n    this.opts = props;\n\n    this.setCubeMapImageData(props).then(() => {\n      this.loaded = true;\n\n      // TODO - should genMipmap() be called on the cubemap or on the faces?\n      // TODO - without generateMipmap() cube textures do not work at all!!! Why?\n      if (mipmaps) {\n        this.generateMipmap(props);\n      }\n\n      this.setParameters(parameters);\n    });\n  }\n\n  subImage({face, data, x = 0, y = 0, mipmapLevel = 0}) {\n    return this._subImage({target: face, data, x, y, mipmapLevel});\n  }\n\n  /* eslint-disable max-statements, max-len */\n  async setCubeMapImageData({\n    width,\n    height,\n    pixels,\n    data,\n    border = 0,\n    format = GL.RGBA,\n    type = GL.UNSIGNED_BYTE\n  }) {\n    const {gl} = this;\n    const imageDataMap = pixels || data;\n\n    // pixel data (imageDataMap) is an Object from Face to Image or Promise.\n    // For example:\n    // {\n    // GL.TEXTURE_CUBE_MAP_POSITIVE_X : Image-or-Promise,\n    // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : Image-or-Promise,\n    // ... }\n    // To provide multiple level-of-details (LODs) this can be Face to Array\n    // of Image or Promise, like this\n    // {\n    // GL.TEXTURE_CUBE_MAP_POSITIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],\n    // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],\n    // ... }\n\n    const resolvedFaces = await Promise.all(\n      FACES.map(face => {\n        const facePixels = imageDataMap[face];\n        return Promise.all(Array.isArray(facePixels) ? facePixels : [facePixels]);\n      })\n    );\n\n    this.bind();\n\n    FACES.forEach((face, index) => {\n      if (resolvedFaces[index].length > 1 && this.opts.mipmaps !== false) {\n        // If the user provides multiple LODs, then automatic mipmap\n        // generation generateMipmap() should be disabled to avoid overwritting them.\n        log.warn(`${this.id} has mipmap and multiple LODs.`)();\n      }\n      resolvedFaces[index].forEach((image, lodLevel) => {\n        // TODO: adjust width & height for LOD!\n        if (width && height) {\n          gl.texImage2D(face, lodLevel, format, width, height, border, format, type, image);\n        } else {\n          gl.texImage2D(face, lodLevel, format, format, type, image);\n        }\n      });\n    });\n\n    this.unbind();\n  }\n\n  // TODO: update this method to accept LODs\n  setImageDataForFace(options) {\n    const {\n      face,\n      width,\n      height,\n      pixels,\n      data,\n      border = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE\n      // generateMipmap = false // TODO\n    } = options;\n\n    const {gl} = this;\n\n    const imageData = pixels || data;\n\n    this.bind();\n    if (imageData instanceof Promise) {\n      imageData.then(resolvedImageData =>\n        this.setImageDataForFace(\n          Object.assign({}, options, {\n            face,\n            data: resolvedImageData,\n            pixels: resolvedImageData\n          })\n        )\n      );\n    } else if (this.width || this.height) {\n      gl.texImage2D(face, 0, format, width, height, border, format, type, imageData);\n    } else {\n      gl.texImage2D(face, 0, format, format, type, imageData);\n    }\n\n    return this;\n  }\n}\n\nTextureCube.FACES = FACES;\n","import GL from '@luma.gl/constants';\nimport {withParameters} from '../context';\nimport {isWebGL2, assertWebGL2Context} from '../webgl-utils';\nimport Texture from './texture';\nimport {DATA_FORMAT_CHANNELS, TYPE_SIZES} from './texture-formats';\nimport Buffer from './buffer';\n\nexport default class Texture3D extends Texture {\n  static isSupported(gl) {\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, props = {}) {\n    assertWebGL2Context(gl);\n    props = Object.assign({depth: 1}, props, {target: GL.TEXTURE_3D, unpackFlipY: false});\n    super(gl, props);\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  // Image 3D copies from Typed Array or WebGLBuffer\n  setImageData({\n    level = 0,\n    dataFormat = GL.RGBA,\n    width,\n    height,\n    depth = 1,\n    border = 0,\n    format,\n    type = GL.UNSIGNED_BYTE,\n    offset = 0,\n    data,\n    parameters = {}\n  }) {\n    this._trackDeallocatedMemory('Texture');\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withParameters(this.gl, parameters, () => {\n      if (ArrayBuffer.isView(data)) {\n        this.gl.texImage3D(\n          this.target,\n          level,\n          dataFormat,\n          width,\n          height,\n          depth,\n          border,\n          format,\n          type,\n          data\n        );\n      }\n\n      if (data instanceof Buffer) {\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle);\n        this.gl.texImage3D(\n          this.target,\n          level,\n          dataFormat,\n          width,\n          height,\n          depth,\n          border,\n          format,\n          type,\n          offset\n        );\n      }\n    });\n\n    if (data && data.byteLength) {\n      this._trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      // NOTE(Tarek): Default to RGBA bytes\n      const channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n      const channelSize = TYPE_SIZES[this.type] || 1;\n\n      this._trackAllocatedMemory(\n        this.width * this.height * this.depth * channels * channelSize,\n        'Texture'\n      );\n    }\n\n    this.loaded = true;\n\n    return this;\n  }\n}\n","// map of parameter setter function names, parameter constants, default values and types\n// - Uses gl function names, except when setter function exist that are named differently\n// - When the WebGL api offers <setter> and <setter>Separate (e.g. blendEquation and\n//   blendEquationSeparate, we use non-separate name, but accept both non-separate and\n//   separate arguments. Thus, a `getParameter` call will always return all the separate values\n//   in an array, in a form that can be accepted by the setter.\n\nimport GL from '@luma.gl/constants';\n\n// HELPERS\n\nfunction isArray(array) {\n  return Array.isArray(array) || ArrayBuffer.isView(array);\n}\n\nexport default {\n  framebuffer: (gl, framebuffer) => {\n    // accepts 1) a WebGLFramebuffer 2) null (default framebuffer), or 3) luma.gl Framebuffer class\n    // framebuffer is null when restoring to default framebuffer, otherwise use the WebGL handle.\n    const handle = framebuffer && 'handle' in framebuffer ? framebuffer.handle : framebuffer;\n    return gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  },\n  blend: (gl, value) => (value ? gl.enable(GL.BLEND) : gl.disable(GL.BLEND)),\n  blendColor: (gl, value) => gl.blendColor(...value),\n  blendEquation: (gl, args) => {\n    args = isArray(args) ? args : [args, args];\n    gl.blendEquationSeparate(...args);\n  },\n  blendFunc: (gl, args) => {\n    args = isArray(args) && args.length === 2 ? [...args, ...args] : args;\n    gl.blendFuncSeparate(...args);\n  },\n\n  clearColor: (gl, value) => gl.clearColor(...value),\n  clearDepth: (gl, value) => gl.clearDepth(value),\n  clearStencil: (gl, value) => gl.clearStencil(value),\n\n  colorMask: (gl, value) => gl.colorMask(...value),\n\n  cull: (gl, value) => (value ? gl.enable(GL.CULL_FACE) : gl.disable(GL.CULL_FACE)),\n  cullFace: (gl, value) => gl.cullFace(value),\n\n  depthTest: (gl, value) => (value ? gl.enable(GL.DEPTH_TEST) : gl.disable(GL.DEPTH_TEST)),\n  depthFunc: (gl, value) => gl.depthFunc(value),\n  depthMask: (gl, value) => gl.depthMask(value),\n  depthRange: (gl, value) => gl.depthRange(...value),\n\n  dither: (gl, value) => (value ? gl.enable(GL.DITHER) : gl.disable(GL.DITHER)),\n\n  derivativeHint: (gl, value) => {\n    // gl1: 'OES_standard_derivatives'\n    gl.hint(GL.FRAGMENT_SHADER_DERIVATIVE_HINT, value);\n  },\n\n  frontFace: (gl, value) => gl.frontFace(value),\n\n  mipmapHint: (gl, value) => gl.hint(GL.GENERATE_MIPMAP_HINT, value),\n\n  lineWidth: (gl, value) => gl.lineWidth(value),\n\n  polygonOffsetFill: (gl, value) =>\n    value ? gl.enable(GL.POLYGON_OFFSET_FILL) : gl.disable(GL.POLYGON_OFFSET_FILL),\n  polygonOffset: (gl, value) => gl.polygonOffset(...value),\n\n  sampleCoverage: (gl, value) => gl.sampleCoverage(...value),\n\n  scissorTest: (gl, value) => (value ? gl.enable(GL.SCISSOR_TEST) : gl.disable(GL.SCISSOR_TEST)),\n  scissor: (gl, value) => gl.scissor(...value),\n\n  stencilTest: (gl, value) => (value ? gl.enable(GL.STENCIL_TEST) : gl.disable(GL.STENCIL_TEST)),\n  stencilMask: (gl, value) => {\n    value = isArray(value) ? value : [value, value];\n    const [mask, backMask] = value;\n    gl.stencilMaskSeparate(GL.FRONT, mask);\n    gl.stencilMaskSeparate(GL.BACK, backMask);\n  },\n  stencilFunc: (gl, args) => {\n    args = isArray(args) && args.length === 3 ? [...args, ...args] : args;\n    const [func, ref, mask, backFunc, backRef, backMask] = args;\n    gl.stencilFuncSeparate(GL.FRONT, func, ref, mask);\n    gl.stencilFuncSeparate(GL.BACK, backFunc, backRef, backMask);\n  },\n  stencilOp: (gl, args) => {\n    args = isArray(args) && args.length === 3 ? [...args, ...args] : args;\n    const [sfail, dpfail, dppass, backSfail, backDpfail, backDppass] = args;\n    gl.stencilOpSeparate(GL.FRONT, sfail, dpfail, dppass);\n    gl.stencilOpSeparate(GL.BACK, backSfail, backDpfail, backDppass);\n  },\n\n  viewport: (gl, value) => gl.viewport(...value)\n};\n","import {setParameters as glSetParameters} from './unified-parameter-api';\nimport FUNCTION_STYLE_PARAMETER_SETTERS from './webgl-setter-function-table';\n\n// Adds support for using gl function names (in addition to parameter constants)\n// as keys in setParameters\n//\n// Note: Value may be \"normalized\" (in case a short form is supported).\n// In that case the normalized value is returned.\n\nexport function setParameters(gl, parameters) {\n  // Handles any GL parameter keys\n  glSetParameters(gl, parameters);\n  // Check for function style keys\n  for (const key in parameters) {\n    const setter = FUNCTION_STYLE_PARAMETER_SETTERS[key];\n    if (setter) {\n      setter(gl, parameters[key], key);\n    }\n  }\n}\n","import isBrowser from './utils/is-browser';\nimport {global} from './utils/globals';\nimport log from './utils/log';\nimport {Stats} from 'probe.gl';\n\n// TODO - when webgl2 gets ubiquitous, remove default support for webgl1 by dropping next line\n// Can be installed by applications\nimport '@luma.gl/webgl2-polyfill';\n\n// Version detection using babel plugin\n/* global __VERSION__ */\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'untranspiled source';\n\nconst STARTUP_MESSAGE = 'set luma.log.priority=1 (or higher) to trace rendering';\n// Assign luma.log.priority in console to control logging: \\\n// 0: none, 1: minimal, 2: verbose, 3: attribute/uniforms, 4: gl logs\n// luma.log.break[], set to gl funcs, luma.log.profile[] set to model names`;\n\nclass StatsManager {\n  constructor() {\n    this.stats = new Map();\n  }\n\n  get(name) {\n    if (!this.stats.has(name)) {\n      this.stats.set(name, new Stats({id: name}));\n    }\n\n    return this.stats.get(name);\n  }\n}\n\nconst lumaStats = new StatsManager();\n\nif (global.luma && global.luma.VERSION !== VERSION) {\n  throw new Error(`luma.gl - multiple VERSIONs detected: ${global.luma.VERSION} vs ${VERSION}`);\n}\n\nif (!global.luma) {\n  if (isBrowser) {\n    log.log(1, `luma.gl ${VERSION} - ${STARTUP_MESSAGE}`)();\n  }\n\n  global.luma = global.luma || {\n    VERSION,\n    version: VERSION,\n    log,\n\n    // A global stats object that various components can add information to\n    // E.g. see webgl/resource.js\n    stats: lumaStats,\n\n    // Keep some luma globals in a sub-object\n    // This allows us to dynamically detect if certain modules have been\n    // included (such as IO and headless) and enable related functionality,\n    // without unconditionally requiring and thus bundling big dependencies\n    // into the app.\n    globals: {\n      modules: {},\n      nodeIO: {}\n    }\n  };\n}\n\nexport {global};\nexport {lumaStats};\nexport default global.luma;\n","import GL from '@luma.gl/constants';\nimport {assert} from '../utils';\n\n// Returns number of components in a specific readPixels WebGL format\nexport function glFormatToComponents(format) {\n  switch (format) {\n    case GL.ALPHA:\n    case GL.R32F:\n    case GL.RED:\n      return 1;\n    case GL.RG32F:\n    case GL.RG:\n      return 2;\n    case GL.RGB:\n    case GL.RGB32F:\n      return 3;\n    case GL.RGBA:\n    case GL.RGBA32F:\n      return 4;\n    // TODO: Add support for additional WebGL2 formats\n    default:\n      assert(false);\n      return 0;\n  }\n}\n\n// Return byte count for given readPixels WebGL type\nexport function glTypeToBytes(type) {\n  switch (type) {\n    case GL.UNSIGNED_BYTE:\n      return 1;\n    case GL.UNSIGNED_SHORT_5_6_5:\n    case GL.UNSIGNED_SHORT_4_4_4_4:\n    case GL.UNSIGNED_SHORT_5_5_5_1:\n      return 2;\n    case GL.FLOAT:\n      return 4;\n    // TODO: Add support for additional WebGL2 types\n    default:\n      assert(false);\n      return 0;\n  }\n}\n","import GL from '@luma.gl/constants';\nimport Buffer from './buffer';\nimport Framebuffer from './framebuffer';\nimport Texture from './texture';\nimport {withParameters} from '../context';\nimport {assertWebGL2Context, flipRows, scalePixels} from '../webgl-utils';\nimport {getTypedArrayFromGLType, getGLTypeFromTypedArray} from '../webgl-utils/typed-array-utils';\nimport {glFormatToComponents, glTypeToBytes} from '../webgl-utils/format-utils';\nimport {toFramebuffer} from '../webgl-utils/texture-utils';\nimport {assert, log} from '../utils';\n\n// NOTE: Slow requires roundtrip to GPU\n// Copies data from a Framebuffer or a Texture object into ArrayBuffer object.\n// App can provide targetPixelArray or have it auto allocated by this method\n// @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n//  newly allocated by this method unless provided by app.\nexport function readPixelsToArray(\n  source,\n  {\n    sourceX = 0,\n    sourceY = 0,\n    sourceFormat = GL.RGBA,\n    sourceAttachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    target = null,\n    // following parameters are auto deduced if not provided\n    sourceWidth,\n    sourceHeight,\n    sourceType\n  } = {}\n) {\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(source);\n  assert(framebuffer);\n  const {gl, handle, attachments} = framebuffer;\n  sourceWidth = sourceWidth || framebuffer.width;\n  sourceHeight = sourceHeight || framebuffer.height;\n\n  // TODO - Set and unset gl.readBuffer\n  if (sourceAttachment === GL.COLOR_ATTACHMENT0 && handle === null) {\n    sourceAttachment = GL.FRONT;\n  }\n\n  assert(attachments[sourceAttachment]);\n\n  // Deduce the type from color attachment if not provided.\n  sourceType = sourceType || attachments[sourceAttachment].type;\n\n  // Deduce type and allocated pixelArray if needed\n  target = getPixelArray(target, sourceType, sourceFormat, sourceWidth, sourceHeight);\n\n  // Pixel array available, if necessary, deduce type from it.\n  sourceType = sourceType || getGLTypeFromTypedArray(target);\n\n  const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  gl.readPixels(sourceX, sourceY, sourceWidth, sourceHeight, sourceFormat, sourceType, target);\n  gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n  return target;\n}\n\n// NOTE: doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n// Copies data from a Framebuffer or a Texture object into a Buffer object.\nexport function readPixelsToBuffer(\n  source,\n  {\n    sourceX = 0,\n    sourceY = 0,\n    sourceFormat = GL.RGBA,\n    target = null, // A new Buffer object is created when not provided.\n    targetByteOffset = 0, // byte offset in buffer object\n    // following parameters are auto deduced if not provided\n    sourceWidth,\n    sourceHeight,\n    sourceType\n  }\n) {\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(source);\n  assert(framebuffer);\n  const {gl} = framebuffer;\n  sourceWidth = sourceWidth || framebuffer.width;\n  sourceHeight = sourceHeight || framebuffer.height;\n\n  // Asynchronus read (PIXEL_PACK_BUFFER) is WebGL2 only feature\n  assertWebGL2Context(gl);\n\n  // deduce type if not available.\n  sourceType = sourceType || (target ? target.type : GL.UNSIGNED_BYTE);\n\n  if (!target) {\n    // Create new buffer with enough size\n    const components = glFormatToComponents(sourceFormat);\n    const byteCount = glTypeToBytes(sourceType);\n    const byteLength = targetByteOffset + sourceWidth * sourceHeight * components * byteCount;\n    target = new Buffer(gl, {byteLength, accessor: {type: sourceType, size: components}});\n  }\n\n  target.bind({target: GL.PIXEL_PACK_BUFFER});\n  withParameters(gl, {framebuffer}, () => {\n    gl.readPixels(\n      sourceX,\n      sourceY,\n      sourceWidth,\n      sourceHeight,\n      sourceFormat,\n      sourceType,\n      targetByteOffset\n    );\n  });\n  target.unbind({target: GL.PIXEL_PACK_BUFFER});\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n\n  return target;\n}\n\n// Reads pixels from a Framebuffer or Texture object to a dataUrl\nexport function copyToDataUrl(\n  source,\n  {\n    sourceAttachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    targetMaxHeight = Number.MAX_SAFE_INTEGER\n  } = {}\n) {\n  let data = readPixelsToArray(source, {sourceAttachment});\n\n  // Scale down\n  let {width, height} = source;\n  while (height > targetMaxHeight) {\n    ({data, width, height} = scalePixels({data, width, height}));\n  }\n\n  // Flip to top down coordinate system\n  flipRows({data, width, height});\n\n  /* global document */\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  const context = canvas.getContext('2d');\n\n  // Copy the pixels to a 2D canvas\n  const imageData = context.createImageData(width, height);\n  imageData.data.set(data);\n  context.putImageData(imageData, 0, 0);\n\n  return canvas.toDataURL();\n}\n\n// Reads pixels from a Framebuffer or Texture object into an HTML Image\nexport function copyToImage(\n  source,\n  {\n    sourceAttachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    targetImage = null\n  } = {}\n) {\n  /* global Image */\n  const dataUrl = copyToDataUrl(source, {sourceAttachment});\n  targetImage = targetImage || new Image();\n  targetImage.src = dataUrl;\n  return targetImage;\n}\n\n// Copy a rectangle from a Framebuffer or Texture object into a texture (at an offset)\n// eslint-disable-next-line complexity, max-statements\nexport function copyToTexture(\n  source,\n  target,\n  {\n    sourceX = 0,\n    sourceY = 0,\n    // attachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n\n    targetX,\n    targetY,\n    targetZ,\n    targetMipmaplevel = 0,\n    targetInternalFormat = GL.RGBA,\n\n    width, // defaults to target width\n    height // defaults to target height\n  } = {}\n) {\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(source);\n  assert(framebuffer);\n  const {gl, handle} = framebuffer;\n  const isSubCopy =\n    typeof targetX !== 'undefined' ||\n    typeof targetY !== 'undefined' ||\n    typeof targetZ !== 'undefined';\n  targetX = targetX || 0;\n  targetY = targetY || 0;\n  targetZ = targetZ || 0;\n  const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  // TODO - support gl.readBuffer (WebGL2 only)\n  // const prevBuffer = gl.readBuffer(attachment);\n  assert(target);\n  let texture = null;\n  if (target instanceof Texture) {\n    texture = target;\n    width = Number.isFinite(width) ? width : texture.width;\n    height = Number.isFinite(height) ? height : texture.height;\n    texture.bind(0);\n    target = texture.target;\n  }\n\n  if (!isSubCopy) {\n    gl.copyTexImage2D(\n      target,\n      targetMipmaplevel,\n      targetInternalFormat,\n      sourceX,\n      sourceY,\n      width,\n      height,\n      0 /* border must be 0 */\n    );\n  } else {\n    switch (target) {\n      case GL.TEXTURE_2D:\n      case GL.TEXTURE_CUBE_MAP:\n        gl.copyTexSubImage2D(\n          target,\n          targetMipmaplevel,\n          targetX,\n          targetY,\n          sourceX,\n          sourceY,\n          width,\n          height\n        );\n        break;\n      case GL.TEXTURE_2D_ARRAY:\n      case GL.TEXTURE_3D:\n        gl.copyTexSubImage3D(\n          target,\n          targetMipmaplevel,\n          targetX,\n          targetY,\n          targetZ,\n          sourceX,\n          sourceY,\n          width,\n          height\n        );\n        break;\n      default:\n    }\n  }\n  if (texture) {\n    texture.unbind();\n  }\n  gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n  return texture;\n}\n\n// NOTE: WEBLG2 only\n// Copies a rectangle of pixels between Framebuffer or Texture objects\n// eslint-disable-next-line max-statements, complexity\nexport function blit(\n  source,\n  target,\n  {\n    sourceAttachment = GL.COLOR_ATTACHMENT0,\n    sourceX0 = 0,\n    sourceY0 = 0,\n    sourceX1,\n    sourceY1,\n    targetX0 = 0,\n    targetY0 = 0,\n    targetX1,\n    targetY1,\n    color = true,\n    depth = false,\n    stencil = false,\n    mask = 0,\n    filter = GL.NEAREST\n  } = {}\n) {\n  const {framebuffer: srcFramebuffer, deleteFramebuffer: deleteSrcFramebuffer} = getFramebuffer(\n    source\n  );\n  const {framebuffer: dstFramebuffer, deleteFramebuffer: deleteDstFramebuffer} = getFramebuffer(\n    target\n  );\n\n  assert(srcFramebuffer);\n  assert(dstFramebuffer);\n  const {gl, handle, width, height, readBuffer} = dstFramebuffer;\n  assertWebGL2Context(gl);\n\n  if (!srcFramebuffer.handle && sourceAttachment === GL.COLOR_ATTACHMENT0) {\n    sourceAttachment = GL.FRONT;\n  }\n\n  if (color) {\n    mask |= GL.COLOR_BUFFER_BIT;\n  }\n  if (depth) {\n    mask |= GL.DEPTH_BUFFER_BIT;\n  }\n  if (stencil) {\n    mask |= GL.STENCIL_BUFFER_BIT;\n  }\n\n  if (deleteSrcFramebuffer || deleteDstFramebuffer) {\n    // Either source or destiantion was a texture object, which is wrapped in a Framebuffer objecgt as color attachment.\n    // Overwrite the mask to `COLOR_BUFFER_BIT`\n    if (mask & (GL.DEPTH_BUFFER_BIT | GL.STENCIL_BUFFER_BIT)) {\n      mask = GL.COLOR_BUFFER_BIT;\n      log.warn('Blitting from or into a Texture object, forcing mask to GL.COLOR_BUFFER_BIT')();\n    }\n  }\n  assert(mask);\n\n  sourceX1 = sourceX1 === undefined ? srcFramebuffer.width : sourceX1;\n  sourceY1 = sourceY1 === undefined ? srcFramebuffer.height : sourceY1;\n  targetX1 = targetX1 === undefined ? width : targetX1;\n  targetY1 = targetY1 === undefined ? height : targetY1;\n\n  const prevDrawHandle = gl.bindFramebuffer(GL.DRAW_FRAMEBUFFER, handle);\n  const prevReadHandle = gl.bindFramebuffer(GL.READ_FRAMEBUFFER, srcFramebuffer.handle);\n  gl.readBuffer(sourceAttachment);\n  gl.blitFramebuffer(\n    sourceX0,\n    sourceY0,\n    sourceX1,\n    sourceY1,\n    targetX0,\n    targetY0,\n    targetX1,\n    targetY1,\n    mask,\n    filter\n  );\n  gl.readBuffer(readBuffer);\n  gl.bindFramebuffer(GL.READ_FRAMEBUFFER, prevReadHandle || null);\n  gl.bindFramebuffer(GL.DRAW_FRAMEBUFFER, prevDrawHandle || null);\n  if (deleteSrcFramebuffer) {\n    srcFramebuffer.delete();\n  }\n  if (deleteDstFramebuffer) {\n    dstFramebuffer.delete();\n  }\n\n  return dstFramebuffer;\n}\n\n// Helper methods\n\nfunction getFramebuffer(source) {\n  if (!(source instanceof Framebuffer)) {\n    return {framebuffer: toFramebuffer(source), deleteFramebuffer: true};\n  }\n  return {framebuffer: source, deleteFramebuffer: false};\n}\n\nfunction getPixelArray(pixelArray, type, format, width, height) {\n  if (pixelArray) {\n    return pixelArray;\n  }\n  // Allocate pixel array if not already available, using supplied type\n  type = type || GL.UNSIGNED_BYTE;\n  const ArrayType = getTypedArrayFromGLType(type, {clamped: false});\n  const components = glFormatToComponents(format);\n  // TODO - check for composite type (components = 1).\n  return new ArrayType(width * height * components);\n}\n","/* eslint-disable no-inline-comments, max-len, camelcase */\nimport GL from '@luma.gl/constants';\n\nconst OES_element_index = 'OES_element_index';\nconst WEBGL_draw_buffers = 'WEBGL_draw_buffers';\nconst EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';\nconst EXT_disjoint_timer_query_webgl2 = 'EXT_disjoint_timer_query_webgl2';\nconst EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';\nconst WEBGL_debug_renderer_info = 'WEBGL_debug_renderer_info';\n\nconst GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8b8b;\nconst GL_DONT_CARE = 0x1100;\nconst GL_GPU_DISJOINT_EXT = 0x8fbb;\nconst GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84ff;\nconst GL_UNMASKED_VENDOR_WEBGL = 0x9245; // vendor string of the graphics driver.\nconst GL_UNMASKED_RENDERER_WEBGL = 0x9246; // renderer string of the graphics driver.\n\nconst getWebGL2ValueOrZero = gl => (!isWebGL2(gl) ? 0 : undefined);\n\n// if a function returns undefined in this table,\n// the original getParameter will be called, defeating the override\nconst WEBGL_PARAMETERS = {\n  [GL.READ_BUFFER]: gl => (!isWebGL2(gl) ? GL.COLOR_ATTACHMENT0 : undefined),\n\n  // WebGL2 context parameters\n  [GL_FRAGMENT_SHADER_DERIVATIVE_HINT]: gl => (!isWebGL2(gl) ? GL_DONT_CARE : undefined),\n\n  [GL.RASTERIZER_DISCARD]: getWebGL2ValueOrZero,\n\n  [GL.SAMPLES]: getWebGL2ValueOrZero,\n\n  // WebGL2 extension context parameters\n  [GL_GPU_DISJOINT_EXT]: (gl, getParameter) => {\n    const ext = isWebGL2(gl)\n      ? gl.getExtension(EXT_disjoint_timer_query_webgl2)\n      : gl.getExtension(EXT_disjoint_timer_query);\n    return ext && ext.GPU_DISJOINT_EXT ? getParameter(ext.GPU_DISJOINT_EXT) : 0;\n  },\n\n  // Extension fixed values\n  [GL_UNMASKED_VENDOR_WEBGL]: (gl, getParameter) => {\n    const ext = gl.getExtension(WEBGL_debug_renderer_info);\n    return getParameter((ext && ext.UNMASKED_VENDOR_WEBGL) || GL.VENDOR);\n  },\n\n  [GL_UNMASKED_RENDERER_WEBGL]: (gl, getParameter) => {\n    const ext = gl.getExtension(WEBGL_debug_renderer_info);\n    return getParameter((ext && ext.UNMASKED_RENDERER_WEBGL) || GL.RENDERER);\n  },\n\n  // Extension LIMITS\n  [GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT]: (gl, getParameter) => {\n    const ext = gl.luma.extensions[EXT_texture_filter_anisotropic];\n    return ext ? getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1.0;\n  },\n\n  // WebGL2 Limits\n  [GL.MAX_3D_TEXTURE_SIZE]: getWebGL2ValueOrZero,\n  [GL.MAX_ARRAY_TEXTURE_LAYERS]: getWebGL2ValueOrZero,\n  [GL.MAX_CLIENT_WAIT_TIMEOUT_WEBGL]: getWebGL2ValueOrZero,\n  [GL.MAX_COLOR_ATTACHMENTS]: (gl, getParameter) => {\n    if (!isWebGL2(gl)) {\n      const ext = gl.getExtension(WEBGL_draw_buffers);\n      return ext ? getParameter(ext.MAX_COLOR_ATTACHMENTS_WEBGL) : 0;\n    }\n    return undefined;\n  },\n  [GL.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_COMBINED_UNIFORM_BLOCKS]: getWebGL2ValueOrZero,\n  [GL.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_DRAW_BUFFERS]: gl => {\n    if (!isWebGL2(gl)) {\n      const ext = gl.getExtension(WEBGL_draw_buffers);\n      return ext ? ext.MAX_DRAW_BUFFERS_WEBGL : 0;\n    }\n    return undefined;\n  },\n  [GL.MAX_ELEMENT_INDEX]:\n    // Guess: per webglstats.com 99.6% of webgl2 supports 2147483647\n    gl => (gl.getExtension(OES_element_index) ? 2147483647 : 65535),\n  [GL.MAX_ELEMENTS_INDICES]:\n    // Guess: \"Reasonably safe\" per webglstats.com - could be higher/lower (on some mobile devices)\n    gl => (gl.getExtension(OES_element_index) ? 16777216 : 65535),\n  [GL.MAX_ELEMENTS_VERTICES]:\n    // Guess: \"Reasonably safe\" per webglstats.com - could be higher/lower (on some mobile devices)\n    gl => 16777216,\n  [GL.MAX_FRAGMENT_INPUT_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_FRAGMENT_UNIFORM_BLOCKS]: getWebGL2ValueOrZero,\n  [GL.MAX_FRAGMENT_UNIFORM_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_SAMPLES]: getWebGL2ValueOrZero,\n  [GL.MAX_SERVER_WAIT_TIMEOUT]: getWebGL2ValueOrZero,\n  [GL.MAX_TEXTURE_LOD_BIAS]: getWebGL2ValueOrZero,\n  [GL.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS]: getWebGL2ValueOrZero,\n  [GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_UNIFORM_BLOCK_SIZE]: getWebGL2ValueOrZero,\n  [GL.MAX_UNIFORM_BUFFER_BINDINGS]: getWebGL2ValueOrZero,\n  [GL.MAX_VARYING_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_VERTEX_OUTPUT_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_VERTEX_UNIFORM_BLOCKS]: getWebGL2ValueOrZero,\n  [GL.MAX_VERTEX_UNIFORM_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MIN_PROGRAM_TEXEL_OFFSET]: getWebGL2ValueOrZero,\n  [GL.MAX_PROGRAM_TEXEL_OFFSET]: getWebGL2ValueOrZero,\n  [GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT]: getWebGL2ValueOrZero\n};\n\n// Return true if WebGL2 context\nfunction isWebGL2(gl) {\n  return Boolean(gl && gl._version === 2);\n}\n\n// A \"replacement\" gl.getParameter that accepts \"enums\" from extensions and WebGL2\n// and returns reasonably safe defaults\nexport function getParameterPolyfill(gl, originalGetParameter, pname) {\n  // Return mock limits (usually 0) for WebGL2 constants to ensure these\n  // can be queries without error\n  const limit = WEBGL_PARAMETERS[pname];\n  const value = typeof limit === 'function' ? limit(gl, originalGetParameter, pname) : limit;\n  const result = value !== undefined ? value : originalGetParameter(pname);\n  return result;\n}\n","import GL from '@luma.gl/constants';\nimport assert from './assert';\n\nimport {getParameterPolyfill} from './polyfills/get-parameter-polyfill';\n\nconst OES_vertex_array_object = 'OES_vertex_array_object';\nconst ANGLE_instanced_arrays = 'ANGLE_instanced_arrays';\nconst WEBGL_draw_buffers = 'WEBGL_draw_buffers';\nconst EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';\nconst EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';\n\nconst ERR_VAO_NOT_SUPPORTED = 'VertexArray requires WebGL2 or OES_vertex_array_object extension';\n\n// Return true if WebGL2 context\nfunction isWebGL2(gl) {\n  return Boolean(gl && gl._version === 2);\n}\n\n// Return object with webgl2 flag and an extension\nfunction getExtensionData(gl, extension) {\n  return {\n    webgl2: isWebGL2(gl),\n    ext: gl.getExtension(extension)\n  };\n}\n\n// function mapExtensionConstant(gl, constant) {\n//   switch (constant) {\n//   case ext.FRAGMENT_SHADER_DERIVATIVE_HINT_OES: return GL.FRAGMENT_SHADER_DERIVATIVE_HINT;\n//   }\n// }\n\nexport const WEBGL2_CONTEXT_POLYFILLS = {\n  // POLYFILL TABLE\n  [OES_vertex_array_object]: {\n    meta: {suffix: 'OES'},\n    // NEW METHODS\n    createVertexArray: () => {\n      assert(false, ERR_VAO_NOT_SUPPORTED);\n    },\n    deleteVertexArray: () => {},\n    bindVertexArray: () => {},\n    isVertexArray: () => false\n  },\n  [ANGLE_instanced_arrays]: {\n    meta: {\n      suffix: 'ANGLE'\n      // constants: {\n      //   VERTEX_ATTRIB_ARRAY_DIVISOR: 'VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE'\n      // }\n    },\n    vertexAttribDivisor(location, divisor) {\n      // Accept divisor 0 even if instancing is not supported (0 = no instancing)\n      assert(divisor === 0, 'WebGL instanced rendering not supported');\n    },\n    drawElementsInstanced: () => {},\n    drawArraysInstanced: () => {}\n  },\n  [WEBGL_draw_buffers]: {\n    meta: {\n      suffix: 'WEBGL'\n    },\n    drawBuffers: () => {\n      assert(false);\n    }\n  },\n  [EXT_disjoint_timer_query]: {\n    meta: {suffix: 'EXT'},\n    // WebGL1: Polyfills the WebGL2 Query API\n    createQuery: () => {\n      assert(false);\n    },\n    deleteQuery: () => {\n      assert(false);\n    },\n    beginQuery: () => {\n      assert(false);\n    },\n    endQuery: () => {},\n    getQuery(handle, pname) {\n      return this.getQueryObject(handle, pname);\n    },\n    // The WebGL1 extension uses getQueryObject rather then getQueryParameter\n    getQueryParameter(handle, pname) {\n      return this.getQueryObject(handle, pname);\n    },\n    getQueryObject: () => {}\n  }\n};\n\nexport const WEBGL2_CONTEXT_OVERRIDES = {\n  // Ensure readBuffer is a no-op\n  readBuffer: (gl, originalFunc, attachment) => {\n    if (isWebGL2(gl)) {\n      originalFunc(attachment);\n    } else {\n      // assert(attachment !== GL_COLOR_ATTACHMENT0 && attachment !== GL_FRONT);\n    }\n  },\n  // Override for getVertexAttrib that returns sane values for non-WebGL1 constants\n  getVertexAttrib: (gl, originalFunc, location, pname) => {\n    // const gl = this; // eslint-disable-line\n    const {webgl2, ext} = getExtensionData(gl, ANGLE_instanced_arrays);\n\n    let result;\n    switch (pname) {\n      // WebGL1 attributes will never be integer\n      case GL.VERTEX_ATTRIB_ARRAY_INTEGER:\n        result = !webgl2 ? false : undefined;\n        break;\n      // if instancing is not available, return 0 meaning divisor has not been set\n      case GL.VERTEX_ATTRIB_ARRAY_DIVISOR:\n        result = !webgl2 && !ext ? 0 : undefined;\n        break;\n      default:\n    }\n\n    return result !== undefined ? result : originalFunc(location, pname);\n  },\n  // Handle transform feedback and uniform block queries in WebGL1\n  getProgramParameter: (gl, originalFunc, program, pname) => {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case GL.TRANSFORM_FEEDBACK_BUFFER_MODE:\n          return GL.SEPARATE_ATTRIBS;\n        case GL.TRANSFORM_FEEDBACK_VARYINGS:\n          return 0;\n        case GL.ACTIVE_UNIFORM_BLOCKS:\n          return 0;\n        default:\n      }\n    }\n    return originalFunc(program, pname);\n  },\n  getInternalformatParameter: (gl, originalFunc, target, format, pname) => {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case GL.SAMPLES:\n          return new Int32Array([0]);\n        default:\n      }\n    }\n    return gl.getInternalformatParameter(target, format, pname);\n  },\n  getTexParameter(gl, originalFunc, target, pname) {\n    switch (pname) {\n      case GL.TEXTURE_MAX_ANISOTROPY_EXT:\n        const {extensions} = gl.luma;\n        const ext = extensions[EXT_texture_filter_anisotropic];\n        pname = (ext && ext.TEXTURE_MAX_ANISOTROPY_EXT) || GL.TEXTURE_MAX_ANISOTROPY_EXT;\n        break;\n      default:\n    }\n    return originalFunc(target, pname);\n  },\n  getParameter: getParameterPolyfill,\n  hint(gl, originalFunc, pname, value) {\n    // TODO - handle GL.FRAGMENT_SHADER_DERIVATIVE_HINT:\n    // switch (pname) {\n    // case GL.FRAGMENT_SHADER_DERIVATIVE_HINT:\n    // }\n    return originalFunc(pname, value);\n  }\n};\n","import {pushContextState, popContextState} from './track-context-state';\nimport {setParameters} from '../unified-parameter-api/set-parameters';\nimport {assert, isObjectEmpty} from '../utils';\n\n// Stores current \"global\" WebGL context settings, changes selected parameters,\n// executes function, restores parameters\nexport function withParameters(gl, parameters, func) {\n  // assertWebGLContext(gl);\n\n  if (isObjectEmpty(parameters)) {\n    // Avoid setting state if no parameters provided. Just call and return\n    return func(gl);\n  }\n\n  const {nocatch = true} = parameters;\n\n  // frameBuffer not supported: use framebuffer API\n  // TODO - is this still true?\n  assert(!parameters.frameBuffer);\n\n  pushContextState(gl);\n  setParameters(gl, parameters);\n\n  // Setup is done, call the function\n  let value;\n\n  if (nocatch) {\n    // Avoid try catch to minimize stack size impact for safe execution paths\n    value = func(gl);\n    popContextState(gl);\n  } else {\n    // Wrap in a try-catch to ensure that parameters are restored on exceptions\n    try {\n      value = func(gl);\n    } finally {\n      popContextState(gl);\n    }\n  }\n\n  return value;\n}\n","// Returns true if given object is empty, false otherwise.\nexport function isObjectEmpty(object) {\n  for (const key in object) {\n    return false;\n  }\n  return true;\n}\n\n// Returns true if WebGL2 context (Heuristic)\nexport function isWebGL2(gl) {\n  return Boolean(gl && gl._version === 2);\n}\n","// Avoid bundling assert polyfill module\nexport default function assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'luma.gl: assertion failed.');\n  }\n}\n","/* Use as\nimport {checkProps} from '../util/check-props;'\n\nconst PROP_CHECKS = {\n  // Removed props no longer supported, print error and link to upgrade guide\n  removedProps: {\n  },\n  // Deprecated props\n  deprecatedProps: {\n    offset: 'accessor',\n    stride: 'accessor',\n    type: 'accessor',\n    size: 'accessor',\n    divisor: 'accessor',\n    normalized: 'accessor',\n    integer: 'accessor'\n  },\n  // Deprecated props that can be autosubstituted, print warning and return updated props object\n  replacedProps: {\n    bytes: 'byteLength'\n  }\n}\n\nclass Buffer {\n  setProps(props) {\n    checkProps('Buffer', props, PROP_CHECKS);\n  }\n}\n*/\nimport log from './log';\n\nexport function checkProps(className, props, propChecks) {\n  const {removedProps = {}, deprecatedProps = {}, replacedProps = {}} = propChecks;\n\n  // removedProps: Removed props no longer supported\n  // print error and link to upgrade guide\n  for (const propName in removedProps) {\n    if (propName in props) {\n      const replacementProp = removedProps[propName];\n      const replacement = replacementProp ? `${className}.${removedProps[propName]}` : 'N/A';\n      log.removed(`${className}.${propName}`, replacement)();\n    }\n  }\n\n  // deprecatedProps: Deprecated props that can not be autosubstituted\n  // print warning and rely on caller to substitute\n  for (const propName in deprecatedProps) {\n    if (propName in props) {\n      const replacementProp = deprecatedProps[propName];\n      log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();\n    }\n  }\n\n  // replacedProps: Deprecated props that can be autosubstituted\n  // print warning and return updated props object\n  let newProps = null;\n  for (const propName in replacedProps) {\n    if (propName in props) {\n      const replacementProp = replacedProps[propName];\n      log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();\n      newProps = newProps || Object.assign({}, props);\n      newProps[replacementProp] = props[propName];\n      delete newProps[propName];\n    }\n  }\n\n  return newProps || props;\n}\n","// import {WebGLRenderingContext, WebGL2RenderingContext} from './webgl-types';\nimport {assert} from '../utils';\n\n// Heuristic testing of contexts (to indentify debug wrappers around gl contexts)\n// const GL_ARRAY_BUFFER = 0x8892;\n\nexport const ERR_CONTEXT = 'Invalid WebGLRenderingContext';\nexport const ERR_WEBGL = ERR_CONTEXT;\nexport const ERR_WEBGL2 = 'Requires WebGL2';\n\nexport function isWebGL(gl) {\n  return Boolean(gl && Number.isFinite(gl._version));\n}\n\nexport function isWebGL2(gl) {\n  return Boolean(gl && gl._version === 2);\n}\n\nexport function assertWebGLContext(gl) {\n  // Need to handle debug context\n  assert(isWebGL(gl), ERR_CONTEXT);\n}\n\nexport function assertWebGL2Context(gl) {\n  // Need to handle debug context\n  assert(isWebGL2(gl), ERR_WEBGL2);\n}\n","import assert from './assert';\n\nconst uidCounters = {};\n\n/**\n * Returns a UID.\n * @param {String} id= - Identifier base name\n * @return {number} uid\n **/\nexport function uid(id = 'id') {\n  uidCounters[id] = uidCounters[id] || 1;\n  const count = uidCounters[id]++;\n  return `${id}-${count}`;\n}\n\n/**\n * Verifies if a given number is power of two or not.\n * @param {object} n - The number to check.\n * @return {Array} Returns true if the given number is power of 2, false otherwise.\n **/\nexport function isPowerOfTwo(n) {\n  assert(typeof n === 'number', 'Input must be a number');\n  return n && (n & (n - 1)) === 0;\n}\n\n// Returns true if given object is empty, false otherwise.\nexport function isObjectEmpty(obj) {\n  let isEmpty = true;\n  /* eslint-disable no-unused-vars  */\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n  /* eslint-enable no-unused-vars  */\n  return isEmpty;\n}\n","import {assert} from '../utils';\n\n// Resolve a WebGL enumeration name (returns itself if already a number)\nexport function getKeyValue(gl, name) {\n  // If not a string, return (assume number)\n  if (typeof name !== 'string') {\n    return name;\n  }\n\n  // If string converts to number, return number\n  const number = Number(name);\n  if (!isNaN(number)) {\n    return number;\n  }\n\n  // Look up string, after removing any 'GL.' or 'gl.' prefix\n  name = name.replace(/^.*\\./, '');\n  const value = gl[name];\n  assert(value !== undefined, `Accessing undefined constant GL.${name}`);\n  return value;\n}\n\nexport function getKey(gl, value) {\n  value = Number(value);\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return `GL.${key}`;\n    }\n  }\n  return String(value);\n}\n\nexport function getKeyType(gl, value) {\n  assert(value !== undefined, 'undefined key');\n  value = Number(value);\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return `GL.${key}`;\n    }\n  }\n  return String(value);\n}\n","import log from './log';\n\n// Install stubs for removed methods\nexport function stubRemovedMethods(instance, className, version, methodNames) {\n  const upgradeMessage = `See luma.gl ${version} Upgrade Guide at \\\nhttp://uber.github.io/luma.gl/#/documentation/overview/upgrade-guide`;\n\n  const prototype = Object.getPrototypeOf(instance);\n\n  methodNames.forEach(methodName => {\n    if (prototype.methodName) {\n      return;\n    }\n\n    prototype[methodName] = () => {\n      log.removed(`Calling removed method ${className}.${methodName}: `, upgradeMessage)();\n      throw new Error(methodName);\n    };\n  });\n}\n","// WebGL2 Query (also handles disjoint timer extensions)\n/* global requestAnimationFrame */\nimport Resource from './resource';\nimport {FEATURES, hasFeatures} from '../features';\nimport {isWebGL2} from '../webgl-utils';\nimport {assert} from '../utils';\n\nconst GL_QUERY_RESULT = 0x8866; // Returns a GLuint containing the query result.\nconst GL_QUERY_RESULT_AVAILABLE = 0x8867; // whether query result is available.\n\nconst GL_TIME_ELAPSED_EXT = 0x88bf; // Elapsed time (in nanoseconds).\nconst GL_GPU_DISJOINT_EXT = 0x8fbb; // Whether GPU performed any disjoint operation.\n\nconst GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8c88; // #primitives written to feedback buffers\nconst GL_ANY_SAMPLES_PASSED = 0x8c2f; // Occlusion query (if drawing passed depth test)\nconst GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8d6a; // Occlusion query less accurate/faster version\n\nexport default class Query extends Resource {\n  // Returns true if Query is supported by the WebGL implementation\n  // Can also check whether timestamp queries are available.\n  static isSupported(gl, opts = []) {\n    const webgl2 = isWebGL2(gl);\n\n    // Initial value\n    const hasTimerQuery = hasFeatures(gl, FEATURES.TIMER_QUERY);\n    let supported = webgl2 || hasTimerQuery;\n\n    for (const key of opts) {\n      switch (key) {\n        case 'queries':\n          supported = supported && webgl2;\n          break;\n        case 'timers':\n          supported = supported && hasTimerQuery;\n          break;\n        default:\n          assert(false);\n      }\n    }\n\n    return supported;\n  }\n\n  // Create a query class\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    this.target = null;\n    this._queryPending = false;\n    this._pollingPromise = null;\n\n    Object.seal(this);\n  }\n\n  // Shortcut for timer query (dependent on extension in both WebGL1 and 2)\n  // Measures GPU time delta between this call and a matching `end` call in the\n  // GPU instruction stream.\n  beginTimeElapsedQuery() {\n    return this.begin(GL_TIME_ELAPSED_EXT);\n  }\n\n  // Shortcut for occlusion queries\n  beginOcclusionQuery({conservative = false} = {}) {\n    return this.begin(conservative ? GL_ANY_SAMPLES_PASSED_CONSERVATIVE : GL_ANY_SAMPLES_PASSED);\n  }\n\n  // Shortcut for transformFeedbackQuery\n  beginTransformFeedbackQuery() {\n    return this.begin(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);\n  }\n\n  // Due to OpenGL API limitations, after calling `begin()` on one Query\n  // instance, `end()` must be called on that same instance before\n  // calling `begin()` on another query. While there can be multiple\n  // outstanding queries representing disjoint `begin()`/`end()` intervals.\n  // It is not possible to interleave or overlap `begin` and `end` calls.\n  begin(target) {\n    // Don't start a new query if one is already active.\n    if (this._queryPending) {\n      return this;\n    }\n\n    this.target = target;\n    this.gl.beginQuery(this.target, this.handle);\n\n    return this;\n  }\n\n  // ends the current query\n  end() {\n    // Can't end a new query if the last one hasn't been resolved.\n    if (this._queryPending) {\n      return this;\n    }\n\n    if (this.target) {\n      this.gl.endQuery(this.target);\n      this.target = null;\n      this._queryPending = true;\n    }\n    return this;\n  }\n\n  // Returns true if the query result is available\n  isResultAvailable() {\n    if (!this._queryPending) {\n      return false;\n    }\n\n    const resultAvailable = this.gl.getQueryParameter(this.handle, GL_QUERY_RESULT_AVAILABLE);\n    if (resultAvailable) {\n      this._queryPending = false;\n    }\n    return resultAvailable;\n  }\n\n  // Timing query is disjoint, i.e. results are invalid\n  isTimerDisjoint() {\n    return this.gl.getParameter(GL_GPU_DISJOINT_EXT);\n  }\n\n  // Returns query result.\n  getResult() {\n    return this.gl.getQueryParameter(this.handle, GL_QUERY_RESULT);\n  }\n\n  // Returns the query result, converted to milliseconds to match JavaScript conventions.\n  getTimerMilliseconds() {\n    return this.getResult() / 1e6;\n  }\n\n  // Polls the query\n  createPoll(limit = Number.POSITIVE_INFINITY) {\n    if (this._pollingPromise) {\n      return this._pollingPromise;\n    }\n\n    let counter = 0;\n\n    this._pollingPromise = new Promise((resolve, reject) => {\n      const poll = () => {\n        if (this.isResultAvailable()) {\n          resolve(this.getResult());\n          this._pollingPromise = null;\n        } else if (counter++ > limit) {\n          reject('Timed out');\n          this._pollingPromise = null;\n        } else {\n          requestAnimationFrame(poll);\n        }\n      };\n\n      requestAnimationFrame(poll);\n    });\n\n    return this._pollingPromise;\n  }\n\n  _createHandle() {\n    return Query.isSupported(this.gl) ? this.gl.createQuery() : null;\n  }\n\n  _deleteHandle() {\n    this.gl.deleteQuery(this.handle);\n  }\n}\n","// Feature detection for WebGL\n//\n// Provides a function that enables simple checking of which WebGL features are\n// available in an WebGL1 or WebGL2 environment.\n\nimport WEBGL_FEATURES from './webgl-features-table';\nimport {isWebGL2} from '../webgl-utils';\nimport {assert} from '../utils';\n\n// Check one feature\nexport function hasFeature(gl, feature) {\n  return hasFeatures(gl, feature);\n}\n\n// Check one or more features\nexport function hasFeatures(gl, features) {\n  features = Array.isArray(features) ? features : [features];\n  return features.every(feature => {\n    return isFeatureSupported(gl, feature);\n  });\n}\n\n// Return a list of supported features\nexport function getFeatures(gl) {\n  gl.luma = gl.luma || {};\n  if (!gl.luma.caps) {\n    gl.luma.caps = {};\n    gl.luma.caps.webgl2 = isWebGL2(gl);\n    for (const cap in WEBGL_FEATURES) {\n      gl.luma.caps[cap] = isFeatureSupported(gl, cap);\n    }\n  }\n  return gl.luma.caps;\n}\n\n// TODO - cache the value\nfunction isFeatureSupported(gl, cap) {\n  const feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n\n  // Get extension name from table\n  const featureDefinition = isWebGL2(gl) ? feature[1] || feature[0] : feature[0];\n\n  let isSupported;\n\n  // Check if the value is dependent on checking one or more extensions\n  if (typeof featureDefinition === 'function') {\n    isSupported = featureDefinition(gl);\n  } else if (Array.isArray(featureDefinition)) {\n    isSupported = true;\n    for (const extension of featureDefinition) {\n      isSupported = isSupported && Boolean(gl.getExtension(extension));\n    }\n  } else if (typeof featureDefinition === 'string') {\n    isSupported = Boolean(gl.getExtension(featureDefinition));\n  } else if (typeof featureDefinition === 'boolean') {\n    isSupported = featureDefinition;\n  } else {\n    assert(false);\n  }\n\n  return isSupported;\n}\n","import {headlessGL} from '../webgl-utils/webgl-types';\n\nconst ERR_HEADLESSGL_NOT_AVAILABLE =\n  'Failed to create WebGL context in Node.js, headless gl not available';\n\nconst ERR_HEADLESSGL_FAILED =\n  'Failed to create WebGL context in Node.js, headless gl returned null';\n\n// Create headless gl context (for running under Node.js)\nexport function createHeadlessContext(options) {\n  const {width, height, webgl1, webgl2, onError} = options;\n  if (webgl2 && !webgl1) {\n    return onError('headless-gl does not support WebGL2');\n  }\n  if (!headlessGL) {\n    return onError(ERR_HEADLESSGL_NOT_AVAILABLE);\n  }\n  const gl = headlessGL(width, height, options);\n  if (!gl) {\n    return onError(ERR_HEADLESSGL_FAILED);\n  }\n  return gl;\n}\n","// Resizing a webgl canvas\n\n/* global window, document */\nimport {isBrowser} from '../utils';\n\nconst isPage = isBrowser && typeof document !== 'undefined';\nlet isPageLoaded = isPage && document.readyState === 'complete';\n\nlet pageLoadPromise;\n\n/**\n * Returns a promise that resolves when the page is loaded\n * at this point the DOM can be manipulated, and e.g. a new canvas can be inserted\n * @return {Promise} - resolves when the page is loaded\n */\nexport function getPageLoadPromise() {\n  if (!pageLoadPromise) {\n    pageLoadPromise = isPage\n      ? new Promise((resolve, reject) => {\n          if (isPage && document.readyState === 'complete') {\n            isPageLoaded = true;\n            resolve(document);\n            return;\n          }\n          window.onload = () => {\n            isPageLoaded = true;\n            resolve(document);\n          };\n        })\n      : Promise.resolve({});\n  }\n  return pageLoadPromise;\n}\n\n/**\n * Create a canvas\n * @param {Number} width - set to 100%\n * @param {Number} height - set to 100%\n */\nexport function createCanvas({width = 800, height = 600, id = 'gl-canvas', insert = true}) {\n  const canvas = document.createElement('canvas');\n  canvas.id = id;\n  canvas.style.width = Number.isFinite(width) ? `${width}px` : '100%';\n  canvas.style.height = Number.isFinite(height) ? `${height}px` : '100%';\n  // add the canvas to the body element once the page has loaded\n  if (insert) {\n    const body = document.body;\n    body.insertBefore(canvas, body.firstChild);\n    // getPageLoadPromise().then(document => {});\n  }\n  return canvas;\n}\n\nexport function getCanvas({canvas, width, height, onError = () => {}}) {\n  let targetCanvas;\n  if (typeof canvas === 'string') {\n    if (!isPageLoaded) {\n      onError(`createGLContext called on canvas '${canvas}' before page was loaded`);\n    }\n    targetCanvas = document.getElementById(canvas);\n  } else if (canvas) {\n    targetCanvas = canvas;\n  } else {\n    targetCanvas = createCanvas({id: 'lumagl-canvas', width, height, onError});\n  }\n\n  return targetCanvas;\n}\n","/* eslint-disable quotes */\n// WebGLRenderingContext related methods\nimport {trackContextState} from '@luma.gl/webgl-state-tracker';\n\nimport {createHeadlessContext} from './create-headless-context';\nimport {getCanvas} from './create-canvas';\nimport {createBrowserContext} from './create-browser-context';\nimport {getContextDebugInfo} from '../debug/get-context-debug-info';\n\nimport {WebGL2RenderingContext} from '../webgl-utils';\n\nimport {log, isBrowser, assert} from '../utils';\nimport {global} from '../utils/globals';\n\nexport const ERR_CONTEXT = 'Invalid WebGLRenderingContext';\nexport const ERR_WEBGL = ERR_CONTEXT;\nexport const ERR_WEBGL2 = 'Requires WebGL2';\n\nexport function isWebGL(gl) {\n  return Boolean(gl && Number.isFinite(gl._version));\n}\n\nexport function isWebGL2(gl) {\n  return Boolean(gl && gl._version === 2);\n}\n\nexport function assertWebGLContext(gl) {\n  // Need to handle debug context\n  assert(isWebGL(gl), ERR_CONTEXT);\n}\n\nexport function assertWebGL2Context(gl) {\n  // Need to handle debug context\n  assert(isWebGL2(gl), ERR_WEBGL2);\n}\n\nconst contextDefaults = {\n  // COMMON CONTEXT PARAMETERS\n  // Attempt to allocate WebGL2 context\n  webgl2: true, // Attempt to create a WebGL2 context (false to force webgl1)\n  webgl1: true, // Attempt to create a WebGL1 context (false to fail if webgl2 not available)\n  throwOnFailure: true,\n  manageState: true,\n  // BROWSER CONTEXT PARAMETERS\n  canvas: null, // A canvas element or a canvas string id\n  debug: false, // Instrument context (at the expense of performance)\n  // HEADLESS CONTEXT PARAMETERS\n  width: 800, // width are height are only used by headless gl\n  height: 600\n  // WEBGL/HEADLESS CONTEXT PARAMETERS\n  // Remaining options are passed through to context creator\n};\n\n/*\n * Change default context creation parameters.\n * Main use case is regression test suite.\n */\nexport function setGLContextDefaults(options = {}) {\n  Object.assign(contextDefaults, {width: 1, height: 1}, options);\n}\n\n/*\n * Creates a context giving access to the WebGL API\n */\n/* eslint-disable complexity, max-statements */\nexport function createGLContext(options = {}) {\n  options = Object.assign({}, contextDefaults, options);\n  const {width, height} = options;\n\n  // Error reporting function, enables exceptions to be disabled\n  function onError(message) {\n    if (options.throwOnError) {\n      throw new Error(message);\n    }\n    return null;\n  }\n\n  let gl;\n  if (isBrowser) {\n    // Get or create a canvas\n    const {canvas} = options;\n    const targetCanvas = getCanvas({canvas, width, height, onError});\n    // Create a WebGL context in the canvas\n    gl = createBrowserContext(targetCanvas, options);\n  } else {\n    // Create a headless-gl context under Node.js\n    gl = createHeadlessContext({...options, width, height, onError});\n  }\n\n  if (!gl) {\n    return null;\n  }\n\n  gl = instrumentGLContext(gl, options);\n\n  // Log some debug info about the newly created context\n  logInfo(gl);\n\n  // Add to seer integration\n  return gl;\n}\n\nexport function instrumentGLContext(gl, options = {}) {\n  // Avoid multiple instrumentations\n  if (gl._instrumented) {\n    return gl;\n  }\n\n  gl._version = gl._version || getVersion(gl);\n\n  options = Object.assign({}, contextDefaults, options);\n  const {manageState, debug} = options;\n\n  // Install context state tracking\n  if (manageState) {\n    trackContextState(gl, {\n      copyState: false,\n      log: (...args) => log.log(1, ...args)()\n    });\n  }\n\n  // Add debug instrumentation to the context\n  if (isBrowser && debug) {\n    if (!global.makeDebugContext) {\n      log.warn('WebGL debug mode not activated. import \"@luma.gl/debug\" to enable.')();\n    } else {\n      gl = global.makeDebugContext(gl, options);\n      // Debug forces log level to at least 1\n      log.priority = Math.max(log.priority, 1);\n    }\n  }\n\n  gl._instrumented = true;\n\n  return gl;\n}\n\nexport function destroyGLContext(gl) {\n  // TODO - Remove from seer integration\n\n  // TODO - Unregister any tracking/polyfills\n\n  // There is no way to delete browser based context\n\n  // Destroy headless gl context\n  const ext = gl.getExtension('STACKGL_destroy_context');\n  if (ext) {\n    ext.destroy();\n  }\n}\n\n/**\n * Resize the canvas' drawing buffer.\n *\n * Can match the canvas CSS size, and optionally also consider devicePixelRatio\n * Can be called every frame\n *\n * Regardless of size, the drawing buffer will always be scaled to the viewport, but\n * for best visual results, usually set to either:\n *  canvas CSS width x canvas CSS height\n *  canvas CSS width * devicePixelRatio x canvas CSS height * devicePixelRatio\n * See http://webgl2fundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html\n *\n * resizeGLContext(gl, {width, height, useDevicePixels})\n */\nexport function resizeGLContext(gl, options = {}) {\n  // Resize browser context\n  if (gl.canvas) {\n    /* global window */\n    const devicePixelRatio = options.useDevicePixels ? window.devicePixelRatio || 1 : 1;\n\n    const width = `width` in options ? options.width : gl.canvas.clientWidth;\n    const height = `height` in options ? options.height : gl.canvas.clientHeight;\n\n    gl.canvas.width = width * devicePixelRatio;\n    gl.canvas.height = height * devicePixelRatio;\n\n    return;\n  }\n\n  // Resize headless gl context\n  const ext = gl.getExtension('STACKGL_resize_drawingbuffer');\n  if (ext && `width` in options && `height` in options) {\n    ext.resize(options.width, options.height);\n  }\n}\n\n// HELPER METHODS\n\nfunction logInfo(gl) {\n  const webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';\n  const info = getContextDebugInfo(gl);\n  const driver = info ? `(${info.vendor},${info.renderer})` : '';\n  const debug = gl.debug ? ' debug' : '';\n  log.once(1, `${webGL}${debug} context ${driver}`)();\n}\n\nfunction getVersion(gl) {\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    // WebGL2 context.\n    return 2;\n  }\n  // Must be a WebGL1 context.\n  return 1;\n}\n","/**\n * Create a WebGL context for a canvas\n * Note calling this multiple time on the same canvas does return the same context\n */\nexport function createBrowserContext(canvas, options) {\n  const {onError = message => null} = options;\n\n  // Try to extract any extra information about why context creation failed\n  const onCreateError = error => onError(`WebGL context: ${error.statusMessage || 'error'}`);\n  canvas.addEventListener('webglcontextcreationerror', onCreateError, false);\n\n  const {webgl1 = true, webgl2 = true} = options;\n  let gl = null;\n  // Prefer webgl2 over webgl1, prefer conformant over experimental\n  if (webgl2) {\n    gl = gl || canvas.getContext('webgl2', options);\n    gl = gl || canvas.getContext('experimental-webgl2', options);\n  }\n  if (webgl1) {\n    gl = gl || canvas.getContext('webgl', options);\n    gl = gl || canvas.getContext('experimental-webgl', options);\n  }\n\n  canvas.removeEventListener('webglcontextcreationerror', onCreateError, false);\n\n  if (!gl) {\n    return onError(`Failed to create ${webgl2 && !webgl1 ? 'WebGL2' : 'WebGL'} context`);\n  }\n\n  return gl;\n}\n","import GL from '@luma.gl/constants';\n\n/**\n * Provides strings identifying the GPU vendor and driver.\n * https://www.khronos.org/registry/webgl/extensions/WEBGL_debug_renderer_info/\n * @param {WebGLRenderingContext} gl - context\n * @return {Object} - 'vendor' and 'renderer' string fields.\n */\nexport function getContextDebugInfo(gl) {\n  const vendorMasked = gl.getParameter(GL.VENDOR);\n  const rendererMasked = gl.getParameter(GL.RENDERER);\n  const ext = gl.getExtension('WEBGL_debug_renderer_info');\n  const vendorUnmasked = ext && gl.getParameter(ext.UNMASKED_VENDOR_WEBGL || GL.VENDOR);\n  const rendererUnmasked = ext && gl.getParameter(ext.UNMASKED_RENDERER_WEBGL || GL.RENDERER);\n  return {\n    vendor: vendorUnmasked || vendorMasked,\n    renderer: rendererUnmasked || rendererMasked,\n    vendorMasked,\n    rendererMasked,\n    version: gl.getParameter(GL.VERSION),\n    shadingLanguageVersion: gl.getParameter(GL.SHADING_LANGUAGE_VERSION)\n  };\n}\n","// Node.js polyfills for requestAnimationFrame and cancelAnimationFrame\n/* global window, setTimeout, clearTimeout */\n\nexport function requestAnimationFrame(callback) {\n  return typeof window !== 'undefined' && window.requestAnimationFrame\n    ? window.requestAnimationFrame(callback)\n    : setTimeout(callback, 1000 / 60);\n}\n\nexport function cancelAnimationFrame(timerId) {\n  return typeof window !== 'undefined' && window.cancelAnimationFrame\n    ? window.cancelAnimationFrame(timerId)\n    : clearTimeout(timerId);\n}\n","/* global OffscreenCanvas */\nimport {\n  isWebGL,\n  createGLContext,\n  instrumentGLContext,\n  resizeGLContext,\n  resetParameters,\n  requestAnimationFrame,\n  cancelAnimationFrame,\n  getPageLoadPromise,\n  Query,\n  lumaStats,\n  // TODO - remove dependency on framebuffer (bundle size impact)\n  Framebuffer\n} from '@luma.gl/webgl';\n\nimport {log, assert} from '../utils';\n\nlet statIdCounter = 0;\n\nexport default class AnimationLoop {\n  /*\n   * @param {HTMLCanvasElement} canvas - if provided, width and height will be passed to context\n   */\n  constructor(props = {}) {\n    const {\n      onCreateContext = opts => createGLContext(opts),\n      onAddHTML = null,\n      onInitialize = () => {},\n      onRender = () => {},\n      onFinalize = () => {},\n\n      gl = null,\n      glOptions = {},\n      debug = false,\n\n      createFramebuffer = false,\n\n      // view parameters\n      autoResizeViewport = true,\n      autoResizeDrawingBuffer = true,\n      stats = lumaStats.get(`animation-loop-${statIdCounter++}`)\n    } = props;\n\n    let {useDevicePixels = true} = props;\n\n    if ('useDevicePixelRatio' in props) {\n      log.deprecated('useDevicePixelRatio', 'useDevicePixels')();\n      useDevicePixels = props.useDevicePixelRatio;\n    }\n\n    this.props = {\n      onCreateContext,\n      onAddHTML,\n      onInitialize,\n      onRender,\n      onFinalize,\n\n      gl,\n      glOptions,\n      debug,\n      createFramebuffer\n    };\n\n    // state\n    this.gl = gl;\n    this.needsRedraw = null;\n    this.timeline = null;\n    this.stats = stats;\n    this.cpuTime = this.stats.get('CPU Time');\n    this.gpuTime = this.stats.get('GPU Time');\n    this.frameRate = this.stats.get('Frame Rate');\n\n    this._initialized = false;\n    this._running = false;\n    this._animationFrameId = null;\n    this._nextFramePromise = null;\n    this._resolveNextFrame = null;\n    this._cpuStartTime = 0;\n\n    this.setProps({\n      autoResizeViewport,\n      autoResizeDrawingBuffer,\n      useDevicePixels\n    });\n\n    // Bind methods\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n\n    this._onMousemove = this._onMousemove.bind(this);\n    this._onMouseleave = this._onMouseleave.bind(this);\n  }\n\n  delete() {\n    this.stop();\n    this._setDisplay(null);\n  }\n\n  setNeedsRedraw(reason) {\n    assert(typeof reason === 'string');\n    this.needsRedraw = this.needsRedraw || reason;\n    return this;\n  }\n\n  setProps(props) {\n    if ('autoResizeViewport' in props) {\n      this.autoResizeViewport = props.autoResizeViewport;\n    }\n    if ('autoResizeDrawingBuffer' in props) {\n      this.autoResizeDrawingBuffer = props.autoResizeDrawingBuffer;\n    }\n    if ('useDevicePixels' in props) {\n      this.useDevicePixels = props.useDevicePixels;\n    }\n    return this;\n  }\n\n  // Starts a render loop if not already running\n  // @param {Object} context - contains frame specific info (E.g. tick, width, height, etc)\n  start(opts = {}) {\n    if (this._running) {\n      return this;\n    }\n    this._running = true;\n    // console.debug(`Starting ${this.constructor.name}`);\n    // Wait for start promise before rendering frame\n    getPageLoadPromise()\n      .then(() => {\n        if (!this._running || this._initialized) {\n          return null;\n        }\n\n        // Create the WebGL context\n        this._createWebGLContext(opts);\n        this._createFramebuffer();\n        this._startEventHandling();\n\n        // Initialize the callback data\n        this._initializeCallbackData();\n        this._updateCallbackData();\n\n        // Default viewport setup, in case onInitialize wants to render\n        this._resizeCanvasDrawingBuffer();\n        this._resizeViewport();\n\n        this._gpuTimeQuery = Query.isSupported(this.gl, ['timers']) ? new Query(this.gl) : null;\n\n        this._initialized = true;\n\n        // Note: onIntialize can return a promise (in case it needs to load resources)\n        return this.onInitialize(this.animationProps);\n      })\n      .then(appContext => {\n        if (this._running) {\n          this._addCallbackData(appContext || {});\n          if (appContext !== false) {\n            this._startLoop();\n          }\n        }\n      });\n    return this;\n  }\n\n  // Redraw now\n  redraw() {\n    this._beginTimers();\n\n    this._setupFrame();\n    this._updateCallbackData();\n\n    this._renderFrame(this.animationProps);\n\n    // clear needsRedraw flag\n    this._clearNeedsRedraw();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/commit\n    // Chrome's offscreen canvas does not require gl.commit\n    if (this.offScreen && this.gl.commit) {\n      this.gl.commit();\n    }\n\n    if (this._resolveNextFrame) {\n      this._resolveNextFrame(this);\n      this._nextFramePromise = null;\n      this._resolveNextFrame = null;\n    }\n\n    this._endTimers();\n\n    return this;\n  }\n\n  // Stops a render loop if already running, finalizing\n  stop() {\n    // console.debug(`Stopping ${this.constructor.name}`);\n    if (this._running) {\n      this._finalizeCallbackData();\n      cancelAnimationFrame(this._animationFrameId);\n      this._nextFramePromise = null;\n      this._resolveNextFrame = null;\n      this._animationFrameId = null;\n      this._running = false;\n    }\n    return this;\n  }\n\n  attachTimeline(timeline) {\n    this.timeline = timeline;\n\n    return this.timeline;\n  }\n\n  detachTimeline() {\n    this.timeline = null;\n  }\n\n  waitForRender() {\n    this.setNeedsRedraw('waitForRender');\n\n    if (!this._nextFramePromise) {\n      this._nextFramePromise = new Promise(resolve => {\n        this._resolveNextFrame = resolve;\n      });\n    }\n    return this._nextFramePromise;\n  }\n\n  async toDataURL() {\n    this.setNeedsRedraw('toDataURL');\n\n    await this.waitForRender();\n\n    return this.gl.canvas.toDataURL();\n  }\n\n  onCreateContext(...args) {\n    return this.props.onCreateContext(...args);\n  }\n\n  onInitialize(...args) {\n    return this.props.onInitialize(...args);\n  }\n\n  onRender(...args) {\n    return this.props.onRender(...args);\n  }\n\n  onFinalize(...args) {\n    return this.props.onFinalize(...args);\n  }\n\n  // DEPRECATED/REMOVED METHODS\n\n  getHTMLControlValue(id, defaultValue = 1) {\n    const element = document.getElementById(id);\n    return element ? Number(element.value) : defaultValue;\n  }\n\n  // Update parameters\n  setViewParameters() {\n    log.removed('AnimationLoop.setViewParameters', 'AnimationLoop.setProps')();\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _startLoop() {\n    const renderFrame = () => {\n      if (!this._running) {\n        return;\n      }\n      this.redraw();\n      this._animationFrameId = this._requestAnimationFrame(renderFrame);\n    };\n\n    // cancel any pending renders to ensure only one loop can ever run\n    cancelAnimationFrame(this._animationFrameId);\n    this._animationFrameId = this._requestAnimationFrame(renderFrame);\n  }\n\n  // PRIVATE METHODS\n\n  _setDisplay(display) {\n    if (this.display) {\n      this.display.delete();\n      this.display.animationLoop = null;\n    }\n\n    // store animation loop on the display\n    if (display) {\n      display.animationLoop = this;\n    }\n\n    this.display = display;\n  }\n\n  _requestAnimationFrame(renderFrameCallback) {\n    // E.g. VR display has a separate animation frame to sync with headset\n    if (this.display && this.display.requestAnimationFrame(renderFrameCallback)) {\n      return;\n    }\n\n    requestAnimationFrame(renderFrameCallback);\n  }\n\n  // Called on each frame, can be overridden to call onRender multiple times\n  // to support e.g. stereoscopic rendering\n  _renderFrame(...args) {\n    // Allow e.g. VR display to render multiple frames.\n    if (this.display) {\n      this.display._renderFrame(...args);\n      return;\n    }\n\n    // call callback\n    this.onRender(...args);\n    // end callback\n  }\n\n  _clearNeedsRedraw() {\n    this.needsRedraw = null;\n  }\n\n  _setupFrame() {\n    if (this._onSetupFrame) {\n      // call callback\n      this._onSetupFrame(this.animationProps);\n      // end callback\n    } else {\n      this._resizeCanvasDrawingBuffer();\n      this._resizeViewport();\n      this._resizeFramebuffer();\n    }\n  }\n\n  // Initialize the  object that will be passed to app callbacks\n  _initializeCallbackData() {\n    this.animationProps = {\n      gl: this.gl,\n\n      stop: this.stop,\n      canvas: this.gl.canvas,\n      framebuffer: this.framebuffer,\n\n      // Initial values\n      useDevicePixels: this.useDevicePixels,\n      needsRedraw: null,\n\n      // Animation props\n      startTime: Date.now(),\n      engineTime: 0,\n      tick: 0,\n      tock: 0,\n\n      // Timeline time for back compatibility\n      time: 0,\n\n      // Experimental\n      _timeline: this.timeline,\n      _loop: this,\n      _animationLoop: this,\n      _mousePosition: null // Event props\n    };\n  }\n\n  // Update the context object that will be passed to app callbacks\n  _updateCallbackData() {\n    const {width, height, aspect} = this._getSizeAndAspect();\n    if (width !== this.animationProps.width || height !== this.animationProps.height) {\n      this.setNeedsRedraw('drawing buffer resized');\n    }\n    if (aspect !== this.animationProps.aspect) {\n      this.setNeedsRedraw('drawing buffer aspect changed');\n    }\n\n    this.animationProps.width = width;\n    this.animationProps.height = height;\n    this.animationProps.aspect = aspect;\n\n    this.animationProps.needsRedraw = this.needsRedraw;\n\n    // Update time properties\n    this.animationProps.engineTime = Date.now() - this.animationProps.startTime;\n\n    if (this.timeline) {\n      this.timeline.update(this.animationProps.engineTime);\n    }\n\n    this.animationProps.tick = Math.floor((this.animationProps.time / 1000) * 60);\n    this.animationProps.tock++;\n\n    // For back compatibility\n    this.animationProps.time = this.timeline\n      ? this.timeline.getTime()\n      : this.animationProps.engineTime;\n\n    // experimental\n    this.animationProps._offScreen = this.offScreen;\n  }\n\n  _finalizeCallbackData() {\n    // call callback\n    this.onFinalize(this.animationProps);\n    // end callback\n  }\n\n  // Add application's data to the app context object\n  _addCallbackData(appContext) {\n    if (typeof appContext === 'object' && appContext !== null) {\n      this.animationProps = Object.assign({}, this.animationProps, appContext);\n    }\n  }\n\n  // Either uses supplied or existing context, or calls provided callback to create one\n  _createWebGLContext(opts) {\n    this.offScreen =\n      opts.canvas &&\n      typeof OffscreenCanvas !== 'undefined' &&\n      opts.canvas instanceof OffscreenCanvas;\n\n    // Create the WebGL context if necessary\n    opts = Object.assign({}, opts, this.props.glOptions);\n    this.gl = this.props.gl ? instrumentGLContext(this.props.gl, opts) : this.onCreateContext(opts);\n\n    if (!isWebGL(this.gl)) {\n      throw new Error('AnimationLoop.onCreateContext - illegal context returned');\n    }\n\n    // Reset the WebGL context.\n    resetParameters(this.gl);\n\n    this._createInfoDiv();\n  }\n\n  _createInfoDiv() {\n    if (this.gl.canvas && this.props.onAddHTML) {\n      /* global document */\n      const wrapperDiv = document.createElement('div');\n      document.body.appendChild(wrapperDiv);\n      wrapperDiv.style.position = 'relative';\n      const div = document.createElement('div');\n      div.style.position = 'absolute';\n      div.style.left = '10px';\n      div.style.bottom = '10px';\n      div.style.width = '300px';\n      div.style.background = 'white';\n      wrapperDiv.appendChild(this.gl.canvas);\n      wrapperDiv.appendChild(div);\n      const html = this.props.onAddHTML(div);\n      if (html) {\n        div.innerHTML = html;\n      }\n    }\n  }\n\n  _getSizeAndAspect() {\n    // https://webglfundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html\n    const width = this.gl.drawingBufferWidth;\n    const height = this.gl.drawingBufferHeight;\n\n    // https://webglfundamentals.org/webgl/lessons/webgl-anti-patterns.html\n    let aspect = 1;\n    const {canvas} = this.gl;\n\n    if (canvas && canvas.clientHeight) {\n      aspect = canvas.clientWidth / canvas.clientHeight;\n    } else if (width > 0 && height > 0) {\n      aspect = width / height;\n    }\n\n    return {width, height, aspect};\n  }\n\n  // Default viewport setup\n  _resizeViewport() {\n    if (this.autoResizeViewport) {\n      this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n    }\n  }\n\n  // Resize the render buffer of the canvas to match canvas client size\n  // Optionally multiplying with devicePixel ratio\n  _resizeCanvasDrawingBuffer() {\n    if (this.autoResizeDrawingBuffer) {\n      resizeGLContext(this.gl, {useDevicePixels: this.useDevicePixels});\n    }\n  }\n\n  // TBD - deprecated?\n  _createFramebuffer() {\n    // Setup default framebuffer\n    if (this.props.createFramebuffer) {\n      this.framebuffer = new Framebuffer(this.gl);\n    }\n  }\n\n  _resizeFramebuffer() {\n    if (this.framebuffer) {\n      this.framebuffer.resize({\n        width: this.gl.drawingBufferWidth,\n        height: this.gl.drawingBufferHeight\n      });\n    }\n  }\n\n  _beginTimers() {\n    this.frameRate.timeEnd();\n    this.frameRate.timeStart();\n\n    // Check if timer for last frame has completed.\n    // GPU timer results are never available in the same\n    // frame they are captured.\n    if (\n      this._gpuTimeQuery &&\n      this._gpuTimeQuery.isResultAvailable() &&\n      !this._gpuTimeQuery.isTimerDisjoint()\n    ) {\n      this.stats.get('GPU Time').addTime(this._gpuTimeQuery.getTimerMilliseconds());\n    }\n\n    if (this._gpuTimeQuery) {\n      // GPU time query start\n      this._gpuTimeQuery.beginTimeElapsedQuery();\n    }\n\n    this.cpuTime.timeStart();\n  }\n\n  _endTimers() {\n    this.cpuTime.timeEnd();\n\n    if (this._gpuTimeQuery) {\n      // GPU time query end. Results will be available on next frame.\n      this._gpuTimeQuery.end();\n    }\n  }\n\n  // Event handling\n\n  _startEventHandling() {\n    const {canvas} = this.gl;\n    if (canvas) {\n      canvas.addEventListener('mousemove', this._onMousemove);\n      canvas.addEventListener('mouseleave', this._onMouseleave);\n    }\n  }\n\n  _onMousemove(e) {\n    this.animationProps._mousePosition = [e.offsetX, e.offsetY];\n  }\n  _onMouseleave(e) {\n    this.animationProps._mousePosition = null;\n  }\n}\n","import GL from '@luma.gl/constants';\nimport Framebuffer from './framebuffer';\nimport Renderbuffer from './renderbuffer';\nimport Texture from './texture';\nimport {log} from '../utils';\n\nconst UNIFORM_SETTERS = {\n  // WEBGL1\n\n  /* eslint-disable max-len */\n  [GL.FLOAT]: (gl, location, value) => gl.uniform1fv(location, toFloatArray(value, 1)),\n  [GL.FLOAT_VEC2]: (gl, location, value) => gl.uniform2fv(location, toFloatArray(value, 2)),\n  [GL.FLOAT_VEC3]: (gl, location, value) => gl.uniform3fv(location, toFloatArray(value, 3)),\n  [GL.FLOAT_VEC4]: (gl, location, value) => gl.uniform4fv(location, toFloatArray(value, 4)),\n\n  [GL.INT]: (gl, location, value) => gl.uniform1iv(location, toIntArray(value, 1)),\n  [GL.INT_VEC2]: (gl, location, value) => gl.uniform2iv(location, toIntArray(value, 2)),\n  [GL.INT_VEC3]: (gl, location, value) => gl.uniform3iv(location, toIntArray(value, 3)),\n  [GL.INT_VEC4]: (gl, location, value) => gl.uniform4iv(location, toIntArray(value, 4)),\n\n  [GL.BOOL]: (gl, location, value) => gl.uniform1iv(location, toIntArray(value, 1)),\n  [GL.BOOL_VEC2]: (gl, location, value) => gl.uniform2iv(location, toIntArray(value, 2)),\n  [GL.BOOL_VEC3]: (gl, location, value) => gl.uniform3iv(location, toIntArray(value, 3)),\n  [GL.BOOL_VEC4]: (gl, location, value) => gl.uniform4iv(location, toIntArray(value, 4)),\n\n  // uniformMatrix(false): don't transpose the matrix\n  [GL.FLOAT_MAT2]: (gl, location, value) =>\n    gl.uniformMatrix2fv(location, false, toFloatArray(value, 4)),\n  [GL.FLOAT_MAT3]: (gl, location, value) =>\n    gl.uniformMatrix3fv(location, false, toFloatArray(value, 9)),\n  [GL.FLOAT_MAT4]: (gl, location, value) =>\n    gl.uniformMatrix4fv(location, false, toFloatArray(value, 16)),\n\n  [GL.SAMPLER_2D]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.SAMPLER_CUBE]: (gl, location, value) => gl.uniform1i(location, value),\n\n  // WEBGL2 - unsigned integers, irregular matrices, additional texture samplers\n\n  [GL.UNSIGNED_INT]: (gl, location, value) => gl.uniform1uiv(location, toUIntArray(value, 1)),\n  [GL.UNSIGNED_INT_VEC2]: (gl, location, value) => gl.uniform2uiv(location, toUIntArray(value, 2)),\n  [GL.UNSIGNED_INT_VEC3]: (gl, location, value) => gl.uniform3uiv(location, toUIntArray(value, 3)),\n  [GL.UNSIGNED_INT_VEC4]: (gl, location, value) => gl.uniform4uiv(location, toUIntArray(value, 4)),\n\n  // uniformMatrix(false): don't transpose the matrix\n  [GL.FLOAT_MAT2x3]: (gl, location, value) =>\n    gl.uniformMatrix2x3fv(location, false, toFloatArray(value, 6)),\n  [GL.FLOAT_MAT2x4]: (gl, location, value) =>\n    gl.uniformMatrix2x4fv(location, false, toFloatArray(value, 8)),\n  [GL.FLOAT_MAT3x2]: (gl, location, value) =>\n    gl.uniformMatrix3x2fv(location, false, toFloatArray(value, 6)),\n  [GL.FLOAT_MAT3x4]: (gl, location, value) =>\n    gl.uniformMatrix3x4fv(location, false, toFloatArray(value, 12)),\n  [GL.FLOAT_MAT4x2]: (gl, location, value) =>\n    gl.uniformMatrix4x2fv(location, false, toFloatArray(value, 8)),\n  [GL.FLOAT_MAT4x3]: (gl, location, value) =>\n    gl.uniformMatrix4x3fv(location, false, toFloatArray(value, 12)),\n\n  [GL.SAMPLER_3D]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.SAMPLER_2D_SHADOW]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.SAMPLER_2D_ARRAY]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.SAMPLER_2D_ARRAY_SHADOW]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.SAMPLER_CUBE_SHADOW]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.INT_SAMPLER_2D]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.INT_SAMPLER_3D]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.INT_SAMPLER_CUBE]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.INT_SAMPLER_2D_ARRAY]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.UNSIGNED_INT_SAMPLER_2D]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.UNSIGNED_INT_SAMPLER_3D]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.UNSIGNED_INT_SAMPLER_CUBE]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.UNSIGNED_INT_SAMPLER_2D_ARRAY]: (gl, location, value) => gl.uniform1i(location, value)\n  /* eslint-enable max-len */\n};\n\n// Pre-allocated typed arrays for temporary conversion\nconst FLOAT_ARRAY = {};\nconst INT_ARRAY = {};\nconst UINT_ARRAY = {};\n\nconst array1 = [0];\n\n// Functions to ensure the type of uniform values\n// TODO - Why is this necessary? The uniform*v funtions can consume Arrays\nfunction toTypedArray(value, uniformLength, Type, cache) {\n  // convert boolean uniforms to Number\n  if (uniformLength === 1 && typeof value === 'boolean') {\n    value = value ? 1 : 0;\n  }\n  if (Number.isFinite(value)) {\n    array1[0] = value;\n    value = array1;\n  }\n  const length = value.length;\n  if (length % uniformLength) {\n    log.warn(`Uniform size should be multiples of ${uniformLength}`, value)();\n  }\n\n  if (value instanceof Type) {\n    return value;\n  }\n  let result = cache[length];\n  if (!result) {\n    result = new Type(length);\n    cache[length] = result;\n  }\n  for (let i = 0; i < length; i++) {\n    result[i] = value[i];\n  }\n  return result;\n}\n\nfunction toFloatArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Float32Array, FLOAT_ARRAY);\n}\n\nfunction toIntArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Int32Array, INT_ARRAY);\n}\n\nfunction toUIntArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Uint32Array, UINT_ARRAY);\n}\n\nexport function parseUniformName(name) {\n  // Shortcut to avoid redundant or bad matches\n  if (name[name.length - 1] !== ']') {\n    return {\n      name,\n      length: 1,\n      isArray: false\n    };\n  }\n\n  // if array name then clean the array brackets\n  const UNIFORM_NAME_REGEXP = /([^[]*)(\\[[0-9]+\\])?/;\n  const matches = name.match(UNIFORM_NAME_REGEXP);\n  if (!matches || matches.length < 2) {\n    throw new Error(`Failed to parse GLSL uniform name ${name}`);\n  }\n\n  return {\n    name: matches[1],\n    length: matches[2] || 1,\n    isArray: Boolean(matches[2])\n  };\n}\n\n// Returns a Magic Uniform Setter\n/* eslint-disable complexity */\nexport function getUniformSetter(gl, location, info) {\n  const setter = UNIFORM_SETTERS[info.type];\n  if (!setter) {\n    throw new Error(`Unknown GLSL uniform type ${info.type}`);\n  }\n  return setter.bind(null, gl, location);\n}\n\n// Basic checks of uniform values (with or without knowledge of program)\n// To facilitate early detection of e.g. undefined values in JavaScript\nexport function checkUniformValues(uniforms, source, uniformMap) {\n  for (const uniformName in uniforms) {\n    const value = uniforms[uniformName];\n    const shouldCheck = !uniformMap || Boolean(uniformMap[uniformName]);\n    if (shouldCheck && !checkUniformValue(value)) {\n      // Add space to source\n      source = source ? `${source} ` : '';\n      // Value could be unprintable so write the object on console\n      console.error(`${source} Bad uniform ${uniformName}`, value); // eslint-disable-line\n      /* eslint-enable no-console */\n      throw new Error(`${source} Bad uniform ${uniformName}`);\n    }\n  }\n  return true;\n}\n\n// TODO use type information during validation\nfunction checkUniformValue(value) {\n  if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n    return checkUniformArray(value);\n  }\n\n  // Check if single value is a number\n  if (isFinite(value)) {\n    return true;\n  } else if (value === true || value === false) {\n    return true;\n  } else if (value instanceof Texture) {\n    return true;\n  } else if (value instanceof Renderbuffer) {\n    return true;\n  } else if (value instanceof Framebuffer) {\n    return Boolean(value.texture);\n  }\n  return false;\n}\n\nfunction checkUniformArray(value) {\n  // Check that every element in array is a number, and at least 1 element\n  if (value.length === 0) {\n    return false;\n  }\n\n  const checkLength = Math.min(value.length, 16);\n\n  for (let i = 0; i < checkLength; ++i) {\n    if (!Number.isFinite(value[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Given two values of a uniform, returns `true` if they are equal\n */\nexport function areUniformsEqual(uniform1, uniform2) {\n  if (Array.isArray(uniform1) || ArrayBuffer.isView(uniform1)) {\n    if (!uniform2) {\n      return false;\n    }\n    const len = uniform1.length;\n    if (uniform2.length !== len) {\n      return false;\n    }\n    for (let i = 0; i < len; i++) {\n      if (uniform1[i] !== uniform2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return uniform1 === uniform2;\n}\n\n/**\n * Creates a copy of the uniform\n */\nexport function getUniformCopy(uniform) {\n  if (Array.isArray(uniform) || ArrayBuffer.isView(uniform)) {\n    return uniform.slice();\n  }\n  return uniform;\n}\n","// Supports GLSLIFY style naming of shaders\n// #define SHADER_NAME ...\nexport default function getShaderName(shader, defaultName = 'unnamed') {\n  const SHADER_NAME_REGEXP = /#define[\\s*]SHADER_NAME[\\s*]([A-Za-z0-9_-]+)[\\s*]/;\n  const match = shader.match(SHADER_NAME_REGEXP);\n  return match ? match[1] : defaultName;\n}\n","const GL_FRAGMENT_SHADER = 0x8b30;\nconst GL_VERTEX_SHADER = 0x8b31;\n\nexport default function getShaderTypeName(type) {\n  switch (type) {\n    case GL_FRAGMENT_SHADER:\n      return 'fragment';\n    case GL_VERTEX_SHADER:\n      return 'vertex';\n    default:\n      return 'unknown type';\n  }\n}\n","// TODO - formatGLSLCompilerError should not depend on this\nimport getShaderName from './get-shader-name';\nimport getShaderTypeName from './get-shader-type-name';\n\n// Formats GLSL compiler error log into single string\nexport default function formatGLSLCompilerError(errLog, src, shaderType) {\n  const {shaderName, errors, warnings} = parseGLSLCompilerError(errLog, src, shaderType);\n  return `GLSL compilation error in ${shaderName}\\n\\n${errors}\\n${warnings}`;\n}\n\n/**\n * Parse a GLSL compiler error log into a string showing the source code around each error.\n * Based on https://github.com/wwwtyro/gl-format-compiler-error (public domain)\n */\n/* eslint-disable no-continue, max-statements */\nexport function parseGLSLCompilerError(errLog, src, shaderType, shaderName) {\n  const errorStrings = errLog.split(/\\r?\\n/);\n  const errors = {};\n  const warnings = {};\n\n  // Patch the shader name\n  const name = shaderName || getShaderName(src) || '(unnamed)';\n  const shaderDescription = `${getShaderTypeName(shaderType)} shader ${name}`;\n\n  // Parse the error - note: browser and driver dependent\n  for (let i = 0; i < errorStrings.length; i++) {\n    const errorString = errorStrings[i];\n    if (errorString.length <= 1) {\n      continue;\n    }\n    const segments = errorString.split(':');\n    const type = segments[0];\n    const line = parseInt(segments[2], 10);\n    if (isNaN(line)) {\n      throw new Error(`GLSL compilation error in ${shaderDescription}: ${errLog}`);\n    }\n    if (type !== 'WARNING') {\n      errors[line] = errorString;\n    } else {\n      warnings[line] = errorString;\n    }\n  }\n\n  // Format the error inline with the code\n  const lines = addLineNumbers(src);\n\n  return {\n    shaderName: shaderDescription,\n    errors: formatErrors(errors, lines),\n    warnings: formatErrors(warnings, lines)\n  };\n}\n\n// helper function, outputs annotated errors or warnings\nfunction formatErrors(errors, lines) {\n  let message = '';\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    if (!errors[i + 3] && !errors[i + 2] && !errors[i + 1]) {\n      continue;\n    }\n    message += `${line}\\n`;\n    if (errors[i + 1]) {\n      const error = errors[i + 1];\n      const segments = error.split(':', 3);\n      const type = segments[0];\n      const column = parseInt(segments[1], 10) || 0;\n      const err = error.substring(segments.join(':').length + 1).trim();\n      message += padLeft(`^^^ ${type}: ${err}\\n\\n`, column);\n    }\n  }\n  return message;\n}\n\n/**\n * Prepends line numbers to each line of a string.\n * The line numbers will be left-padded with spaces to ensure an\n * aligned layout when rendered using monospace fonts.\n * @param {String} string - multi-line string to add line numbers to\n * @param {Number} start=1 - number of spaces to add\n * @param {String} delim =': ' - injected between line number and original line\n * @return {String[]} strings - array of string, one per line, with line numbers added\n */\nfunction addLineNumbers(string, start = 1, delim = ': ') {\n  const lines = string.split(/\\r?\\n/);\n  const maxDigits = String(lines.length + start - 1).length;\n  return lines.map((line, i) => {\n    const lineNumber = i + start;\n    const digits = String(lineNumber).length;\n    const prefix = padLeft(lineNumber, maxDigits - digits);\n    return prefix + delim + line;\n  });\n}\n\n/**\n * Pads a string with a number of spaces (space characters) to the left\n * @param {String} string - string to pad\n * @param {Number} digits - number of spaces to add\n * @return {String} string - The padded string\n */\nfunction padLeft(string, digits) {\n  let result = '';\n  for (let i = 0; i < digits; ++i) {\n    result += ' ';\n  }\n  return `${result}${string}`;\n}\n","import GL from '@luma.gl/constants';\nimport {parseGLSLCompilerError, getShaderName} from '../glsl-utils';\nimport {assertWebGLContext} from '../webgl-utils';\nimport {uid, log, assert} from '../utils';\nimport Resource from './resource';\n\nconst ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';\n\n// For now this is an internal class\nexport class Shader extends Resource {\n  static getTypeName(shaderType) {\n    switch (shaderType) {\n      case GL.VERTEX_SHADER:\n        return 'vertex-shader';\n      case GL.FRAGMENT_SHADER:\n        return 'fragment-shader';\n      default:\n        assert(false);\n        return 'unknown';\n    }\n  }\n\n  /* eslint-disable max-statements */\n  constructor(gl, props) {\n    assertWebGLContext(gl);\n\n    // Validate arguments\n    assert(typeof props.source === 'string', ERR_SOURCE);\n\n    // Deduce an id, from shader source, or supplied id, or shader type\n    const id =\n      getShaderName(props.source, null) ||\n      props.id ||\n      uid(`unnamed ${Shader.getTypeName(props.shaderType)}`);\n\n    super(gl, {id});\n\n    this.shaderType = props.shaderType;\n    this.source = props.source;\n\n    this.initialize(props);\n  }\n\n  initialize({source}) {\n    const shaderName = getShaderName(source, null);\n    if (shaderName) {\n      this.id = uid(shaderName);\n    }\n    this._compile(source);\n  }\n\n  // Accessors\n\n  getParameter(pname) {\n    return this.gl.getShaderParameter(this.handle, pname);\n  }\n\n  toString() {\n    return `${Shader.getTypeName(this.shaderType)}:${this.id}`;\n  }\n\n  getName() {\n    return getShaderName(this.source) || 'unnamed-shader';\n  }\n\n  getSource() {\n    return this.gl.getShaderSource(this.handle);\n  }\n\n  // Debug method - Returns translated source if available\n  getTranslatedSource() {\n    const extension = this.gl.getExtension('WEBGL.debug_shaders');\n    return extension\n      ? extension.getTranslatedShaderSource(this.handle)\n      : 'No translated source available. WEBGL.debug_shaders not implemented';\n  }\n\n  // PRIVATE METHODS\n  _compile() {\n    this.gl.shaderSource(this.handle, this.source);\n    this.gl.compileShader(this.handle);\n\n    // TODO - For performance reasons, avoid checking shader compilation errors on production?\n    // TODO - Load log even when no error reported, to catch warnings?\n    // https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings\n    const compileStatus = this.getParameter(GL.COMPILE_STATUS);\n    if (!compileStatus) {\n      const infoLog = this.gl.getShaderInfoLog(this.handle);\n      const {shaderName, errors, warnings} = parseGLSLCompilerError(\n        infoLog,\n        this.source,\n        this.shaderType,\n        this.id\n      );\n      log.error(`GLSL compilation errors in ${shaderName}\\n${errors}`)();\n      log.warn(`GLSL compilation warnings in ${shaderName}\\n${warnings}`)();\n      throw new Error(`GLSL compilation errors in ${shaderName}`);\n    }\n  }\n\n  _deleteHandle() {\n    this.gl.deleteShader(this.handle);\n  }\n\n  _getOptsFromHandle() {\n    return {\n      type: this.getParameter(GL.SHADER_TYPE),\n      source: this.getSource()\n    };\n  }\n}\n\nexport class VertexShader extends Shader {\n  constructor(gl, props) {\n    // Signature: new VertexShader(gl, source)\n    if (typeof props === 'string') {\n      props = {source: props};\n    }\n    super(gl, Object.assign({}, props, {shaderType: GL.VERTEX_SHADER}));\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL.VERTEX_SHADER);\n  }\n}\n\nexport class FragmentShader extends Shader {\n  constructor(gl, props) {\n    // Signature: new FragmentShader(gl, source)\n    if (typeof props === 'string') {\n      props = {source: props};\n    }\n\n    super(gl, Object.assign({}, props, {shaderType: GL.FRAGMENT_SHADER}));\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL.FRAGMENT_SHADER);\n  }\n}\n","// Contains metadata describing attribute configurations for a program's shaders\n// Much of this is automatically extracted from shaders after program linking\nimport Accessor from './accessor';\nimport {isWebGL2} from '../webgl-utils';\nimport {decomposeCompositeGLType} from '../webgl-utils/attribute-utils';\n\nexport default class ProgramConfiguration {\n  constructor(program) {\n    this.id = program.id;\n    this.attributeInfos = [];\n    this.attributeInfosByName = {};\n\n    // Locations may not be contiguous the case of matrix attributes\n    // so keep a separate location->attribute map.\n    this.attributeInfosByLocation = [];\n    this.varyingInfos = [];\n    this.varyingInfosByName = {};\n    Object.seal(this);\n    this._readAttributesFromProgram(program);\n    this._readVaryingsFromProgram(program);\n  }\n\n  getAttributeInfo(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return this.attributeInfosByLocation[location];\n    }\n    return this.attributeInfosByName[locationOrName] || null;\n  }\n\n  // Resolves an attribute name or index to an index\n  getAttributeLocation(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.location : -1;\n  }\n\n  getAttributeAccessor(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.accessor : null;\n  }\n\n  getVaryingInfo(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return this.varyingInfos[location];\n    }\n    return this.varyingInfosByName[locationOrName] || null;\n  }\n\n  getVaryingIndex(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.location : -1;\n  }\n\n  getVaryingAccessor(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.accessor : null;\n  }\n\n  // PRIVATE METHODS\n\n  // linkProgram needs to have been called, although linking does not need to have been successful\n  _readAttributesFromProgram(program) {\n    const {gl} = program;\n    const count = gl.getProgramParameter(program.handle, gl.ACTIVE_ATTRIBUTES);\n\n    for (let index = 0; index < count; index++) {\n      const {name, type, size} = gl.getActiveAttrib(program.handle, index);\n      const location = gl.getAttribLocation(program.handle, name);\n      // Add only user provided attributes, for built-in attributes like\n      // `gl_InstanceID` locaiton will be < 0\n      if (location >= 0) {\n        this._addAttribute(location, name, type, size);\n      }\n    }\n\n    this.attributeInfos.sort((a, b) => a.location - b.location);\n  }\n\n  // linkProgram needs to have been called, although linking does not need to have been successful\n  _readVaryingsFromProgram(program) {\n    const {gl} = program;\n    if (!isWebGL2(gl)) {\n      return;\n    }\n\n    const count = gl.getProgramParameter(program.handle, gl.TRANSFORM_FEEDBACK_VARYINGS);\n    for (let location = 0; location < count; location++) {\n      const {name, type, size} = gl.getTransformFeedbackVarying(program.handle, location);\n      this._addVarying(location, name, type, size);\n    }\n\n    this.varyingInfos.sort((a, b) => a.location - b.location);\n  }\n\n  _addAttribute(location, name, compositeType, size) {\n    const {type, components} = decomposeCompositeGLType(compositeType);\n    const accessor = {type, size: size * components};\n    this._inferProperties(location, name, accessor);\n\n    const attributeInfo = {location, name, accessor: new Accessor(accessor)}; // Base values\n    this.attributeInfos.push(attributeInfo);\n    this.attributeInfosByLocation[location] = attributeInfo; // For quick location based lookup\n    this.attributeInfosByName[attributeInfo.name] = attributeInfo; // For quick name based lookup\n  }\n\n  // Extract additional attribute metadata from shader names (based on attribute naming conventions)\n  _inferProperties(location, name, accessor) {\n    if (/instance/i.test(name)) {\n      // Any attribute containing the word \"instance\" will be assumed to be instanced\n      accessor.divisor = 1;\n    }\n  }\n\n  _addVarying(location, name, compositeType, size) {\n    const {type, components} = decomposeCompositeGLType(compositeType);\n    const accessor = new Accessor({type, size: size * components});\n\n    const varying = {location, name, accessor}; // Base values\n    this.varyingInfos.push(varying);\n    this.varyingInfosByName[varying.name] = varying; // For quick name based lookup\n  }\n}\n","import GL from '@luma.gl/constants';\n\nimport Resource from './resource';\nimport Texture from './texture';\nimport Framebuffer from './framebuffer';\nimport {parseUniformName, getUniformSetter} from './uniforms';\nimport {VertexShader, FragmentShader} from './shader';\nimport ProgramConfiguration from './program-configuration';\nimport {checkUniformValues, areUniformsEqual, getUniformCopy} from './uniforms';\n\nimport {withParameters} from '../context';\nimport {assertWebGL2Context, isWebGL2, getKey} from '../webgl-utils';\nimport {getPrimitiveDrawMode} from '../webgl-utils/attribute-utils';\nimport {log, uid, assert} from '../utils';\n\nconst LOG_PROGRAM_PERF_PRIORITY = 4;\n\nconst GL_SEPARATE_ATTRIBS = 0x8c8d;\n\nconst V6_DEPRECATED_METHODS = [\n  'setVertexArray',\n  'setAttributes',\n  'setBuffers',\n  'unsetBuffers',\n\n  'use',\n  'getUniformCount',\n  'getUniformInfo',\n  'getUniformLocation',\n  'getUniformValue',\n\n  'getVarying',\n  'getFragDataLocation',\n  'getAttachedShaders',\n  'getAttributeCount',\n  'getAttributeLocation',\n  'getAttributeInfo'\n];\n\nexport default class Program extends Resource {\n  constructor(gl, props = {}) {\n    super(gl, props);\n\n    this.stubRemovedMethods('Program', 'v6.0', V6_DEPRECATED_METHODS);\n\n    // Experimental flag to avoid deleting Program object while it is cached\n    this._isCached = false;\n\n    this.initialize(props);\n\n    Object.seal(this);\n\n    this._setId(props.id);\n  }\n\n  initialize(props = {}) {\n    const {vs, fs, varyings, bufferMode = GL_SEPARATE_ATTRIBS} = props;\n    // Create shaders if needed\n    this.vs =\n      typeof vs === 'string' ? new VertexShader(this.gl, {id: `${props.id}-vs`, source: vs}) : vs;\n    this.fs =\n      typeof fs === 'string' ? new FragmentShader(this.gl, {id: `${props.id}-fs`, source: fs}) : fs;\n    assert(this.vs instanceof VertexShader);\n    assert(this.fs instanceof FragmentShader);\n\n    // uniforms\n    this.uniforms = {};\n\n    // Setup varyings if supplied\n    if (varyings) {\n      assertWebGL2Context(this.gl);\n      this.varyings = varyings;\n      this.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n    }\n\n    this._compileAndLink();\n    this._readUniformLocationsFromLinkedProgram();\n    this.configuration = new ProgramConfiguration(this);\n\n    return this.setProps(props);\n  }\n\n  delete(options = {}) {\n    if (this._isCached) {\n      // This object is cached, do not delete\n      return this;\n    }\n    return super.delete(options);\n  }\n\n  setProps(props) {\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms);\n    }\n    return this;\n  }\n\n  // A good thing about the WebGL API is that there are so many ways to draw things ;)\n  // This function unifies those ways into a single call using common parameters with sane defaults\n  draw({\n    logPriority, // Probe log priority, enables Model to do more integrated logging\n\n    drawMode = GL.TRIANGLES,\n    vertexCount,\n    offset = 0,\n    start,\n    end,\n    isIndexed = false,\n    indexType = GL.UNSIGNED_SHORT,\n    isInstanced = false,\n    instanceCount = 0,\n\n    vertexArray = null,\n    transformFeedback,\n    framebuffer,\n    parameters = {},\n\n    // Deprecated\n    uniforms,\n    samplers\n  }) {\n    if (uniforms || samplers) {\n      // DEPRECATED: v7.0 (deprecated earlier but warning not properly implemented)\n      log.deprecated('Program.draw({uniforms})', 'Program.setUniforms(uniforms)')();\n      this.setUniforms(uniforms || {});\n    }\n\n    if (logPriority !== undefined) {\n      const fb = framebuffer ? framebuffer.id : 'default';\n      const message =\n        `mode=${getKey(this.gl, drawMode)} verts=${vertexCount} ` +\n        `instances=${instanceCount} indexType=${getKey(this.gl, indexType)} ` +\n        `isInstanced=${isInstanced} isIndexed=${isIndexed} ` +\n        `Framebuffer=${fb}`;\n      log.log(logPriority, message)();\n    }\n\n    // TODO - move vertex array binding and transform feedback binding to withParameters?\n    assert(vertexArray);\n\n    this.gl.useProgram(this.handle);\n\n    // Note: async textures set as uniforms might still be loading.\n    // Now that all uniforms have been updated, check if any texture\n    // in the uniforms is not yet initialized, then we don't draw\n    if (!this._areTexturesRenderable()) {\n      return false;\n    }\n\n    vertexArray.bindForDraw(vertexCount, instanceCount, () => {\n      if (framebuffer !== undefined) {\n        parameters = Object.assign({}, parameters, {framebuffer});\n      }\n\n      if (transformFeedback) {\n        const primitiveMode = getPrimitiveDrawMode(drawMode);\n        transformFeedback.begin(primitiveMode);\n      }\n\n      this._bindTextures();\n\n      withParameters(this.gl, parameters, () => {\n        // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n        if (isIndexed && isInstanced) {\n          this.gl.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n        } else if (isIndexed && isWebGL2(this.gl) && !isNaN(start) && !isNaN(end)) {\n          this.gl.drawRangeElements(drawMode, start, end, vertexCount, indexType, offset);\n        } else if (isIndexed) {\n          this.gl.drawElements(drawMode, vertexCount, indexType, offset);\n        } else if (isInstanced) {\n          this.gl.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n        } else {\n          this.gl.drawArrays(drawMode, offset, vertexCount);\n        }\n      });\n\n      if (transformFeedback) {\n        transformFeedback.end();\n      }\n    });\n\n    return true;\n  }\n\n  setUniforms(uniforms = {}, _onChangeCallback = () => {}) {\n    // Simple change detection - if all uniforms are unchanged, do nothing\n    let somethingChanged = false;\n    const changedUniforms = {};\n    for (const key in uniforms) {\n      if (!areUniformsEqual(this.uniforms[key], uniforms[key])) {\n        somethingChanged = true;\n        changedUniforms[key] = uniforms[key];\n        this.uniforms[key] = getUniformCopy(uniforms[key]);\n      }\n    }\n\n    if (somethingChanged) {\n      _onChangeCallback();\n      checkUniformValues(changedUniforms, this.id, this._uniformSetters);\n      this._setUniforms(changedUniforms);\n    }\n\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  // stub for shader chache, should reset uniforms to default valiues\n  reset() {}\n\n  // Checks if all texture-values uniforms are renderable (i.e. loaded)\n  // Note: This is currently done before every draw call\n  _areTexturesRenderable() {\n    let texturesRenderable = true;\n\n    for (const uniformName in this.uniforms) {\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter && uniformSetter.textureIndex !== undefined) {\n        let uniform = this.uniforms[uniformName];\n\n        if (uniform instanceof Framebuffer) {\n          const framebuffer = uniform;\n          uniform = framebuffer.texture;\n        }\n\n        if (uniform instanceof Texture) {\n          const texture = uniform;\n          // Check that texture is loaded\n          texturesRenderable = texturesRenderable && texture.loaded;\n        }\n      }\n    }\n\n    return texturesRenderable;\n  }\n\n  // Binds textures\n  // Note: This is currently done before every draw call\n  _bindTextures() {\n    for (const uniformName in this.uniforms) {\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter && uniformSetter.textureIndex !== undefined) {\n        let uniform = this.uniforms[uniformName];\n\n        if (uniform instanceof Framebuffer) {\n          uniform = uniform.texture;\n        }\n        if (uniform instanceof Texture) {\n          const texture = uniform;\n          // Bind texture to index\n          texture.bind(uniformSetter.textureIndex);\n        }\n      }\n    }\n  }\n\n  // Apply a set of uniform values to a program\n  // Only uniforms actually present in the linked program will be updated.\n  _setUniforms(uniforms) {\n    this.gl.useProgram(this.handle);\n\n    for (const uniformName in uniforms) {\n      let uniform = uniforms[uniformName];\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter) {\n        if (uniform instanceof Framebuffer) {\n          uniform = uniform.texture;\n        }\n        if (uniform instanceof Texture) {\n          // eslint-disable-next-line max-depth\n          if (uniformSetter.textureIndex === undefined) {\n            uniformSetter.textureIndex = this._textureIndexCounter++;\n          }\n\n          // Bind texture to index\n          const texture = uniform;\n          const {textureIndex} = uniformSetter;\n\n          texture.bind(textureIndex);\n\n          // Set the uniform sampler to the texture index\n          uniformSetter(textureIndex);\n        } else {\n          // Just set the value\n          uniformSetter(uniform);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createProgram();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  // Extract opts needed to initialize a `Program` from an independently created WebGLProgram handle\n  _getOptionsFromHandle(handle) {\n    const shaderHandles = this.gl.getAttachedShaders(handle);\n    const opts = {};\n    for (const shaderHandle of shaderHandles) {\n      const type = this.gl.getShaderParameter(this.handle, GL.SHADER_TYPE);\n      switch (type) {\n        case GL.VERTEX_SHADER:\n          opts.vs = new VertexShader({handle: shaderHandle});\n          break;\n        case GL.FRAGMENT_SHADER:\n          opts.fs = new FragmentShader({handle: shaderHandle});\n          break;\n        default:\n      }\n    }\n    return opts;\n  }\n\n  _getParameter(pname) {\n    return this.gl.getProgramParameter(this.handle, pname);\n  }\n\n  // If program is not named, name it after shader names\n  // TODO - this.id will already have been initialized\n  _setId(id) {\n    if (!id) {\n      const programName = this._getName();\n      this.id = uid(programName);\n    }\n  }\n\n  // Generate a default name for the program based on names of the shaders\n  _getName() {\n    let programName = this.vs.getName() || this.fs.getName();\n    programName = programName.replace(/shader/i, '');\n    programName = programName ? `${programName}-program` : 'program';\n    return programName;\n  }\n\n  _compileAndLink() {\n    const {gl} = this;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n    gl.linkProgram(this.handle);\n    log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n\n    // Avoid checking program linking error in production\n    if (gl.debug || log.priority > 0) {\n      gl.validateProgram(this.handle);\n      const linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n      if (!linked) {\n        throw new Error(`Error linking: ${gl.getProgramInfoLog(this.handle)}`);\n      }\n    }\n  }\n\n  // query uniform locations and build name to setter map.\n  // TODO - This overlaps with ProgramConfiguration?\n  _readUniformLocationsFromLinkedProgram() {\n    const {gl} = this;\n    this._uniformSetters = {};\n    this._uniformCount = this._getParameter(GL.ACTIVE_UNIFORMS);\n    for (let i = 0; i < this._uniformCount; i++) {\n      const info = this.gl.getActiveUniform(this.handle, i);\n      const {name, isArray} = parseUniformName(info.name);\n      let location = gl.getUniformLocation(this.handle, name);\n      this._uniformSetters[name] = getUniformSetter(gl, location, info, isArray);\n      if (info.size > 1) {\n        for (let l = 0; l < info.size; l++) {\n          location = gl.getUniformLocation(this.handle, `${name}[${l}]`);\n          this._uniformSetters[`${name}[${l}]`] = getUniformSetter(gl, location, info, isArray);\n        }\n      }\n    }\n    this._textureIndexCounter = 0;\n  }\n\n  // TO BE REMOVED in v7?\n\n  // Rretrieves information about active uniforms identifed by their indices (`uniformIndices`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniforms\n  getActiveUniforms(uniformIndices, pname) {\n    return this.gl.getActiveUniforms(this.handle, uniformIndices, pname);\n  }\n\n  // Retrieves the index of a uniform block\n  getUniformBlockIndex(blockName) {\n    return this.gl.getUniformBlockIndex(this.handle, blockName);\n  }\n\n  // Retrieves information about an active uniform block (`blockIndex`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter\n  getActiveUniformBlockParameter(blockIndex, pname) {\n    return this.gl.getActiveUniformBlockParameter(this.handle, blockIndex, pname);\n  }\n\n  // Binds a uniform block (`blockIndex`) to a specific binding point (`blockBinding`)\n  uniformBlockBinding(blockIndex, blockBinding) {\n    this.gl.uniformBlockBinding(this.handle, blockIndex, blockBinding);\n  }\n}\n","import {withParameters} from '@luma.gl/core';\n\nexport default class Display {\n  getViews(options) {\n    const {width, height} = options;\n    return [\n      {\n        params: {\n          viewport: [0, 0, width, height],\n          scissor: [0, 0, width, height],\n          scissorTest: true\n        }\n      }\n    ];\n  }\n\n  submitFrame() {\n    return true;\n  }\n\n  // return true if animation frame has been requested\n  requestAnimationFrame(renderFrame) {\n    return false;\n  }\n\n  delete() {}\n\n  // AnimationLoop calls this API\n  _renderFrame(options) {\n    const views = this.getViews(options);\n    if (!views) {\n      return false;\n    }\n\n    const {gl} = this.animationLoop;\n    for (const view of views) {\n      withParameters(gl, view.params, () => this.animationLoop.onRender({...options, ...view}));\n    }\n\n    this.submitFrame();\n    return true;\n  }\n}\n","/* global document */\n\nexport function createEnterVRButton({canvas, title}) {\n  const {top, left, width, height} = canvas.getBoundingClientRect();\n\n  const container = document.createElement('div');\n  container.style.position = 'absolute';\n  container.style.top = `${top}px`;\n  container.style.left = `${left}px`;\n  container.style.width = `${width}px`;\n  container.style.height = `${height}px`;\n  container.style.pointerEvents = 'none';\n  container.style.zIndex = '999';\n  document.body.appendChild(container);\n\n  const button = document.createElement('button');\n  button.style.padding = '16px';\n  button.style.border = '1px solid #fff';\n  button.style.borderRadius = '8px';\n  button.style.background = 'rgba(0,0,0,0.5)';\n  button.style.color = '#fff';\n  button.style.font = 'normal 20px sans-serif';\n  button.style.cursor = 'pointer';\n  button.style.margin = '20px auto';\n  button.style.display = 'block';\n  button.style.pointerEvents = 'all';\n  button.textContent = title;\n  container.appendChild(button);\n\n  return button;\n}\n","/* global window, navigator */\nimport {log} from '@luma.gl/core';\nimport Display from './display';\nimport {createEnterVRButton} from './vr-button';\n\nexport default class VRDisplay extends Display {\n  static isSupported() {\n    return (\n      typeof navigator !== 'undefined' && 'getVRDisplays' in navigator && 'VRFrameData' in window\n    );\n  }\n\n  constructor(props) {\n    super(props);\n\n    this._vrSupported = VRDisplay.isSupported();\n    if (this._vrSupported) {\n      this.vrFrameData = new window.VRFrameData();\n      this.vrPresenting = false;\n      this.vrFrame = false;\n      window.addEventListener('vrdisplaypresentchange', this._vrDisplayPresentChange.bind(this));\n    }\n  }\n\n  delete() {\n    super.delete();\n    this._removeVRButton();\n  }\n\n  getViews(options) {\n    if (this._vrSupported) {\n      this._addVRButton();\n    }\n\n    // Need both vrPresenting and vrFrame\n    // to avoid race conditions when we exit VR\n    // after we schedule an animation frame\n    if (this.vrPresenting && this.vrFrame) {\n      this.vrDisplay.getFrameData(this.vrFrameData);\n\n      const {\n        leftProjectionMatrix,\n        leftViewMatrix,\n        rightProjectionMatrix,\n        rightViewMatrix\n      } = this.vrFrameData;\n\n      const {width, height} = options;\n\n      return [\n        {\n          displayEye: 'left',\n          projectionMatrix: leftProjectionMatrix,\n          viewMatrix: leftViewMatrix,\n          params: {\n            viewport: [0, 0, width * 0.5, height],\n            scissor: [0, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        },\n        {\n          displayEye: 'right',\n          projectionMatrix: rightProjectionMatrix,\n          viewMatrix: rightViewMatrix,\n          params: {\n            viewport: [width * 0.5, 0, width * 0.5, height],\n            scissor: [width * 0.5, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        }\n      ];\n    }\n\n    return super.getViews(options);\n  }\n\n  submitFrame() {\n    if (this.vrPresenting && this.vrFrame) {\n      this.vrDisplay.submitFrame();\n      return true;\n    }\n\n    return false;\n  }\n\n  requestAnimationFrame(renderFrame) {\n    if (this.vrPresenting) {\n      this.vrDisplay.requestAnimationFrame(() => {\n        this.vrFrame = true;\n        renderFrame();\n        this.vrFrame = false;\n      });\n\n      return true;\n    }\n\n    return false;\n  }\n\n  // PRIVATE\n\n  // TODO: Consider resizing canvas to match vrDisplay.getEyeParameters()\n  // TODO: Maybe allow to select display?\n  async _addVRButton() {\n    if (this.vrButton) {\n      return;\n    }\n\n    const canvas = this._getCanvas();\n    if (!canvas) {\n      return;\n    }\n\n    const displays = await navigator.getVRDisplays();\n    if (displays && displays.length) {\n      log.info(2, 'Found VR Displays', displays)();\n\n      this.vrDisplay = displays[0];\n      this.vrButton = createEnterVRButton({\n        canvas,\n        title: `Enter VR (${this.vrDisplay.displayName})`\n      });\n      this.vrButton.onclick = () => this._startDisplay();\n    }\n  }\n\n  _getCanvas() {\n    return this.animationLoop.canvas || (this.animationLoop.gl && this.animationLoop.gl.canvas);\n  }\n\n  _removeVRButton() {\n    if (this.vrButton) {\n      // TODO\n    }\n  }\n\n  _startDisplay() {\n    this.vrDisplay.requestPresent([\n      {\n        source: this._getCanvas()\n      }\n    ]);\n  }\n\n  _vrDisplayPresentChange() {\n    if (this.vrDisplay.isPresenting) {\n      log.info(2, 'Entering VR')();\n\n      this.vrPresenting = true;\n      this.vrButton.style.display = 'none';\n    } else {\n      log.info(2, 'Exiting VR')();\n\n      this.vrPresenting = false;\n      this.vrButton.style.display = 'block';\n    }\n  }\n}\n","let arrayBuffer = null;\n\nexport function getScratchArrayBuffer(byteLength) {\n  if (!arrayBuffer || arrayBuffer.byteLength < byteLength) {\n    arrayBuffer = new ArrayBuffer(byteLength);\n  }\n  return arrayBuffer;\n}\n\nexport function getScratchArray(Type, length) {\n  const scratchArrayBuffer = getScratchArrayBuffer(Type.BYTES_PER_ELEMENT * length);\n  return new Type(scratchArrayBuffer, 0, length); // arrayBuffer, byteOffset, length (in elements)\n}\n\n// Uses copyWithin to significantly speed up typed array value filling\nexport function fillArray({target, source, start = 0, count = 1}) {\n  const length = source.length;\n  const total = count * length;\n  let copied = 0;\n  for (let i = start; copied < length; copied++) {\n    target[i++] = source[copied];\n  }\n\n  while (copied < total) {\n    // If we have copied less than half, copy everything we got\n    // else copy remaining in one operation\n    if (copied < total - copied) {\n      target.copyWithin(start + copied, start, start + copied);\n      copied *= 2;\n    } else {\n      target.copyWithin(start + copied, start, start + total - copied);\n      copied = total;\n    }\n  }\n\n  return target;\n}\n\n/*\n\n// Creates a new Uint8Array based on two different ArrayBuffers\n// @private\n// @param {ArrayBuffers} buffer1 The first buffer.\n// @param {ArrayBuffers} buffer2 The second buffer.\n// @return {ArrayBuffers} The new ArrayBuffer created out of the two.\n//\nexport function copyArrayBuffer(\n  targetBuffer, sourceBuffer, byteOffset, byteLength = sourceBuffer.byteLength\n) {\n  const targetArray = new Uint8Array(targetBuffer, byteOffset, byteLength);\n  const sourceArray = new Uint8Array(sourceBuffer);\n  targetArray.set(sourceArray);\n  return targetBuffer;\n}\n\n*/\n","import GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {isWebGL2} from '../webgl-utils';\nimport {getScratchArray, fillArray} from '../utils/array-utils-flat';\nimport {assert} from '../utils';\nimport {getBrowser} from 'probe.gl';\n\n/* eslint-disable camelcase */\nconst OES_vertex_array_object = 'OES_vertex_array_object';\n\nconst ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';\n\nexport default class VertexArrayObject extends Resource {\n  static isSupported(gl, options = {}) {\n    // Attribute 0 can not be disable on most desktop OpenGL based browsers\n    // and on iOS Safari browser.\n    if (options.constantAttributeZero) {\n      return isWebGL2(gl) || getBrowser() === 'Chrome';\n    }\n\n    // Whether additional objects can be created\n    return isWebGL2(gl) || gl.getExtension(OES_vertex_array_object);\n  }\n\n  // Returns the global (null) vertex array object. Exists even when no extension available\n  static getDefaultArray(gl) {\n    gl.luma = gl.luma || {};\n    if (!gl.luma.defaultVertexArray) {\n      gl.luma.defaultVertexArray = new VertexArrayObject(gl, {handle: null});\n    }\n    return gl.luma.defaultVertexArray;\n  }\n\n  static getMaxAttributes(gl) {\n    // TODO - should be cached per context\n    VertexArrayObject.MAX_ATTRIBUTES =\n      VertexArrayObject.MAX_ATTRIBUTES || gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    return VertexArrayObject.MAX_ATTRIBUTES;\n  }\n\n  // Note: Constants are stored globally on the WebGL context, not the VAO\n  // So they need to be updated before every render\n  // TODO - use known type (in configuration or passed in) to allow non-typed arrays?\n  // TODO - remember/cache values to avoid setting them unnecessarily?\n  static setConstant(gl, location, array) {\n    switch (array.constructor) {\n      case Float32Array:\n        VertexArrayObject._setConstantFloatArray(gl, location, array);\n        break;\n      case Int32Array:\n        VertexArrayObject._setConstantIntArray(gl, location, array);\n        break;\n      case Uint32Array:\n        VertexArrayObject._setConstantUintArray(gl, location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  // Create a VertexArray\n  constructor(gl, opts = {}) {\n    // Use program's id if program but no id is supplied\n    const id = opts.id || (opts.program && opts.program.id);\n    super(gl, Object.assign({}, opts, {id}));\n\n    this.hasVertexArrays = VertexArrayObject.isSupported(gl);\n    this.buffer = null;\n    this.bufferValue = null;\n\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  delete() {\n    super.delete();\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n  }\n\n  get MAX_ATTRIBUTES() {\n    return VertexArrayObject.getMaxAttributes(this.gl);\n  }\n\n  initialize(props = {}) {\n    return this.setProps(props);\n  }\n\n  setProps(props) {\n    // TODO: decide which props should be supported\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, opts = {}) {\n    assert(!elementBuffer || elementBuffer.target === GL.ELEMENT_ARRAY_BUFFER, ERR_ELEMENTS);\n\n    // The GL.ELEMENT_ARRAY_BUFFER_BINDING is stored on the VertexArrayObject...\n    this.bind(() => {\n      this.gl.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, elementBuffer ? elementBuffer.handle : null);\n    });\n\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a bufferk, enables the location, sets divisor\n  setBuffer(location, buffer, accessor) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer, accessor);\n    }\n\n    const {size, type, stride, offset, normalized, integer, divisor} = accessor;\n\n    const {gl} = this;\n    location = Number(location);\n\n    this.bind(() => {\n      // A non-zero buffer object must be bound to the GL_ARRAY_BUFFER target\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer.handle);\n\n      // WebGL2 supports *integer* data formats, i.e. GPU will see integer values\n      if (integer) {\n        assert(isWebGL2(gl));\n        gl.vertexAttribIPointer(location, size, type, stride, offset);\n      } else {\n        // Attaches ARRAY_BUFFER with specified buffer format to location\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n      }\n      gl.enableVertexAttribArray(location);\n      gl.vertexAttribDivisor(location, divisor || 0);\n\n      // NOTE We don't unbind buffer here, typically another buffer will be bound just after\n    });\n\n    return this;\n  }\n\n  // Enabling an attribute location makes it reference the currently bound buffer\n  // Disabling an attribute location makes it reference the global constant value\n  // TODO - handle single values for size 1 attributes?\n  // TODO - convert classic arrays based on known type?\n  enable(location, enable = true) {\n    // Attribute 0 cannot be disabled in most desktop OpenGL based browsers\n    const disablingAttributeZero =\n      !enable &&\n      location === 0 &&\n      !VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true});\n\n    if (!disablingAttributeZero) {\n      location = Number(location);\n      this.bind(\n        () =>\n          enable\n            ? this.gl.enableVertexAttribArray(location)\n            : this.gl.disableVertexAttribArray(location)\n      );\n    }\n    return this;\n  }\n\n  // Provide a means to create a buffer that is equivalent to a constant.\n  // NOTE: Desktop OpenGL cannot disable attribute 0.\n  // https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-\n  // this-has-significant-performance-penalt\n  getConstantBuffer(elementCount, value, accessor) {\n    // Create buffer only when needed, and reuse it (avoids inflating buffer creation statistics)\n\n    const constantValue = this._normalizeConstantArrayValue(value, accessor);\n\n    const byteLength = constantValue.byteLength * elementCount;\n    const length = constantValue.length * elementCount;\n\n    let updateNeeded = !this.buffer;\n\n    this.buffer = this.buffer || new Buffer(this.gl, byteLength);\n    updateNeeded = updateNeeded || this.buffer.reallocate(byteLength);\n\n    // Reallocate and update contents if needed\n    updateNeeded =\n      updateNeeded || !this._compareConstantArrayValues(constantValue, this.bufferValue);\n\n    if (updateNeeded) {\n      // Create a typed array that is big enough, and fill it with the required data\n      const typedArray = getScratchArray(value.constructor, length);\n      fillArray({target: typedArray, source: constantValue, start: 0, count: length});\n      this.buffer.subData(typedArray);\n      this.bufferValue = value;\n    }\n\n    return this.buffer;\n  }\n\n  // PRIVATE\n\n  // TODO - convert Arrays based on known type? (read type from accessor, don't assume Float32Array)\n  // TODO - handle single values for size 1 attributes?\n  _normalizeConstantArrayValue(arrayValue, accessor) {\n    if (Array.isArray(arrayValue)) {\n      return new Float32Array(arrayValue);\n    }\n    return arrayValue;\n  }\n\n  _compareConstantArrayValues(v1, v2) {\n    if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {\n      return false;\n    }\n    for (let i = 0; i < v1.length; ++i) {\n      if (v1[i] !== v2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  static _setConstantFloatArray(gl, location, array) {\n    switch (array.length) {\n      case 1:\n        gl.vertexAttrib1fv(location, array);\n        break;\n      case 2:\n        gl.vertexAttrib2fv(location, array);\n        break;\n      case 3:\n        gl.vertexAttrib3fv(location, array);\n        break;\n      case 4:\n        gl.vertexAttrib4fv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantIntArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1iv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2iv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3iv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4iv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantUintArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1uiv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2uiv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3uiv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4uiv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  // RESOURCE IMPLEMENTATION\n\n  _createHandle() {\n    this.hasVertexArrays = VertexArrayObject.isSupported(this.gl);\n    if (this.hasVertexArrays) {\n      return this.gl.createVertexArray();\n    }\n    return null;\n  }\n\n  _deleteHandle(handle) {\n    if (this.hasVertexArrays) {\n      this.gl.deleteVertexArray(handle);\n    }\n    return [this.elements];\n    // return [this.elements, ...this.buffers];\n  }\n\n  _bindHandle(handle) {\n    if (this.hasVertexArrays) {\n      this.gl.bindVertexArray(handle);\n    }\n  }\n\n  // Generic getter for information about a vertex attribute at a given position\n  _getParameter(pname, {location}) {\n    assert(Number.isFinite(location));\n    return this.bind(() => {\n      switch (pname) {\n        case GL.VERTEX_ATTRIB_ARRAY_POINTER:\n          return this.gl.getVertexAttribOffset(location, pname);\n        default:\n          return this.gl.getVertexAttrib(location, pname);\n      }\n    });\n  }\n\n  // DEPRECATED\n\n  /*\n  setDivisor(location, divisor) {\n    location = Number(location);\n    this.bind(() => this.gl.vertexAttribDivisor(location, divisor));\n    return this;\n  }\n\n  // match assumed WebGL defaults\n  static resetConstants(gl) {\n    const MAX_ATTRIBUTES = VertexArrayObject.getMaxAttributes(gl);\n    for (let i = 0; i < MAX_ATTRIBUTES; i++) {\n      VertexArrayObject.setConstant(gl, i, [0, 0, 0, 1]);\n    }\n  }\n\n  // Resets all attributes (to default valued constants)\n  resetAttributes() {\n    // WebGL offers disabling, but no clear way to set a VertexArray buffer to `null`\n    // But Chrome does not like buffers that are bound to several binding points.\n    // So we just bind all the attributes to the dummy \"attribute zero\" buffer\n    this.buffer = this.buffer || new Buffer(this.gl, {size: 4});\n\n    for (const location in this.values) {\n      if (this.values[location] instanceof Buffer) {\n        this.gl.disableVertexAttribArray(location);\n        this.gl.bindBuffer(GL.ARRAY_BUFFER, this.buffer.handle);\n        this.gl.vertexAttribPointer(location, 1, GL.FLOAT, false, 0, 0);\n      }\n    }\n\n    this.setElementBuffer(null);\n    return this;\n  }\n  */\n}\n","import GL from '@luma.gl/constants';\nimport Accessor from './accessor';\nimport Buffer from './buffer';\nimport VertexArrayObject from './vertex-array-object';\nimport {log, assert, stubRemovedMethods} from '../utils';\n\nconst ERR_ATTRIBUTE_TYPE =\n  'VertexArray: attributes must be Buffers or constants (i.e. typed array)';\n\n// This is done to support mat type attributes.\n// See section \"Notes about setting mat type attributes\"\n// in vertex-array.md\nconst MULTI_LOCATION_ATTRIBUTE_REGEXP = /^(.+)__LOCATION_([0-9]+)$/;\n\nconst DEPRECATIONS_V6 = [\n  'setBuffers',\n  'setGeneric',\n  'clearBindings',\n  'setLocations',\n  'setGenericValues',\n  'setDivisor',\n  'enable',\n  'disable'\n];\n\nexport default class VertexArray {\n  constructor(gl, opts = {}) {\n    // Use program's id if program is supplied but no id is supplied\n    const id = opts.id || (opts.program && opts.program.id);\n    // super(gl, Object.assign({}, opts, {id}));\n\n    this.id = id;\n    this.gl = gl;\n    this.configuration = null;\n\n    // Extracted information\n    this.elements = null;\n    this.elementsAccessor = null;\n    this.values = null;\n    this.accessors = null;\n    this.unused = null;\n    this.drawParams = null;\n    this.buffer = null; // For attribute 0 on desktops, and created when unbinding buffers\n\n    this.vertexArrayObject = VertexArrayObject.isSupported(gl)\n      ? new VertexArrayObject(gl)\n      : VertexArrayObject.getDefaultArray(gl);\n\n    // Issue errors when using removed methods\n    stubRemovedMethods(this, 'VertexArray', 'v6.0', DEPRECATIONS_V6);\n\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  delete() {\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n  }\n\n  initialize(props = {}) {\n    this.reset();\n    this.configuration = null;\n    this.bindOnUse = false;\n    return this.setProps(props);\n  }\n\n  // Resets all attributes (to default valued constants)\n  reset() {\n    // this.vertexArrayObject.reset();\n\n    this.elements = null;\n    this.elementsAccessor = null;\n    const {MAX_ATTRIBUTES} = this.vertexArrayObject;\n    this.values = new Array(MAX_ATTRIBUTES).fill(null);\n    this.accessors = new Array(MAX_ATTRIBUTES).fill(null);\n    this.unused = {};\n\n    // Auto detects draw params\n    this.drawParams = null;\n\n    return this;\n  }\n\n  setProps(props) {\n    if ('program' in props) {\n      this.configuration = props.program && props.program.configuration;\n    }\n    if ('configuration' in props) {\n      this.configuration = props.configuration;\n    }\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('elements' in props) {\n      this.setElementBuffer(props.elements);\n    }\n    if ('bindOnUse' in props) {\n      props = props.bindOnUse;\n    }\n    return this;\n  }\n\n  // Automatically called if buffers changed through VertexArray API\n  clearDrawParams() {\n    this.drawParams = null;\n  }\n\n  getDrawParams(appParameters) {\n    // Auto deduced draw parameters\n    this.drawParams = this.drawParams || this._updateDrawParams();\n\n    // Override with any application supplied draw parameters\n    return Object.assign({}, this.drawParams, appParameters);\n  }\n\n  // Set (bind) an array or map of vertex array buffers, either in numbered or named locations.\n  // For names that are not present in `location`, the supplied buffers will be ignored.\n  // if a single buffer of type GL.ELEMENT_ARRAY_BUFFER is present, it will be set as elements\n  //   Signatures:\n  //     {attributeName: buffer}\n  //     {attributeName: [buffer, accessor]}\n  //     {attributeName: (typed) array} => constant\n  setAttributes(attributes) {\n    this.vertexArrayObject.bind(() => {\n      for (const locationOrName in attributes) {\n        const value = attributes[locationOrName];\n        this._setAttribute(locationOrName, value);\n      }\n      // Make sure we don't leave any bindings\n      this.gl.bindBuffer(GL.ARRAY_BUFFER, null);\n    });\n\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, accessor = {}) {\n    this.elements = elementBuffer; // Save value for debugging\n    this.elementsAccessor = accessor;\n    this.clearDrawParams();\n\n    // Update vertexArray immediately if we have our own array\n    if (!this.vertexArrayObject.isDefaultArray) {\n      this.vertexArrayObject.setElementBuffer(elementBuffer, accessor);\n    }\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a buffer\n  setBuffer(locationOrName, buffer, appAccessor = {}) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer, appAccessor);\n    }\n\n    const {location, accessor} = this._resolveLocationAndAccessor(\n      locationOrName,\n      buffer,\n      buffer.accessor,\n      appAccessor\n    );\n\n    if (location >= 0) {\n      this.values[location] = buffer;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n\n      // Update vertexArray immediately if we have our own array\n      if (!this.vertexArrayObject.isDefaultArray) {\n        this.vertexArrayObject.setBuffer(location, buffer, accessor);\n      }\n    }\n\n    return this;\n  }\n\n  // Set attribute to constant value (small typed array corresponding to one vertex' worth of data)\n  setConstant(locationOrName, arrayValue, appAccessor = {}) {\n    const {location, accessor} = this._resolveLocationAndAccessor(\n      locationOrName,\n      arrayValue,\n      // Ensure that size isn't taken from program for multi-column\n      // attributes\n      Object.assign({size: arrayValue.length}, appAccessor)\n    );\n\n    if (location >= 0) {\n      arrayValue = this.vertexArrayObject._normalizeConstantArrayValue(arrayValue, accessor);\n\n      this.values[location] = arrayValue;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n\n      // Update vertexArray immediately if we have our own array\n      // NOTE: We set the actual constant value later on bind. We can't set the value now since\n      // constants are global and affect all other VertexArrays that have disabled attributes\n      // in the same location.\n      // We do disable the attribute which makes it use the global constant value at that location\n      if (!this.vertexArrayObject.isDefaultArray) {\n        this.vertexArrayObject.enable(location, false);\n      }\n    }\n\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, unbind temporarily to avoid conflicting with TransformFeedback\n  unbindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.setElementBuffer(null);\n      }\n\n      // Chrome does not like buffers that are bound to several binding points,\n      // so we need to offer and unbind facility\n      // WebGL offers disabling, but no clear way to set a VertexArray buffer to `null`\n      // So we just bind all the attributes to the dummy \"attribute zero\" buffer\n      this.buffer = this.buffer || new Buffer(this.gl, {accessor: {size: 4}});\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        if (this.values[location] instanceof Buffer) {\n          this.gl.disableVertexAttribArray(location);\n          this.gl.bindBuffer(GL.ARRAY_BUFFER, this.buffer.handle);\n          this.gl.vertexAttribPointer(location, 1, GL.FLOAT, false, 0, 0);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, rebind rebind after temporary unbind\n  bindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.setElementBuffer(this.elements);\n      }\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        const buffer = this.values[location];\n        if (buffer instanceof Buffer) {\n          this.setBuffer(location, buffer);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Bind for use\n  // When a vertex array is about to be used, we must:\n  // - Set constant attributes (since these are stored on the context and reset on bind)\n  // - Check if we need to initialize the buffer\n  bindForDraw(vertexCount, instanceCount, func) {\n    let value;\n\n    this.vertexArrayObject.bind(() => {\n      // Make sure that any constant attributes are updated (stored on the context, not the VAO)\n      // Also handles attribute 0\n      this._setConstantAttributes(vertexCount, instanceCount);\n\n      if (!this.vertexArrayObject.hasVertexArrays) {\n        this.bindBuffers();\n      }\n\n      value = func();\n\n      if (!this.vertexArrayObject.hasVertexArrays) {\n        this.unbindBuffers();\n      }\n    });\n\n    return value;\n  }\n\n  // PRIVATE\n\n  // Resolve locations and accessors\n  _resolveLocationAndAccessor(locationOrName, value, valueAccessor, appAccessor) {\n    const {location, name} = this._getAttributeIndex(locationOrName);\n    if (!Number.isFinite(location) || location < 0) {\n      this.unused[locationOrName] = value;\n      log.once(3, () => `unused value ${locationOrName} in ${this.id}`)();\n      return this;\n    }\n\n    const accessInfo = this._getAttributeInfo(name || location);\n\n    // Attribute location wasn't directly found.\n    // Likely due to multi-location attributes (e.g. matrix)\n    if (!accessInfo) {\n      return {\n        location: -1,\n        accessor: null\n      };\n    }\n\n    // Resolve the partial accessors into a final accessor\n    const accessor = Accessor.resolve(accessInfo.accessor, valueAccessor, appAccessor);\n\n    const {size, type} = accessor;\n    assert(Number.isFinite(size) && Number.isFinite(type));\n\n    return {location, accessor};\n  }\n\n  _getAttributeInfo(attributeName) {\n    return this.configuration && this.configuration.getAttributeInfo(attributeName);\n  }\n\n  _getAttributeIndex(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return {location};\n    }\n\n    const multiLocation = MULTI_LOCATION_ATTRIBUTE_REGEXP.exec(locationOrName);\n    const name = multiLocation ? multiLocation[1] : locationOrName;\n    const locationOffset = multiLocation ? Number(multiLocation[2]) : 0;\n\n    if (this.configuration) {\n      return {\n        location: this.configuration.getAttributeLocation(name) + locationOffset,\n        name\n      };\n    }\n\n    return {location: -1};\n  }\n\n  _setAttribute(locationOrName, value) {\n    if (value instanceof Buffer) {\n      //  Signature: {attributeName: Buffer}\n      this.setBuffer(locationOrName, value);\n    } else if (Array.isArray(value) && value.length && value[0] instanceof Buffer) {\n      // Signature: {attributeName: [buffer, accessor]}\n      const buffer = value[0];\n      const accessor = value[1];\n      this.setBuffer(locationOrName, buffer, accessor);\n    } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {\n      // Signature: {attributeName: constant}, constant == short (typed) array\n      const constant = value;\n      this.setConstant(locationOrName, constant);\n    } else if (value.buffer instanceof Buffer) {\n      // luma.gl v7: Support accessor objects with 'buffer' field\n      // for interleaved data\n      // Signature: {attributeName: {...accessor, buffer}}\n      const accessor = value;\n      this.setBuffer(locationOrName, accessor.buffer, accessor);\n    } else {\n      throw new Error(ERR_ATTRIBUTE_TYPE);\n    }\n  }\n\n  // Updates all constant attribute values (constants are used when vertex attributes are disabled).\n  // This needs to be done repeatedly since in contrast to buffer bindings,\n  // constants are stored on the WebGL context, not the VAO\n  _setConstantAttributes(vertexCount, instanceCount) {\n    // TODO - use accessor to determine what length to use\n    const elementCount = Math.max(vertexCount | 0, instanceCount | 0);\n    let constant = this.values[0];\n    if (ArrayBuffer.isView(constant)) {\n      this._setConstantAttributeZero(constant, elementCount);\n    }\n\n    for (let location = 1; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      constant = this.values[location];\n      if (ArrayBuffer.isView(constant)) {\n        this._setConstantAttribute(location, constant);\n      }\n    }\n  }\n\n  _setConstantAttributeZero(constant, elementCount) {\n    if (VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true})) {\n      this._setConstantAttribute(0, constant);\n      return;\n    }\n\n    // Get a dummy buffer populated with repeated constants\n    const buffer = this.vertexArrayObject.getConstantBuffer(elementCount, constant);\n\n    // Set the buffer on location 0\n    this.vertexArrayObject.setBuffer(0, buffer, this.accessors[0]);\n  }\n\n  _setConstantAttribute(location, constant) {\n    VertexArrayObject.setConstant(this.gl, location, constant);\n\n    // If we are using the global VertexArrayObject, we need to disable the attribute now\n    if (this.vertexArrayObject.isDefault) {\n      this.vertexArrayObject.enable(location, false);\n    }\n  }\n\n  // Walks the buffers and updates draw parameters\n  _updateDrawParams() {\n    const drawParams = {\n      isIndexed: false,\n      isInstanced: false,\n      indexCount: Infinity,\n      vertexCount: Infinity,\n      instanceCount: Infinity\n    };\n\n    for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      this._updateDrawParamsForLocation(drawParams, location);\n    }\n\n    if (this.elements) {\n      // indexing is autodetected - buffer with target GL.ELEMENT_ARRAY_BUFFER\n      // index type is saved for drawElement calls\n      drawParams.elementCount = this.elements.getElementCount(this.elements.accessor);\n      drawParams.isIndexed = true;\n      drawParams.indexType = this.elementsAccessor.type || this.elements.accessor.type;\n      drawParams.indexOffset = this.elementsAccessor.offset || 0;\n    }\n\n    // Post-calculation checks\n    if (drawParams.indexCount === Infinity) {\n      drawParams.indexCount = 0;\n    }\n    if (drawParams.vertexCount === Infinity) {\n      drawParams.vertexCount = 0;\n    }\n    if (drawParams.instanceCount === Infinity) {\n      drawParams.instanceCount = 0;\n    }\n\n    return drawParams;\n  }\n\n  _updateDrawParamsForLocation(drawParams, location) {\n    const value = this.values[location];\n    const accessor = this.accessors[location];\n\n    if (!value) {\n      return;\n    }\n\n    // Check if instanced (whether buffer or constant)\n    const {divisor} = accessor;\n    const isInstanced = divisor > 0;\n    drawParams.isInstanced = drawParams.isInstanced || isInstanced;\n\n    if (value instanceof Buffer) {\n      const buffer = value;\n\n      if (isInstanced) {\n        // instance attribute\n        const instanceCount = buffer.getVertexCount(accessor);\n        drawParams.instanceCount = Math.min(drawParams.instanceCount, instanceCount);\n      } else {\n        // normal attribute\n        const vertexCount = buffer.getVertexCount(accessor);\n        drawParams.vertexCount = Math.min(drawParams.vertexCount, vertexCount);\n      }\n    }\n  }\n\n  // DEPRECATED in v6.x - but not warnings not properly implemented\n\n  setElements(elementBuffer = null, accessor = {}) {\n    log.deprecated('setElements', 'setElementBuffer')();\n    return this.setElementBuffer(elementBuffer, accessor);\n  }\n}\n"],"sourceRoot":""}