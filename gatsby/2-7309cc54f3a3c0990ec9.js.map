{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack:///./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack:///./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///../node_modules/math.gl/dist/esm/lib/common.js","webpack:///../node_modules/gl-matrix/esm/common.js","webpack:///./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack:///../node_modules/math.gl/dist/esm/lib/vector.js","webpack:///../node_modules/gl-matrix/esm/vec3.js","webpack:///./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///./node_modules/@babel/runtime/helpers/esm/construct.js","webpack:///./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","webpack:///./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","webpack:///../node_modules/math.gl/dist/esm/lib/math-array.js","webpack:///../node_modules/math.gl/dist/esm/vector3.js","webpack:///../node_modules/math.gl/dist/esm/lib/validators.js","webpack:///../node_modules/gl-matrix/esm/vec2.js","webpack:///../node_modules/math.gl/dist/esm/vector2.js","webpack:///../node_modules/math.gl/dist/esm/vector4.js","webpack:///../node_modules/gl-matrix/esm/mat4.js","webpack:///../node_modules/gl-matrix/esm/vec4.js","webpack:///../node_modules/math.gl/dist/esm/matrix4.js"],"names":["_getPrototypeOf","o","Object","setPrototypeOf","getPrototypeOf","__proto__","__webpack_require__","d","__webpack_exports__","_inherits","_setPrototypeOf__WEBPACK_IMPORTED_MODULE_0__","subClass","superClass","TypeError","prototype","create","constructor","value","writable","configurable","_possibleConstructorReturn","self","call","esm_typeof","ReferenceError","_assertThisInitialized","config","checkNumber","formatValue","radians","equals","Number","isFinite","Error","concat","round","Math","EPSILON","_ref$precision","arguments","length","undefined","precision","parseFloat","toPrecision","isArray","Array","ArrayBuffer","isView","map","func","result","array","clone","i","degrees","PI","a","b","abs","max","debug","printTypes","printDegrees","printRowMajor","ARRAY_TYPE","RANDOM","Float32Array","random","_setPrototypeOf","p","Vector","_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__","_math_array__WEBPACK_IMPORTED_MODULE_6__","_common__WEBPACK_IMPORTED_MODULE_7__","assert","x","m","_MathArray","this","apply","key","sqrt","lengthSquared","ELEMENTS","mathArray","distanceSquared","dist","product","magnitude","check","_len","vectors","_key","_i","vector","_len2","_key2","_i2","_len3","_key3","_i3","_len4","_key4","_i4","_scale","multiply","scale","distance","copy","add","subtract","multiplyScalar","get","set","cross","transformMat4","rotateX","rotateY","rotateZ","angle","_common_js__WEBPACK_IMPORTED_MODULE_1__","fromValues","y","z","out","normalize","len","ax","ay","az","bx","by","bz","w","c","r","cos","sin","tempA","tempB","cosine","dot","acos","vec","_slicedToArray","arr","_arrayWithHoles","_arr","_n","_d","_e","_s","Symbol","iterator","next","done","push","err","_iterableToArrayLimit","_nonIterableRest","construct_construct","Parent","args","Class","Reflect","construct","sham","Proxy","Date","toString","e","isNativeReflectConstruct","instance","Function","bind","wrapNativeSuper_wrapNativeSuper","_cache","Map","fn","indexOf","has","Wrapper","enumerable","math_array_MathArray","_Array","MathArray","classCallCheck","possibleConstructorReturn","inherits","createClass","offset","formatString","common","opts","string","name","t","ai","min","minVector","maxVector","valid","validate","addScalar","Vector3","_lib_vector__WEBPACK_IMPORTED_MODULE_6__","_lib_common__WEBPACK_IMPORTED_MODULE_7__","gl_matrix_vec3__WEBPACK_IMPORTED_MODULE_8__","ORIGIN","_Vector","_this","_ref","_ref$origin","origin","_ref2","_ref2$origin","_ref3","_ref3$origin","_operation","validateVector","v","every","esm_common","vector2_Vector2","Vector2","atan2","lib_vector","vector4_Vector4","Vector4","transformVector","mat4_multiply","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","mat4_scale","vec4_transformMat4","matrix4_Matrix4","IDENTITY","Matrix4","identity","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","setColumnMajor","j","q","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","fromQuat","left","right","bottom","top","near","far","rl","tb","nf","mat4_frustum","eye","_ref2$center","center","_ref2$up","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","mat4_lookAt","_ref3$near","_ref3$far","lr","bt","mat4_ortho","_ref4","_ref4$fovy","fovy","_ref4$aspect","aspect","_ref4$focalDistance","focalDistance","_ref4$near","_ref4$far","halfY","tan","ortho","_ref5","_ref5$fov","fov","_ref5$aspect","_ref5$near","_ref5$far","f","Infinity","mat4_perspective","mat4_transpose","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","rad","s","_ref6","_ref7","slicedToArray","rx","ry","rz","axis","b12","b20","b21","b22","mat4_rotate","factor","vector3","vec3","transformVector2","transformVector3","transformVector4","_transformVector","Boolean","translate","math_array"],"mappings":"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","file":"2-7309cc54f3a3c0990ec9.js","sourcesContent":["export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.array.is-array\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-finite\";\nvar config = {};\nconfig.EPSILON = 1e-12;\nconfig.debug = true;\nconfig.precision = 4;\nconfig.printTypes = false;\nconfig.printDegrees = false;\nconfig.printRowMajor = true;\nexport { config };\nexport function configure(options) {\n  if ('epsilon' in options) {\n    config.EPSILON = options.epsilon;\n  }\n\n  if ('debug' in options) {\n    config.debug = options.debug;\n  }\n}\nexport function checkNumber(value) {\n  if (!Number.isFinite(value)) {\n    throw new Error(\"Invalid number \".concat(value));\n  }\n\n  return value;\n}\n\nfunction round(value) {\n  return Math.round(value / config.EPSILON) * config.EPSILON;\n}\n\nexport function formatValue(value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$precision = _ref.precision,\n      precision = _ref$precision === void 0 ? config.precision || 4 : _ref$precision;\n\n  value = round(value);\n  return parseFloat(value.toPrecision(precision));\n}\nexport function formatAngle(value) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$precision = _ref2.precision,\n      precision = _ref2$precision === void 0 ? config.precision || 4 : _ref2$precision,\n      _ref2$printDegrees = _ref2.printDegrees,\n      printDegrees = _ref2$printDegrees === void 0 ? config.printAngles : _ref2$printDegrees;\n\n  value = printDegrees ? degrees(value) : value;\n  value = round(value);\n  return \"\".concat(parseFloat(value.toPrecision(precision))).concat(printDegrees ? '°' : '');\n}\nexport function isArray(value) {\n  return Array.isArray(value) || ArrayBuffer.isView(value) && value.length !== undefined;\n}\nexport function clone(array) {\n  return array.clone ? array.clone() : new Array(array);\n}\n\nfunction map(value, func) {\n  if (isArray(value)) {\n    var result = clone(value);\n\n    for (var i = 0; i < result.length; ++i) {\n      result[i] = func(result[i], i, result);\n    }\n\n    return result;\n  }\n\n  return func(value);\n}\n\nexport function radians(degrees) {\n  return map(degrees, function (degrees) {\n    return degrees / 180 * Math.PI;\n  });\n}\nexport function degrees(radians) {\n  return map(radians, function (radians) {\n    return radians * 180 / Math.PI;\n  });\n}\nexport function sin(radians) {\n  return map(radians, function (angle) {\n    return Math.sin(angle);\n  });\n}\nexport function cos(radians) {\n  return map(radians, function (angle) {\n    return Math.cos(angle);\n  });\n}\nexport function tan(radians) {\n  return map(radians, function (angle) {\n    return Math.tan(angle);\n  });\n}\nexport function asin(radians) {\n  return map(radians, function (angle) {\n    return Math.asin(angle);\n  });\n}\nexport function acos(radians) {\n  return map(radians, function (angle) {\n    return Math.acos(angle);\n  });\n}\nexport function atan(radians) {\n  return map(radians, function (angle) {\n    return Math.atan(angle);\n  });\n}\nexport function clamp(value, min, max) {\n  return map(value, function (value) {\n    return Math.max(min, Math.min(max, value));\n  });\n}\nexport function lerp(a, b, t) {\n  if (isArray(a)) {\n    return a.map(function (ai, i) {\n      return lerp(ai, b[i], t);\n    });\n  }\n\n  return t * b + (1 - t) * a;\n}\nexport function equals(a, b) {\n  if (isArray(a) && isArray(b)) {\n    if (a === b) {\n      return true;\n    }\n\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; ++i) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return Math.abs(a - b) <= config.EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","import \"core-js/modules/es6.typed.float32-array\";\n\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import \"core-js/modules/es6.array.is-array\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport MathArray from './math-array';\nimport { checkNumber } from './common';\n\nvar assert = function assert(x, m) {\n  if (!x) {\n    throw new Error(m);\n  }\n};\n\nvar Vector = function (_MathArray) {\n  _inherits(Vector, _MathArray);\n\n  function Vector() {\n    _classCallCheck(this, Vector);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Vector).apply(this, arguments));\n  }\n\n  _createClass(Vector, [{\n    key: \"len\",\n    value: function len() {\n      return Math.sqrt(this.lengthSquared());\n    }\n  }, {\n    key: \"magnitude\",\n    value: function magnitude() {\n      return Math.sqrt(this.lengthSquared());\n    }\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared() {\n      var length = 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        length += this[i] * this[i];\n      }\n\n      return length;\n    }\n  }, {\n    key: \"distance\",\n    value: function distance(mathArray) {\n      return Math.sqrt(this.distanceSquared(mathArray));\n    }\n  }, {\n    key: \"distanceSquared\",\n    value: function distanceSquared(mathArray) {\n      var length = 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        var dist = this[i] - mathArray[i];\n        length += dist * dist;\n      }\n\n      return checkNumber(length);\n    }\n  }, {\n    key: \"dot\",\n    value: function dot(mathArray) {\n      var product = 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        product += this[i] * mathArray[i];\n      }\n\n      return checkNumber(product);\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      var length = this.magnitude();\n\n      if (length !== 0) {\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] /= length;\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"add\",\n    value: function add() {\n      for (var _len = arguments.length, vectors = new Array(_len), _key = 0; _key < _len; _key++) {\n        vectors[_key] = arguments[_key];\n      }\n\n      for (var _i = 0; _i < vectors.length; _i++) {\n        var vector = vectors[_i];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] += vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract() {\n      for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        vectors[_key2] = arguments[_key2];\n      }\n\n      for (var _i2 = 0; _i2 < vectors.length; _i2++) {\n        var vector = vectors[_i2];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] -= vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply() {\n      for (var _len3 = arguments.length, vectors = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        vectors[_key3] = arguments[_key3];\n      }\n\n      for (var _i3 = 0; _i3 < vectors.length; _i3++) {\n        var vector = vectors[_i3];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] *= vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"divide\",\n    value: function divide() {\n      for (var _len4 = arguments.length, vectors = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        vectors[_key4] = arguments[_key4];\n      }\n\n      for (var _i4 = 0; _i4 < vectors.length; _i4++) {\n        var vector = vectors[_i4];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] /= vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(_scale) {\n      if (Array.isArray(_scale)) {\n        return this.multiply(_scale);\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= _scale;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"scaleAndAdd\",\n    value: function scaleAndAdd(vector, scale) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = this[i] * scale + vector[i];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lengthSq\",\n    value: function lengthSq() {\n      return this.lengthSquared();\n    }\n  }, {\n    key: \"distanceTo\",\n    value: function distanceTo(vector) {\n      return this.distance(vector);\n    }\n  }, {\n    key: \"distanceToSquared\",\n    value: function distanceToSquared(vector) {\n      return this.distanceSquared(vector);\n    }\n  }, {\n    key: \"getComponent\",\n    value: function getComponent(i) {\n      assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n      return checkNumber(this[i]);\n    }\n  }, {\n    key: \"setComponent\",\n    value: function setComponent(i, value) {\n      assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n      this[i] = value;\n      return this.check();\n    }\n  }, {\n    key: \"addVectors\",\n    value: function addVectors(a, b) {\n      return this.copy(a).add(b);\n    }\n  }, {\n    key: \"subVectors\",\n    value: function subVectors(a, b) {\n      return this.copy(a).subtract(b);\n    }\n  }, {\n    key: \"multiplyVectors\",\n    value: function multiplyVectors(a, b) {\n      return this.copy(a).multiply(b);\n    }\n  }, {\n    key: \"addScaledVector\",\n    value: function addScaledVector(a, b) {\n      return this.add(new this.constructor(a).multiplyScalar(b));\n    }\n  }, {\n    key: \"x\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      return this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      return this[1] = checkNumber(value);\n    }\n  }]);\n\n  return Vector;\n}(MathArray);\n\nexport { Vector as default };","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import setPrototypeOf from \"./setPrototypeOf\";\n\nfunction isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf\";\nimport setPrototypeOf from \"./setPrototypeOf\";\nimport isNativeFunction from \"./isNativeFunction\";\nimport construct from \"./construct\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-finite\";\nimport \"core-js/modules/es6.typed.float32-array\";\nimport \"core-js/modules/es6.function.name\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport { config, formatValue, equals as _equals } from './common';\n\nvar MathArray = function (_Array) {\n  _inherits(MathArray, _Array);\n\n  function MathArray() {\n    _classCallCheck(this, MathArray);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MathArray).apply(this, arguments));\n  }\n\n  _createClass(MathArray, [{\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor().copy(this).check();\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(array) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = array[i];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"set\",\n    value: function set() {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = (i < 0 || arguments.length <= i ? undefined : arguments[i]) || 0;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(array) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = array[i + offset];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.formatString(config);\n    }\n  }, {\n    key: \"formatString\",\n    value: function formatString(opts) {\n      var string = '';\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        string += (i > 0 ? ', ' : '') + formatValue(this[i], opts);\n      }\n\n      return \"\".concat(opts.printTypes ? this.constructor.name : '', \"[\").concat(string, \"]\");\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        array[offset + i] = this[i];\n      }\n\n      return array;\n    }\n  }, {\n    key: \"toFloat32Array\",\n    value: function toFloat32Array() {\n      return new Float32Array(this);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(array) {\n      if (!array || this.length !== array.length) {\n        return false;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        if (!_equals(this[i], array[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"exactEquals\",\n    value: function exactEquals(array) {\n      if (!array || this.length !== array.length) {\n        return false;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        if (this[i] !== array[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = -this[i];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"inverse\",\n    value: function inverse() {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = 1 / this[i];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lerp\",\n    value: function lerp(a, b, t) {\n      if (t === undefined) {\n        t = b;\n        b = a;\n        a = this;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        var ai = a[i];\n        this[i] = ai + t * (b[i] - ai);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"min\",\n    value: function min(vector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(vector[i], this[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"max\",\n    value: function max(vector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.max(vector[i], this[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"clamp\",\n    value: function clamp(minVector, maxVector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(Math.max(this[i], minVector[i]), maxVector[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      var valid = this.length === this.ELEMENTS;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        valid = valid && Number.isFinite(this[i]);\n      }\n\n      return valid;\n    }\n  }, {\n    key: \"check\",\n    value: function check() {\n      if (config.debug && !this.validate(this)) {\n        throw new Error(\"math.gl: \".concat(this.constructor.name, \" some fields set to invalid numbers'\"));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(a) {\n      return this.subtract(a);\n    }\n  }, {\n    key: \"setScalar\",\n    value: function setScalar(a) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = a;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"addScalar\",\n    value: function addScalar(a) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] += a;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"subScalar\",\n    value: function subScalar(a) {\n      return this.addScalar(-a);\n    }\n  }, {\n    key: \"multiplyScalar\",\n    value: function multiplyScalar(a) {\n      return this.scale(a);\n    }\n  }, {\n    key: \"divideScalar\",\n    value: function divideScalar(a) {\n      return this.scale(1 / a);\n    }\n  }, {\n    key: \"clampScalar\",\n    value: function clampScalar(min, max) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(Math.max(this[i], min), max);\n      }\n\n      return this.check();\n    }\n  }]);\n\n  return MathArray;\n}(_wrapNativeSuper(Array));\n\nexport { MathArray as default };","import \"core-js/modules/es6.array.is-array\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport Vector from './lib/vector';\nimport { checkNumber } from './lib/common';\nimport * as vec3 from 'gl-matrix/vec3';\nvar ORIGIN = [0, 0, 0];\n\nvar Vector3 = function (_Vector) {\n  _inherits(Vector3, _Vector);\n\n  function Vector3() {\n    var _this;\n\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    _classCallCheck(this, Vector3);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Vector3).call(this, 3));\n\n    if (Array.isArray(x) && arguments.length === 1) {\n      _this.copy(x);\n    } else {\n      _this.set(x, y, z);\n    }\n\n    return _this;\n  }\n\n  _createClass(Vector3, [{\n    key: \"angle\",\n    value: function angle(vector) {\n      return vec3.angle(this, vector);\n    }\n  }, {\n    key: \"cross\",\n    value: function cross(vector) {\n      vec3.cross(this, this, vector);\n      return this.check();\n    }\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(_ref) {\n      var radians = _ref.radians,\n          _ref$origin = _ref.origin,\n          origin = _ref$origin === void 0 ? ORIGIN : _ref$origin;\n      vec3.rotateX(this, this, origin, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(_ref2) {\n      var radians = _ref2.radians,\n          _ref2$origin = _ref2.origin,\n          origin = _ref2$origin === void 0 ? ORIGIN : _ref2$origin;\n      vec3.rotateY(this, this, origin, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateZ\",\n    value: function rotateZ(_ref3) {\n      var radians = _ref3.radians,\n          _ref3$origin = _ref3.origin,\n          origin = _ref3$origin === void 0 ? ORIGIN : _ref3$origin;\n      vec3.rotateZ(this, this, origin, radians);\n      return this.check();\n    }\n  }, {\n    key: \"operation\",\n    value: function operation(_operation) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      _operation.apply(void 0, [this, this].concat(args));\n\n      return this.check();\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 3;\n    }\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      return this[2] = checkNumber(value);\n    }\n  }]);\n\n  return Vector3;\n}(Vector);\n\nexport { Vector3 as default };","import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-finite\";\nimport \"core-js/modules/es6.array.is-array\";\nexport function validateVector(v, length) {\n  if (v.length !== length) {\n    return false;\n  }\n\n  return v.every(Number.isFinite);\n}","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import \"core-js/modules/es6.array.is-array\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport Vector from './lib/vector';\nimport * as vec2 from 'gl-matrix/vec2';\n\nvar Vector2 = function (_Vector) {\n  _inherits(Vector2, _Vector);\n\n  function Vector2() {\n    var _this;\n\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    _classCallCheck(this, Vector2);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Vector2).call(this, 2));\n\n    if (Array.isArray(x) && arguments.length === 1) {\n      _this.copy(x);\n    } else {\n      _this.set(x, y);\n    }\n\n    return _this;\n  }\n\n  _createClass(Vector2, [{\n    key: \"cross\",\n    value: function cross(vector) {\n      vec2.cross(this, this, vector);\n      return this.check();\n    }\n  }, {\n    key: \"horizontalAngle\",\n    value: function horizontalAngle() {\n      return Math.atan2(this.y, this.x);\n    }\n  }, {\n    key: \"verticalAngle\",\n    value: function verticalAngle() {\n      return Math.atan2(this.x, this.y);\n    }\n  }, {\n    key: \"operation\",\n    value: function operation(_operation) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      _operation.apply(void 0, [this, this].concat(args));\n\n      return this.check();\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 2;\n    }\n  }]);\n\n  return Vector2;\n}(Vector);\n\nexport { Vector2 as default };","import \"core-js/modules/es6.array.is-array\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport Vector from './lib/vector';\nimport { checkNumber } from './lib/common';\n\nvar Vector4 = function (_Vector) {\n  _inherits(Vector4, _Vector);\n\n  function Vector4() {\n    var _this;\n\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    _classCallCheck(this, Vector4);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Vector4).call(this, 4));\n\n    if (Array.isArray(x) && arguments.length === 1) {\n      _this.copy(x);\n    } else {\n      _this.set(x, y, z, w);\n    }\n\n    return _this;\n  }\n\n  _createClass(Vector4, [{\n    key: \"applyMatrix4\",\n    value: function applyMatrix4(m) {\n      m.transformVector(this, this);\n      return this;\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 4;\n    }\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      return this[2] = checkNumber(value);\n    }\n  }, {\n    key: \"w\",\n    get: function get() {\n      return this[3];\n    },\n    set: function set(value) {\n      return this[3] = checkNumber(value);\n    }\n  }]);\n\n  return Vector4;\n}(Vector);\n\nexport { Vector4 as default };","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import \"core-js/modules/es6.typed.float32-array\";\nimport * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import \"core-js/modules/es6.array.is-array\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-finite\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport MathArray from './lib/math-array';\nimport { checkNumber } from './lib/common';\nimport { validateVector } from './lib/validators';\nimport Vector2 from './vector2';\nimport Vector3 from './vector3';\nimport Vector4 from './vector4';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport * as vec4 from 'gl-matrix/vec4';\nvar IDENTITY = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nexport function validateMatrix4(m) {\n  return m.length === 16 && Number.isFinite(m[0]) && Number.isFinite(m[1]) && Number.isFinite(m[2]) && Number.isFinite(m[3]) && Number.isFinite(m[4]) && Number.isFinite(m[5]) && Number.isFinite(m[6]) && Number.isFinite(m[7]) && Number.isFinite(m[8]) && Number.isFinite(m[9]) && Number.isFinite(m[10]) && Number.isFinite(m[11]) && Number.isFinite(m[12]) && Number.isFinite(m[13]) && Number.isFinite(m[14]) && Number.isFinite(m[15]);\n}\n\nvar Matrix4 = function (_MathArray) {\n  _inherits(Matrix4, _MathArray);\n\n  function Matrix4() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _classCallCheck(this, Matrix4);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Matrix4).call(this, 16));\n\n    if (Array.isArray(args[0]) && arguments.length === 1) {\n      _this.copy(args[0]);\n    } else {\n      _this.identity();\n    }\n\n    return _this;\n  }\n\n  _createClass(Matrix4, [{\n    key: \"setRowMajor\",\n    value: function setRowMajor() {\n      var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var m10 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var m11 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n      var m12 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n      var m13 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      var m20 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;\n      var m21 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n      var m22 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;\n      var m23 = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;\n      var m30 = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 0;\n      var m31 = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 0;\n      var m32 = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : 0;\n      var m33 = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : 1;\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m30;\n      this[4] = m01;\n      this[5] = m11;\n      this[6] = m21;\n      this[7] = m31;\n      this[8] = m02;\n      this[9] = m12;\n      this[10] = m22;\n      this[11] = m32;\n      this[12] = m03;\n      this[13] = m13;\n      this[14] = m23;\n      this[15] = m33;\n      return this.check();\n    }\n  }, {\n    key: \"setColumnMajor\",\n    value: function setColumnMajor() {\n      var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var m10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var m20 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var m30 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var m01 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var m11 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n      var m21 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n      var m31 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      var m02 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;\n      var m12 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n      var m22 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;\n      var m32 = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;\n      var m03 = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 0;\n      var m13 = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 0;\n      var m23 = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : 0;\n      var m33 = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : 1;\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m30;\n      this[4] = m01;\n      this[5] = m11;\n      this[6] = m21;\n      this[7] = m31;\n      this[8] = m02;\n      this[9] = m12;\n      this[10] = m22;\n      this[11] = m32;\n      this[12] = m03;\n      this[13] = m13;\n      this[14] = m23;\n      this[15] = m33;\n      return this.check();\n    }\n  }, {\n    key: \"set\",\n    value: function set() {\n      return this.setColumnMajor.apply(this, arguments);\n    }\n  }, {\n    key: \"getElement\",\n    value: function getElement(i, j) {\n      var columnMajor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return columnMajor ? this[i][j] : this[j][i];\n    }\n  }, {\n    key: \"setElement\",\n    value: function setElement(i, j, value) {\n      var columnMajor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (columnMajor) {\n        this[i][j] = checkNumber(value);\n      } else {\n        this[j][i] = checkNumber(value);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"determinant\",\n    value: function determinant() {\n      return mat4.determinant(this);\n    }\n  }, {\n    key: \"identity\",\n    value: function identity() {\n      return this.copy(IDENTITY);\n    }\n  }, {\n    key: \"fromQuaternion\",\n    value: function fromQuaternion(q) {\n      mat4.fromQuat(this, q);\n      return this.check();\n    }\n  }, {\n    key: \"frustum\",\n    value: function frustum(_ref) {\n      var left = _ref.left,\n          right = _ref.right,\n          bottom = _ref.bottom,\n          top = _ref.top,\n          near = _ref.near,\n          far = _ref.far;\n      mat4.frustum(this, left, right, bottom, top, near, far);\n      return this.check();\n    }\n  }, {\n    key: \"lookAt\",\n    value: function lookAt(_ref2) {\n      var eye = _ref2.eye,\n          _ref2$center = _ref2.center,\n          center = _ref2$center === void 0 ? [0, 0, 0] : _ref2$center,\n          _ref2$up = _ref2.up,\n          up = _ref2$up === void 0 ? [0, 1, 0] : _ref2$up;\n      mat4.lookAt(this, eye, center, up);\n      return this.check();\n    }\n  }, {\n    key: \"ortho\",\n    value: function ortho(_ref3) {\n      var left = _ref3.left,\n          right = _ref3.right,\n          bottom = _ref3.bottom,\n          top = _ref3.top,\n          _ref3$near = _ref3.near,\n          near = _ref3$near === void 0 ? 0.1 : _ref3$near,\n          _ref3$far = _ref3.far,\n          far = _ref3$far === void 0 ? 500 : _ref3$far;\n      mat4.ortho(this, left, right, bottom, top, near, far);\n      return this.check();\n    }\n  }, {\n    key: \"orthographic\",\n    value: function orthographic(_ref4) {\n      var _ref4$fovy = _ref4.fovy,\n          fovy = _ref4$fovy === void 0 ? 45 * Math.PI / 180 : _ref4$fovy,\n          _ref4$aspect = _ref4.aspect,\n          aspect = _ref4$aspect === void 0 ? 1 : _ref4$aspect,\n          _ref4$focalDistance = _ref4.focalDistance,\n          focalDistance = _ref4$focalDistance === void 0 ? 1 : _ref4$focalDistance,\n          _ref4$near = _ref4.near,\n          near = _ref4$near === void 0 ? 0.1 : _ref4$near,\n          _ref4$far = _ref4.far,\n          far = _ref4$far === void 0 ? 500 : _ref4$far;\n\n      if (fovy > Math.PI * 2) {\n        throw Error('radians');\n      }\n\n      var halfY = fovy / 2;\n      var top = focalDistance * Math.tan(halfY);\n      var right = top * aspect;\n      return new Matrix4().ortho({\n        left: -right,\n        right: right,\n        bottom: -top,\n        top: top,\n        near: near,\n        far: far\n      });\n    }\n  }, {\n    key: \"perspective\",\n    value: function perspective() {\n      var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          fovy = _ref5.fovy,\n          _ref5$fov = _ref5.fov,\n          fov = _ref5$fov === void 0 ? 45 * Math.PI / 180 : _ref5$fov,\n          _ref5$aspect = _ref5.aspect,\n          aspect = _ref5$aspect === void 0 ? 1 : _ref5$aspect,\n          _ref5$near = _ref5.near,\n          near = _ref5$near === void 0 ? 0.1 : _ref5$near,\n          _ref5$far = _ref5.far,\n          far = _ref5$far === void 0 ? 500 : _ref5$far;\n\n      fovy = fovy || fov;\n\n      if (fovy > Math.PI * 2) {\n        throw Error('radians');\n      }\n\n      mat4.perspective(this, fovy, aspect, near, far);\n      return this.check();\n    }\n  }, {\n    key: \"transpose\",\n    value: function transpose() {\n      mat4.transpose(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      mat4.invert(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyLeft\",\n    value: function multiplyLeft(a) {\n      mat4.multiply(this, a, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyRight\",\n    value: function multiplyRight(a) {\n      mat4.multiply(this, this, a);\n      return this.check();\n    }\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(radians) {\n      mat4.rotateX(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(radians) {\n      mat4.rotateY(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateZ\",\n    value: function rotateZ(radians) {\n      mat4.rotateZ(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateXYZ\",\n    value: function rotateXYZ(_ref6) {\n      var _ref7 = _slicedToArray(_ref6, 3),\n          rx = _ref7[0],\n          ry = _ref7[1],\n          rz = _ref7[2];\n\n      return this.rotateX(rx).rotateY(ry).rotateZ(rz);\n    }\n  }, {\n    key: \"rotateAxis\",\n    value: function rotateAxis(radians, axis) {\n      mat4.rotate(this, this, radians, axis);\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(factor) {\n      if (Array.isArray(factor)) {\n        mat4.scale(this, this, factor);\n      } else {\n        mat4.scale(this, this, [factor, factor, factor]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(vec) {\n      mat4.translate(this, this, vec);\n      return this.check();\n    }\n  }, {\n    key: \"transformVector2\",\n    value: function transformVector2(vector, out) {\n      out = out || new Vector2();\n      vec2.transformMat4(out, vector, this);\n      validateVector(out, 2);\n      return out;\n    }\n  }, {\n    key: \"transformVector3\",\n    value: function transformVector3(vector, out) {\n      out = out || new Vector3();\n      vec3.transformMat4(out, vector, this);\n      validateVector(out, 3);\n      return out;\n    }\n  }, {\n    key: \"transformVector4\",\n    value: function transformVector4(vector, out) {\n      out = out || new Vector4();\n      vec4.transformMat4(out, vector, this);\n      validateVector(out, 4);\n      return out.check();\n    }\n  }, {\n    key: \"transformVector\",\n    value: function transformVector(vector, out) {\n      switch (vector.length) {\n        case 2:\n          return this.transformVector2(vector, out);\n\n        case 3:\n          return this.transformVector3(vector, out);\n\n        case 4:\n          return this.transformVector4(vector, out);\n\n        default:\n          throw new Error('Illegal vector');\n      }\n    }\n  }, {\n    key: \"transformDirection\",\n    value: function transformDirection(vector, out) {\n      return this._transformVector(vector, out, 0);\n    }\n  }, {\n    key: \"transformPoint\",\n    value: function transformPoint(vector, out) {\n      return this._transformVector(vector, out, 1);\n    }\n  }, {\n    key: \"_transformVector\",\n    value: function _transformVector(vector, out, w) {\n      switch (vector.length) {\n        case 2:\n          out = out || new Vector2();\n          vec4.transformMat4(out, [vector[0], vector[1], 0, w], this);\n          out.length = 2;\n          validateVector(out, 2);\n          break;\n\n        case 3:\n          out = out || new Vector3();\n          vec4.transformMat4(out, [vector[0], vector[1], vector[2], w], this);\n          out.length = 3;\n          validateVector(out, 3);\n          break;\n\n        case 4:\n          if (Boolean(w) !== Boolean(vector[3])) {\n            throw new Error('math.gl: Matrix4.transformPoint - invalid vector');\n          }\n\n          out = out || new Vector4();\n          vec4.transformMat4(out, vector, this);\n          validateVector(out, 4);\n          break;\n\n        default:\n          throw new Error('Illegal vector');\n      }\n\n      return out;\n    }\n  }, {\n    key: \"makeRotationX\",\n    value: function makeRotationX(radians) {\n      return this.identity().rotateX(radians);\n    }\n  }, {\n    key: \"makeTranslation\",\n    value: function makeTranslation(x, y, z) {\n      return this.identity().translate([x, y, z]);\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 16;\n    }\n  }]);\n\n  return Matrix4;\n}(MathArray);\n\nexport { Matrix4 as default };"],"sourceRoot":""}