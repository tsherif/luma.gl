{"version":3,"sources":["webpack:///../node_modules/seer/dist/index.js","webpack:///../node_modules/mjolnir.js/dist/esm/utils/hammer-overrides.js","webpack:///../node_modules/mjolnir.js/dist/esm/utils/hammer.browser.js","webpack:///../node_modules/mjolnir.js/dist/esm/constants.js","webpack:///../node_modules/mjolnir.js/dist/esm/inputs/wheel-input.js","webpack:///../node_modules/mjolnir.js/dist/esm/inputs/move-input.js","webpack:///../node_modules/mjolnir.js/dist/esm/inputs/key-input.js","webpack:///../node_modules/mjolnir.js/dist/esm/inputs/contextmenu-input.js","webpack:///../node_modules/mjolnir.js/dist/esm/utils/event-utils.js","webpack:///../node_modules/mjolnir.js/dist/esm/utils/event-registrar.js","webpack:///../node_modules/mjolnir.js/dist/esm/event-manager.js","webpack:///../node_modules/mjolnir.js/dist/esm/utils/hammer-manager-mock.js","webpack:///../node_modules/mjolnir.js/dist/esm/index.js","webpack:///../node_modules/hammerjs/hammer.js","webpack:///../node_modules/mjolnir.js/dist/esm/utils/globals.js"],"names":["__webpack_require__","Object","defineProperty","exports","value","_typeof","Symbol","iterator","obj","constructor","prototype","isBrowser","window","addEventListener","timers","Map","isReady","__SEER_INITIALIZED__","throttle","key","delay","time","get","now","Date","set","send","type","data","arguments","length","undefined","seen","Set","payload","JSON","stringify","has","add","toString","call","slice","includes","Array","replacer","postMessage","source","e","console","log","listeners","listener","message","_message$data","typeListeners","forEach","cb","init","__SEER_LISTENER__","list","listItem","itemKey","updateItem","path","multiUpdate","array","deleteItem","addLog","msg","listenFor","Error","push","removeListener","filter","l","clean","removeEventListener","INPUT_START","INPUT_MOVE","INPUT_END","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","PointerEventInput","oldHandler","hammerjs","document","handler","ev","store","this","button","predict","i","some","pointerId","MouseInput","eventType","pressed","which","callback","manager","pointers","changedPointers","pointerType","srcEvent","hammer_browser","RECOGNIZERS","Rotate","enable","Pinch","Swipe","Pan","threshold","Press","Tap","event","taps","RECOGNIZER_COMPATIBLE_MAP","rotate","pan","doubletap","anytap","RECOGNIZER_FALLBACK_MAP","BASIC_EVENT_ALIASES","pointerdown","pointermove","pointerup","touchstart","touchmove","touchend","INPUT_EVENT_TYPES","EVENT_RECOGNIZER_MAP","tap","press","pinch","pinchin","pinchout","pinchstart","pinchmove","pinchend","pinchcancel","rotatestart","rotatemove","rotateend","rotatecancel","panstart","panmove","panup","pandown","panleft","panright","panend","pancancel","swipe","swipeleft","swiperight","swipeup","swipedown","GESTURE_EVENT_ALIASES","click","anyclick","dblclick","mouseover","mouseout","mouseleave","firefox","globals","indexOf","WHEEL_EVENTS","wheel_input_WheelInput","WheelInput","element","_this","options","classCallCheck","assign","events","concat","handleEvent","bind","passive","createClass","_this2","enabled","deltaY","WheelEvent","deltaMode","DOM_DELTA_PIXEL","devicePixelRatio","DOM_DELTA_LINE","wheelPosition","x","clientX","y","clientY","Math","floor","shiftKey","_onWheel","delta","position","center","target","MOUSE_EVENTS","move_input_MoveInput","MoveInput","enableMoveEvent","enableLeaveEvent","enableOutEvent","enableOverEvent","handleOverEvent","handleOutEvent","handleLeaveEvent","handleMoveEvent","KEY_EVENTS","key_input_KeyInput","KeyInput","enableDownEvent","enableUpEvent","tabIndex","style","outline","targetElement","srcElement","tagName","contextmenu_input_ContextmenuInput","ContextmenuInput","DOWN_EVENT","MOVE_EVENT","UP_EVENT","event_utils_MOUSE_EVENTS","MOUSE_EVENT_WHICH_LEFT","MOUSE_EVENT_WHICH_MIDDLE","MOUSE_EVENT_WHICH_RIGHT","MOUSE_EVENT_BUTTON_LEFT","MOUSE_EVENT_BUTTON_MIDDLE","MOUSE_EVENT_BUTTON_RIGHT","MOUSE_EVENT_BUTTONS_LEFT_MASK","MOUSE_EVENT_BUTTONS_RIGHT_MASK","MOUSE_EVENT_BUTTONS_MIDDLE_MASK","event_registrar_EventRegistrar","EventRegistrar","eventManager","handlers","handlersByElement","entry","splice","entries","isEmpty","mjolnirEvent","_normalizeEvent","rootElement","_emit","handled","parentNode","immediatePropagationStopped","stopPropagation","stopImmediatePropagation","_entries$i","_event$srcEvent","buttons","leftButton","middleButton","rightButton","Number","isFinite","Boolean","whichButtons","rect","getBoundingClientRect","scaleX","width","offsetWidth","scaleY","height","offsetHeight","offsetCenter","left","clientLeft","top","clientTop","getOffsetPosition","DEFAULT_OPTIONS","recognizers","recognizerOptions","Manager","m","instance","chainedNoop","on","off","destroy","emit","touchAction","event_manager_EventManager","EventManager","_onBasicInput","_onOtherEvent","setElement","ManagerClass","recognizerName","keys","name","recognizer","otherName","recognizeWith","recognizerOption","wheelInput","moveInput","keyInput","contextmenuInput","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","_step$value","slicedToArray","eventAlias","eventRegistrar","_toggleRecognizer","err","_addEventHandler","eventName","_removeEventHandler","fallbackRecognizers","otherRecognizer","requireFailure","dropRequireFailure","enableEventType","remove","isRecognizerUsed","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","values","eh","alias","d","__webpack_exports__","__WEBPACK_AMD_DEFINE_RESULT__","exportName","VENDOR_PREFIXES","TEST_ELEMENT","createElement","TYPE_FUNCTION","round","abs","setTimeoutContext","fn","timeout","context","setTimeout","bindFn","invokeArrayArg","arg","isArray","each","hasOwnProperty","deprecate","method","deprecationMessage","stack","replace","warn","apply","TypeError","output","index","nextKey","extend","dest","src","merge","inherit","child","base","properties","childP","baseP","create","_super","boolOrFn","val","args","ifUndefined","val1","val2","addEventListeners","types","splitStr","removeEventListeners","hasParent","node","parent","inStr","str","find","trim","split","inArray","findByKey","toArray","uniqueArray","sort","results","a","b","prefixed","property","prefix","prop","camelProp","toUpperCase","_uniqueId","getWindowForElement","doc","ownerDocument","defaultView","parentWindow","SUPPORT_TOUCH","SUPPORT_POINTER_EVENTS","SUPPORT_ONLY_TOUCH","test","navigator","userAgent","COMPUTE_INTERVAL","INPUT_CANCEL","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","PROPS_XY","PROPS_CLIENT_XY","Input","self","inputTarget","domHandler","inputHandler","input","pointersLen","changedPointersLen","isFirst","isFinal","session","pointersLength","firstInput","simpleCloneInputData","firstMultiple","getCenter","timeStamp","deltaTime","angle","getAngle","distance","getDistance","offset","offsetDelta","prevDelta","prevInput","deltaX","computeDeltaXY","offsetDirection","getDirection","overallVelocity","getVelocity","overallVelocityX","overallVelocityY","scale","start","end","rotation","getRotation","maxPointers","velocity","velocityX","velocityY","direction","last","lastInterval","v","computeIntervalInputData","computeInputData","recognize","p1","p2","props","sqrt","atan2","PI","evEl","evTarget","evWin","MOUSE_ELEMENT_EVENTS","MOUSE_WINDOW_EVENTS","POINTER_INPUT_MAP","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","2","3","4","5","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","pointerEvents","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","toLowerCase","isTouch","storeIndex","SINGLE_TOUCH_INPUT_MAP","touchcancel","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","SingleTouchInput","started","touches","all","changed","changedTouches","TOUCH_INPUT_MAP","TOUCH_TARGET_EVENTS","TouchInput","targetIds","allTouches","identifier","targetTouches","changedTargetTouches","touch","DEDUP_TIMEOUT","DEDUP_DISTANCE","TouchMouseInput","mouse","primaryTouch","lastTouches","setLastTouch","eventData","lastTouch","lts","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","t","dx","dy","PREFIXED_TOUCH_ACTION","NATIVE_TOUCH_ACTION","TOUCH_ACTION_AUTO","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_NONE","TOUCH_ACTION_PAN_X","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MAP","touchMap","cssSupports","CSS","supports","getTouchActionProps","TouchAction","compute","actions","update","getTouchAction","hasPanX","hasPanY","cleanTouchActions","join","preventDefaults","prevented","preventDefault","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","STATE_POSSIBLE","STATE_BEGAN","STATE_CHANGED","STATE_ENDED","STATE_RECOGNIZED","STATE_CANCELLED","Recognizer","defaults","id","state","simultaneous","requireFail","stateStr","directionStr","getRecognizerByNameIfManager","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","Hammer","preset","dropRecognizeWith","hasRequireFailures","canRecognizeWith","additionalEvent","tryEmit","canEmit","inputDataClone","reset","process","attrTest","optionPointers","isRecognized","isValid","directionTest","hasMoved","inOut","validPointers","validMovement","validTime","clearTimeout","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","inputClass","cssProps","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","oldCssProps","toggleCssProps","item","stop","force","stopped","curRecognizer","existing","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","triggerDomEvent","STATE_FAILED","module","global","window_","passiveSupported"],"mappings":"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","file":"5-0a0bc1782e5c02db42c0.js","sourcesContent":["'use strict';\n\nrequire(\"core-js/modules/es6.array.filter\");\n\nrequire(\"core-js/modules/es6.array.for-each\");\n\nrequire(\"core-js/modules/es6.set\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es7.array.includes\");\n\nrequire(\"core-js/modules/es6.string.includes\");\n\nrequire(\"core-js/modules/es6.date.now\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.string.iterator\");\n\nrequire(\"core-js/modules/es6.map\");\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n}; // Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nvar isBrowser = typeof window !== 'undefined' && window.addEventListener;\nvar timers = new Map();\n/**\n * Ready check for Seer initialization\n *\n * @returns {Boolean}\n */\n\nvar isReady = function isReady() {\n  return isBrowser && window.__SEER_INITIALIZED__;\n};\n/**\n * Utility method allowing to throttle a user action based on a key and a minimun delay.\n *\n * @param key {String} A unique key\n * @param delay {Number} The minimal delay to throttle\n * @returns {Boolean}\n */\n\n\nvar throttle = function throttle(key, delay) {\n  var time = timers.get(key);\n  var now = Date.now();\n\n  if (time && now - time < delay) {\n    return true;\n  }\n\n  timers.set(key, now);\n  return false;\n};\n\nvar replacer = function replacer(seen) {\n  return function (key, value) {\n    if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && seen.has(value)) {\n      return;\n    }\n\n    seen.add(value);\n    var isArray = Object.prototype.toString.call(value).slice(8, -1).includes('Array');\n\n    if (isArray) {\n      return Array.prototype.slice.call(value, 0, 20);\n    }\n\n    return value;\n  };\n};\n/**\n * Low-level api leveraging window.postMessage\n *\n * @param type {String} The action type\n * @param payload {Any} The action payload\n */\n\n\nvar send = function send(type) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isBrowser || !isReady()) {\n    return;\n  }\n\n  var seen = new Set();\n  var payload = JSON.stringify(data, replacer(seen));\n\n  try {\n    window.postMessage({\n      type: type,\n      payload: payload,\n      source: 'seer-agent'\n    }, '*');\n  } catch (e) {\n    if (throttle('seer-log', 2E3)) {\n      return;\n    }\n\n    console.log(e); // eslint-disable-line\n  }\n};\n\nvar listeners = new Map();\n\nvar listener = function listener(message) {\n  if (!message || !message.data || message.data.source !== 'seer-core') {\n    return;\n  }\n\n  var _message$data = message.data,\n      type = _message$data.type,\n      payload = _message$data.payload;\n  var typeListeners = listeners.get(type);\n\n  if (typeListeners) {\n    typeListeners.forEach(function (cb) {\n      return cb(payload);\n    });\n  }\n};\n/**\n * Initilize window listener. There will be only one for the whole process\n * to prevent too many registrations.\n *\n * This method will be called automatically if you use the `listenFor` method.\n */\n\n\nvar init = function init() {\n  if (!isBrowser || window.__SEER_LISTENER__) {\n    return;\n  }\n\n  window.addEventListener('message', listener);\n  window.__SEER_LISTENER__ = true;\n};\n/**\n * Clean listener. Can be useful in case you want to unregister upcoming events\n * or liberate memory.\n */\n\n\nvar clean = function clean() {\n  if (!isBrowser || !window.__SEER_LISTENER__) {\n    return;\n  }\n\n  window.removeEventListener('message', listener);\n  delete window.__SEER_LISTENER__;\n};\n/**\n * Create a listener that will be called upon events of the given key.\n *\n * @param key {String} The unique tab key\n * @param cb {Function} A callback that will receive the message payload\n */\n\n\nvar listenFor = function listenFor(type, cb) {\n  if (!isBrowser) {\n    return;\n  }\n\n  if (!type || !cb) {\n    throw new Error('Please provide a type and callback');\n  }\n\n  if (!listeners.has(type)) {\n    listeners.set(type, []);\n  }\n\n  if (!window.__SEER_LISTENER__) {\n    init();\n  }\n\n  listeners.get(type).push(cb);\n};\n/**\n * Remove an identity listener\n *\n * @param cb {Function} The callback to remove\n */\n\n\nvar removeListener = function removeListener(cb) {\n  listeners.forEach(function (typeListeners, key) {\n    listeners.set(key, typeListeners.filter(function (l) {\n      return l !== cb;\n    }));\n  });\n};\n/**\n * Creates a new indexed list.\n * It works by index to get O(1) accessing and performance.\n *\n * @param key {String} The key of the tab\n * @param data {Object} The indexed object\n */\n\n\nvar list = function list(key, data) {\n  return send('LIST', {\n    key: key,\n    data: data\n  });\n};\n/**\n * Creates an element in the indexed list, based on the itemKey.\n *\n * @param key {String} The key of the tab\n * @param itemKey {String} The key of the item\n * @param data {Any} The value of the item\n */\n\n\nvar listItem = function listItem(key, itemKey) {\n  var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return send('LIST_ITEM', {\n    key: key,\n    itemKey: itemKey,\n    data: data\n  });\n};\n/**\n * Update an item property, can be deeply nested.\n *\n * @param key {String} The key of the tab\n * @param itemKey {String} The key of the item\n * @param path {String} The path of the variable you want to update\n * @param data {Object} The new value\n */\n\n\nvar updateItem = function updateItem(key, itemKey, path, data) {\n  return send('UPDATE_ITEM', {\n    key: key,\n    itemKey: itemKey,\n    path: path,\n    data: data\n  });\n};\n/**\n * Similar to updateItem, but allows to pass an array with {path,data} pairs for\n * multiple update of the same item without having to send multiple messages.\n *\n * @param key {String} The key of the tab\n * @param itemKey {String} The key of the item\n * @param array {Array} The array of updates\n * @param array.path {String} The path for this update\n * @param array.data {Object} The value of this update\n */\n\n\nvar multiUpdate = function multiUpdate(key, itemKey, array) {\n  return send('MULTI_UPDATE_ITEM', {\n    key: key,\n    itemKey: itemKey,\n    array: array\n  });\n};\n/**\n * Remove a specific item in a specific tab.\n *\n * @param key {String} They key of the tab\n * @param itemKey {String} The key of the item\n */\n\n\nvar deleteItem = function deleteItem(key, itemKey) {\n  return send('DELETE_ITEM', {\n    key: key,\n    itemKey: itemKey\n  });\n};\n/**\n * Will create a log message to an item, that will be displayde with the current time.\n *\n * @param key {String} The key of the tab\n * @param itemKey {String} The key of the item\n * @param msg {String} The message to display\n */\n\n\nvar addLog = function addLog(key, itemKey, msg) {\n  return send('ADD_LOG', {\n    key: key,\n    itemKey: itemKey,\n    msg: msg\n  });\n};\n\nexports[\"default\"] = {\n  send: send,\n  throttle: throttle,\n  isReady: isReady,\n  list: list,\n  listItem: listItem,\n  updateItem: updateItem,\n  multiUpdate: multiUpdate,\n  deleteItem: deleteItem,\n  addLog: addLog,\n  listeners: listeners,\n  listenFor: listenFor,\n  removeListener: removeListener,\n  init: init,\n  clean: clean\n};","/**\n * This file contains overrides the default\n * hammer.js functions to add our own utility\n */\n\n/* Hammer.js constants */\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar MOUSE_INPUT_MAP = {\n  mousedown: INPUT_START,\n  mousemove: INPUT_MOVE,\n  mouseup: INPUT_END\n};\n/**\n * Helper function that returns true if any element in an array meets given criteria.\n * Because older browsers do not support `Array.prototype.some`\n * @params array {Array}\n * @params predict {Function}\n */\n\nfunction some(array, predict) {\n  for (var i = 0; i < array.length; i++) {\n    if (predict(array[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/* eslint-disable no-invalid-this */\n\n\nexport function enhancePointerEventInput(PointerEventInput) {\n  var oldHandler = PointerEventInput.prototype.handler; // overrides PointerEventInput.handler to accept right mouse button\n\n  PointerEventInput.prototype.handler = function handler(ev) {\n    var store = this.store; // Allow non-left mouse buttons through\n\n    if (ev.button > 0) {\n      if (!some(store, function (e) {\n        return e.pointerId === ev.pointerId;\n      })) {\n        store.push(ev);\n      }\n    }\n\n    oldHandler.call(this, ev);\n  };\n} // overrides MouseInput.handler to accept right mouse button\n\nexport function enhanceMouseInput(MouseInput) {\n  MouseInput.prototype.handler = function handler(ev) {\n    var eventType = MOUSE_INPUT_MAP[ev.type]; // on start we want to have the mouse button down\n\n    if (eventType & INPUT_START && ev.button >= 0) {\n      this.pressed = true;\n    }\n\n    if (eventType & INPUT_MOVE && ev.which === 0) {\n      eventType = INPUT_END;\n    } // mouse must be down\n\n\n    if (!this.pressed) {\n      return;\n    }\n\n    if (eventType & INPUT_END) {\n      this.pressed = false;\n    }\n\n    this.callback(this.manager, eventType, {\n      pointers: [ev],\n      changedPointers: [ev],\n      pointerType: 'mouse',\n      srcEvent: ev\n    });\n  };\n}","// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { enhancePointerEventInput, enhanceMouseInput } from './hammer-overrides';\nvar hammerjs = null;\n\nif (typeof document !== 'undefined') {\n  // Avoid crash if imported in a web worker\n  hammerjs = require('hammerjs');\n  enhancePointerEventInput(hammerjs.PointerEventInput);\n  enhanceMouseInput(hammerjs.MouseInput);\n}\n\nexport default hammerjs;","// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport Hammer from './utils/hammer'; // This module contains constants that must be conditionally required\n// due to `window`/`document` references downstream.\n\nexport var RECOGNIZERS = Hammer ? [[Hammer.Rotate, {\n  enable: false\n}], [Hammer.Pinch, {\n  enable: false\n}], [Hammer.Swipe, {\n  enable: false\n}], [Hammer.Pan, {\n  threshold: 0,\n  enable: false\n}], [Hammer.Press, {\n  enable: false\n}], [Hammer.Tap, {\n  event: 'doubletap',\n  taps: 2,\n  enable: false\n}], // TODO - rename to 'tap' and 'singletap' in the next major release\n[Hammer.Tap, {\n  event: 'anytap',\n  enable: false\n}], [Hammer.Tap, {\n  enable: false\n}]] : null; // Recognize the following gestures even if a given recognizer succeeds\n\nexport var RECOGNIZER_COMPATIBLE_MAP = {\n  rotate: ['pinch'],\n  pan: ['press', 'doubletap', 'anytap', 'tap'],\n  doubletap: ['anytap'],\n  anytap: ['tap']\n}; // Recognize the folling gestures only if a given recognizer fails\n\nexport var RECOGNIZER_FALLBACK_MAP = {\n  doubletap: ['tap']\n};\n/**\n * Only one set of basic input events will be fired by Hammer.js:\n * either pointer, touch, or mouse, depending on system support.\n * In order to enable an application to be agnostic of system support,\n * alias basic input events into \"classes\" of events: down, move, and up.\n * See `_onBasicInput()` for usage of these aliases.\n */\n\nexport var BASIC_EVENT_ALIASES = {\n  pointerdown: 'pointerdown',\n  pointermove: 'pointermove',\n  pointerup: 'pointerup',\n  touchstart: 'pointerdown',\n  touchmove: 'pointermove',\n  touchend: 'pointerup',\n  mousedown: 'pointerdown',\n  mousemove: 'pointermove',\n  mouseup: 'pointerup'\n};\nexport var INPUT_EVENT_TYPES = {\n  KEY_EVENTS: ['keydown', 'keyup'],\n  MOUSE_EVENTS: ['mousedown', 'mousemove', 'mouseup', 'mouseover', 'mouseout', 'mouseleave'],\n  WHEEL_EVENTS: [// Chrome, Safari\n  'wheel', // IE\n  'mousewheel', // legacy Firefox\n  'DOMMouseScroll']\n};\n/**\n * \"Gestural\" events are those that have semantic meaning beyond the basic input event,\n * e.g. a click or tap is a sequence of `down` and `up` events with no `move` event in between.\n * Hammer.js handles these with its Recognizer system;\n * this block maps event names to the Recognizers required to detect the events.\n */\n\nexport var EVENT_RECOGNIZER_MAP = {\n  tap: 'tap',\n  anytap: 'anytap',\n  doubletap: 'doubletap',\n  press: 'press',\n  pinch: 'pinch',\n  pinchin: 'pinch',\n  pinchout: 'pinch',\n  pinchstart: 'pinch',\n  pinchmove: 'pinch',\n  pinchend: 'pinch',\n  pinchcancel: 'pinch',\n  rotate: 'rotate',\n  rotatestart: 'rotate',\n  rotatemove: 'rotate',\n  rotateend: 'rotate',\n  rotatecancel: 'rotate',\n  pan: 'pan',\n  panstart: 'pan',\n  panmove: 'pan',\n  panup: 'pan',\n  pandown: 'pan',\n  panleft: 'pan',\n  panright: 'pan',\n  panend: 'pan',\n  pancancel: 'pan',\n  swipe: 'swipe',\n  swipeleft: 'swipe',\n  swiperight: 'swipe',\n  swipeup: 'swipe',\n  swipedown: 'swipe'\n};\n/**\n * Map gestural events typically provided by browsers\n * that are not reported in 'hammer.input' events\n * to corresponding Hammer.js gestures.\n */\n\nexport var GESTURE_EVENT_ALIASES = {\n  click: 'tap',\n  anyclick: 'anytap',\n  dblclick: 'doubletap',\n  mousedown: 'pointerdown',\n  mousemove: 'pointermove',\n  mouseup: 'pointerup',\n  mouseover: 'pointerover',\n  mouseout: 'pointerout',\n  mouseleave: 'pointerleave'\n};","import \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.function.bind\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es6.array.index-of\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\"; // Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport { INPUT_EVENT_TYPES } from '../constants';\nimport { window, userAgent, passiveSupported } from '../utils/globals';\nvar firefox = userAgent.indexOf('firefox') !== -1;\nvar WHEEL_EVENTS = INPUT_EVENT_TYPES.WHEEL_EVENTS;\nvar EVENT_TYPE = 'wheel'; // Constants for normalizing input delta\n\nvar WHEEL_DELTA_MAGIC_SCALER = 4.000244140625;\nvar WHEEL_DELTA_PER_LINE = 40; // Slow down zoom if shift key is held for more precise zooming\n\nvar SHIFT_MULTIPLIER = 0.25;\n\nvar WheelInput =\n/*#__PURE__*/\nfunction () {\n  function WheelInput(element, callback) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, WheelInput);\n\n    this.element = element;\n    this.callback = callback;\n    this.options = Object.assign({\n      enable: true\n    }, options);\n    this.events = WHEEL_EVENTS.concat(options.events || []);\n    this.handleEvent = this.handleEvent.bind(this);\n    this.events.forEach(function (event) {\n      return element.addEventListener(event, _this.handleEvent, passiveSupported ? {\n        passive: false\n      } : false);\n    });\n  }\n\n  _createClass(WheelInput, [{\n    key: \"destroy\",\n    value: function destroy() {\n      var _this2 = this;\n\n      this.events.forEach(function (event) {\n        return _this2.element.removeEventListener(event, _this2.handleEvent);\n      });\n    }\n    /**\n     * Enable this input (begin processing events)\n     * if the specified event type is among those handled by this input.\n     */\n\n  }, {\n    key: \"enableEventType\",\n    value: function enableEventType(eventType, enabled) {\n      if (eventType === EVENT_TYPE) {\n        this.options.enable = enabled;\n      }\n    }\n    /* eslint-disable complexity, max-statements */\n\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(event) {\n      if (!this.options.enable) {\n        return;\n      }\n\n      var value = event.deltaY;\n\n      if (window.WheelEvent) {\n        // Firefox doubles the values on retina screens...\n        if (firefox && event.deltaMode === window.WheelEvent.DOM_DELTA_PIXEL) {\n          value /= window.devicePixelRatio;\n        }\n\n        if (event.deltaMode === window.WheelEvent.DOM_DELTA_LINE) {\n          value *= WHEEL_DELTA_PER_LINE;\n        }\n      }\n\n      var wheelPosition = {\n        x: event.clientX,\n        y: event.clientY\n      };\n\n      if (value !== 0 && value % WHEEL_DELTA_MAGIC_SCALER === 0) {\n        // This one is definitely a mouse wheel event.\n        // Normalize this value to match trackpad.\n        value = Math.floor(value / WHEEL_DELTA_MAGIC_SCALER);\n      }\n\n      if (event.shiftKey && value) {\n        value = value * SHIFT_MULTIPLIER;\n      }\n\n      this._onWheel(event, -value, wheelPosition);\n    }\n  }, {\n    key: \"_onWheel\",\n    value: function _onWheel(srcEvent, delta, position) {\n      this.callback({\n        type: EVENT_TYPE,\n        center: position,\n        delta: delta,\n        srcEvent: srcEvent,\n        pointerType: 'mouse',\n        target: srcEvent.target\n      });\n    }\n  }]);\n\n  return WheelInput;\n}();\n\nexport { WheelInput as default };","import \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.function.bind\";\nimport \"core-js/modules/es6.object.assign\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\"; // Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport { INPUT_EVENT_TYPES } from '../constants';\nvar MOUSE_EVENTS = INPUT_EVENT_TYPES.MOUSE_EVENTS;\nvar MOVE_EVENT_TYPE = 'pointermove';\nvar OVER_EVENT_TYPE = 'pointerover';\nvar OUT_EVENT_TYPE = 'pointerout';\nvar LEAVE_EVENT_TYPE = 'pointerleave';\n/**\n * Hammer.js swallows 'move' events (for pointer/touch/mouse)\n * when the pointer is not down. This class sets up a handler\n * specifically for these events to work around this limitation.\n * Note that this could be extended to more intelligently handle\n * move events across input types, e.g. storing multiple simultaneous\n * pointer/touch events, calculating speed/direction, etc.\n */\n\nvar MoveInput =\n/*#__PURE__*/\nfunction () {\n  function MoveInput(element, callback) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, MoveInput);\n\n    this.element = element;\n    this.callback = callback;\n    this.pressed = false;\n    this.options = Object.assign({\n      enable: true\n    }, options);\n    this.enableMoveEvent = this.options.enable;\n    this.enableLeaveEvent = this.options.enable;\n    this.enableOutEvent = this.options.enable;\n    this.enableOverEvent = this.options.enable;\n    this.events = MOUSE_EVENTS.concat(options.events || []);\n    this.handleEvent = this.handleEvent.bind(this);\n    this.events.forEach(function (event) {\n      return element.addEventListener(event, _this.handleEvent);\n    });\n  }\n\n  _createClass(MoveInput, [{\n    key: \"destroy\",\n    value: function destroy() {\n      var _this2 = this;\n\n      this.events.forEach(function (event) {\n        return _this2.element.removeEventListener(event, _this2.handleEvent);\n      });\n    }\n    /**\n     * Enable this input (begin processing events)\n     * if the specified event type is among those handled by this input.\n     */\n\n  }, {\n    key: \"enableEventType\",\n    value: function enableEventType(eventType, enabled) {\n      if (eventType === MOVE_EVENT_TYPE) {\n        this.enableMoveEvent = enabled;\n      }\n\n      if (eventType === OVER_EVENT_TYPE) {\n        this.enableOverEvent = enabled;\n      }\n\n      if (eventType === OUT_EVENT_TYPE) {\n        this.enableOutEvent = enabled;\n      }\n\n      if (eventType === LEAVE_EVENT_TYPE) {\n        this.enableLeaveEvent = enabled;\n      }\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(event) {\n      this.handleOverEvent(event);\n      this.handleOutEvent(event);\n      this.handleLeaveEvent(event);\n      this.handleMoveEvent(event);\n    }\n  }, {\n    key: \"handleOverEvent\",\n    value: function handleOverEvent(event) {\n      if (this.enableOverEvent) {\n        if (event.type === 'mouseover') {\n          this.callback({\n            type: OVER_EVENT_TYPE,\n            srcEvent: event,\n            pointerType: 'mouse',\n            target: event.target\n          });\n        }\n      }\n    }\n  }, {\n    key: \"handleOutEvent\",\n    value: function handleOutEvent(event) {\n      if (this.enableOutEvent) {\n        if (event.type === 'mouseout') {\n          this.callback({\n            type: OUT_EVENT_TYPE,\n            srcEvent: event,\n            pointerType: 'mouse',\n            target: event.target\n          });\n        }\n      }\n    }\n  }, {\n    key: \"handleLeaveEvent\",\n    value: function handleLeaveEvent(event) {\n      if (this.enableLeaveEvent) {\n        if (event.type === 'mouseleave') {\n          this.callback({\n            type: LEAVE_EVENT_TYPE,\n            srcEvent: event,\n            pointerType: 'mouse',\n            target: event.target\n          });\n        }\n      }\n    }\n  }, {\n    key: \"handleMoveEvent\",\n    value: function handleMoveEvent(event) {\n      if (this.enableMoveEvent) {\n        switch (event.type) {\n          case 'mousedown':\n            if (event.button >= 0) {\n              // Button is down\n              this.pressed = true;\n            }\n\n            break;\n\n          case 'mousemove':\n            // Move events use `which` to track the button being pressed\n            if (event.which === 0) {\n              // Button is not down\n              this.pressed = false;\n            }\n\n            if (!this.pressed) {\n              // Drag events are emitted by hammer already\n              // we just need to emit the move event on hover\n              this.callback({\n                type: MOVE_EVENT_TYPE,\n                srcEvent: event,\n                pointerType: 'mouse',\n                target: event.target\n              });\n            }\n\n            break;\n\n          case 'mouseup':\n            this.pressed = false;\n            break;\n\n          default:\n        }\n      }\n    }\n  }]);\n\n  return MoveInput;\n}();\n\nexport { MoveInput as default };","import \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.function.bind\";\nimport \"core-js/modules/es6.object.assign\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\"; // Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport { INPUT_EVENT_TYPES } from '../constants';\nvar KEY_EVENTS = INPUT_EVENT_TYPES.KEY_EVENTS;\nvar DOWN_EVENT_TYPE = 'keydown';\nvar UP_EVENT_TYPE = 'keyup';\n\nvar KeyInput =\n/*#__PURE__*/\nfunction () {\n  function KeyInput(element, callback) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, KeyInput);\n\n    this.element = element;\n    this.callback = callback;\n    this.options = Object.assign({\n      enable: true\n    }, options);\n    this.enableDownEvent = this.options.enable;\n    this.enableUpEvent = this.options.enable;\n    this.events = KEY_EVENTS.concat(options.events || []);\n    this.handleEvent = this.handleEvent.bind(this);\n    element.tabIndex = 1;\n    element.style.outline = 'none';\n    this.events.forEach(function (event) {\n      return element.addEventListener(event, _this.handleEvent);\n    });\n  }\n\n  _createClass(KeyInput, [{\n    key: \"destroy\",\n    value: function destroy() {\n      var _this2 = this;\n\n      this.events.forEach(function (event) {\n        return _this2.element.removeEventListener(event, _this2.handleEvent);\n      });\n    }\n    /**\n     * Enable this input (begin processing events)\n     * if the specified event type is among those handled by this input.\n     */\n\n  }, {\n    key: \"enableEventType\",\n    value: function enableEventType(eventType, enabled) {\n      if (eventType === DOWN_EVENT_TYPE) {\n        this.enableDownEvent = enabled;\n      }\n\n      if (eventType === UP_EVENT_TYPE) {\n        this.enableUpEvent = enabled;\n      }\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(event) {\n      // Ignore if focused on text input\n      var targetElement = event.target || event.srcElement;\n\n      if (targetElement.tagName === 'INPUT' && targetElement.type === 'text' || targetElement.tagName === 'TEXTAREA') {\n        return;\n      }\n\n      if (this.enableDownEvent && event.type === 'keydown') {\n        this.callback({\n          type: DOWN_EVENT_TYPE,\n          srcEvent: event,\n          key: event.key,\n          target: event.target\n        });\n      }\n\n      if (this.enableUpEvent && event.type === 'keyup') {\n        this.callback({\n          type: UP_EVENT_TYPE,\n          srcEvent: event,\n          key: event.key,\n          target: event.target\n        });\n      }\n    }\n  }]);\n\n  return KeyInput;\n}();\n\nexport { KeyInput as default };","import \"core-js/modules/es6.function.bind\";\nimport \"core-js/modules/es6.object.assign\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\"; // Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nvar EVENT_TYPE = 'contextmenu';\n\nvar ContextmenuInput =\n/*#__PURE__*/\nfunction () {\n  function ContextmenuInput(element, callback) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, ContextmenuInput);\n\n    this.element = element;\n    this.callback = callback;\n    this.options = Object.assign({\n      enable: true\n    }, options);\n    this.handleEvent = this.handleEvent.bind(this);\n    element.addEventListener('contextmenu', this.handleEvent);\n  }\n\n  _createClass(ContextmenuInput, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.element.removeEventListener('contextmenu', this.handleEvent);\n    }\n    /**\n     * Enable this input (begin processing events)\n     * if the specified event type is among those handled by this input.\n     */\n\n  }, {\n    key: \"enableEventType\",\n    value: function enableEventType(eventType, enabled) {\n      if (eventType === EVENT_TYPE) {\n        this.options.enable = enabled;\n      }\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(event) {\n      if (!this.options.enable) {\n        return;\n      }\n\n      this.callback({\n        type: EVENT_TYPE,\n        center: {\n          x: event.clientX,\n          y: event.clientY\n        },\n        srcEvent: event,\n        pointerType: 'mouse',\n        target: event.target\n      });\n    }\n  }]);\n\n  return ContextmenuInput;\n}();\n\nexport { ContextmenuInput as default };","import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-finite\";\n\n/* Constants */\nvar DOWN_EVENT = 1;\nvar MOVE_EVENT = 2;\nvar UP_EVENT = 4;\nvar MOUSE_EVENTS = {\n  pointerdown: DOWN_EVENT,\n  pointermove: MOVE_EVENT,\n  pointerup: UP_EVENT,\n  mousedown: DOWN_EVENT,\n  mousemove: MOVE_EVENT,\n  mouseup: UP_EVENT\n}; // MouseEvent.which https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/which\n\nvar MOUSE_EVENT_WHICH_LEFT = 1;\nvar MOUSE_EVENT_WHICH_MIDDLE = 2;\nvar MOUSE_EVENT_WHICH_RIGHT = 3; // MouseEvent.button https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n\nvar MOUSE_EVENT_BUTTON_LEFT = 0;\nvar MOUSE_EVENT_BUTTON_MIDDLE = 1;\nvar MOUSE_EVENT_BUTTON_RIGHT = 2; // MouseEvent.buttons https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n\nvar MOUSE_EVENT_BUTTONS_LEFT_MASK = 1;\nvar MOUSE_EVENT_BUTTONS_RIGHT_MASK = 2;\nvar MOUSE_EVENT_BUTTONS_MIDDLE_MASK = 4;\n/**\n * Extract the involved mouse button\n */\n\nexport function whichButtons(event) {\n  var eventType = MOUSE_EVENTS[event.srcEvent.type];\n\n  if (!eventType) {\n    // Not a mouse evet\n    return null;\n  }\n\n  var _event$srcEvent = event.srcEvent,\n      buttons = _event$srcEvent.buttons,\n      button = _event$srcEvent.button,\n      which = _event$srcEvent.which;\n  var leftButton = false;\n  var middleButton = false;\n  var rightButton = false;\n\n  if ( // button is up, need to find out which one was pressed before\n  eventType === UP_EVENT || // moving but does not support `buttons` API\n  eventType === MOVE_EVENT && !Number.isFinite(buttons)) {\n    leftButton = which === MOUSE_EVENT_WHICH_LEFT;\n    middleButton = which === MOUSE_EVENT_WHICH_MIDDLE;\n    rightButton = which === MOUSE_EVENT_WHICH_RIGHT;\n  } else if (eventType === MOVE_EVENT) {\n    leftButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_LEFT_MASK);\n    middleButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_MIDDLE_MASK);\n    rightButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_RIGHT_MASK);\n  } else if (eventType === DOWN_EVENT) {\n    leftButton = button === MOUSE_EVENT_BUTTON_LEFT;\n    middleButton = button === MOUSE_EVENT_BUTTON_MIDDLE;\n    rightButton = button === MOUSE_EVENT_BUTTON_RIGHT;\n  }\n\n  return {\n    leftButton: leftButton,\n    middleButton: middleButton,\n    rightButton: rightButton\n  };\n}\n/**\n * Calculate event position relative to the root element\n */\n\nexport function getOffsetPosition(event, rootElement) {\n  var srcEvent = event.srcEvent; // `center` is a hammer.js event property\n\n  if (!event.center && !Number.isFinite(srcEvent.clientX)) {\n    // Not a gestural event\n    return null;\n  }\n\n  var center = event.center || {\n    x: srcEvent.clientX,\n    y: srcEvent.clientY\n  };\n  var rect = rootElement.getBoundingClientRect(); // Fix scale for map affected by a CSS transform.\n  // See https://stackoverflow.com/a/26893663/3528533\n\n  var scaleX = rect.width / rootElement.offsetWidth;\n  var scaleY = rect.height / rootElement.offsetHeight; // Calculate center relative to the root element\n\n  var offsetCenter = {\n    x: (center.x - rect.left - rootElement.clientLeft) / scaleX,\n    y: (center.y - rect.top - rootElement.clientTop) / scaleY\n  };\n  return {\n    center: center,\n    offsetCenter: offsetCenter\n  };\n}","import \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es6.array.index-of\";\nimport \"core-js/modules/es6.function.bind\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.map\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { whichButtons, getOffsetPosition } from './event-utils';\n\nvar EventRegistrar =\n/*#__PURE__*/\nfunction () {\n  function EventRegistrar(eventManager) {\n    _classCallCheck(this, EventRegistrar);\n\n    this.eventManager = eventManager;\n    this.handlers = []; // Element -> handler map\n\n    this.handlersByElement = new Map();\n    this.handleEvent = this.handleEvent.bind(this);\n  }\n\n  _createClass(EventRegistrar, [{\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.handlers.length === 0;\n    }\n  }, {\n    key: \"add\",\n    value: function add(type, handler) {\n      var srcElement = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'root';\n      var handlers = this.handlers,\n          handlersByElement = this.handlersByElement;\n\n      if (!handlersByElement.has(srcElement)) {\n        handlersByElement.set(srcElement, []);\n      }\n\n      var entry = {\n        type: type,\n        handler: handler,\n        srcElement: srcElement\n      };\n      handlers.push(entry);\n      handlersByElement.get(srcElement).push(entry);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(type, handler) {\n      var handlers = this.handlers,\n          handlersByElement = this.handlersByElement;\n\n      for (var i = handlers.length - 1; i >= 0; i--) {\n        var entry = handlers[i];\n\n        if (entry.type === type && entry.handler === handler) {\n          handlers.splice(i, 1);\n          var entries = handlersByElement.get(entry.srcElement);\n          entries.splice(entries.indexOf(entry), 1);\n\n          if (entries.length === 0) {\n            handlersByElement[\"delete\"](entry.srcElement);\n          }\n        }\n      }\n    }\n    /**\n     * Handles hammerjs event\n     */\n\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(event) {\n      if (this.isEmpty()) {\n        return;\n      }\n\n      var mjolnirEvent = this._normalizeEvent(event);\n\n      var target = event.srcEvent.target;\n\n      while (target && target !== mjolnirEvent.rootElement) {\n        this._emit(mjolnirEvent, target);\n\n        if (mjolnirEvent.handled) {\n          return;\n        }\n\n        target = target.parentNode;\n      }\n\n      this._emit(mjolnirEvent, 'root');\n    }\n    /**\n     * Invoke handlers on a particular element\n     */\n\n  }, {\n    key: \"_emit\",\n    value: function _emit(event, srcElement) {\n      var entries = this.handlersByElement.get(srcElement);\n\n      if (entries) {\n        var immediatePropagationStopped = false; // Prevents the current event from bubbling up\n\n        var stopPropagation = function stopPropagation() {\n          event.handled = true;\n        }; // Prevent any remaining listeners from being called\n\n\n        var stopImmediatePropagation = function stopImmediatePropagation() {\n          event.handled = true;\n          immediatePropagationStopped = true;\n        };\n\n        for (var i = 0; i < entries.length; i++) {\n          var _entries$i = entries[i],\n              type = _entries$i.type,\n              handler = _entries$i.handler;\n          handler(Object.assign({}, event, {\n            type: type,\n            stopPropagation: stopPropagation,\n            stopImmediatePropagation: stopImmediatePropagation\n          }));\n\n          if (immediatePropagationStopped) {\n            break;\n          }\n        }\n      }\n    }\n    /**\n     * Normalizes hammerjs and custom events to have predictable fields.\n     */\n\n  }, {\n    key: \"_normalizeEvent\",\n    value: function _normalizeEvent(event) {\n      var rootElement = this.eventManager.element;\n      return Object.assign({}, event, whichButtons(event), getOffsetPosition(event, rootElement), {\n        handled: false,\n        rootElement: rootElement\n      });\n    }\n  }]);\n\n  return EventRegistrar;\n}();\n\nexport { EventRegistrar as default };","import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.function.bind\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.map\";\nimport \"core-js/modules/es6.object.assign\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\"; // Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport Hammer from './utils/hammer';\nimport HammerManagerMock from './utils/hammer-manager-mock';\nimport WheelInput from './inputs/wheel-input';\nimport MoveInput from './inputs/move-input';\nimport KeyInput from './inputs/key-input';\nimport ContextmenuInput from './inputs/contextmenu-input';\nimport EventRegistrar from './utils/event-registrar';\nimport { BASIC_EVENT_ALIASES, EVENT_RECOGNIZER_MAP, GESTURE_EVENT_ALIASES, RECOGNIZERS, RECOGNIZER_COMPATIBLE_MAP, RECOGNIZER_FALLBACK_MAP } from './constants';\nvar DEFAULT_OPTIONS = {\n  // event handlers\n  events: null,\n  // custom recognizers\n  recognizers: null,\n  recognizerOptions: {},\n  // Manager class\n  Manager: Hammer ? Hammer.Manager : HammerManagerMock,\n  // allow browser default touch action\n  // https://github.com/uber/react-map-gl/issues/506\n  touchAction: 'none'\n}; // Unified API for subscribing to events about both\n// basic input events (e.g. 'mousemove', 'touchstart', 'wheel')\n// and gestural input (e.g. 'click', 'tap', 'panstart').\n// Delegates gesture related event registration and handling to Hammer.js.\n\nvar EventManager =\n/*#__PURE__*/\nfunction () {\n  function EventManager() {\n    var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, EventManager);\n\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n    this.events = new Map();\n    this._onBasicInput = this._onBasicInput.bind(this);\n    this._onOtherEvent = this._onOtherEvent.bind(this);\n    this.setElement(element); // Register all passed events.\n\n    var events = options.events;\n\n    if (events) {\n      this.on(events);\n    }\n  }\n\n  _createClass(EventManager, [{\n    key: \"setElement\",\n    value: function setElement(element) {\n      var _this = this;\n\n      if (this.element) {\n        // unregister all events\n        this.destroy();\n      }\n\n      this.element = element;\n\n      if (!element) {\n        return;\n      }\n\n      var options = this.options;\n      var ManagerClass = options.Manager;\n      this.manager = new ManagerClass(element, {\n        touchAction: options.touchAction,\n        recognizers: options.recognizers || RECOGNIZERS\n      }).on('hammer.input', this._onBasicInput);\n\n      if (!options.recognizers) {\n        // Set default recognize withs\n        // http://hammerjs.github.io/recognize-with/\n        Object.keys(RECOGNIZER_COMPATIBLE_MAP).forEach(function (name) {\n          var recognizer = _this.manager.get(name);\n\n          if (recognizer) {\n            RECOGNIZER_COMPATIBLE_MAP[name].forEach(function (otherName) {\n              recognizer.recognizeWith(otherName);\n            });\n          }\n        });\n      } // Set recognizer options\n\n\n      for (var recognizerName in options.recognizerOptions) {\n        var recognizer = this.manager.get(recognizerName);\n\n        if (recognizer) {\n          var recognizerOption = options.recognizerOptions[recognizerName]; // `enable` is managed by the event registrations\n\n          delete recognizerOption.enable;\n          recognizer.set(recognizerOption);\n        }\n      } // Handle events not handled by Hammer.js:\n      // - mouse wheel\n      // - pointer/touch/mouse move\n\n\n      this.wheelInput = new WheelInput(element, this._onOtherEvent, {\n        enable: false\n      });\n      this.moveInput = new MoveInput(element, this._onOtherEvent, {\n        enable: false\n      });\n      this.keyInput = new KeyInput(element, this._onOtherEvent, {\n        enable: false\n      });\n      this.contextmenuInput = new ContextmenuInput(element, this._onOtherEvent, {\n        enable: false\n      }); // Register all existing events\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.events[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              eventAlias = _step$value[0],\n              eventRegistrar = _step$value[1];\n\n          if (!eventRegistrar.isEmpty()) {\n            // Enable recognizer for this event.\n            this._toggleRecognizer(eventRegistrar.recognizerName, true);\n\n            this.manager.on(eventAlias, eventRegistrar.handleEvent);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    } // Tear down internal event management implementations.\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.element) {\n        // wheelInput etc. are created in setElement() and therefore\n        // cannot exist if there is no element\n        this.wheelInput.destroy();\n        this.moveInput.destroy();\n        this.keyInput.destroy();\n        this.contextmenuInput.destroy();\n        this.manager.destroy();\n        this.wheelInput = null;\n        this.moveInput = null;\n        this.keyInput = null;\n        this.contextmenuInput = null;\n        this.manager = null;\n        this.element = null;\n      }\n    } // Register an event handler function to be called on `event`.\n\n  }, {\n    key: \"on\",\n    value: function on(event, handler, srcElement) {\n      if (typeof event === 'string') {\n        this._addEventHandler(event, handler, srcElement);\n      } else {\n        srcElement = handler; // If `event` is a map, call `on()` for each entry.\n\n        for (var eventName in event) {\n          this._addEventHandler(eventName, event[eventName], srcElement);\n        }\n      }\n    }\n    /**\n     * Deregister a previously-registered event handler.\n     * @param {string|Object} event   An event name (String) or map of event names to handlers\n     * @param {Function} [handler]    The function to be called on `event`.\n     */\n\n  }, {\n    key: \"off\",\n    value: function off(event, handler) {\n      if (typeof event === 'string') {\n        this._removeEventHandler(event, handler);\n      } else {\n        // If `event` is a map, call `off()` for each entry.\n        for (var eventName in event) {\n          this._removeEventHandler(eventName, event[eventName]);\n        }\n      }\n    }\n    /*\n     * Enable/disable recognizer for the given event\n     */\n\n  }, {\n    key: \"_toggleRecognizer\",\n    value: function _toggleRecognizer(name, enabled) {\n      var manager = this.manager;\n\n      if (!manager) {\n        return;\n      }\n\n      var recognizer = manager.get(name);\n\n      if (recognizer && recognizer.options.enable !== enabled) {\n        recognizer.set({\n          enable: enabled\n        });\n        var fallbackRecognizers = RECOGNIZER_FALLBACK_MAP[name];\n\n        if (fallbackRecognizers && !this.options.recognizers) {\n          // Set default require failures\n          // http://hammerjs.github.io/require-failure/\n          fallbackRecognizers.forEach(function (otherName) {\n            var otherRecognizer = manager.get(otherName);\n\n            if (enabled) {\n              // Wait for this recognizer to fail\n              otherRecognizer.requireFailure(name);\n              /**\n               * This seems to be a bug in hammerjs:\n               * requireFailure() adds both ways\n               * dropRequireFailure() only drops one way\n               * https://github.com/hammerjs/hammer.js/blob/master/src/recognizerjs/\n                 recognizer-constructor.js#L136\n               */\n\n              recognizer.dropRequireFailure(otherName);\n            } else {\n              // Do not wait for this recognizer to fail\n              otherRecognizer.dropRequireFailure(name);\n            }\n          });\n        }\n      }\n\n      this.wheelInput.enableEventType(name, enabled);\n      this.moveInput.enableEventType(name, enabled);\n      this.keyInput.enableEventType(name, enabled);\n      this.contextmenuInput.enableEventType(name, enabled);\n    }\n    /**\n     * Process the event registration for a single event + handler.\n     */\n\n  }, {\n    key: \"_addEventHandler\",\n    value: function _addEventHandler(event, handler, srcElement) {\n      var manager = this.manager,\n          events = this.events; // Alias to a recognized gesture as necessary.\n\n      var eventAlias = GESTURE_EVENT_ALIASES[event] || event;\n      var eventRegistrar = events.get(eventAlias);\n\n      if (!eventRegistrar) {\n        eventRegistrar = new EventRegistrar(this);\n        events.set(eventAlias, eventRegistrar); // Enable recognizer for this event.\n\n        eventRegistrar.recognizerName = EVENT_RECOGNIZER_MAP[eventAlias] || eventAlias; // Listen to the event\n\n        if (manager) {\n          manager.on(eventAlias, eventRegistrar.handleEvent);\n        }\n      }\n\n      this._toggleRecognizer(eventRegistrar.recognizerName, true);\n\n      eventRegistrar.add(event, handler, srcElement);\n    }\n    /**\n     * Process the event deregistration for a single event + handler.\n     */\n\n  }, {\n    key: \"_removeEventHandler\",\n    value: function _removeEventHandler(event, handler) {\n      var events = this.events; // Alias to a recognized gesture as necessary.\n\n      var eventAlias = GESTURE_EVENT_ALIASES[event] || event;\n      var eventRegistrar = events.get(eventAlias);\n\n      if (!eventRegistrar) {\n        return;\n      }\n\n      eventRegistrar.remove(event, handler);\n\n      if (eventRegistrar.isEmpty()) {\n        var recognizerName = eventRegistrar.recognizerName; // Disable recognizer if no more handlers are attached to its events\n\n        var isRecognizerUsed = false;\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = events.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var eh = _step2.value;\n\n            if (eh.recognizerName === recognizerName && !eh.isEmpty()) {\n              isRecognizerUsed = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n              _iterator2[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        if (!isRecognizerUsed) {\n          this._toggleRecognizer(recognizerName, false);\n        }\n      }\n    }\n    /**\n     * Handle basic events using the 'hammer.input' Hammer.js API:\n     * Before running Recognizers, Hammer emits a 'hammer.input' event\n     * with the basic event info. This function emits all basic events\n     * aliased to the \"class\" of event received.\n     * See constants.BASIC_EVENT_CLASSES basic event class definitions.\n     */\n\n  }, {\n    key: \"_onBasicInput\",\n    value: function _onBasicInput(event) {\n      var srcEvent = event.srcEvent;\n      var alias = BASIC_EVENT_ALIASES[srcEvent.type];\n\n      if (alias) {\n        // fire all events aliased to srcEvent.type\n        this.manager.emit(alias, event);\n      }\n    }\n    /**\n     * Handle events not supported by Hammer.js,\n     * and pipe back out through same (Hammer) channel used by other events.\n     */\n\n  }, {\n    key: \"_onOtherEvent\",\n    value: function _onOtherEvent(event) {\n      // console.log('onotherevent', event.type, event)\n      this.manager.emit(event.type, event);\n    }\n  }]);\n\n  return EventManager;\n}();\n\nexport { EventManager as default };","// Hammer.Manager mock for use in environments without `document` / `window`.\nexport default function HammerManagerMock(m) {\n  var instance = {};\n\n  var chainedNoop = function chainedNoop() {\n    return instance;\n  };\n\n  instance.get = function () {\n    return null;\n  };\n\n  instance.set = chainedNoop;\n  instance.on = chainedNoop;\n  instance.off = chainedNoop;\n  instance.destroy = chainedNoop;\n  instance.emit = chainedNoop;\n  return instance;\n}","// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nexport { default as EventManager } from './event-manager';","require(\"core-js/modules/es6.array.filter\");\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nrequire(\"core-js/modules/es6.string.trim\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.array.index-of\");\n\nrequire(\"core-js/modules/es6.object.create\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.object.assign\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.array.for-each\");\n\nrequire(\"core-js/modules/es6.array.is-array\");\n\nrequire(\"core-js/modules/es6.date.now\");\n\n/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function (window, document, exportName, undefined) {\n  'use strict';\n\n  var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\n  var TEST_ELEMENT = document.createElement('div');\n  var TYPE_FUNCTION = 'function';\n  var round = Math.round;\n  var abs = Math.abs;\n  var now = Date.now;\n  /**\n   * set a timeout with a given scope\n   * @param {Function} fn\n   * @param {Number} timeout\n   * @param {Object} context\n   * @returns {number}\n   */\n\n  function setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n  }\n  /**\n   * if the argument is an array, we want to execute the fn on each entry\n   * if it aint an array we don't want to do a thing.\n   * this is used by all the methods that accept a single and array argument.\n   * @param {*|Array} arg\n   * @param {String} fn\n   * @param {Object} [context]\n   * @returns {Boolean}\n   */\n\n\n  function invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n      each(arg, context[fn], context);\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * walk objects and arrays\n   * @param {Object} obj\n   * @param {Function} iterator\n   * @param {Object} context\n   */\n\n\n  function each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n      return;\n    }\n\n    if (obj.forEach) {\n      obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n      i = 0;\n\n      while (i < obj.length) {\n        iterator.call(context, obj[i], i, obj);\n        i++;\n      }\n    } else {\n      for (i in obj) {\n        obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n      }\n    }\n  }\n  /**\n   * wrap a method with a deprecation warning and stack trace\n   * @param {Function} method\n   * @param {String} name\n   * @param {String} message\n   * @returns {Function} A new function wrapping the supplied method.\n   */\n\n\n  function deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function () {\n      var e = new Error('get-stack-trace');\n      var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '').replace(/^\\s+at\\s+/gm, '').replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n      var log = window.console && (window.console.warn || window.console.log);\n\n      if (log) {\n        log.call(window.console, deprecationMessage, stack);\n      }\n\n      return method.apply(this, arguments);\n    };\n  }\n  /**\n   * extend object.\n   * means that properties in dest will be overwritten by the ones in src.\n   * @param {Object} target\n   * @param {...Object} objects_to_assign\n   * @returns {Object} target\n   */\n\n\n  var assign;\n\n  if (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n      if (target === undefined || target === null) {\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n\n      var output = Object(target);\n\n      for (var index = 1; index < arguments.length; index++) {\n        var source = arguments[index];\n\n        if (source !== undefined && source !== null) {\n          for (var nextKey in source) {\n            if (source.hasOwnProperty(nextKey)) {\n              output[nextKey] = source[nextKey];\n            }\n          }\n        }\n      }\n\n      return output;\n    };\n  } else {\n    assign = Object.assign;\n  }\n  /**\n   * extend object.\n   * means that properties in dest will be overwritten by the ones in src.\n   * @param {Object} dest\n   * @param {Object} src\n   * @param {Boolean} [merge=false]\n   * @returns {Object} dest\n   */\n\n\n  var extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n\n    while (i < keys.length) {\n      if (!merge || merge && dest[keys[i]] === undefined) {\n        dest[keys[i]] = src[keys[i]];\n      }\n\n      i++;\n    }\n\n    return dest;\n  }, 'extend', 'Use `assign`.');\n  /**\n   * merge the values from src in the dest.\n   * means that properties that exist in dest will not be overwritten by src\n   * @param {Object} dest\n   * @param {Object} src\n   * @returns {Object} dest\n   */\n\n  var merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n  }, 'merge', 'Use `assign`.');\n  /**\n   * simple class inheritance\n   * @param {Function} child\n   * @param {Function} base\n   * @param {Object} [properties]\n   */\n\n  function inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n      assign(childP, properties);\n    }\n  }\n  /**\n   * simple function bind\n   * @param {Function} fn\n   * @param {Object} context\n   * @returns {Function}\n   */\n\n\n  function bindFn(fn, context) {\n    return function boundFn() {\n      return fn.apply(context, arguments);\n    };\n  }\n  /**\n   * let a boolean value also be a function that must return a boolean\n   * this first item in args will be used as the context\n   * @param {Boolean|Function} val\n   * @param {Array} [args]\n   * @returns {Boolean}\n   */\n\n\n  function boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n      return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n\n    return val;\n  }\n  /**\n   * use the val2 when val1 is undefined\n   * @param {*} val1\n   * @param {*} val2\n   * @returns {*}\n   */\n\n\n  function ifUndefined(val1, val2) {\n    return val1 === undefined ? val2 : val1;\n  }\n  /**\n   * addEventListener with multiple events at once\n   * @param {EventTarget} target\n   * @param {String} types\n   * @param {Function} handler\n   */\n\n\n  function addEventListeners(target, types, handler) {\n    each(splitStr(types), function (type) {\n      target.addEventListener(type, handler, false);\n    });\n  }\n  /**\n   * removeEventListener with multiple events at once\n   * @param {EventTarget} target\n   * @param {String} types\n   * @param {Function} handler\n   */\n\n\n  function removeEventListeners(target, types, handler) {\n    each(splitStr(types), function (type) {\n      target.removeEventListener(type, handler, false);\n    });\n  }\n  /**\n   * find if a node is in the given parent\n   * @method hasParent\n   * @param {HTMLElement} node\n   * @param {HTMLElement} parent\n   * @return {Boolean} found\n   */\n\n\n  function hasParent(node, parent) {\n    while (node) {\n      if (node == parent) {\n        return true;\n      }\n\n      node = node.parentNode;\n    }\n\n    return false;\n  }\n  /**\n   * small indexOf wrapper\n   * @param {String} str\n   * @param {String} find\n   * @returns {Boolean} found\n   */\n\n\n  function inStr(str, find) {\n    return str.indexOf(find) > -1;\n  }\n  /**\n   * split string on whitespace\n   * @param {String} str\n   * @returns {Array} words\n   */\n\n\n  function splitStr(str) {\n    return str.trim().split(/\\s+/g);\n  }\n  /**\n   * find if a array contains the object using indexOf or a simple polyFill\n   * @param {Array} src\n   * @param {String} find\n   * @param {String} [findByKey]\n   * @return {Boolean|Number} false when not found, or the index\n   */\n\n\n  function inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n      return src.indexOf(find);\n    } else {\n      var i = 0;\n\n      while (i < src.length) {\n        if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {\n          return i;\n        }\n\n        i++;\n      }\n\n      return -1;\n    }\n  }\n  /**\n   * convert array-like objects to real arrays\n   * @param {Object} obj\n   * @returns {Array}\n   */\n\n\n  function toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n  }\n  /**\n   * unique array with objects based on a key (like 'id') or just by the array's value\n   * @param {Array} src [{id:1},{id:2},{id:1}]\n   * @param {String} [key]\n   * @param {Boolean} [sort=False]\n   * @returns {Array} [{id:1},{id:2}]\n   */\n\n\n  function uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n      var val = key ? src[i][key] : src[i];\n\n      if (inArray(values, val) < 0) {\n        results.push(src[i]);\n      }\n\n      values[i] = val;\n      i++;\n    }\n\n    if (sort) {\n      if (!key) {\n        results = results.sort();\n      } else {\n        results = results.sort(function sortUniqueArray(a, b) {\n          return a[key] > b[key];\n        });\n      }\n    }\n\n    return results;\n  }\n  /**\n   * get the prefixed property\n   * @param {Object} obj\n   * @param {String} property\n   * @returns {String|Undefined} prefixed\n   */\n\n\n  function prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n    var i = 0;\n\n    while (i < VENDOR_PREFIXES.length) {\n      prefix = VENDOR_PREFIXES[i];\n      prop = prefix ? prefix + camelProp : property;\n\n      if (prop in obj) {\n        return prop;\n      }\n\n      i++;\n    }\n\n    return undefined;\n  }\n  /**\n   * get a unique id\n   * @returns {number} uniqueId\n   */\n\n\n  var _uniqueId = 1;\n\n  function uniqueId() {\n    return _uniqueId++;\n  }\n  /**\n   * get the window object of an element\n   * @param {HTMLElement} element\n   * @returns {DocumentView|Window}\n   */\n\n\n  function getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return doc.defaultView || doc.parentWindow || window;\n  }\n\n  var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n  var SUPPORT_TOUCH = 'ontouchstart' in window;\n  var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\n  var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n  var INPUT_TYPE_TOUCH = 'touch';\n  var INPUT_TYPE_PEN = 'pen';\n  var INPUT_TYPE_MOUSE = 'mouse';\n  var INPUT_TYPE_KINECT = 'kinect';\n  var COMPUTE_INTERVAL = 25;\n  var INPUT_START = 1;\n  var INPUT_MOVE = 2;\n  var INPUT_END = 4;\n  var INPUT_CANCEL = 8;\n  var DIRECTION_NONE = 1;\n  var DIRECTION_LEFT = 2;\n  var DIRECTION_RIGHT = 4;\n  var DIRECTION_UP = 8;\n  var DIRECTION_DOWN = 16;\n  var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\n  var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\n  var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n  var PROPS_XY = ['x', 'y'];\n  var PROPS_CLIENT_XY = ['clientX', 'clientY'];\n  /**\n   * create new input type manager\n   * @param {Manager} manager\n   * @param {Function} callback\n   * @returns {Input}\n   * @constructor\n   */\n\n  function Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget; // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n\n    this.domHandler = function (ev) {\n      if (boolOrFn(manager.options.enable, [manager])) {\n        self.handler(ev);\n      }\n    };\n\n    this.init();\n  }\n\n  Input.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function handler() {},\n\n    /**\n     * bind the events\n     */\n    init: function init() {\n      this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n      this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n      this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function destroy() {\n      this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n      this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n      this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n  };\n  /**\n   * create new input type manager\n   * called by the Manager constructor\n   * @param {Hammer} manager\n   * @returns {Input}\n   */\n\n  function createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n      Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n      Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n      Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n      Type = MouseInput;\n    } else {\n      Type = TouchMouseInput;\n    }\n\n    return new Type(manager, inputHandler);\n  }\n  /**\n   * handle input events\n   * @param {Manager} manager\n   * @param {String} eventType\n   * @param {Object} input\n   */\n\n\n  function inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;\n    var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n      manager.session = {};\n    } // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n\n\n    input.eventType = eventType; // compute scale, rotation etc\n\n    computeInputData(manager, input); // emit secret event\n\n    manager.emit('hammer.input', input);\n    manager.recognize(input);\n    manager.session.prevInput = input;\n  }\n  /**\n   * extend the data with some usable properties like scale, rotate, velocity etc\n   * @param {Object} manager\n   * @param {Object} input\n   */\n\n\n  function computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length; // store the first input to calculate the distance and direction\n\n    if (!session.firstInput) {\n      session.firstInput = simpleCloneInputData(input);\n    } // to compute scale and rotation we need to store the multiple touches\n\n\n    if (pointersLength > 1 && !session.firstMultiple) {\n      session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n      session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n    input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;\n    computeIntervalInputData(session, input); // find the correct target\n\n    var target = manager.element;\n\n    if (hasParent(input.srcEvent.target, target)) {\n      target = input.srcEvent.target;\n    }\n\n    input.target = target;\n  }\n\n  function computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n      prevDelta = session.prevDelta = {\n        x: prevInput.deltaX || 0,\n        y: prevInput.deltaY || 0\n      };\n      offset = session.offsetDelta = {\n        x: center.x,\n        y: center.y\n      };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n  }\n  /**\n   * velocity is calculated every x ms\n   * @param {Object} session\n   * @param {Object} input\n   */\n\n\n  function computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity,\n        velocityX,\n        velocityY,\n        direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n      var deltaX = input.deltaX - last.deltaX;\n      var deltaY = input.deltaY - last.deltaY;\n      var v = getVelocity(deltaTime, deltaX, deltaY);\n      velocityX = v.x;\n      velocityY = v.y;\n      velocity = abs(v.x) > abs(v.y) ? v.x : v.y;\n      direction = getDirection(deltaX, deltaY);\n      session.lastInterval = input;\n    } else {\n      // use latest velocity info if it doesn't overtake a minimum period\n      velocity = last.velocity;\n      velocityX = last.velocityX;\n      velocityY = last.velocityY;\n      direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n  }\n  /**\n   * create a simple clone from the input used for storage of firstInput and firstMultiple\n   * @param {Object} input\n   * @returns {Object} clonedInputData\n   */\n\n\n  function simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n\n    while (i < input.pointers.length) {\n      pointers[i] = {\n        clientX: round(input.pointers[i].clientX),\n        clientY: round(input.pointers[i].clientY)\n      };\n      i++;\n    }\n\n    return {\n      timeStamp: now(),\n      pointers: pointers,\n      center: getCenter(pointers),\n      deltaX: input.deltaX,\n      deltaY: input.deltaY\n    };\n  }\n  /**\n   * get the center of all the pointers\n   * @param {Array} pointers\n   * @return {Object} center contains `x` and `y` properties\n   */\n\n\n  function getCenter(pointers) {\n    var pointersLength = pointers.length; // no need to loop when only one touch\n\n    if (pointersLength === 1) {\n      return {\n        x: round(pointers[0].clientX),\n        y: round(pointers[0].clientY)\n      };\n    }\n\n    var x = 0,\n        y = 0,\n        i = 0;\n\n    while (i < pointersLength) {\n      x += pointers[i].clientX;\n      y += pointers[i].clientY;\n      i++;\n    }\n\n    return {\n      x: round(x / pointersLength),\n      y: round(y / pointersLength)\n    };\n  }\n  /**\n   * calculate the velocity between two points. unit is in px per ms.\n   * @param {Number} deltaTime\n   * @param {Number} x\n   * @param {Number} y\n   * @return {Object} velocity `x` and `y`\n   */\n\n\n  function getVelocity(deltaTime, x, y) {\n    return {\n      x: x / deltaTime || 0,\n      y: y / deltaTime || 0\n    };\n  }\n  /**\n   * get the direction between two points\n   * @param {Number} x\n   * @param {Number} y\n   * @return {Number} direction\n   */\n\n\n  function getDirection(x, y) {\n    if (x === y) {\n      return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n      return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n  }\n  /**\n   * calculate the absolute distance between two points\n   * @param {Object} p1 {x, y}\n   * @param {Object} p2 {x, y}\n   * @param {Array} [props] containing x and y keys\n   * @return {Number} distance\n   */\n\n\n  function getDistance(p1, p2, props) {\n    if (!props) {\n      props = PROPS_XY;\n    }\n\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.sqrt(x * x + y * y);\n  }\n  /**\n   * calculate the angle between two coordinates\n   * @param {Object} p1\n   * @param {Object} p2\n   * @param {Array} [props] containing x and y keys\n   * @return {Number} angle\n   */\n\n\n  function getAngle(p1, p2, props) {\n    if (!props) {\n      props = PROPS_XY;\n    }\n\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n  }\n  /**\n   * calculate the rotation degrees between two pointersets\n   * @param {Array} start array of pointers\n   * @param {Array} end array of pointers\n   * @return {Number} rotation\n   */\n\n\n  function getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n  }\n  /**\n   * calculate the scale factor between two pointersets\n   * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n   * @param {Array} start array of pointers\n   * @param {Array} end array of pointers\n   * @return {Number} scale\n   */\n\n\n  function getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n  }\n\n  var MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n  };\n  var MOUSE_ELEMENT_EVENTS = 'mousedown';\n  var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n  /**\n   * Mouse events input\n   * @constructor\n   * @extends Input\n   */\n\n  function MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n  }\n\n  inherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n      var eventType = MOUSE_INPUT_MAP[ev.type]; // on start we want to have the left mouse button down\n\n      if (eventType & INPUT_START && ev.button === 0) {\n        this.pressed = true;\n      }\n\n      if (eventType & INPUT_MOVE && ev.which !== 1) {\n        eventType = INPUT_END;\n      } // mouse must be down\n\n\n      if (!this.pressed) {\n        return;\n      }\n\n      if (eventType & INPUT_END) {\n        this.pressed = false;\n      }\n\n      this.callback(this.manager, eventType, {\n        pointers: [ev],\n        changedPointers: [ev],\n        pointerType: INPUT_TYPE_MOUSE,\n        srcEvent: ev\n      });\n    }\n  });\n  var POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n  }; // in IE10 the pointer types is defined as an enum\n\n  var IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n\n  };\n  var POINTER_ELEMENT_EVENTS = 'pointerdown';\n  var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel'; // IE10 has prefixed support, and case-sensitive\n\n  if (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n  }\n  /**\n   * Pointer events input\n   * @constructor\n   * @extends Input\n   */\n\n\n  function PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n    Input.apply(this, arguments);\n    this.store = this.manager.session.pointerEvents = [];\n  }\n\n  inherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n      var store = this.store;\n      var removePointer = false;\n      var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n      var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n      var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n      var isTouch = pointerType == INPUT_TYPE_TOUCH; // get index of the event in the store\n\n      var storeIndex = inArray(store, ev.pointerId, 'pointerId'); // start and mouse must be down\n\n      if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n        if (storeIndex < 0) {\n          store.push(ev);\n          storeIndex = store.length - 1;\n        }\n      } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        removePointer = true;\n      } // it not found, so the pointer hasn't been down (so it's probably a hover)\n\n\n      if (storeIndex < 0) {\n        return;\n      } // update the event in the store\n\n\n      store[storeIndex] = ev;\n      this.callback(this.manager, eventType, {\n        pointers: store,\n        changedPointers: [ev],\n        pointerType: pointerType,\n        srcEvent: ev\n      });\n\n      if (removePointer) {\n        // remove from the store\n        store.splice(storeIndex, 1);\n      }\n    }\n  });\n  var SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n  };\n  var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\n  var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n  /**\n   * Touch events input\n   * @constructor\n   * @extends Input\n   */\n\n  function SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n    Input.apply(this, arguments);\n  }\n\n  inherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n      var type = SINGLE_TOUCH_INPUT_MAP[ev.type]; // should we handle the touch events?\n\n      if (type === INPUT_START) {\n        this.started = true;\n      }\n\n      if (!this.started) {\n        return;\n      }\n\n      var touches = normalizeSingleTouches.call(this, ev, type); // when done, reset the started state\n\n      if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n        this.started = false;\n      }\n\n      this.callback(this.manager, type, {\n        pointers: touches[0],\n        changedPointers: touches[1],\n        pointerType: INPUT_TYPE_TOUCH,\n        srcEvent: ev\n      });\n    }\n  });\n  /**\n   * @this {TouchInput}\n   * @param {Object} ev\n   * @param {Number} type flag\n   * @returns {undefined|Array} [all, changed]\n   */\n\n  function normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n      all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n  }\n\n  var TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n  };\n  var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n  /**\n   * Multi-user touch events input\n   * @constructor\n   * @extends Input\n   */\n\n  function TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n    Input.apply(this, arguments);\n  }\n\n  inherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n      var type = TOUCH_INPUT_MAP[ev.type];\n      var touches = getTouches.call(this, ev, type);\n\n      if (!touches) {\n        return;\n      }\n\n      this.callback(this.manager, type, {\n        pointers: touches[0],\n        changedPointers: touches[1],\n        pointerType: INPUT_TYPE_TOUCH,\n        srcEvent: ev\n      });\n    }\n  });\n  /**\n   * @this {TouchInput}\n   * @param {Object} ev\n   * @param {Number} type flag\n   * @returns {undefined|Array} [all, changed]\n   */\n\n  function getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds; // when there is only one touch, the process can be simplified\n\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n      targetIds[allTouches[0].identifier] = true;\n      return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target; // get target touches from touches\n\n    targetTouches = allTouches.filter(function (touch) {\n      return hasParent(touch.target, target);\n    }); // collect touches\n\n    if (type === INPUT_START) {\n      i = 0;\n\n      while (i < targetTouches.length) {\n        targetIds[targetTouches[i].identifier] = true;\n        i++;\n      }\n    } // filter changed touches to only contain touches that exist in the collected target ids\n\n\n    i = 0;\n\n    while (i < changedTouches.length) {\n      if (targetIds[changedTouches[i].identifier]) {\n        changedTargetTouches.push(changedTouches[i]);\n      } // cleanup removed touches\n\n\n      if (type & (INPUT_END | INPUT_CANCEL)) {\n        delete targetIds[changedTouches[i].identifier];\n      }\n\n      i++;\n    }\n\n    if (!changedTargetTouches.length) {\n      return;\n    }\n\n    return [// merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n    uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true), changedTargetTouches];\n  }\n  /**\n   * Combined touch and mouse input\n   *\n   * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n   * This because touch devices also emit mouse events while doing a touch.\n   *\n   * @constructor\n   * @extends Input\n   */\n\n\n  var DEDUP_TIMEOUT = 2500;\n  var DEDUP_DISTANCE = 25;\n\n  function TouchMouseInput() {\n    Input.apply(this, arguments);\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n    this.primaryTouch = null;\n    this.lastTouches = [];\n  }\n\n  inherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n      var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH,\n          isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;\n\n      if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n        return;\n      } // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n\n\n      if (isTouch) {\n        recordTouches.call(this, inputEvent, inputData);\n      } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n        return;\n      }\n\n      this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n      this.touch.destroy();\n      this.mouse.destroy();\n    }\n  });\n\n  function recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n      this.primaryTouch = eventData.changedPointers[0].identifier;\n      setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n      setLastTouch.call(this, eventData);\n    }\n  }\n\n  function setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n      var lastTouch = {\n        x: touch.clientX,\n        y: touch.clientY\n      };\n      this.lastTouches.push(lastTouch);\n      var lts = this.lastTouches;\n\n      var removeLastTouch = function removeLastTouch() {\n        var i = lts.indexOf(lastTouch);\n\n        if (i > -1) {\n          lts.splice(i, 1);\n        }\n      };\n\n      setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n  }\n\n  function isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX,\n        y = eventData.srcEvent.clientY;\n\n    for (var i = 0; i < this.lastTouches.length; i++) {\n      var t = this.lastTouches[i];\n      var dx = Math.abs(x - t.x),\n          dy = Math.abs(y - t.y);\n\n      if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\n  var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined; // magical touchAction value\n\n  var TOUCH_ACTION_COMPUTE = 'compute';\n  var TOUCH_ACTION_AUTO = 'auto';\n  var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\n\n  var TOUCH_ACTION_NONE = 'none';\n  var TOUCH_ACTION_PAN_X = 'pan-x';\n  var TOUCH_ACTION_PAN_Y = 'pan-y';\n  var TOUCH_ACTION_MAP = getTouchActionProps();\n  /**\n   * Touch Action\n   * sets the touchAction property or uses the js alternative\n   * @param {Manager} manager\n   * @param {String} value\n   * @constructor\n   */\n\n  function TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n  }\n\n  TouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function set(value) {\n      // find out the touch-action by the event handlers\n      if (value == TOUCH_ACTION_COMPUTE) {\n        value = this.compute();\n      }\n\n      if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n        this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n      }\n\n      this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function update() {\n      this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function compute() {\n      var actions = [];\n      each(this.manager.recognizers, function (recognizer) {\n        if (boolOrFn(recognizer.options.enable, [recognizer])) {\n          actions = actions.concat(recognizer.getTouchAction());\n        }\n      });\n      return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function preventDefaults(input) {\n      var srcEvent = input.srcEvent;\n      var direction = input.offsetDirection; // if the touch action did prevented once this session\n\n      if (this.manager.session.prevented) {\n        srcEvent.preventDefault();\n        return;\n      }\n\n      var actions = this.actions;\n      var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n      var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n      var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n      if (hasNone) {\n        //do not prevent defaults if this is a tap gesture\n        var isTapPointer = input.pointers.length === 1;\n        var isTapMovement = input.distance < 2;\n        var isTapTouchTime = input.deltaTime < 250;\n\n        if (isTapPointer && isTapMovement && isTapTouchTime) {\n          return;\n        }\n      }\n\n      if (hasPanX && hasPanY) {\n        // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n        return;\n      }\n\n      if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {\n        return this.preventSrc(srcEvent);\n      }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function preventSrc(srcEvent) {\n      this.manager.session.prevented = true;\n      srcEvent.preventDefault();\n    }\n  };\n  /**\n   * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n   * @param {String} actions\n   * @returns {*}\n   */\n\n  function cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n      return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y); // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n\n    if (hasPanX && hasPanY) {\n      return TOUCH_ACTION_NONE;\n    } // pan-x OR pan-y\n\n\n    if (hasPanX || hasPanY) {\n      return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    } // manipulation\n\n\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n      return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n  }\n\n  function getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n      return false;\n    }\n\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function (val) {\n      // If css.supports is not supported but there is native touch-action assume it supports\n      // all values. This is the case for IE 10 and 11.\n      touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n  }\n  /**\n   * Recognizer flow explained; *\n   * All recognizers have the initial state of POSSIBLE when a input session starts.\n   * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n   * Example session for mouse-input: mousedown -> mousemove -> mouseup\n   *\n   * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n   * which determines with state it should be.\n   *\n   * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n   * POSSIBLE to give it another change on the next cycle.\n   *\n   *               Possible\n   *                  |\n   *            +-----+---------------+\n   *            |                     |\n   *      +-----+-----+               |\n   *      |           |               |\n   *   Failed      Cancelled          |\n   *                          +-------+------+\n   *                          |              |\n   *                      Recognized       Began\n   *                                         |\n   *                                      Changed\n   *                                         |\n   *                                  Ended/Recognized\n   */\n\n\n  var STATE_POSSIBLE = 1;\n  var STATE_BEGAN = 2;\n  var STATE_CHANGED = 4;\n  var STATE_ENDED = 8;\n  var STATE_RECOGNIZED = STATE_ENDED;\n  var STATE_CANCELLED = 16;\n  var STATE_FAILED = 32;\n  /**\n   * Recognizer\n   * Every recognizer needs to extend from this class.\n   * @constructor\n   * @param {Object} options\n   */\n\n  function Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n    this.id = uniqueId();\n    this.manager = null; // default is enable true\n\n    this.options.enable = ifUndefined(this.options.enable, true);\n    this.state = STATE_POSSIBLE;\n    this.simultaneous = {};\n    this.requireFail = [];\n  }\n\n  Recognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function set(options) {\n      assign(this.options, options); // also update the touchAction, in case something changed about the directions/enabled state\n\n      this.manager && this.manager.touchAction.update();\n      return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function recognizeWith(otherRecognizer) {\n      if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n        return this;\n      }\n\n      var simultaneous = this.simultaneous;\n      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\n      if (!simultaneous[otherRecognizer.id]) {\n        simultaneous[otherRecognizer.id] = otherRecognizer;\n        otherRecognizer.recognizeWith(this);\n      }\n\n      return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function dropRecognizeWith(otherRecognizer) {\n      if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n        return this;\n      }\n\n      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n      delete this.simultaneous[otherRecognizer.id];\n      return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function requireFailure(otherRecognizer) {\n      if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n        return this;\n      }\n\n      var requireFail = this.requireFail;\n      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\n      if (inArray(requireFail, otherRecognizer) === -1) {\n        requireFail.push(otherRecognizer);\n        otherRecognizer.requireFailure(this);\n      }\n\n      return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function dropRequireFailure(otherRecognizer) {\n      if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n        return this;\n      }\n\n      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n      var index = inArray(this.requireFail, otherRecognizer);\n\n      if (index > -1) {\n        this.requireFail.splice(index, 1);\n      }\n\n      return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function hasRequireFailures() {\n      return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function canRecognizeWith(otherRecognizer) {\n      return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function emit(input) {\n      var self = this;\n      var state = this.state;\n\n      function emit(event) {\n        self.manager.emit(event, input);\n      } // 'panstart' and 'panmove'\n\n\n      if (state < STATE_ENDED) {\n        emit(self.options.event + stateStr(state));\n      }\n\n      emit(self.options.event); // simple 'eventName' events\n\n      if (input.additionalEvent) {\n        // additional event(panleft, panright, pinchin, pinchout...)\n        emit(input.additionalEvent);\n      } // panend and pancancel\n\n\n      if (state >= STATE_ENDED) {\n        emit(self.options.event + stateStr(state));\n      }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function tryEmit(input) {\n      if (this.canEmit()) {\n        return this.emit(input);\n      } // it's failing anyway\n\n\n      this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function canEmit() {\n      var i = 0;\n\n      while (i < this.requireFail.length) {\n        if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n          return false;\n        }\n\n        i++;\n      }\n\n      return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function recognize(inputData) {\n      // make a new copy of the inputData\n      // so we can change the inputData without messing up the other recognizers\n      var inputDataClone = assign({}, inputData); // is is enabled and allow recognizing?\n\n      if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n        this.reset();\n        this.state = STATE_FAILED;\n        return;\n      } // reset when we've reached the end\n\n\n      if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n        this.state = STATE_POSSIBLE;\n      }\n\n      this.state = this.process(inputDataClone); // the recognizer has recognized a gesture\n      // so trigger an event\n\n      if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n        this.tryEmit(inputDataClone);\n      }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function process(inputData) {},\n    // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function getTouchAction() {},\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function reset() {}\n  };\n  /**\n   * get a usable string, used as event postfix\n   * @param {Const} state\n   * @returns {String} state\n   */\n\n  function stateStr(state) {\n    if (state & STATE_CANCELLED) {\n      return 'cancel';\n    } else if (state & STATE_ENDED) {\n      return 'end';\n    } else if (state & STATE_CHANGED) {\n      return 'move';\n    } else if (state & STATE_BEGAN) {\n      return 'start';\n    }\n\n    return '';\n  }\n  /**\n   * direction cons to string\n   * @param {Const} direction\n   * @returns {String}\n   */\n\n\n  function directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n      return 'down';\n    } else if (direction == DIRECTION_UP) {\n      return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n      return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n      return 'right';\n    }\n\n    return '';\n  }\n  /**\n   * get a recognizer by name if it is bound to a manager\n   * @param {Recognizer|String} otherRecognizer\n   * @param {Recognizer} recognizer\n   * @returns {Recognizer}\n   */\n\n\n  function getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n\n    if (manager) {\n      return manager.get(otherRecognizer);\n    }\n\n    return otherRecognizer;\n  }\n  /**\n   * This recognizer is just used as a base for the simple attribute recognizers.\n   * @constructor\n   * @extends Recognizer\n   */\n\n\n  function AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n  }\n\n  inherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n      /**\n       * @type {Number}\n       * @default 1\n       */\n      pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function attrTest(input) {\n      var optionPointers = this.options.pointers;\n      return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function process(input) {\n      var state = this.state;\n      var eventType = input.eventType;\n      var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n      var isValid = this.attrTest(input); // on cancel input and we've recognized before, return STATE_CANCELLED\n\n      if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n        return state | STATE_CANCELLED;\n      } else if (isRecognized || isValid) {\n        if (eventType & INPUT_END) {\n          return state | STATE_ENDED;\n        } else if (!(state & STATE_BEGAN)) {\n          return STATE_BEGAN;\n        }\n\n        return state | STATE_CHANGED;\n      }\n\n      return STATE_FAILED;\n    }\n  });\n  /**\n   * Pan\n   * Recognized when the pointer is down and moved in the allowed direction.\n   * @constructor\n   * @extends AttrRecognizer\n   */\n\n  function PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n    this.pX = null;\n    this.pY = null;\n  }\n\n  inherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n      event: 'pan',\n      threshold: 10,\n      pointers: 1,\n      direction: DIRECTION_ALL\n    },\n    getTouchAction: function getTouchAction() {\n      var direction = this.options.direction;\n      var actions = [];\n\n      if (direction & DIRECTION_HORIZONTAL) {\n        actions.push(TOUCH_ACTION_PAN_Y);\n      }\n\n      if (direction & DIRECTION_VERTICAL) {\n        actions.push(TOUCH_ACTION_PAN_X);\n      }\n\n      return actions;\n    },\n    directionTest: function directionTest(input) {\n      var options = this.options;\n      var hasMoved = true;\n      var distance = input.distance;\n      var direction = input.direction;\n      var x = input.deltaX;\n      var y = input.deltaY; // lock to axis?\n\n      if (!(direction & options.direction)) {\n        if (options.direction & DIRECTION_HORIZONTAL) {\n          direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n          hasMoved = x != this.pX;\n          distance = Math.abs(input.deltaX);\n        } else {\n          direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n          hasMoved = y != this.pY;\n          distance = Math.abs(input.deltaY);\n        }\n      }\n\n      input.direction = direction;\n      return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n    attrTest: function attrTest(input) {\n      return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));\n    },\n    emit: function emit(input) {\n      this.pX = input.deltaX;\n      this.pY = input.deltaY;\n      var direction = directionStr(input.direction);\n\n      if (direction) {\n        input.additionalEvent = this.options.event + direction;\n      }\n\n      this._super.emit.call(this, input);\n    }\n  });\n  /**\n   * Pinch\n   * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n   * @constructor\n   * @extends AttrRecognizer\n   */\n\n  function PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n  }\n\n  inherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n      event: 'pinch',\n      threshold: 0,\n      pointers: 2\n    },\n    getTouchAction: function getTouchAction() {\n      return [TOUCH_ACTION_NONE];\n    },\n    attrTest: function attrTest(input) {\n      return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n    emit: function emit(input) {\n      if (input.scale !== 1) {\n        var inOut = input.scale < 1 ? 'in' : 'out';\n        input.additionalEvent = this.options.event + inOut;\n      }\n\n      this._super.emit.call(this, input);\n    }\n  });\n  /**\n   * Press\n   * Recognized when the pointer is down for x ms without any movement.\n   * @constructor\n   * @extends Recognizer\n   */\n\n  function PressRecognizer() {\n    Recognizer.apply(this, arguments);\n    this._timer = null;\n    this._input = null;\n  }\n\n  inherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n      event: 'press',\n      pointers: 1,\n      time: 251,\n      // minimal time of the pointer to be pressed\n      threshold: 9 // a minimal movement is ok, but keep it low\n\n    },\n    getTouchAction: function getTouchAction() {\n      return [TOUCH_ACTION_AUTO];\n    },\n    process: function process(input) {\n      var options = this.options;\n      var validPointers = input.pointers.length === options.pointers;\n      var validMovement = input.distance < options.threshold;\n      var validTime = input.deltaTime > options.time;\n      this._input = input; // we only allow little movement\n      // and we've reached an end event, so a tap is possible\n\n      if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {\n        this.reset();\n      } else if (input.eventType & INPUT_START) {\n        this.reset();\n        this._timer = setTimeoutContext(function () {\n          this.state = STATE_RECOGNIZED;\n          this.tryEmit();\n        }, options.time, this);\n      } else if (input.eventType & INPUT_END) {\n        return STATE_RECOGNIZED;\n      }\n\n      return STATE_FAILED;\n    },\n    reset: function reset() {\n      clearTimeout(this._timer);\n    },\n    emit: function emit(input) {\n      if (this.state !== STATE_RECOGNIZED) {\n        return;\n      }\n\n      if (input && input.eventType & INPUT_END) {\n        this.manager.emit(this.options.event + 'up', input);\n      } else {\n        this._input.timeStamp = now();\n        this.manager.emit(this.options.event, this._input);\n      }\n    }\n  });\n  /**\n   * Rotate\n   * Recognized when two or more pointer are moving in a circular motion.\n   * @constructor\n   * @extends AttrRecognizer\n   */\n\n  function RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n  }\n\n  inherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n      event: 'rotate',\n      threshold: 0,\n      pointers: 2\n    },\n    getTouchAction: function getTouchAction() {\n      return [TOUCH_ACTION_NONE];\n    },\n    attrTest: function attrTest(input) {\n      return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n  });\n  /**\n   * Swipe\n   * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n   * @constructor\n   * @extends AttrRecognizer\n   */\n\n  function SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n  }\n\n  inherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n      event: 'swipe',\n      threshold: 10,\n      velocity: 0.3,\n      direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n      pointers: 1\n    },\n    getTouchAction: function getTouchAction() {\n      return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n    attrTest: function attrTest(input) {\n      var direction = this.options.direction;\n      var velocity;\n\n      if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n        velocity = input.overallVelocity;\n      } else if (direction & DIRECTION_HORIZONTAL) {\n        velocity = input.overallVelocityX;\n      } else if (direction & DIRECTION_VERTICAL) {\n        velocity = input.overallVelocityY;\n      }\n\n      return this._super.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers == this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n    emit: function emit(input) {\n      var direction = directionStr(input.offsetDirection);\n\n      if (direction) {\n        this.manager.emit(this.options.event + direction, input);\n      }\n\n      this.manager.emit(this.options.event, input);\n    }\n  });\n  /**\n   * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n   * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n   * a single tap.\n   *\n   * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n   * multi-taps being recognized.\n   * @constructor\n   * @extends Recognizer\n   */\n\n  function TapRecognizer() {\n    Recognizer.apply(this, arguments); // previous time and center,\n    // used for tap counting\n\n    this.pTime = false;\n    this.pCenter = false;\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n  }\n\n  inherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n      event: 'tap',\n      pointers: 1,\n      taps: 1,\n      interval: 300,\n      // max time between the multi-tap taps\n      time: 250,\n      // max time of the pointer to be down (like finger on the screen)\n      threshold: 9,\n      // a minimal movement is ok, but keep it low\n      posThreshold: 10 // a multi-tap can be a bit off the initial position\n\n    },\n    getTouchAction: function getTouchAction() {\n      return [TOUCH_ACTION_MANIPULATION];\n    },\n    process: function process(input) {\n      var options = this.options;\n      var validPointers = input.pointers.length === options.pointers;\n      var validMovement = input.distance < options.threshold;\n      var validTouchTime = input.deltaTime < options.time;\n      this.reset();\n\n      if (input.eventType & INPUT_START && this.count === 0) {\n        return this.failTimeout();\n      } // we only allow little movement\n      // and we've reached an end event, so a tap is possible\n\n\n      if (validMovement && validTouchTime && validPointers) {\n        if (input.eventType != INPUT_END) {\n          return this.failTimeout();\n        }\n\n        var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;\n        var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n        this.pTime = input.timeStamp;\n        this.pCenter = input.center;\n\n        if (!validMultiTap || !validInterval) {\n          this.count = 1;\n        } else {\n          this.count += 1;\n        }\n\n        this._input = input; // if tap count matches we have recognized it,\n        // else it has began recognizing...\n\n        var tapCount = this.count % options.taps;\n\n        if (tapCount === 0) {\n          // no failing requirements, immediately trigger the tap event\n          // or wait as long as the multitap interval to trigger\n          if (!this.hasRequireFailures()) {\n            return STATE_RECOGNIZED;\n          } else {\n            this._timer = setTimeoutContext(function () {\n              this.state = STATE_RECOGNIZED;\n              this.tryEmit();\n            }, options.interval, this);\n            return STATE_BEGAN;\n          }\n        }\n      }\n\n      return STATE_FAILED;\n    },\n    failTimeout: function failTimeout() {\n      this._timer = setTimeoutContext(function () {\n        this.state = STATE_FAILED;\n      }, this.options.interval, this);\n      return STATE_FAILED;\n    },\n    reset: function reset() {\n      clearTimeout(this._timer);\n    },\n    emit: function emit() {\n      if (this.state == STATE_RECOGNIZED) {\n        this._input.tapCount = this.count;\n        this.manager.emit(this.options.event, this._input);\n      }\n    }\n  });\n  /**\n   * Simple way to create a manager with a default set of recognizers.\n   * @param {HTMLElement} element\n   * @param {Object} [options]\n   * @constructor\n   */\n\n  function Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n  }\n  /**\n   * @const {string}\n   */\n\n\n  Hammer.VERSION = '2.0.7';\n  /**\n   * default settings\n   * @namespace\n   */\n\n  Hammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [// RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n    [RotateRecognizer, {\n      enable: false\n    }], [PinchRecognizer, {\n      enable: false\n    }, ['rotate']], [SwipeRecognizer, {\n      direction: DIRECTION_HORIZONTAL\n    }], [PanRecognizer, {\n      direction: DIRECTION_HORIZONTAL\n    }, ['swipe']], [TapRecognizer], [TapRecognizer, {\n      event: 'doubletap',\n      taps: 2\n    }, ['tap']], [PressRecognizer]],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n      /**\n       * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n       * @type {String}\n       * @default 'none'\n       */\n      userSelect: 'none',\n\n      /**\n       * Disable the Windows Phone grippers when pressing an element.\n       * @type {String}\n       * @default 'none'\n       */\n      touchSelect: 'none',\n\n      /**\n       * Disables the default callout shown when you touch and hold a touch target.\n       * On iOS, when you touch and hold a touch target such as a link, Safari displays\n       * a callout containing information about the link. This property allows you to disable that callout.\n       * @type {String}\n       * @default 'none'\n       */\n      touchCallout: 'none',\n\n      /**\n       * Specifies whether zooming is enabled. Used by IE10>\n       * @type {String}\n       * @default 'none'\n       */\n      contentZooming: 'none',\n\n      /**\n       * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n       * @type {String}\n       * @default 'none'\n       */\n      userDrag: 'none',\n\n      /**\n       * Overrides the highlight color shown when the user taps a link or a JavaScript\n       * clickable element in iOS. This property obeys the alpha value, if specified.\n       * @type {String}\n       * @default 'rgba(0,0,0,0)'\n       */\n      tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n  };\n  var STOP = 1;\n  var FORCED_STOP = 2;\n  /**\n   * Manager\n   * @param {HTMLElement} element\n   * @param {Object} [options]\n   * @constructor\n   */\n\n  function Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n    this.options.inputTarget = this.options.inputTarget || element;\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n    toggleCssProps(this, true);\n    each(this.options.recognizers, function (item) {\n      var recognizer = this.add(new item[0](item[1]));\n      item[2] && recognizer.recognizeWith(item[2]);\n      item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n  }\n\n  Manager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function set(options) {\n      assign(this.options, options); // Options that need a little more setup\n\n      if (options.touchAction) {\n        this.touchAction.update();\n      }\n\n      if (options.inputTarget) {\n        // Clean up existing event listeners and reinitialize\n        this.input.destroy();\n        this.input.target = options.inputTarget;\n        this.input.init();\n      }\n\n      return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function stop(force) {\n      this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function recognize(inputData) {\n      var session = this.session;\n\n      if (session.stopped) {\n        return;\n      } // run the touch-action polyfill\n\n\n      this.touchAction.preventDefaults(inputData);\n      var recognizer;\n      var recognizers = this.recognizers; // this holds the recognizer that is being recognized.\n      // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n      // if no recognizer is detecting a thing, it is set to `null`\n\n      var curRecognizer = session.curRecognizer; // reset when the last recognizer is recognized\n      // or when we're in a new session\n\n      if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {\n        curRecognizer = session.curRecognizer = null;\n      }\n\n      var i = 0;\n\n      while (i < recognizers.length) {\n        recognizer = recognizers[i]; // find out if we are allowed try to recognize the input for this one.\n        // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n        // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n        //      that is being recognized.\n        // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n        //      this can be setup with the `recognizeWith()` method on the recognizer.\n\n        if (session.stopped !== FORCED_STOP && ( // 1\n        !curRecognizer || recognizer == curRecognizer || // 2\n        recognizer.canRecognizeWith(curRecognizer))) {\n          // 3\n          recognizer.recognize(inputData);\n        } else {\n          recognizer.reset();\n        } // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n        // current active recognizer. but only if we don't already have an active recognizer\n\n\n        if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n          curRecognizer = session.curRecognizer = recognizer;\n        }\n\n        i++;\n      }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function get(recognizer) {\n      if (recognizer instanceof Recognizer) {\n        return recognizer;\n      }\n\n      var recognizers = this.recognizers;\n\n      for (var i = 0; i < recognizers.length; i++) {\n        if (recognizers[i].options.event == recognizer) {\n          return recognizers[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function add(recognizer) {\n      if (invokeArrayArg(recognizer, 'add', this)) {\n        return this;\n      } // remove existing\n\n\n      var existing = this.get(recognizer.options.event);\n\n      if (existing) {\n        this.remove(existing);\n      }\n\n      this.recognizers.push(recognizer);\n      recognizer.manager = this;\n      this.touchAction.update();\n      return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function remove(recognizer) {\n      if (invokeArrayArg(recognizer, 'remove', this)) {\n        return this;\n      }\n\n      recognizer = this.get(recognizer); // let's make sure this recognizer exists\n\n      if (recognizer) {\n        var recognizers = this.recognizers;\n        var index = inArray(recognizers, recognizer);\n\n        if (index !== -1) {\n          recognizers.splice(index, 1);\n          this.touchAction.update();\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function on(events, handler) {\n      if (events === undefined) {\n        return;\n      }\n\n      if (handler === undefined) {\n        return;\n      }\n\n      var handlers = this.handlers;\n      each(splitStr(events), function (event) {\n        handlers[event] = handlers[event] || [];\n        handlers[event].push(handler);\n      });\n      return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function off(events, handler) {\n      if (events === undefined) {\n        return;\n      }\n\n      var handlers = this.handlers;\n      each(splitStr(events), function (event) {\n        if (!handler) {\n          delete handlers[event];\n        } else {\n          handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n        }\n      });\n      return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function emit(event, data) {\n      // we also want to trigger dom events\n      if (this.options.domEvents) {\n        triggerDomEvent(event, data);\n      } // no handlers, so skip it all\n\n\n      var handlers = this.handlers[event] && this.handlers[event].slice();\n\n      if (!handlers || !handlers.length) {\n        return;\n      }\n\n      data.type = event;\n\n      data.preventDefault = function () {\n        data.srcEvent.preventDefault();\n      };\n\n      var i = 0;\n\n      while (i < handlers.length) {\n        handlers[i](data);\n        i++;\n      }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function destroy() {\n      this.element && toggleCssProps(this, false);\n      this.handlers = {};\n      this.session = {};\n      this.input.destroy();\n      this.element = null;\n    }\n  };\n  /**\n   * add/remove the css properties as defined in manager.options.cssProps\n   * @param {Manager} manager\n   * @param {Boolean} add\n   */\n\n  function toggleCssProps(manager, add) {\n    var element = manager.element;\n\n    if (!element.style) {\n      return;\n    }\n\n    var prop;\n    each(manager.options.cssProps, function (value, name) {\n      prop = prefixed(element.style, name);\n\n      if (add) {\n        manager.oldCssProps[prop] = element.style[prop];\n        element.style[prop] = value;\n      } else {\n        element.style[prop] = manager.oldCssProps[prop] || '';\n      }\n    });\n\n    if (!add) {\n      manager.oldCssProps = {};\n    }\n  }\n  /**\n   * trigger dom event\n   * @param {String} event\n   * @param {Object} data\n   */\n\n\n  function triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n  }\n\n  assign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n  }); // this prevents errors when Hammer is loaded in the presence of an AMD\n  //  style loader but by script tag, not by the loader.\n\n  var freeGlobal = typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}; // jshint ignore:line\n\n  freeGlobal.Hammer = Hammer;\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return Hammer;\n    });\n  } else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n  } else {\n    window[exportName] = Hammer;\n  }\n})(window, document, 'Hammer');","// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n// Purpose: include this in your module to avoids adding dependencies on\n// micro modules like 'global'\n\n/* global window, global, document, navigator */\nexport var userAgent = typeof navigator !== 'undefined' && navigator.userAgent ? navigator.userAgent.toLowerCase() : '';\nvar window_ = typeof window !== 'undefined' ? window : global;\nvar global_ = typeof global !== 'undefined' ? global : window;\nvar document_ = typeof document !== 'undefined' ? document : {};\nexport { window_ as window, global_ as global, document_ as document };\n/*\n * Detect whether passive option is supported by the current browser.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n   #Safely_detecting_option_support\n */\n\nvar passiveSupported = false;\n/* eslint-disable accessor-pairs, no-empty */\n\ntry {\n  var options = {\n    // This function will be called when the browser\n    // attempts to access the passive property.\n    get passive() {\n      passiveSupported = true;\n    }\n\n  };\n  window_.addEventListener('test', options, options);\n  window_.removeEventListener('test', options, options);\n} catch (err) {}\n\nexport { passiveSupported };"],"sourceRoot":""}