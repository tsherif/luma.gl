{"version":3,"sources":["webpack:///./templates/index.jsx","webpack:///../modules/constants/src/index.js","webpack:///../modules/core/src/geometry/geometry.js","webpack:///./src/components/animation-loop-example-page.jsx","webpack:///../modules/shadertools/src/lib/shader-module-registry.js","webpack:///../modules/shadertools/src/lib/resolve-modules.js","webpack:///../modules/webgl/src/classes/resource.js","webpack:///../modules/webgl/src/classes/buffer.js","webpack:///../modules/shadertools/src/utils/webgl-info.js","webpack:///../modules/shadertools/src/utils/is-old-ie.js","webpack:///../modules/shadertools/src/lib/platform-defines.js","webpack:///../modules/shadertools/src/lib/assemble-shaders.js","webpack:///../modules/core/src/lib/model-utils.js","webpack:///../modules/webgl/src/utils/format-value.js","webpack:///../modules/webgl/src/debug/debug-vertex-array.js","webpack:///../modules/webgl/src/debug/debug-uniforms.js","webpack:///../modules/webgl/src/debug/debug-program-configuration.js","webpack:///../modules/core/src/debug/seer-integration.js","webpack:///../modules/core/src/lib/base-model.js","webpack:///../modules/core/src/lib/model.js","webpack:///../modules/shadertools/src/lib/transpile-shader.js","webpack:///../modules/shadertools/src/lib/filters/prop-types.js","webpack:///../modules/shadertools/src/lib/shader-module.js","webpack:///../modules/shadertools/src/lib/inject-shader.js","webpack:///../modules/shadertools/src/modules/module-injectors.js","webpack:///../modules/webgl/src/webgl-utils/attribute-utils.js","webpack:///../modules/webgl/src/classes/texture.js","webpack:///../modules/shadertools/src/lib/constants.js","webpack:///../modules/core/src/geometries/cube-geometry.js","webpack:///../modules/shadertools/src/index.js","webpack:///../modules/shadertools/src/shaders/modular-vertex.glsl.js","webpack:///../modules/shadertools/src/shaders/modular-fragment.glsl.js","webpack:///../modules/webgl2-polyfill/src/polyfill-context.js","webpack:///../modules/webgl/src/utils/globals.js","webpack:///../modules/webgl/src/classes/framebuffer.js","webpack:///../modules/core/src/scenegraph/nodes/scenegraph-node.js","webpack:///../modules/core/src/scenegraph/nodes/model-node.js","webpack:///../modules/webgl/src/utils/log.js","webpack:///../modules/shadertools/src/utils/assert.js","webpack:///../modules/webgl/src/classes/accessor.js","webpack:///../modules/webgl-state-tracker/src/unified-parameter-api/unified-parameter-api.js","webpack:///../modules/webgl-state-tracker/src/unified-parameter-api/webgl-parameter-tables.js","webpack:///../modules/webgl2-polyfill/src/assert.js","webpack:///../modules/webgl/src/utils/is-browser.js","webpack:///../modules/webgl/src/classes/texture-formats.js","webpack:///../modules/webgl/src/classes/texture-2d.js","webpack:///../modules/webgl/src/classes/renderbuffer-formats.js","webpack:///../modules/webgl/src/classes/renderbuffer.js","webpack:///./src/components/info-panel.jsx","webpack:///../modules/webgl-state-tracker/src/state-tracking/track-context-state.js","webpack:///../modules/webgl-state-tracker/src/utils/deep-array-equal.js","webpack:///../modules/webgl-state-tracker/src/state-tracking/webgl-function-to-parameters-table.js","webpack:///../modules/webgl/src/utils/load-file.js","webpack:///../modules/webgl/src/utils/assert.js","webpack:///../modules/webgl/src/utils/is-electron.js","webpack:///../modules/webgl/src/webgl-utils/typed-array-utils.js","webpack:///../modules/webgl/src/classes/transform-feedback.js","webpack:///../modules/webgl/src/features/webgl-features-table.js","webpack:///../modules/webgl/src/webgl-utils/webgl-types.js","webpack:///../modules/webgl/src/classes/clear.js","webpack:///../modules/webgl/src/webgl-utils/texture-utils.js","webpack:///../modules/webgl/src/classes/texture-cube.js","webpack:///../modules/webgl/src/classes/texture-3d.js","webpack:///../modules/webgl-state-tracker/src/unified-parameter-api/webgl-setter-function-table.js","webpack:///../modules/webgl-state-tracker/src/unified-parameter-api/set-parameters.js","webpack:///../modules/webgl/src/init.js","webpack:///../modules/webgl/src/webgl-utils/format-utils.js","webpack:///../modules/webgl/src/classes/copy-and-blit.js","webpack:///../modules/webgl2-polyfill/src/polyfills/get-parameter-polyfill.js","webpack:///../modules/webgl2-polyfill/src/polyfill-table.js","webpack:///../modules/webgl-state-tracker/src/state-tracking/with-parameters.js","webpack:///../modules/webgl-state-tracker/src/utils/utils.js","webpack:///../modules/webgl-state-tracker/src/utils/assert.js","webpack:///../modules/webgl/src/utils/check-props.js","webpack:///../modules/webgl/src/webgl-utils/webgl-checks.js","webpack:///../modules/webgl/src/utils/utils.js","webpack:///../modules/webgl/src/webgl-utils/constants-to-keys.js","webpack:///../modules/webgl/src/utils/stub-methods.js","webpack:///../modules/shadertools/src/modules/picking/picking.js","webpack:///../modules/webgl/src/classes/query.js","webpack:///../modules/webgl/src/features/features.js","webpack:///../modules/webgl/src/context/create-headless-context.js","webpack:///../modules/webgl/src/context/create-canvas.js","webpack:///../modules/webgl/src/context/context.js","webpack:///../modules/webgl/src/context/create-browser-context.js","webpack:///../modules/webgl/src/debug/get-context-debug-info.js","webpack:///../modules/webgl/src/webgl-utils/request-animation-frame.js","webpack:///../modules/core/src/lib/animation-loop.js","webpack:///../modules/webgl/src/classes/uniforms.js","webpack:///../modules/webgl/src/glsl-utils/get-shader-name.js","webpack:///../modules/webgl/src/glsl-utils/get-shader-type-name.js","webpack:///../modules/webgl/src/glsl-utils/format-glsl-error.js","webpack:///../modules/webgl/src/classes/shader.js","webpack:///../modules/webgl/src/classes/program-configuration.js","webpack:///../modules/webgl/src/classes/program.js","webpack:///../modules/shadertools/src/modules/project/project.js","webpack:///../modules/shadertools/src/modules/dirlight/dirlight.js","webpack:///../modules/addons/src/animation/timeline.js","webpack:///../examples/core/instancing/app.js","webpack:///./templates/core/example-instancing.jsx","webpack:///../modules/addons/src/webvr/display.js","webpack:///../modules/addons/src/webvr/vr-button.js","webpack:///../modules/addons/src/webvr/vr-display.js","webpack:///../modules/webgl/src/utils/array-utils-flat.js","webpack:///../modules/webgl/src/classes/vertex-array-object.js","webpack:///../modules/webgl/src/classes/vertex-array.js"],"names":["window","HeroExample","require","default","IndexPage","render","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","ocular_gatsby_components__WEBPACK_IMPORTED_MODULE_1__","React","Component","module","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","COLOR_BUFFER_BIT","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","CONSTANT_COLOR","ONE_MINUS_CONSTANT_COLOR","CONSTANT_ALPHA","ONE_MINUS_CONSTANT_ALPHA","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","BLEND_EQUATION","BLEND_EQUATION_RGB","BLEND_EQUATION_ALPHA","BLEND_DST_RGB","BLEND_SRC_RGB","BLEND_DST_ALPHA","BLEND_SRC_ALPHA","BLEND_COLOR","ARRAY_BUFFER_BINDING","ELEMENT_ARRAY_BUFFER_BINDING","LINE_WIDTH","ALIASED_POINT_SIZE_RANGE","ALIASED_LINE_WIDTH_RANGE","CULL_FACE_MODE","FRONT_FACE","DEPTH_RANGE","DEPTH_WRITEMASK","DEPTH_CLEAR_VALUE","DEPTH_FUNC","STENCIL_CLEAR_VALUE","STENCIL_FUNC","STENCIL_FAIL","STENCIL_PASS_DEPTH_FAIL","STENCIL_PASS_DEPTH_PASS","STENCIL_REF","STENCIL_VALUE_MASK","STENCIL_WRITEMASK","STENCIL_BACK_FUNC","STENCIL_BACK_FAIL","STENCIL_BACK_PASS_DEPTH_FAIL","STENCIL_BACK_PASS_DEPTH_PASS","STENCIL_BACK_REF","STENCIL_BACK_VALUE_MASK","STENCIL_BACK_WRITEMASK","VIEWPORT","SCISSOR_BOX","COLOR_CLEAR_VALUE","COLOR_WRITEMASK","UNPACK_ALIGNMENT","PACK_ALIGNMENT","MAX_TEXTURE_SIZE","MAX_VIEWPORT_DIMS","SUBPIXEL_BITS","RED_BITS","GREEN_BITS","BLUE_BITS","ALPHA_BITS","DEPTH_BITS","STENCIL_BITS","POLYGON_OFFSET_UNITS","POLYGON_OFFSET_FACTOR","TEXTURE_BINDING_2D","SAMPLE_BUFFERS","SAMPLES","SAMPLE_COVERAGE_VALUE","SAMPLE_COVERAGE_INVERT","COMPRESSED_TEXTURE_FORMATS","VENDOR","RENDERER","VERSION","IMPLEMENTATION_COLOR_READ_TYPE","IMPLEMENTATION_COLOR_READ_FORMAT","BROWSER_DEFAULT_WEBGL","STATIC_DRAW","STREAM_DRAW","DYNAMIC_DRAW","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","BUFFER_SIZE","BUFFER_USAGE","CURRENT_VERTEX_ATTRIB","VERTEX_ATTRIB_ARRAY_ENABLED","VERTEX_ATTRIB_ARRAY_SIZE","VERTEX_ATTRIB_ARRAY_STRIDE","VERTEX_ATTRIB_ARRAY_TYPE","VERTEX_ATTRIB_ARRAY_NORMALIZED","VERTEX_ATTRIB_ARRAY_POINTER","VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","CULL_FACE","FRONT","BACK","FRONT_AND_BACK","BLEND","DEPTH_TEST","DITHER","POLYGON_OFFSET_FILL","SAMPLE_ALPHA_TO_COVERAGE","SAMPLE_COVERAGE","SCISSOR_TEST","STENCIL_TEST","NO_ERROR","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","CW","CCW","DONT_CARE","FASTEST","NICEST","GENERATE_MIPMAP_HINT","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","DEPTH_COMPONENT","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","FRAGMENT_SHADER","VERTEX_SHADER","COMPILE_STATUS","DELETE_STATUS","LINK_STATUS","VALIDATE_STATUS","ATTACHED_SHADERS","ACTIVE_ATTRIBUTES","ACTIVE_UNIFORMS","MAX_VERTEX_ATTRIBS","MAX_VERTEX_UNIFORM_VECTORS","MAX_VARYING_VECTORS","MAX_COMBINED_TEXTURE_IMAGE_UNITS","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_IMAGE_UNITS","MAX_FRAGMENT_UNIFORM_VECTORS","SHADER_TYPE","SHADING_LANGUAGE_VERSION","CURRENT_PROGRAM","NEVER","ALWAYS","LESS","EQUAL","LEQUAL","GREATER","GEQUAL","NOTEQUAL","KEEP","REPLACE","INCR","DECR","INVERT","INCR_WRAP","DECR_WRAP","NEAREST","LINEAR","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_LINEAR","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_2D","TEXTURE","TEXTURE_CUBE_MAP","TEXTURE_BINDING_CUBE_MAP","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","MAX_CUBE_MAP_TEXTURE_SIZE","TEXTURE0","ACTIVE_TEXTURE","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","TEXTURE_WIDTH","TEXTURE_HEIGHT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","LOW_FLOAT","MEDIUM_FLOAT","HIGH_FLOAT","LOW_INT","MEDIUM_INT","HIGH_INT","FRAMEBUFFER","RENDERBUFFER","RGBA4","RGB5_A1","RGB565","DEPTH_COMPONENT16","STENCIL_INDEX","STENCIL_INDEX8","DEPTH_STENCIL","RENDERBUFFER_WIDTH","RENDERBUFFER_HEIGHT","RENDERBUFFER_INTERNAL_FORMAT","RENDERBUFFER_RED_SIZE","RENDERBUFFER_GREEN_SIZE","RENDERBUFFER_BLUE_SIZE","RENDERBUFFER_ALPHA_SIZE","RENDERBUFFER_DEPTH_SIZE","RENDERBUFFER_STENCIL_SIZE","FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","COLOR_ATTACHMENT0","DEPTH_ATTACHMENT","STENCIL_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","NONE","FRAMEBUFFER_COMPLETE","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","FRAMEBUFFER_BINDING","RENDERBUFFER_BINDING","READ_FRAMEBUFFER","DRAW_FRAMEBUFFER","MAX_RENDERBUFFER_SIZE","INVALID_FRAMEBUFFER_OPERATION","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_COLORSPACE_CONVERSION_WEBGL","READ_BUFFER","UNPACK_ROW_LENGTH","UNPACK_SKIP_ROWS","UNPACK_SKIP_PIXELS","PACK_ROW_LENGTH","PACK_SKIP_ROWS","PACK_SKIP_PIXELS","TEXTURE_BINDING_3D","UNPACK_SKIP_IMAGES","UNPACK_IMAGE_HEIGHT","MAX_3D_TEXTURE_SIZE","MAX_ELEMENTS_VERTICES","MAX_ELEMENTS_INDICES","MAX_TEXTURE_LOD_BIAS","MAX_FRAGMENT_UNIFORM_COMPONENTS","MAX_VERTEX_UNIFORM_COMPONENTS","MAX_ARRAY_TEXTURE_LAYERS","MIN_PROGRAM_TEXEL_OFFSET","MAX_PROGRAM_TEXEL_OFFSET","MAX_VARYING_COMPONENTS","FRAGMENT_SHADER_DERIVATIVE_HINT","RASTERIZER_DISCARD","VERTEX_ARRAY_BINDING","MAX_VERTEX_OUTPUT_COMPONENTS","MAX_FRAGMENT_INPUT_COMPONENTS","MAX_SERVER_WAIT_TIMEOUT","MAX_ELEMENT_INDEX","RED","RGB8","RGBA8","RGB10_A2","TEXTURE_3D","TEXTURE_WRAP_R","TEXTURE_MIN_LOD","TEXTURE_MAX_LOD","TEXTURE_BASE_LEVEL","TEXTURE_MAX_LEVEL","TEXTURE_COMPARE_MODE","TEXTURE_COMPARE_FUNC","SRGB","SRGB8","SRGB8_ALPHA8","COMPARE_REF_TO_TEXTURE","RGBA32F","RGB32F","RGBA16F","RGB16F","TEXTURE_2D_ARRAY","TEXTURE_BINDING_2D_ARRAY","R11F_G11F_B10F","RGB9_E5","RGBA32UI","RGB32UI","RGBA16UI","RGB16UI","RGBA8UI","RGB8UI","RGBA32I","RGB32I","RGBA16I","RGB16I","RGBA8I","RGB8I","RED_INTEGER","RGB_INTEGER","RGBA_INTEGER","R8","RG8","R16F","R32F","RG16F","RG32F","R8I","R8UI","R16I","R16UI","R32I","R32UI","RG8I","RG8UI","RG16I","RG16UI","RG32I","RG32UI","R8_SNORM","RG8_SNORM","RGB8_SNORM","RGBA8_SNORM","RGB10_A2UI","TEXTURE_IMMUTABLE_FORMAT","TEXTURE_IMMUTABLE_LEVELS","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","HALF_FLOAT","RG","RG_INTEGER","INT_2_10_10_10_REV","CURRENT_QUERY","QUERY_RESULT","QUERY_RESULT_AVAILABLE","ANY_SAMPLES_PASSED","ANY_SAMPLES_PASSED_CONSERVATIVE","MAX_DRAW_BUFFERS","DRAW_BUFFER0","DRAW_BUFFER1","DRAW_BUFFER2","DRAW_BUFFER3","DRAW_BUFFER4","DRAW_BUFFER5","DRAW_BUFFER6","DRAW_BUFFER7","DRAW_BUFFER8","DRAW_BUFFER9","DRAW_BUFFER10","DRAW_BUFFER11","DRAW_BUFFER12","DRAW_BUFFER13","DRAW_BUFFER14","DRAW_BUFFER15","MAX_COLOR_ATTACHMENTS","COLOR_ATTACHMENT1","COLOR_ATTACHMENT2","COLOR_ATTACHMENT3","COLOR_ATTACHMENT4","COLOR_ATTACHMENT5","COLOR_ATTACHMENT6","COLOR_ATTACHMENT7","COLOR_ATTACHMENT8","COLOR_ATTACHMENT9","COLOR_ATTACHMENT10","COLOR_ATTACHMENT11","COLOR_ATTACHMENT12","COLOR_ATTACHMENT13","COLOR_ATTACHMENT14","COLOR_ATTACHMENT15","SAMPLER_3D","SAMPLER_2D_SHADOW","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","MAX_SAMPLES","SAMPLER_BINDING","PIXEL_PACK_BUFFER","PIXEL_UNPACK_BUFFER","PIXEL_PACK_BUFFER_BINDING","PIXEL_UNPACK_BUFFER_BINDING","COPY_READ_BUFFER","COPY_WRITE_BUFFER","COPY_READ_BUFFER_BINDING","COPY_WRITE_BUFFER_BINDING","FLOAT_MAT2x3","FLOAT_MAT2x4","FLOAT_MAT3x2","FLOAT_MAT3x4","FLOAT_MAT4x2","FLOAT_MAT4x3","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","UNSIGNED_NORMALIZED","SIGNED_NORMALIZED","VERTEX_ATTRIB_ARRAY_INTEGER","VERTEX_ATTRIB_ARRAY_DIVISOR","TRANSFORM_FEEDBACK_BUFFER_MODE","MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS","TRANSFORM_FEEDBACK_VARYINGS","TRANSFORM_FEEDBACK_BUFFER_START","TRANSFORM_FEEDBACK_BUFFER_SIZE","TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN","MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS","MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS","INTERLEAVED_ATTRIBS","SEPARATE_ATTRIBS","TRANSFORM_FEEDBACK_BUFFER","TRANSFORM_FEEDBACK_BUFFER_BINDING","TRANSFORM_FEEDBACK","TRANSFORM_FEEDBACK_PAUSED","TRANSFORM_FEEDBACK_ACTIVE","TRANSFORM_FEEDBACK_BINDING","FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING","FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE","FRAMEBUFFER_ATTACHMENT_RED_SIZE","FRAMEBUFFER_ATTACHMENT_GREEN_SIZE","FRAMEBUFFER_ATTACHMENT_BLUE_SIZE","FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE","FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE","FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE","FRAMEBUFFER_DEFAULT","DEPTH24_STENCIL8","DRAW_FRAMEBUFFER_BINDING","READ_FRAMEBUFFER_BINDING","RENDERBUFFER_SAMPLES","FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER","FRAMEBUFFER_INCOMPLETE_MULTISAMPLE","UNIFORM_BUFFER","UNIFORM_BUFFER_BINDING","UNIFORM_BUFFER_START","UNIFORM_BUFFER_SIZE","MAX_VERTEX_UNIFORM_BLOCKS","MAX_FRAGMENT_UNIFORM_BLOCKS","MAX_COMBINED_UNIFORM_BLOCKS","MAX_UNIFORM_BUFFER_BINDINGS","MAX_UNIFORM_BLOCK_SIZE","MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS","MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS","UNIFORM_BUFFER_OFFSET_ALIGNMENT","ACTIVE_UNIFORM_BLOCKS","UNIFORM_TYPE","UNIFORM_SIZE","UNIFORM_BLOCK_INDEX","UNIFORM_OFFSET","UNIFORM_ARRAY_STRIDE","UNIFORM_MATRIX_STRIDE","UNIFORM_IS_ROW_MAJOR","UNIFORM_BLOCK_BINDING","UNIFORM_BLOCK_DATA_SIZE","UNIFORM_BLOCK_ACTIVE_UNIFORMS","UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","OBJECT_TYPE","SYNC_CONDITION","SYNC_STATUS","SYNC_FLAGS","SYNC_FENCE","SYNC_GPU_COMMANDS_COMPLETE","UNSIGNALED","SIGNALED","ALREADY_SIGNALED","TIMEOUT_EXPIRED","CONDITION_SATISFIED","WAIT_FAILED","SYNC_FLUSH_COMMANDS_BIT","COLOR","DEPTH","STENCIL","MIN","MAX","DEPTH_COMPONENT24","STREAM_READ","STREAM_COPY","STATIC_READ","STATIC_COPY","DYNAMIC_READ","DYNAMIC_COPY","DEPTH_COMPONENT32F","DEPTH32F_STENCIL8","INVALID_INDEX","TIMEOUT_IGNORED","MAX_CLIENT_WAIT_TIMEOUT_WEBGL","VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE","UNMASKED_VENDOR_WEBGL","UNMASKED_RENDERER_WEBGL","MAX_TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_MAX_ANISOTROPY_EXT","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_R11_EAC","COMPRESSED_SIGNED_R11_EAC","COMPRESSED_RG11_EAC","COMPRESSED_SIGNED_RG11_EAC","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","COMPRESSED_SRGB8_ETC2","COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB_ATC_WEBGL","COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL","COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL","UNSIGNED_INT_24_8_WEBGL","HALF_FLOAT_OES","RGBA32F_EXT","RGB32F_EXT","FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT","UNSIGNED_NORMALIZED_EXT","MIN_EXT","MAX_EXT","SRGB_EXT","SRGB_ALPHA_EXT","SRGB8_ALPHA8_EXT","FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT","FRAGMENT_SHADER_DERIVATIVE_HINT_OES","COLOR_ATTACHMENT0_WEBGL","COLOR_ATTACHMENT1_WEBGL","COLOR_ATTACHMENT2_WEBGL","COLOR_ATTACHMENT3_WEBGL","COLOR_ATTACHMENT4_WEBGL","COLOR_ATTACHMENT5_WEBGL","COLOR_ATTACHMENT6_WEBGL","COLOR_ATTACHMENT7_WEBGL","COLOR_ATTACHMENT8_WEBGL","COLOR_ATTACHMENT9_WEBGL","COLOR_ATTACHMENT10_WEBGL","COLOR_ATTACHMENT11_WEBGL","COLOR_ATTACHMENT12_WEBGL","COLOR_ATTACHMENT13_WEBGL","COLOR_ATTACHMENT14_WEBGL","COLOR_ATTACHMENT15_WEBGL","DRAW_BUFFER0_WEBGL","DRAW_BUFFER1_WEBGL","DRAW_BUFFER2_WEBGL","DRAW_BUFFER3_WEBGL","DRAW_BUFFER4_WEBGL","DRAW_BUFFER5_WEBGL","DRAW_BUFFER6_WEBGL","DRAW_BUFFER7_WEBGL","DRAW_BUFFER8_WEBGL","DRAW_BUFFER9_WEBGL","DRAW_BUFFER10_WEBGL","DRAW_BUFFER11_WEBGL","DRAW_BUFFER12_WEBGL","DRAW_BUFFER13_WEBGL","DRAW_BUFFER14_WEBGL","DRAW_BUFFER15_WEBGL","MAX_COLOR_ATTACHMENTS_WEBGL","MAX_DRAW_BUFFERS_WEBGL","VERTEX_ARRAY_BINDING_OES","QUERY_COUNTER_BITS_EXT","CURRENT_QUERY_EXT","QUERY_RESULT_EXT","QUERY_RESULT_AVAILABLE_EXT","TIME_ELAPSED_EXT","TIMESTAMP_EXT","GPU_DISJOINT_EXT","DRAW_MODE","Geometry","props","_props","_props$id","id","uid","_props$drawMode","drawMode","_props$attributes","attributes","_props$indices","indices","_props$vertexCount","vertexCount","this","userData","_setAttributes","_calculateVertexCount","getVertexCount","getAttributes","Object","assign","_print","attributeName","ArrayBuffer","isView","value","size","attribute","assert","undefined","isIndexed","length","Infinity","constant","Math","Number","global","navigator","STYLES","EXAMPLE_NOT_SUPPPORTED","display","justifyContent","alignItems","height","STAT_STYLES","position","fontSize","zIndex","color","background","padding","opacity","AnimationLoopExamplePage","_this","AnimationLoop","_Component","call","animationLoop","componentDidMount","showStats","_setDisplay","_luma_gl_addons__WEBPACK_IMPORTED_MODULE_4__","exampleConfig","path","setPathPrefix","RAW_GITHUB","start","_showStats","componentWillUnmount","stop","delete","_this2","timeWidget","_probe_gl_stats_widget__WEBPACK_IMPORTED_MODULE_5__","stats","container","refs","renderStats","title","css","header","fontWeight","framesPerUpdate","formatters","CPU Time","GPU Time","Frame Rate","resetOnUpdate","lumaStats","memWidget","memStats","GPU Memory","Buffer Memory","Renderbuffer Memory","Texture Memory","animationFrame","updateStats","_stopStats","_this$props","name","_this$props$panel","panel","sourceLink","isSupported","altText","getAltText","react__WEBPACK_IMPORTED_MODULE_1___default","style","controls","getInfo","className","width","border","ref","canvas","_info_panel__WEBPACK_IMPORTED_MODULE_6__","ShaderModuleRegistry","shaderModules","defaultShaderModules","setDefaultShaderModules","resolveModules","modules","getDefaultShaderModules","registerShaderModules","_ref$ignoreMultipleRe","_temp","ignoreMultipleRegistrations","_iterator","shaderModuleList","_isArray","Array","isArray","_i","Symbol","iterator","_ref2","next","done","shaderModule","_registerShaderModule","getShaderModule","moduleOrName","shader_module","map","Error","shaderModuleRegistry","shader_module_registry_ShaderModuleRegistry","getShaderDependencies","resolve_modules_getShaderModule","moduleMap","moduleDepth","getDependencyGraph","level","keys","sort","b","_ref3","_iterator2","_isArray2","_i2","_ref4","dependencies","ERR_RESOURCE_METHOD_UNDEFINED","Resource","gl","opts","assertWebGLContext","_opts","_opts$userData","constructor","_bound","_handle","handle","_createHandle","byteLength","_addStats","toString","_ref$deleteChildren","deleteChildren","children","_deleteHandle","_removeStats","child","bind","funcOrHandle","_bindHandle","unbind","getParameter","pname","getKeyValue","parameter","PARAMETERS","isWebgl2","isWebGL2","getExtension","extension","webgl1Default","webgl1","webgl2Default","webgl2","_getParameter","getParameters","parameters","values","key","getKey","setParameter","_setParameter","setParameters","stubRemovedMethods","version","methodNames","initialize","_getOptsFromHandle","_context","luma","_trackAllocatedMemory","bytes","_trackDeallocatedMemory","DEPRECATED_PROPS","offset","stride","type","divisor","normalized","integer","instanced","isInstanced","PROP_CHECKS_INITIALIZE","removedProps","replacedProps","deprecatedProps","PROP_CHECKS_SET_PROPS","Buffer","_Resource","target","GL","getElementCount","accessor","Accessor","data","checkProps","usage","debugData","setAccessor","_setData","_setByteLength","setProps","buffer","_accessor__WEBPACK_IMPORTED_MODULE_7__","reallocate","bytesUsed","setData","subData","_props$offset","_props$srcOffset","srcOffset","bindBuffer","assertWebGL2Context","bufferSubData","_inferType","copyData","sourceBuffer","_ref","_ref$readOffset","readOffset","_ref$writeOffset","writeOffset","getData","_ref2$dstData","dstData","_ref2$srcByteOffset","srcByteOffset","_ref2$dstOffset","dstOffset","_ref2$length","dstAvailableElementCount","dstElementCount","ArrayType","getTypedArrayFromGLType","clamped","sourceAvailableElementCount","_getAvailableElementCount","dstElementOffset","copyElementCount","getBufferSubData","_temp2","_ref3$target","_ref3$index","index","_ref3$offset","bindBufferRange","bindBufferBase","_temp3","_ref4$target","_ref4$index","getDebugData","changed","invalidateDebugData","_getTarget","bufferData","getGLTypeFromTypedArray","Float32Array","sourceElementOffset","BYTES_PER_ELEMENT","createBuffer","deleteBuffer","getBufferParameter","setByteLength","log","updateAccessor","GL_VENDOR","GL_RENDERER","GL_VERSION","GL_SHADING_LANGUAGE_VERSION","WEBGL_FEATURES","GLSL_FRAG_DATA","GLSL_FRAG_DEPTH","GLSL_DERIVATIVES","GLSL_TEXTURE_LOD","FEATURES","compiledGlslExtensions","canCompileGLGSExtension","cap","feature","userAgent","isMSIE","isTrident","isOldIE","source","shader","canCompile","getFeature","extensionName","Boolean","hasFeatures","features","every","getPlatformShaderDefines","info","vendor","renderer","gpuVendor","identifyGPUVendor","shadingLanguageVersion","getContextInfo","debugInfo","toLowerCase","INJECT_SHADER_DECLARATIONS","inject_shader","_SHADER_TYPE","constants","HOOK_FUNCTIONS","_HOOK_FUNCTIONS","MODULE_INJECTIONS","FRAGMENT_SHADER_PROLOGUE","createShaderHook","hook","_hook$split","stage","signature","createModuleInjection","moduleName","injection","_opts$order","order","shaderStage","assembleShaders","vs","fs","assembleShader","getUniforms","assembleGetUniforms","assembleModuleMap","_ref$defines","defines","_ref$inject","inject","_ref$prologue","prologue","isVertex","sourceLines","glslVersion","versionLine","coreSource","allDefines","assembledSource","_ref6","getShaderName","_ref5","toUpperCase","getShaderType","isFragment","versionDefines","behavior","getVersionDefines","count","sourceText","define","getApplicationDefines","injectStandardStubs","hookInjections","mainInjections","injections","_key","result","hookFunctions","hookName","hookFunction","_iterator4","_isArray4","_i4","_ref7","footer","getHookFunctions","injectShader","uniforms","moduleUniforms","_iterator3","_isArray3","_i3","GLTF_TO_LUMA_ATTRIBUTE_MAP","POSITION","NORMAL","COLOR_0","TEXCOORD_0","TEXCOORD_1","TEXCOORD_2","mapAttributeName","options","_ref$attributeMap","attributeMap","inferAttributeAccessor","category","formatValue","v","_opts$isInteger","isInteger","_opts$maxElts","maxElts","_opts$size","string","i","formatArrayValue","String","decimal","getDebugTableRow","vertexArray","marker","verts","classes_buffer","format","_buffer$getDebugData","modified","getGLSLDeclaration","typeAndName","getCompositeGLType","getDebugTableForUniforms","_ref$header","program","_ref$undefinedOnly","undefinedOnly","uniformLocations","_uniformSetters","table","uniformNames","uniformName","addUniformToTable","_uniformName","_uniformName2","unusedCount","unusedTable","_unusedTable$uniformN","uniform","Type","_table$uniformName","isDefined","isUniformDefined","debug_program_configuration_getGLSLDeclaration","attributeInfo","_attributeInfo$access","models","recursiveSet","obj","overrides","Map","seer","payload","model","itemKey","valuePath","__SEER_INITIALIZED__","setOverride","BaseModel","isWebGL","lastLogTime","_setBaseModelProps","_createProgram","vertex_array","needsRedraw","_attributes","animatedUniforms","animated","timerQueryEnabled","timeElapsedQuery","lastQueryReturned","accumulatedFrameTime","averageFrameTime","profileFrameCount","pickable","setUniforms","getModuleUniforms","moduleSettings","removeModel","isAnimated","getProgram","overs","getOverrides","_extractAnimatedUniforms","updateModuleSettings","drawGeometry","_opts$moduleSettings","framebuffer","_opts$uniforms","_opts$attributes","_opts$transformFeedba","transformFeedback","_opts$parameters","_opts$vertexArray","animationProps","setAttributes","_refreshAnimationProps","logPriority","_logDrawCallStart","drawParams","getDrawParams","indexType","indexOffset","instanceCount","noop","_this$props$onBeforeR","onBeforeRender","_this$props$onAfterRe","onAfterRender","_timerQueryStart","didDraw","draw","getDrawMode","_timerQueryEnd","_logDrawCallEnd","Query","_setAnimationProps","_animationProps","_animationLoop","_ref$vs","_ref$fs","_ref$modules","_ref$shaderCache","shaderCache","_ref$varyings","varyings","_ref$bufferMode","bufferMode","_ref$program","x","MODULAR_SHADERS","assembleResult","classes_program","_evaluateAnimateUniforms","valueFunction","foundAnimated","newValue","isObjectEmpty","staticUniforms","query","beginTimeElapsedQuery","end","isResultAvailable","elapsedTime","getTimerMilliseconds","lastFrameTime","logDrawTimeout","priority","Date","now","collapsed","attributeTable","configuration","elements","attributeLocation","rowHeader","location","getDebugTableForVertexArray","_getDebugTableForUnif","uniformTable","_getDebugTableForUnif2","missingTable","configTable","config","attributeInfos","_table","JSON","varyingInfos","_table2","varyingInfo","getDebugTableForProgramConfiguration","isReady","attributesObject","uniformsObject","logModel","message","Model","_BaseModel","prototype","geometryBuffers","_setModelProps","geometry","_deleteGeometryBuffers","getInstanceCount","setDrawMode","setVertexCount","setInstanceCount","setGeometry","buffers","remappedName","typedArray","Uint32Array","getBuffersFromGeometry","normalizedAttributes","transform","_Object$assign","_opts$discard","discard","feedbackBuffers","_opts$unbindModels","unbindModels","_setFeedbackBuffers","unbindBuffers","bindBuffers","_feedbackBuffers","transform_feedback","setBuffers","transpileShader","targetGLSLVersion","convertVertexShaderTo300","convertFragmentShaderTo300","convertVertexShaderTo100","convertFragmentShaderTo100","TYPE_DEFINITIONS","number","validate","propType","min","array","parsePropType","propDef","getTypeOf","ShaderModule","_ref$dependencies","_ref$deprecations","deprecations","vertexShader","fragmentShader","_parseDeprecationDefinitions","propDefs","propTypes","propName","parsePropTypes","getModuleSource","moduleSource","_defaultGetUniforms","getDefines","checkDeprecations","forEach","def","shaderSource","deprecated","RegExp","old","private","MODULE_INJECTORS","_MODULE_INJECTORS","DECLARATION_INJECT_MARKER","REGEX_START_OF_MAIN","REGEX_END_OF_MAIN","fragments","_loop","fragmentData","len","fragmentString","replace","match","combineInjects","injects","GL_BYTE","GL_UNSIGNED_BYTE","GL_SHORT","GL_UNSIGNED_SHORT","GL_POINTS","GL_LINES","GL_LINE_LOOP","GL_LINE_STRIP","GL_TRIANGLES","GL_TRIANGLE_STRIP","GL_TRIANGLE_FAN","GL_FLOAT","COMPOSITE_GL_TYPES","_COMPOSITE_GL_TYPES","getPrimitiveDrawMode","decomposeCompositeGLType","compositeGLType","typeAndSize","components","glType","_COMPOSITE_GL_TYPES$g","compType","compComponents","NPOT_MIN_FILTERS","Texture","textureUnit","loaded","depth","dataFormat","mipmaps","linearFiltering","supported","isFormatSupported","isLinearFilteringSupported","_DEFAULT_TEXTURE_SETT","Promise","resolvedImageData","pixels","_props$pixels","_props$format","_props$border","_props$recreate","recreate","_props$parameters","_props$pixelStore","pixelStore","_props$textureUnit","_props$unpackFlipY","unpackFlipY","_props2$mipmaps","_props3","_props4$depth","_this$_deduceParamete","_deduceParameters","compressed","activeTexture","bindTexture","DEFAULT_TEXTURE_SETTINGS","glSettings","_isNPOT","_updateForNPOT","setImageData","generateMipmap","resize","_ref2$mipmaps","_this3","params","withParameters","_options$target","_options$pixels","_options$level","_options$format","_options$border","_options$offset","_options$parameters","_options$data","_options$type","_options$width","_options$height","_options$dataFormat","_options$compressed","_this$_deduceParamete2","dataType","_this$_getDataType","_getDataType","channels","DATA_FORMAT_CHANNELS","channelSize","TYPE_SIZES","setSubImageData","_this4","_ref3$pixels","_ref3$data","_ref3$x","_ref3$y","y","_ref3$width","_ref3$height","_ref3$level","_ref3$format","_ref3$type","_ref3$dataFormat","_ref3$compressed","_ref3$border","_ref3$parameters","_this$_deduceParamete3","ndarray","_buffer__WEBPACK_IMPORTED_MODULE_8__","compressedTexSubImage2D","texSubImage2D","_webgl_utils__WEBPACK_IMPORTED_MODULE_12__","copyFramebuffer","getActiveUnit","_ref4$compressed","textureFormat","TEXTURE_FORMATS","_this$_deduceImageSiz","_deduceImageSize","ImageData","HTMLImageElement","naturalWidth","naturalHeight","HTMLCanvasElement","ImageBitmap","HTMLVideoElement","videoWidth","videoHeight","createTexture","deleteTexture","getTexParameter","param","_getNPOTParam","texParameterf","texParameteri","isPowerOfTwo","__webpack_require__","d","__webpack_exports__","CUBE_INDICES","Uint16Array","CUBE_POSITIONS","CUBE_NORMALS","CUBE_TEX_COORDS","ATTRIBUTES","CubeGeometry","_Geometry","polyfillExtension","target2","defaults","WEBGL2_CONTEXT_POLYFILLS","_defaults$meta","meta","_meta$suffix","suffix","ext","_Object$keys","extKey","polyfill","arguments","global_","initializeExtensions","polyfilled","polyfills","installPolyfills","WEBGL2_CONTEXT_OVERRIDES","originalFunc","installOverrides","window_","globals","self","document","Framebuffer","attachments","readBuffer","drawBuffers","colorBufferFloat","colorBufferHalfFloat","getDefaultFramebuffer","defaultFramebuffer","_ref2$width","_ref2$height","_ref2$attachments","_ref2$color","_ref2$depth","_ref2$stencil","stencil","_ref2$check","check","attachment","object","_createDefaultAttachments","update","clearAttachments","checkStatus","_ref3$attachments","_ref3$clearAttachment","_ref3$resizeAttachmen","resizeAttachments","attach","prevHandle","_setReadBuffer","_setDrawBuffers","drawingBufferWidth","drawingBufferHeight","attachmentPoint","_ref5$clearAttachment","_ref5$resizeAttachmen","newAttachments","bindFramebuffer","descriptor","_renderbuffer__WEBPACK_IMPORTED_MODULE_12__","_attachRenderbuffer","renderbuffer","texture","_descriptor$","layer","_descriptor$2","_attachTexture","_unattach","status","_getFrameBufferStatus","clear","_temp4","_ref6$drawBuffers","drawBuffer","clearBuffer","readPixels","readPixelsToBuffer","copyToDataUrl","copyToImage","copyToTexture","blit","invalidate","_ref7$attachments","_ref7$x","_ref7$y","getAttachmentParameter","_getAttachmentParameterFallback","getFramebufferAttachmentParameter","getAttachmentParameters","ATTACHMENT_PARAMETERS","_ref8","_attachments","attachmentName","show","image","maxHeight","_ref9$target","_temp5","_ref10$target","_temp6","_parameters","defaultAttachments","_texture_2d__WEBPACK_IMPORTED_MODULE_11__","oldAttachment","framebufferRenderbuffer","framebufferTexture2D","_ref11$attachment","_ref11","_ref12$attachment","_ref12","face","mapIndexToCubeMapFace","caps","getFeatures","EXT_sRGB","createFramebuffer","deleteFramebuffer","STATUS","FRAMEBUFFER_ATTACHMENT_PARAMETERS","ScenegraphNode","vector3","rotation","scale","matrix","matrix4","_setScenegraphNodeProps","setPosition","setRotation","setScale","setMatrix","copyMatrix","copy","setMatrixComponents","_ref$update","updateMatrix","pos","rot","identity","translate","rotateXYZ","getCoordinateUniforms","modelMatrix","worldMatrix","viewMatrix","multiplyRight","worldInverse","invert","worldInverseTranspose","transpose","objectMatrix","worldInverseMatrix","worldInverseTransposeMatrix","ModelNode","_ScenegraphNode","AfterRender","_setModelNodeProps","managedResources","resource","_this$model","apply","_this$model2","_this$model3","_this$model4","probe_gl__WEBPACK_IMPORTED_MODULE_0__","enable","condition","DEFAULT_ACCESSOR_VALUES","PROP_CHECKS","_len2","accessors","_key2","_assign","getBytesPerElement","getBytesPerVertex","resolve","_len","_construct","concat","compositeSetters","glConstant","setter","GL_PARAMETER_SETTERS","cache","mergedValues","compositeSetter","GL_COMPOSITE_PARAMETER_SETTERS","getter","GL_PARAMETER_GETTERS","_webgl_parameter_tables__WEBPACK_IMPORTED_MODULE_8__","state","resetParameters","GL_PARAMETER_DEFAULTS","_GL_PARAMETER_DEFAULT","Int32Array","hint","pixelStorei","_GL_PARAMETER_SETTERS","_toConsumableArray","blendEquation","blendFunc","polygonOffset","sampleCoverage","stencilFuncFront","stencilFuncBack","stencilOpFront","stencilOpBack","isEnabled","_GL_PARAMETER_GETTERS","process","_is_electron__WEBPACK_IMPORTED_MODULE_0__","isBrowser","browser","_TEXTURE_FORMATS","types","gl2","_DATA_FORMAT_CHANNELS","_TYPE_SIZES","gl1","Texture2D","loadImage","_Texture","EXT_FLOAT_WEBGL2","renderbuffer_formats","_GL$DEPTH_COMPONENT","bpp","Renderbuffer","formats","getSamplesForFormat","_ref3$samples","samples","bindRenderbuffer","renderbufferStorageMultisample","renderbufferStorage","RENDERBUFFER_FORMATS","createRenderbuffer","deleteRenderbuffer","_syncHandle","getRenderbufferParameter","InfoPanel","tabIndex","dangerouslySetInnerHTML","__html","href","PureComponent","installGetterOverride","functionName","originalGetterFunc","configurable","installSetterSpy","originalSetterFunc","_gl$state","_setter","valueChanged","oldValue","GLState","_ref$copyState","copyState","_ref$log","stateStack","_unified_parameter_api_webgl_parameter_tables__WEBPACK_IMPORTED_MODULE_3__","_updateCache","push","pop","oldValues","deepArrayEqual","trackContextState","_ref2$enable","polyfillContext","_webgl_function_to_parameters_table__WEBPACK_IMPORTED_MODULE_2__","GL_STATE_SETTERS","pushContextState","popContextState","isArrayX","isArrayY","capability","_update","disable","_update2","_update3","_hint","_update4","_update5","_update6","_update7","blendColor","r","g","_update8","mode","_update9","blendEquationSeparate","modeRGB","modeAlpha","_update10","src","dst","_update11","blendFuncSeparate","srcRGB","dstRGB","srcAlpha","dstAlpha","_update12","clearColor","_update13","clearDepth","_update14","clearStencil","s","_update15","colorMask","_update16","cullFace","_update17","depthFunc","func","_update18","depthRange","zNear","zFar","_update19","depthMask","mask","_update20","frontFace","_update21","lineWidth","_update22","factor","units","_update23","_update24","scissor","_update25","stencilMask","_update26","stencilMaskSeparate","_update27","stencilFunc","_update28","stencilFuncSeparate","_update29","stencilOp","fail","zfail","zpass","_update30","stencilOpSeparate","_update31","viewport","_update32","pathPrefix","prefix","loadFile","url","fetch","then","res","reject","Image","crossOrigin","error","isElectron","versions","electron","ERR_TYPE_DEDUCTION","arrayOrType","Uint8Array","Uint8ClampedArray","Int8Array","Int16Array","_ref$clamped","flipRows","_ref2$bytesPerPixel","bytesPerPixel","temp","bytesPerRow","topOffset","bottomOffset","scalePixels","newWidth","newHeight","newData","c","TransformFeedback","unused","bindOnUse","_unbindBuffers","bufferName","setBuffer","_getVaryingIndex","locationOrName","_this$_getBufferParam","_getBufferParams","bufferOrParams","byteSize","byteOffset","_bindBuffer","begin","primitiveMode","bindTransformFeedback","_bindBuffers","beginTransformFeedback","endTransformFeedback","_getVaryingInfo","getVaryingInfo","bufferIndex","_this$_getBufferParam2","createTransformFeedback","deleteTransformFeedback","WEBGL2","VERTEX_ARRAY_OBJECT","TIMER_QUERY","INSTANCED_RENDERING","MULTIPLE_RENDER_TARGETS","ELEMENT_INDEX_UINT32","BLEND_EQUATION_MINMAX","COLOR_ENCODING_SRGB","TEXTURE_DEPTH","TEXTURE_FLOAT","TEXTURE_HALF_FLOAT","TEXTURE_FILTER_LINEAR_FLOAT","TEXTURE_FILTER_LINEAR_HALF_FLOAT","TEXTURE_FILTER_ANISOTROPIC","COLOR_ATTACHMENT_RGBA32F","COLOR_ATTACHMENT_FLOAT","COLOR_ATTACHMENT_HALF_FLOAT","_FEATURES$WEBGL2$FEAT","headlessGL","WebGLBuffer","WebGL2RenderingContext","_utils_globals__WEBPACK_IMPORTED_MODULE_0__","_utils_is_browser__WEBPACK_IMPORTED_MODULE_1__","ERR_HEADLESSGL_LOAD","m","headlessTypes","headless","DummyType","WebGLRenderingContext","WebGLProgram","WebGLShader","WebGLFramebuffer","WebGLRenderbuffer","WebGLTexture","WebGLUniformLocation","WebGLActiveInfo","WebGLShaderPrecisionFormat","GL_DEPTH_BUFFER_BIT","GL_STENCIL_BUFFER_BIT","GL_COLOR_BUFFER_BIT","GL_COLOR","GL_DEPTH","GL_STENCIL","GL_DEPTH_STENCIL","ERR_ARGUMENTS","_ref$framebuffer","_ref$color","_ref$depth","_ref$stencil","clearFlags","_ref2$framebuffer","_ref2$buffer","_ref2$drawBuffer","_ref2$value","cloneTextureFrom","refTexture","TextureType","toFramebuffer","_classes_framebuffer__WEBPACK_IMPORTED_MODULE_4__","FACES","TextureCube","_props$mipmaps","setCubeMapImageData","subImage","_ref$x","_ref$y","_ref$mipmapLevel","mipmapLevel","_subImage","_callee","_ref2$border","_ref2$format","_ref2$type","imageDataMap","resolvedFaces","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_7___default","wrap","prev","all","facePixels","sent","lodLevel","setImageDataForFace","imageData","Texture3D","_ref$level","_ref$dataFormat","_ref$border","_ref$type","_ref$offset","_ref$parameters","texImage3D","_buffer__WEBPACK_IMPORTED_MODULE_7__","webgl_setter_function_table","_framebuffer","blend","args","cull","depthTest","dither","derivativeHint","mipmapHint","polygonOffsetFill","scissorTest","stencilTest","_value","backMask","_args","backFunc","backRef","_args2","sfail","dpfail","dppass","backSfail","backDpfail","backDppass","glSetParameters","FUNCTION_STYLE_PARAMETER_SETTERS","__VERSION__","StatsManager","get","has","set","is_browser","nodeIO","glFormatToComponents","readPixelsToArray","_ref$sourceX","sourceX","_ref$sourceY","sourceY","_ref$sourceFormat","sourceFormat","_ref$sourceAttachment","sourceAttachment","_ref$target","sourceWidth","sourceHeight","sourceType","_getFramebuffer","getFramebuffer","pixelArray","getPixelArray","_ref3$sourceAttachmen","_ref3$targetMaxHeight","targetMaxHeight","MAX_SAFE_INTEGER","_scalePixels","context","toDataURL","classes_framebuffer","getWebGL2ValueOrZero","WEBGL_PARAMETERS","_WEBGL_PARAMETERS","polyfill_table_isWebGL2","_WEBGL2_CONTEXT_POLYF","createVertexArray","deleteVertexArray","bindVertexArray","isVertexArray","vertexAttribDivisor","drawElementsInstanced","drawArraysInstanced","createQuery","deleteQuery","beginQuery","endQuery","getQuery","getQueryObject","getQueryParameter","getVertexAttrib","_getExtensionData","getExtensionData","getProgramParameter","getInternalformatParameter","extensions","originalGetParameter","limit","_track_context_state__WEBPACK_IMPORTED_MODULE_0__","_unified_parameter_api_set_parameters__WEBPACK_IMPORTED_MODULE_1__","_utils__WEBPACK_IMPORTED_MODULE_2__","_utils__WEBPACK_IMPORTED_MODULE_3__","_parameters$nocatch","nocatch","propChecks","_propChecks$removedPr","_propChecks$deprecate","_propChecks$replacedP","replacement","_propName","replacementProp","newProps","_propName2","ERR_CONTEXT","ERR_WEBGL2","_version","_assert__WEBPACK_IMPORTED_MODULE_0__","uidCounters","n","isEmpty","isNaN","_log__WEBPACK_IMPORTED_MODULE_0__","instance","upgradeMessage","methodName","DEFAULT_MODULE_OPTIONS","pickingSelectedColor","pickingHighlightColor","pickingThreshold","pickingActive","selectedColor","_queryPending","_pollingPromise","hasTimerQuery","beginOcclusionQuery","_ref2$conservative","conservative","beginTransformFeedbackQuery","resultAvailable","isTimerDisjoint","getResult","createPoll","POSITIVE_INFINITY","counter","requestAnimationFrame","poll","isFeatureSupported","_webgl_features_table__WEBPACK_IMPORTED_MODULE_3__","featureDefinition","ERR_HEADLESSGL_NOT_AVAILABLE","ERR_HEADLESSGL_FAILED","pageLoadPromise","isPage","isPageLoaded","getCanvas","targetCanvas","_ref2$onError","onError","_ref$width","_ref$height","_ref$id","_ref$insert","insert","body","firstChild","createCanvas","contextDefaults","throwOnFailure","manageState","debug","createGLContext","_options","throwOnError","_options$onError","onCreateError","_options$webgl","_options$webgl2","createBrowserContext","webgl_types","createHeadlessContext","webGL","vendorMasked","rendererMasked","getContextDebugInfo","driver","logInfo","instrumentGLContext","_instrumented","getVersion","_options3","makeDebugContext","cancelAnimationFrame","timerId","clearTimeout","statIdCounter","_props$onCreateContex","onCreateContext","_props$onAddHTML","onAddHTML","_props$onInitialize","onInitialize","_props$onRender","onRender","_props$onFinalize","onFinalize","_props$gl","_props$glOptions","glOptions","_props$debug","_props$createFramebuf","_props$autoResizeView","autoResizeViewport","_props$autoResizeDraw","autoResizeDrawingBuffer","_props$stats","_props2$useDevicePixe","useDevicePixels","timeline","cpuTime","gpuTime","frameRate","_initialized","_running","_animationFrameId","_nextFramePromise","_resolveNextFrame","_cpuStartTime","_onMousemove","_onMouseleave","setNeedsRedraw","reason","getPageLoadPromise","_createWebGLContext","_createFramebuffer","_startEventHandling","_initializeCallbackData","_updateCallbackData","_resizeCanvasDrawingBuffer","_resizeViewport","_gpuTimeQuery","appContext","_addCallbackData","_startLoop","redraw","_beginTimers","_setupFrame","_renderFrame","_clearNeedsRedraw","offScreen","commit","_endTimers","_finalizeCallbackData","attachTimeline","detachTimeline","waitForRender","regenerator_default","abrupt","_this$props2","_this$props3","_this$props4","getHTMLControlValue","defaultValue","element","setViewParameters","_requestAnimationFrame","renderFrame","callback","renderFrameCallback","setTimeout","_this$display","_onSetupFrame","_resizeFramebuffer","startTime","engineTime","tick","tock","time","_timeline","_mousePosition","_this$_getSizeAndAspe","_getSizeAndAspect","aspect","getTime","_offScreen","OffscreenCanvas","_createInfoDiv","wrapperDiv","div","html","clientHeight","devicePixelRatio","clientWidth","resizeGLContext","timeEnd","timeStart","addTime","e","offsetX","offsetY","UNIFORM_SETTERS","_UNIFORM_SETTERS","toFloatArray","toIntArray","toUIntArray","FLOAT_ARRAY","INT_ARRAY","UINT_ARRAY","array1","toTypedArray","uniformLength","parseUniformName","matches","getUniformSetter","checkUniformValue","checkLength","checkUniformArray","isFinite","classes_texture","areUniformsEqual","uniform1","uniform2","defaultName","GL_FRAGMENT_SHADER","GL_VERTEX_SHADER","parseGLSLCompilerError","errLog","shaderType","shaderName","errorStrings","errors","warnings","shaderDescription","getShaderTypeName","errorString","segments","line","parseInt","lines","delim","maxDigits","lineNumber","digits","padLeft","addLineNumbers","formatErrors","column","trim","ERR_SOURCE","Shader","_inheritsLoose","getTypeName","_proto","_compile","getShaderParameter","getName","getSource","getShaderSource","getTranslatedSource","compileShader","_parseGLSLCompilerErr","getShaderInfoLog","deleteShader","VertexShader","_Shader","createShader","shader_Shader","FragmentShader","_Shader2","ProgramConfiguration","attributeInfosByName","attributeInfosByLocation","varyingInfosByName","_readAttributesFromProgram","_readVaryingsFromProgram","getAttributeInfo","getAttributeLocation","getAttributeAccessor","getVaryingIndex","varying","getVaryingAccessor","_gl$getActiveAttrib","_addAttribute","_gl$getTransformFeedb","_addVarying","_decomposeCompositeGL","compositeType","_inferProperties","classes_accessor","test","_decomposeCompositeGL2","V6_DEPRECATED_METHODS","Program","_isCached","_setId","_props$bufferMode","shader_VertexShader","shader_FragmentShader","transformFeedbackVaryings","_compileAndLink","_readUniformLocationsFromLinkedProgram","program_configuration_ProgramConfiguration","_ref$drawMode","_ref$isIndexed","_ref$indexType","_ref$isInstanced","_ref$instanceCount","_ref$vertexArray","samplers","fb","useProgram","_areTexturesRenderable","_bindTextures","drawRangeElements","drawElements","drawArrays","_onChangeCallback","somethingChanged","changedUniforms","slice","uniformMap","console","checkUniformValues","_setUniforms","reset","texturesRenderable","uniformSetter","textureIndex","createProgram","deleteProgram","_getOptionsFromHandle","getAttachedShaders","shaderHandle","programName","_getName","_uniformCount","getActiveUniform","_parseUniformName","l","_textureIndexCounter","getActiveUniforms","uniformIndices","getUniformBlockIndex","blockName","getActiveUniformBlockParameter","blockIndex","uniformBlockBinding","blockBinding","IDENTITY_MATRIX","projectionMatrix","cameraPositionWorld","project","prevUniforms","common","lightDirection","dirlight","channelHandles","animationHandles","Timeline","animations","playing","lastEngineTime","addChannel","_props$delay","delay","_props$duration","duration","_props$rate","rate","_props$repeat","repeat","channel","_setChannelTime","removeChannel","animationHandle","animation","detachAnimation","setTime","animationData","play","pause","attachAnimation","channelHandle","offsetTime","SIDE","InstancedCube","offsets","j","pickingColors","_j","colors","offsetsBuffer","colorsBuffer","pickingColorsBuffer","_ModelNode","picking","cube_geometry","instanceSizes","instanceOffsets","instanceColors","instancePickingColors","AppAnimationLoop","_AnimationLoop","timeChannel","eyeXChannel","eyeYChannel","eyeZChannel","cube","app_InstancedCube","uTime","uProjection","perspective","fov","radians","near","far","uView","lookAt","center","eye","uModel","rotateX","rotateY","dpr","pickX","pickY","picking_uActive","pickInstance","website","app_AppAnimationLoop","Example","pageContext","react_default","animation_loop_example_page","Display","getViews","submitFrame","views","view","createEnterVRButton","_canvas$getBoundingCl","getBoundingClientRect","top","left","button","VRDisplay","_Display","_vrSupported","vrFrameData","VRFrameData","vrPresenting","vrFrame","_vrDisplayPresentChange","_assertThisInitialized","_removeVRButton","_addVRButton","vrDisplay","getFrameData","_this$vrFrameData","leftProjectionMatrix","leftViewMatrix","rightProjectionMatrix","rightViewMatrix","displayEye","displays","vrButton","_getCanvas","getVRDisplays","displayName","onclick","_startDisplay","requestPresent","isPresenting","arrayBuffer","getScratchArray","VertexArrayObject","hasVertexArrays","bufferValue","constantAttributeZero","getBrowser","getDefaultArray","defaultVertexArray","getMaxAttributes","MAX_ATTRIBUTES","setConstant","setElementBuffer","elementBuffer","_enable","enableVertexAttribArray","disableVertexAttribArray","getConstantBuffer","constantValue","_normalizeConstantArrayValue","elementCount","updateNeeded","_compareConstantArrayValues","_ref$start","_ref$count","total","copied","fillArray","arrayValue","v1","v2","_setConstantFloatArray","_setConstantIntArray","_setConstantUintArray","getVertexAttribOffset","MULTI_LOCATION_ATTRIBUTE_REGEXP","DEPRECATIONS_V6","VertexArray","elementsAccessor","vertexArrayObject","vertex_array_object_VertexArrayObject","fill","clearDrawParams","_updateDrawParams","appParameters","_setAttribute","isDefaultArray","appAccessor","_this$_resolveLocatio","_resolveLocationAndAccessor","_this$_resolveLocatio2","vertexAttribPointer","bindForDraw","_setConstantAttributes","_this5","_this$_getAttributeIn","_getAttributeIndex","accessInfo","_getAttributeInfo","multiLocation","locationOffset","_accessor","_setConstantAttributeZero","_setConstantAttribute","isDefault","indexCount","_updateDrawParamsForLocation","setElements"],"mappings":"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","file":"component---templates-index-jsx-c645fadb2df47c7ae5ed.js","sourcesContent":["import React from 'react';\nimport {Home} from 'ocular-gatsby/components';\nimport './style.css';\n\nif (typeof window !== 'undefined') {\n  window.website = true;\n}\n\nconst HeroExample = require('./core/example-instancing').default;\n\nexport default class IndexPage extends React.Component {\n  render() {\n    return <Home HeroExample={HeroExample} />;\n  }\n}\n","// GL constants, copied from Mozilla documentation\n// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants\n\n// Standard WebGL 1 constants\n// These constants are defined on the WebGLRenderingContext interface.\n\n/* eslint-disable key-spacing, max-len, no-inline-comments, camelcase */\n// eslint-disable-next-line\nmodule.exports = {\n  // Clearing buffers\n  // Constants passed to clear() to clear buffer masks.\n\n  DEPTH_BUFFER_BIT: 0x00000100,\n  STENCIL_BUFFER_BIT: 0x00000400,\n  COLOR_BUFFER_BIT: 0x00004000,\n\n  // Rendering primitives\n  // Constants passed to drawElements() or drawArrays() to specify what kind of primitive to render.\n\n  POINTS: 0x0000,\n  LINES: 0x0001,\n  LINE_LOOP: 0x0002,\n  LINE_STRIP: 0x0003,\n  TRIANGLES: 0x0004,\n  TRIANGLE_STRIP: 0x0005,\n  TRIANGLE_FAN: 0x0006,\n\n  // Blending modes\n  // Constants passed to blendFunc() or blendFuncSeparate() to specify the blending mode (for both, RBG and alpha, or separately).\n\n  ZERO: 0,\n  ONE: 1,\n  SRC_COLOR: 0x0300,\n  ONE_MINUS_SRC_COLOR: 0x0301,\n  SRC_ALPHA: 0x0302,\n  ONE_MINUS_SRC_ALPHA: 0x0303,\n  DST_ALPHA: 0x0304,\n  ONE_MINUS_DST_ALPHA: 0x0305,\n  DST_COLOR: 0x0306,\n  ONE_MINUS_DST_COLOR: 0x0307,\n  SRC_ALPHA_SATURATE: 0x0308,\n  CONSTANT_COLOR: 0x8001,\n  ONE_MINUS_CONSTANT_COLOR: 0x8002,\n  CONSTANT_ALPHA: 0x8003,\n  ONE_MINUS_CONSTANT_ALPHA: 0x8004,\n\n  // Blending equations\n  // Constants passed to blendEquation() or blendEquationSeparate() to control\n  // how the blending is calculated (for both, RBG and alpha, or separately).\n\n  FUNC_ADD: 0x8006,\n  FUNC_SUBTRACT: 0x800a,\n  FUNC_REVERSE_SUBTRACT: 0x800b,\n\n  // Getting GL parameter information\n  // Constants passed to getParameter() to specify what information to return.\n\n  BLEND_EQUATION: 0x8009,\n  BLEND_EQUATION_RGB: 0x8009,\n  BLEND_EQUATION_ALPHA: 0x883d,\n  BLEND_DST_RGB: 0x80c8,\n  BLEND_SRC_RGB: 0x80c9,\n  BLEND_DST_ALPHA: 0x80ca,\n  BLEND_SRC_ALPHA: 0x80cb,\n  BLEND_COLOR: 0x8005,\n  ARRAY_BUFFER_BINDING: 0x8894,\n  ELEMENT_ARRAY_BUFFER_BINDING: 0x8895,\n  LINE_WIDTH: 0x0b21,\n  ALIASED_POINT_SIZE_RANGE: 0x846d,\n  ALIASED_LINE_WIDTH_RANGE: 0x846e,\n  CULL_FACE_MODE: 0x0b45,\n  FRONT_FACE: 0x0b46,\n  DEPTH_RANGE: 0x0b70,\n  DEPTH_WRITEMASK: 0x0b72,\n  DEPTH_CLEAR_VALUE: 0x0b73,\n  DEPTH_FUNC: 0x0b74,\n  STENCIL_CLEAR_VALUE: 0x0b91,\n  STENCIL_FUNC: 0x0b92,\n  STENCIL_FAIL: 0x0b94,\n  STENCIL_PASS_DEPTH_FAIL: 0x0b95,\n  STENCIL_PASS_DEPTH_PASS: 0x0b96,\n  STENCIL_REF: 0x0b97,\n  STENCIL_VALUE_MASK: 0x0b93,\n  STENCIL_WRITEMASK: 0x0b98,\n  STENCIL_BACK_FUNC: 0x8800,\n  STENCIL_BACK_FAIL: 0x8801,\n  STENCIL_BACK_PASS_DEPTH_FAIL: 0x8802,\n  STENCIL_BACK_PASS_DEPTH_PASS: 0x8803,\n  STENCIL_BACK_REF: 0x8ca3,\n  STENCIL_BACK_VALUE_MASK: 0x8ca4,\n  STENCIL_BACK_WRITEMASK: 0x8ca5,\n  VIEWPORT: 0x0ba2,\n  SCISSOR_BOX: 0x0c10,\n  COLOR_CLEAR_VALUE: 0x0c22,\n  COLOR_WRITEMASK: 0x0c23,\n  UNPACK_ALIGNMENT: 0x0cf5,\n  PACK_ALIGNMENT: 0x0d05,\n  MAX_TEXTURE_SIZE: 0x0d33,\n  MAX_VIEWPORT_DIMS: 0x0d3a,\n  SUBPIXEL_BITS: 0x0d50,\n  RED_BITS: 0x0d52,\n  GREEN_BITS: 0x0d53,\n  BLUE_BITS: 0x0d54,\n  ALPHA_BITS: 0x0d55,\n  DEPTH_BITS: 0x0d56,\n  STENCIL_BITS: 0x0d57,\n  POLYGON_OFFSET_UNITS: 0x2a00,\n  POLYGON_OFFSET_FACTOR: 0x8038,\n  TEXTURE_BINDING_2D: 0x8069,\n  SAMPLE_BUFFERS: 0x80a8,\n  SAMPLES: 0x80a9,\n  SAMPLE_COVERAGE_VALUE: 0x80aa,\n  SAMPLE_COVERAGE_INVERT: 0x80ab,\n  COMPRESSED_TEXTURE_FORMATS: 0x86a3,\n  VENDOR: 0x1f00,\n  RENDERER: 0x1f01,\n  VERSION: 0x1f02,\n  IMPLEMENTATION_COLOR_READ_TYPE: 0x8b9a,\n  IMPLEMENTATION_COLOR_READ_FORMAT: 0x8b9b,\n  BROWSER_DEFAULT_WEBGL: 0x9244,\n\n  // Buffers\n  // Constants passed to bufferData(), bufferSubData(), bindBuffer(), or\n  // getBufferParameter().\n\n  STATIC_DRAW: 0x88e4,\n  STREAM_DRAW: 0x88e0,\n  DYNAMIC_DRAW: 0x88e8,\n  ARRAY_BUFFER: 0x8892,\n  ELEMENT_ARRAY_BUFFER: 0x8893,\n  BUFFER_SIZE: 0x8764,\n  BUFFER_USAGE: 0x8765,\n\n  // Vertex attributes\n  // Constants passed to getVertexAttrib().\n\n  CURRENT_VERTEX_ATTRIB: 0x8626,\n  VERTEX_ATTRIB_ARRAY_ENABLED: 0x8622,\n  VERTEX_ATTRIB_ARRAY_SIZE: 0x8623,\n  VERTEX_ATTRIB_ARRAY_STRIDE: 0x8624,\n  VERTEX_ATTRIB_ARRAY_TYPE: 0x8625,\n  VERTEX_ATTRIB_ARRAY_NORMALIZED: 0x886a,\n  VERTEX_ATTRIB_ARRAY_POINTER: 0x8645,\n  VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 0x889f,\n\n  // Culling\n  // Constants passed to cullFace().\n\n  CULL_FACE: 0x0b44,\n  FRONT: 0x0404,\n  BACK: 0x0405,\n  FRONT_AND_BACK: 0x0408,\n\n  // Enabling and disabling\n  // Constants passed to enable() or disable().\n\n  BLEND: 0x0be2,\n  DEPTH_TEST: 0x0b71,\n  DITHER: 0x0bd0,\n  POLYGON_OFFSET_FILL: 0x8037,\n  SAMPLE_ALPHA_TO_COVERAGE: 0x809e,\n  SAMPLE_COVERAGE: 0x80a0,\n  SCISSOR_TEST: 0x0c11,\n  STENCIL_TEST: 0x0b90,\n\n  // Errors\n  // Constants returned from getError().\n\n  NO_ERROR: 0,\n  INVALID_ENUM: 0x0500,\n  INVALID_VALUE: 0x0501,\n  INVALID_OPERATION: 0x0502,\n  OUT_OF_MEMORY: 0x0505,\n  CONTEXT_LOST_WEBGL: 0x9242,\n\n  // Front face directions\n  // Constants passed to frontFace().\n\n  CW: 0x0900,\n  CCW: 0x0901,\n\n  // Hints\n  // Constants passed to hint()\n\n  DONT_CARE: 0x1100,\n  FASTEST: 0x1101,\n  NICEST: 0x1102,\n  GENERATE_MIPMAP_HINT: 0x8192,\n\n  // Data types\n\n  BYTE: 0x1400,\n  UNSIGNED_BYTE: 0x1401,\n  SHORT: 0x1402,\n  UNSIGNED_SHORT: 0x1403,\n  INT: 0x1404,\n  UNSIGNED_INT: 0x1405,\n  FLOAT: 0x1406,\n\n  // Pixel formats\n\n  DEPTH_COMPONENT: 0x1902,\n  ALPHA: 0x1906,\n  RGB: 0x1907,\n  RGBA: 0x1908,\n  LUMINANCE: 0x1909,\n  LUMINANCE_ALPHA: 0x190a,\n\n  // Pixel types\n\n  // UNSIGNED_BYTE: 0x1401,\n  UNSIGNED_SHORT_4_4_4_4: 0x8033,\n  UNSIGNED_SHORT_5_5_5_1: 0x8034,\n  UNSIGNED_SHORT_5_6_5: 0x8363,\n\n  // Shaders\n  // Constants passed to createShader() or getShaderParameter()\n\n  FRAGMENT_SHADER: 0x8b30,\n  VERTEX_SHADER: 0x8b31,\n  COMPILE_STATUS: 0x8b81,\n  DELETE_STATUS: 0x8b80,\n  LINK_STATUS: 0x8b82,\n  VALIDATE_STATUS: 0x8b83,\n  ATTACHED_SHADERS: 0x8b85,\n  ACTIVE_ATTRIBUTES: 0x8b89,\n  ACTIVE_UNIFORMS: 0x8b86,\n  MAX_VERTEX_ATTRIBS: 0x8869,\n  MAX_VERTEX_UNIFORM_VECTORS: 0x8dfb,\n  MAX_VARYING_VECTORS: 0x8dfc,\n  MAX_COMBINED_TEXTURE_IMAGE_UNITS: 0x8b4d,\n  MAX_VERTEX_TEXTURE_IMAGE_UNITS: 0x8b4c,\n  MAX_TEXTURE_IMAGE_UNITS: 0x8872,\n  MAX_FRAGMENT_UNIFORM_VECTORS: 0x8dfd,\n  SHADER_TYPE: 0x8b4f,\n  SHADING_LANGUAGE_VERSION: 0x8b8c,\n  CURRENT_PROGRAM: 0x8b8d,\n\n  // Depth or stencil tests\n  // Constants passed to depthFunc() or stencilFunc().\n\n  NEVER: 0x0200,\n  ALWAYS: 0x0207,\n  LESS: 0x0201,\n  EQUAL: 0x0202,\n  LEQUAL: 0x0203,\n  GREATER: 0x0204,\n  GEQUAL: 0x0206,\n  NOTEQUAL: 0x0205,\n\n  // Stencil actions\n  // Constants passed to stencilOp().\n\n  KEEP: 0x1e00,\n  REPLACE: 0x1e01,\n  INCR: 0x1e02,\n  DECR: 0x1e03,\n  INVERT: 0x150a,\n  INCR_WRAP: 0x8507,\n  DECR_WRAP: 0x8508,\n\n  // Textures\n  // Constants passed to texParameteri(),\n  // texParameterf(), bindTexture(), texImage2D(), and others.\n\n  NEAREST: 0x2600,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_NEAREST: 0x2700,\n  LINEAR_MIPMAP_NEAREST: 0x2701,\n  NEAREST_MIPMAP_LINEAR: 0x2702,\n  LINEAR_MIPMAP_LINEAR: 0x2703,\n  TEXTURE_MAG_FILTER: 0x2800,\n  TEXTURE_MIN_FILTER: 0x2801,\n  TEXTURE_WRAP_S: 0x2802,\n  TEXTURE_WRAP_T: 0x2803,\n  TEXTURE_2D: 0x0de1,\n  TEXTURE: 0x1702,\n  TEXTURE_CUBE_MAP: 0x8513,\n  TEXTURE_BINDING_CUBE_MAP: 0x8514,\n  TEXTURE_CUBE_MAP_POSITIVE_X: 0x8515,\n  TEXTURE_CUBE_MAP_NEGATIVE_X: 0x8516,\n  TEXTURE_CUBE_MAP_POSITIVE_Y: 0x8517,\n  TEXTURE_CUBE_MAP_NEGATIVE_Y: 0x8518,\n  TEXTURE_CUBE_MAP_POSITIVE_Z: 0x8519,\n  TEXTURE_CUBE_MAP_NEGATIVE_Z: 0x851a,\n  MAX_CUBE_MAP_TEXTURE_SIZE: 0x851c,\n  // TEXTURE0 - 31 0x84C0 - 0x84DF A texture unit.\n  TEXTURE0: 0x84c0,\n  ACTIVE_TEXTURE: 0x84e0,\n  REPEAT: 0x2901,\n  CLAMP_TO_EDGE: 0x812f,\n  MIRRORED_REPEAT: 0x8370,\n\n  // Emulation\n  TEXTURE_WIDTH: 0x1000,\n  TEXTURE_HEIGHT: 0x1001,\n\n  // Uniform types\n\n  FLOAT_VEC2: 0x8b50,\n  FLOAT_VEC3: 0x8b51,\n  FLOAT_VEC4: 0x8b52,\n  INT_VEC2: 0x8b53,\n  INT_VEC3: 0x8b54,\n  INT_VEC4: 0x8b55,\n  BOOL: 0x8b56,\n  BOOL_VEC2: 0x8b57,\n  BOOL_VEC3: 0x8b58,\n  BOOL_VEC4: 0x8b59,\n  FLOAT_MAT2: 0x8b5a,\n  FLOAT_MAT3: 0x8b5b,\n  FLOAT_MAT4: 0x8b5c,\n  SAMPLER_2D: 0x8b5e,\n  SAMPLER_CUBE: 0x8b60,\n\n  // Shader precision-specified types\n\n  LOW_FLOAT: 0x8df0,\n  MEDIUM_FLOAT: 0x8df1,\n  HIGH_FLOAT: 0x8df2,\n  LOW_INT: 0x8df3,\n  MEDIUM_INT: 0x8df4,\n  HIGH_INT: 0x8df5,\n\n  // Framebuffers and renderbuffers\n\n  FRAMEBUFFER: 0x8d40,\n  RENDERBUFFER: 0x8d41,\n  RGBA4: 0x8056,\n  RGB5_A1: 0x8057,\n  RGB565: 0x8d62,\n  DEPTH_COMPONENT16: 0x81a5,\n  STENCIL_INDEX: 0x1901,\n  STENCIL_INDEX8: 0x8d48,\n  DEPTH_STENCIL: 0x84f9,\n  RENDERBUFFER_WIDTH: 0x8d42,\n  RENDERBUFFER_HEIGHT: 0x8d43,\n  RENDERBUFFER_INTERNAL_FORMAT: 0x8d44,\n  RENDERBUFFER_RED_SIZE: 0x8d50,\n  RENDERBUFFER_GREEN_SIZE: 0x8d51,\n  RENDERBUFFER_BLUE_SIZE: 0x8d52,\n  RENDERBUFFER_ALPHA_SIZE: 0x8d53,\n  RENDERBUFFER_DEPTH_SIZE: 0x8d54,\n  RENDERBUFFER_STENCIL_SIZE: 0x8d55,\n  FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 0x8cd0,\n  FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 0x8cd1,\n  FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 0x8cd2,\n  FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 0x8cd3,\n  COLOR_ATTACHMENT0: 0x8ce0,\n  DEPTH_ATTACHMENT: 0x8d00,\n  STENCIL_ATTACHMENT: 0x8d20,\n  DEPTH_STENCIL_ATTACHMENT: 0x821a,\n  NONE: 0,\n  FRAMEBUFFER_COMPLETE: 0x8cd5,\n  FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 0x8cd6,\n  FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 0x8cd7,\n  FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 0x8cd9,\n  FRAMEBUFFER_UNSUPPORTED: 0x8cdd,\n  FRAMEBUFFER_BINDING: 0x8ca6,\n  RENDERBUFFER_BINDING: 0x8ca7,\n  READ_FRAMEBUFFER: 0x8ca8,\n  DRAW_FRAMEBUFFER: 0x8ca9,\n  MAX_RENDERBUFFER_SIZE: 0x84e8,\n  INVALID_FRAMEBUFFER_OPERATION: 0x0506,\n\n  // Pixel storage modes\n  // Constants passed to pixelStorei().\n\n  UNPACK_FLIP_Y_WEBGL: 0x9240,\n  UNPACK_PREMULTIPLY_ALPHA_WEBGL: 0x9241,\n  UNPACK_COLORSPACE_CONVERSION_WEBGL: 0x9243,\n\n  // /////////////////////////////////////////////////////\n  // Additional constants defined WebGL 2\n  // These constants are defined on the WebGL2RenderingContext interface.\n  // All WebGL 1 constants are also available in a WebGL 2 context.\n  // /////////////////////////////////////////////////////\n\n  // Getting GL parameter information\n  // Constants passed to getParameter()\n  // to specify what information to return.\n\n  READ_BUFFER: 0x0c02,\n  UNPACK_ROW_LENGTH: 0x0cf2,\n  UNPACK_SKIP_ROWS: 0x0cf3,\n  UNPACK_SKIP_PIXELS: 0x0cf4,\n  PACK_ROW_LENGTH: 0x0d02,\n  PACK_SKIP_ROWS: 0x0d03,\n  PACK_SKIP_PIXELS: 0x0d04,\n  TEXTURE_BINDING_3D: 0x806a,\n  UNPACK_SKIP_IMAGES: 0x806d,\n  UNPACK_IMAGE_HEIGHT: 0x806e,\n  MAX_3D_TEXTURE_SIZE: 0x8073,\n  MAX_ELEMENTS_VERTICES: 0x80e8,\n  MAX_ELEMENTS_INDICES: 0x80e9,\n  MAX_TEXTURE_LOD_BIAS: 0x84fd,\n  MAX_FRAGMENT_UNIFORM_COMPONENTS: 0x8b49,\n  MAX_VERTEX_UNIFORM_COMPONENTS: 0x8b4a,\n  MAX_ARRAY_TEXTURE_LAYERS: 0x88ff,\n  MIN_PROGRAM_TEXEL_OFFSET: 0x8904,\n  MAX_PROGRAM_TEXEL_OFFSET: 0x8905,\n  MAX_VARYING_COMPONENTS: 0x8b4b,\n  FRAGMENT_SHADER_DERIVATIVE_HINT: 0x8b8b,\n  RASTERIZER_DISCARD: 0x8c89,\n  VERTEX_ARRAY_BINDING: 0x85b5,\n  MAX_VERTEX_OUTPUT_COMPONENTS: 0x9122,\n  MAX_FRAGMENT_INPUT_COMPONENTS: 0x9125,\n  MAX_SERVER_WAIT_TIMEOUT: 0x9111,\n  MAX_ELEMENT_INDEX: 0x8d6b,\n\n  // Textures\n  // Constants passed to texParameteri(),\n  // texParameterf(), bindTexture(), texImage2D(), and others.\n\n  RED: 0x1903,\n  RGB8: 0x8051,\n  RGBA8: 0x8058,\n  RGB10_A2: 0x8059,\n  TEXTURE_3D: 0x806f,\n  TEXTURE_WRAP_R: 0x8072,\n  TEXTURE_MIN_LOD: 0x813a,\n  TEXTURE_MAX_LOD: 0x813b,\n  TEXTURE_BASE_LEVEL: 0x813c,\n  TEXTURE_MAX_LEVEL: 0x813d,\n  TEXTURE_COMPARE_MODE: 0x884c,\n  TEXTURE_COMPARE_FUNC: 0x884d,\n  SRGB: 0x8c40,\n  SRGB8: 0x8c41,\n  SRGB8_ALPHA8: 0x8c43,\n  COMPARE_REF_TO_TEXTURE: 0x884e,\n  RGBA32F: 0x8814,\n  RGB32F: 0x8815,\n  RGBA16F: 0x881a,\n  RGB16F: 0x881b,\n  TEXTURE_2D_ARRAY: 0x8c1a,\n  TEXTURE_BINDING_2D_ARRAY: 0x8c1d,\n  R11F_G11F_B10F: 0x8c3a,\n  RGB9_E5: 0x8c3d,\n  RGBA32UI: 0x8d70,\n  RGB32UI: 0x8d71,\n  RGBA16UI: 0x8d76,\n  RGB16UI: 0x8d77,\n  RGBA8UI: 0x8d7c,\n  RGB8UI: 0x8d7d,\n  RGBA32I: 0x8d82,\n  RGB32I: 0x8d83,\n  RGBA16I: 0x8d88,\n  RGB16I: 0x8d89,\n  RGBA8I: 0x8d8e,\n  RGB8I: 0x8d8f,\n  RED_INTEGER: 0x8d94,\n  RGB_INTEGER: 0x8d98,\n  RGBA_INTEGER: 0x8d99,\n  R8: 0x8229,\n  RG8: 0x822b,\n  R16F: 0x822d,\n  R32F: 0x822e,\n  RG16F: 0x822f,\n  RG32F: 0x8230,\n  R8I: 0x8231,\n  R8UI: 0x8232,\n  R16I: 0x8233,\n  R16UI: 0x8234,\n  R32I: 0x8235,\n  R32UI: 0x8236,\n  RG8I: 0x8237,\n  RG8UI: 0x8238,\n  RG16I: 0x8239,\n  RG16UI: 0x823a,\n  RG32I: 0x823b,\n  RG32UI: 0x823c,\n  R8_SNORM: 0x8f94,\n  RG8_SNORM: 0x8f95,\n  RGB8_SNORM: 0x8f96,\n  RGBA8_SNORM: 0x8f97,\n  RGB10_A2UI: 0x906f,\n\n  /* covered by extension\n  COMPRESSED_R11_EAC : 0x9270,\n  COMPRESSED_SIGNED_R11_EAC: 0x9271,\n  COMPRESSED_RG11_EAC: 0x9272,\n  COMPRESSED_SIGNED_RG11_EAC : 0x9273,\n  COMPRESSED_RGB8_ETC2 : 0x9274,\n  COMPRESSED_SRGB8_ETC2: 0x9275,\n  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 : 0x9276,\n  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC : 0x9277,\n  COMPRESSED_RGBA8_ETC2_EAC: 0x9278,\n  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : 0x9279,\n  */\n  TEXTURE_IMMUTABLE_FORMAT: 0x912f,\n  TEXTURE_IMMUTABLE_LEVELS: 0x82df,\n\n  // Pixel types\n\n  UNSIGNED_INT_2_10_10_10_REV: 0x8368,\n  UNSIGNED_INT_10F_11F_11F_REV: 0x8c3b,\n  UNSIGNED_INT_5_9_9_9_REV: 0x8c3e,\n  FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8dad,\n  UNSIGNED_INT_24_8: 0x84fa,\n  HALF_FLOAT: 0x140b,\n  RG: 0x8227,\n  RG_INTEGER: 0x8228,\n  INT_2_10_10_10_REV: 0x8d9f,\n\n  // Queries\n\n  CURRENT_QUERY: 0x8865,\n  QUERY_RESULT: 0x8866,\n  QUERY_RESULT_AVAILABLE: 0x8867,\n  ANY_SAMPLES_PASSED: 0x8c2f,\n  ANY_SAMPLES_PASSED_CONSERVATIVE: 0x8d6a,\n\n  // Draw buffers\n\n  MAX_DRAW_BUFFERS: 0x8824,\n  DRAW_BUFFER0: 0x8825,\n  DRAW_BUFFER1: 0x8826,\n  DRAW_BUFFER2: 0x8827,\n  DRAW_BUFFER3: 0x8828,\n  DRAW_BUFFER4: 0x8829,\n  DRAW_BUFFER5: 0x882a,\n  DRAW_BUFFER6: 0x882b,\n  DRAW_BUFFER7: 0x882c,\n  DRAW_BUFFER8: 0x882d,\n  DRAW_BUFFER9: 0x882e,\n  DRAW_BUFFER10: 0x882f,\n  DRAW_BUFFER11: 0x8830,\n  DRAW_BUFFER12: 0x8831,\n  DRAW_BUFFER13: 0x8832,\n  DRAW_BUFFER14: 0x8833,\n  DRAW_BUFFER15: 0x8834,\n  MAX_COLOR_ATTACHMENTS: 0x8cdf,\n  COLOR_ATTACHMENT1: 0x8ce1,\n  COLOR_ATTACHMENT2: 0x8ce2,\n  COLOR_ATTACHMENT3: 0x8ce3,\n  COLOR_ATTACHMENT4: 0x8ce4,\n  COLOR_ATTACHMENT5: 0x8ce5,\n  COLOR_ATTACHMENT6: 0x8ce6,\n  COLOR_ATTACHMENT7: 0x8ce7,\n  COLOR_ATTACHMENT8: 0x8ce8,\n  COLOR_ATTACHMENT9: 0x8ce9,\n  COLOR_ATTACHMENT10: 0x8cea,\n  COLOR_ATTACHMENT11: 0x8ceb,\n  COLOR_ATTACHMENT12: 0x8cec,\n  COLOR_ATTACHMENT13: 0x8ced,\n  COLOR_ATTACHMENT14: 0x8cee,\n  COLOR_ATTACHMENT15: 0x8cef,\n\n  // Samplers\n\n  SAMPLER_3D: 0x8b5f,\n  SAMPLER_2D_SHADOW: 0x8b62,\n  SAMPLER_2D_ARRAY: 0x8dc1,\n  SAMPLER_2D_ARRAY_SHADOW: 0x8dc4,\n  SAMPLER_CUBE_SHADOW: 0x8dc5,\n  INT_SAMPLER_2D: 0x8dca,\n  INT_SAMPLER_3D: 0x8dcb,\n  INT_SAMPLER_CUBE: 0x8dcc,\n  INT_SAMPLER_2D_ARRAY: 0x8dcf,\n  UNSIGNED_INT_SAMPLER_2D: 0x8dd2,\n  UNSIGNED_INT_SAMPLER_3D: 0x8dd3,\n  UNSIGNED_INT_SAMPLER_CUBE: 0x8dd4,\n  UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8dd7,\n  MAX_SAMPLES: 0x8d57,\n  SAMPLER_BINDING: 0x8919,\n\n  // Buffers\n\n  PIXEL_PACK_BUFFER: 0x88eb,\n  PIXEL_UNPACK_BUFFER: 0x88ec,\n  PIXEL_PACK_BUFFER_BINDING: 0x88ed,\n  PIXEL_UNPACK_BUFFER_BINDING: 0x88ef,\n  COPY_READ_BUFFER: 0x8f36,\n  COPY_WRITE_BUFFER: 0x8f37,\n  COPY_READ_BUFFER_BINDING: 0x8f36,\n  COPY_WRITE_BUFFER_BINDING: 0x8f37,\n\n  // Data types\n\n  FLOAT_MAT2x3: 0x8b65,\n  FLOAT_MAT2x4: 0x8b66,\n  FLOAT_MAT3x2: 0x8b67,\n  FLOAT_MAT3x4: 0x8b68,\n  FLOAT_MAT4x2: 0x8b69,\n  FLOAT_MAT4x3: 0x8b6a,\n  UNSIGNED_INT_VEC2: 0x8dc6,\n  UNSIGNED_INT_VEC3: 0x8dc7,\n  UNSIGNED_INT_VEC4: 0x8dc8,\n  UNSIGNED_NORMALIZED: 0x8c17,\n  SIGNED_NORMALIZED: 0x8f9c,\n\n  // Vertex attributes\n\n  VERTEX_ATTRIB_ARRAY_INTEGER: 0x88fd,\n  VERTEX_ATTRIB_ARRAY_DIVISOR: 0x88fe,\n\n  // Transform feedback\n\n  TRANSFORM_FEEDBACK_BUFFER_MODE: 0x8c7f,\n  MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 0x8c80,\n  TRANSFORM_FEEDBACK_VARYINGS: 0x8c83,\n  TRANSFORM_FEEDBACK_BUFFER_START: 0x8c84,\n  TRANSFORM_FEEDBACK_BUFFER_SIZE: 0x8c85,\n  TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 0x8c88,\n  MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 0x8c8a,\n  MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 0x8c8b,\n  INTERLEAVED_ATTRIBS: 0x8c8c,\n  SEPARATE_ATTRIBS: 0x8c8d,\n  TRANSFORM_FEEDBACK_BUFFER: 0x8c8e,\n  TRANSFORM_FEEDBACK_BUFFER_BINDING: 0x8c8f,\n  TRANSFORM_FEEDBACK: 0x8e22,\n  TRANSFORM_FEEDBACK_PAUSED: 0x8e23,\n  TRANSFORM_FEEDBACK_ACTIVE: 0x8e24,\n  TRANSFORM_FEEDBACK_BINDING: 0x8e25,\n\n  // Framebuffers and renderbuffers\n\n  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 0x8210,\n  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 0x8211,\n  FRAMEBUFFER_ATTACHMENT_RED_SIZE: 0x8212,\n  FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 0x8213,\n  FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 0x8214,\n  FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 0x8215,\n  FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 0x8216,\n  FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 0x8217,\n  FRAMEBUFFER_DEFAULT: 0x8218,\n  // DEPTH_STENCIL_ATTACHMENT : 0x821A,\n  // DEPTH_STENCIL: 0x84F9,\n  DEPTH24_STENCIL8: 0x88f0,\n  DRAW_FRAMEBUFFER_BINDING: 0x8ca6,\n  READ_FRAMEBUFFER_BINDING: 0x8caa,\n  RENDERBUFFER_SAMPLES: 0x8cab,\n  FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 0x8cd4,\n  FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 0x8d56,\n\n  // Uniforms\n\n  UNIFORM_BUFFER: 0x8a11,\n  UNIFORM_BUFFER_BINDING: 0x8a28,\n  UNIFORM_BUFFER_START: 0x8a29,\n  UNIFORM_BUFFER_SIZE: 0x8a2a,\n  MAX_VERTEX_UNIFORM_BLOCKS: 0x8a2b,\n  MAX_FRAGMENT_UNIFORM_BLOCKS: 0x8a2d,\n  MAX_COMBINED_UNIFORM_BLOCKS: 0x8a2e,\n  MAX_UNIFORM_BUFFER_BINDINGS: 0x8a2f,\n  MAX_UNIFORM_BLOCK_SIZE: 0x8a30,\n  MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 0x8a31,\n  MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 0x8a33,\n  UNIFORM_BUFFER_OFFSET_ALIGNMENT: 0x8a34,\n  ACTIVE_UNIFORM_BLOCKS: 0x8a36,\n  UNIFORM_TYPE: 0x8a37,\n  UNIFORM_SIZE: 0x8a38,\n  UNIFORM_BLOCK_INDEX: 0x8a3a,\n  UNIFORM_OFFSET: 0x8a3b,\n  UNIFORM_ARRAY_STRIDE: 0x8a3c,\n  UNIFORM_MATRIX_STRIDE: 0x8a3d,\n  UNIFORM_IS_ROW_MAJOR: 0x8a3e,\n  UNIFORM_BLOCK_BINDING: 0x8a3f,\n  UNIFORM_BLOCK_DATA_SIZE: 0x8a40,\n  UNIFORM_BLOCK_ACTIVE_UNIFORMS: 0x8a42,\n  UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 0x8a43,\n  UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 0x8a44,\n  UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 0x8a46,\n\n  // Sync objects\n\n  OBJECT_TYPE: 0x9112,\n  SYNC_CONDITION: 0x9113,\n  SYNC_STATUS: 0x9114,\n  SYNC_FLAGS: 0x9115,\n  SYNC_FENCE: 0x9116,\n  SYNC_GPU_COMMANDS_COMPLETE: 0x9117,\n  UNSIGNALED: 0x9118,\n  SIGNALED: 0x9119,\n  ALREADY_SIGNALED: 0x911a,\n  TIMEOUT_EXPIRED: 0x911b,\n  CONDITION_SATISFIED: 0x911c,\n  WAIT_FAILED: 0x911d,\n  SYNC_FLUSH_COMMANDS_BIT: 0x00000001,\n\n  // Miscellaneous constants\n\n  COLOR: 0x1800,\n  DEPTH: 0x1801,\n  STENCIL: 0x1802,\n  MIN: 0x8007,\n  MAX: 0x8008,\n  DEPTH_COMPONENT24: 0x81a6,\n  STREAM_READ: 0x88e1,\n  STREAM_COPY: 0x88e2,\n  STATIC_READ: 0x88e5,\n  STATIC_COPY: 0x88e6,\n  DYNAMIC_READ: 0x88e9,\n  DYNAMIC_COPY: 0x88ea,\n  DEPTH_COMPONENT32F: 0x8cac,\n  DEPTH32F_STENCIL8: 0x8cad,\n  INVALID_INDEX: 0xffffffff,\n  TIMEOUT_IGNORED: -1,\n  MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 0x9247,\n\n  // Constants defined in WebGL extensions\n\n  // ANGLE_instanced_arrays\n\n  VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: 0x88fe,\n\n  // WEBGL_debug_renderer_info\n\n  UNMASKED_VENDOR_WEBGL: 0x9245,\n  UNMASKED_RENDERER_WEBGL: 0x9246,\n\n  // EXT_texture_filter_anisotropic\n\n  MAX_TEXTURE_MAX_ANISOTROPY_EXT: 0x84ff,\n  TEXTURE_MAX_ANISOTROPY_EXT: 0x84fe,\n\n  // WEBGL_compressed_texture_s3tc\n\n  COMPRESSED_RGB_S3TC_DXT1_EXT: 0x83f0,\n  COMPRESSED_RGBA_S3TC_DXT1_EXT: 0x83f1,\n  COMPRESSED_RGBA_S3TC_DXT3_EXT: 0x83f2,\n  COMPRESSED_RGBA_S3TC_DXT5_EXT: 0x83f3,\n\n  // WEBGL_compressed_texture_es3\n\n  COMPRESSED_R11_EAC: 0x9270,\n  COMPRESSED_SIGNED_R11_EAC: 0x9271,\n  COMPRESSED_RG11_EAC: 0x9272,\n  COMPRESSED_SIGNED_RG11_EAC: 0x9273,\n  COMPRESSED_RGB8_ETC2: 0x9274,\n  COMPRESSED_RGBA8_ETC2_EAC: 0x9275,\n  COMPRESSED_SRGB8_ETC2: 0x9276,\n  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: 0x9277,\n  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9278,\n  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9279,\n\n  // WEBGL_compressed_texture_pvrtc\n\n  COMPRESSED_RGB_PVRTC_4BPPV1_IMG: 0x8c00,\n  COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: 0x8c02,\n  COMPRESSED_RGB_PVRTC_2BPPV1_IMG: 0x8c01,\n  COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: 0x8c03,\n\n  // WEBGL_compressed_texture_etc1\n\n  COMPRESSED_RGB_ETC1_WEBGL: 0x8d64,\n\n  // WEBGL_compressed_texture_atc\n\n  COMPRESSED_RGB_ATC_WEBGL: 0x8c92,\n  COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL: 0x8c92,\n  COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL: 0x87ee,\n\n  // WEBGL_depth_texture\n\n  UNSIGNED_INT_24_8_WEBGL: 0x84fa,\n\n  // OES_texture_half_float\n\n  HALF_FLOAT_OES: 0x8d61,\n\n  // WEBGL_color_buffer_float\n\n  RGBA32F_EXT: 0x8814,\n  RGB32F_EXT: 0x8815,\n  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: 0x8211,\n  UNSIGNED_NORMALIZED_EXT: 0x8c17,\n\n  // EXT_blend_minmax\n\n  MIN_EXT: 0x8007,\n  MAX_EXT: 0x8008,\n\n  // EXT_sRGB\n\n  SRGB_EXT: 0x8c40,\n  SRGB_ALPHA_EXT: 0x8c42,\n  SRGB8_ALPHA8_EXT: 0x8c43,\n  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: 0x8210,\n\n  // OES_standard_derivatives\n\n  FRAGMENT_SHADER_DERIVATIVE_HINT_OES: 0x8b8b,\n\n  // WEBGL_draw_buffers\n\n  COLOR_ATTACHMENT0_WEBGL: 0x8ce0,\n  COLOR_ATTACHMENT1_WEBGL: 0x8ce1,\n  COLOR_ATTACHMENT2_WEBGL: 0x8ce2,\n  COLOR_ATTACHMENT3_WEBGL: 0x8ce3,\n  COLOR_ATTACHMENT4_WEBGL: 0x8ce4,\n  COLOR_ATTACHMENT5_WEBGL: 0x8ce5,\n  COLOR_ATTACHMENT6_WEBGL: 0x8ce6,\n  COLOR_ATTACHMENT7_WEBGL: 0x8ce7,\n  COLOR_ATTACHMENT8_WEBGL: 0x8ce8,\n  COLOR_ATTACHMENT9_WEBGL: 0x8ce9,\n  COLOR_ATTACHMENT10_WEBGL: 0x8cea,\n  COLOR_ATTACHMENT11_WEBGL: 0x8ceb,\n  COLOR_ATTACHMENT12_WEBGL: 0x8cec,\n  COLOR_ATTACHMENT13_WEBGL: 0x8ced,\n  COLOR_ATTACHMENT14_WEBGL: 0x8cee,\n  COLOR_ATTACHMENT15_WEBGL: 0x8cef,\n  DRAW_BUFFER0_WEBGL: 0x8825,\n  DRAW_BUFFER1_WEBGL: 0x8826,\n  DRAW_BUFFER2_WEBGL: 0x8827,\n  DRAW_BUFFER3_WEBGL: 0x8828,\n  DRAW_BUFFER4_WEBGL: 0x8829,\n  DRAW_BUFFER5_WEBGL: 0x882a,\n  DRAW_BUFFER6_WEBGL: 0x882b,\n  DRAW_BUFFER7_WEBGL: 0x882c,\n  DRAW_BUFFER8_WEBGL: 0x882d,\n  DRAW_BUFFER9_WEBGL: 0x882e,\n  DRAW_BUFFER10_WEBGL: 0x882f,\n  DRAW_BUFFER11_WEBGL: 0x8830,\n  DRAW_BUFFER12_WEBGL: 0x8831,\n  DRAW_BUFFER13_WEBGL: 0x8832,\n  DRAW_BUFFER14_WEBGL: 0x8833,\n  DRAW_BUFFER15_WEBGL: 0x8834,\n  MAX_COLOR_ATTACHMENTS_WEBGL: 0x8cdf,\n  MAX_DRAW_BUFFERS_WEBGL: 0x8824,\n\n  // OES_vertex_array_object\n\n  VERTEX_ARRAY_BINDING_OES: 0x85b5,\n\n  // EXT_disjoint_timer_query\n\n  QUERY_COUNTER_BITS_EXT: 0x8864,\n  CURRENT_QUERY_EXT: 0x8865,\n  QUERY_RESULT_EXT: 0x8866,\n  QUERY_RESULT_AVAILABLE_EXT: 0x8867,\n  TIME_ELAPSED_EXT: 0x88bf,\n  TIMESTAMP_EXT: 0x8e28,\n  GPU_DISJOINT_EXT: 0x8fbb // A Boolean indicating whether or not the GPU performed any disjoint operation.\n};\n","import {uid, assert} from '../utils';\n\n// Rendering primitives - specify how to extract primitives from vertices.\n// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants\nexport const DRAW_MODE = {\n  POINTS: 0x0000, // draw single points.\n  LINES: 0x0001, // draw lines. Each vertex connects to the one after it.\n  LINE_LOOP: 0x0002, // draw lines. Each set of two vertices is treated as a separate line segment.\n  LINE_STRIP: 0x0003, // draw a connected group of line segments from the first vertex to the last\n  TRIANGLES: 0x0004, // draw triangles. Each set of three vertices creates a separate triangle.\n  TRIANGLE_STRIP: 0x0005, // draw a connected group of triangles.\n  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.\n  // Each vertex connects to the previous and the first vertex in the fan.\n};\n\nexport default class Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n\n  constructor(props = {}) {\n    const {\n      id = uid('geometry'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n\n    // stubRemovedMethods(this, [\n    //   'setNeedsRedraw', 'needsRedraw', 'setAttributes'\n    // ], 'Immutable');\n\n    // stubRemovedMethods(this, [\n    //   'hasAttribute', 'getAttribute', 'getArray'\n    // ], 'Use geometry.attributes and geometry.indices');\n\n    // deprecateMethods(this, ['getAttributes'])\n  }\n\n  get mode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  // Return an object with all attributes plus indices added as a field.\n  getAttributes() {\n    return this.indices ? {indices: this.indices, ...this.attributes} : this.attributes;\n  }\n\n  // PRIVATE\n\n  _print(attributeName) {\n    return `Geometry ${this.id} attribute ${attributeName}`;\n  }\n\n  // Attribute\n  // value: typed array\n  // type: indices, vertices, uvs\n  // size: elements per vertex\n  // target: WebGL buffer type (string or constant)\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {value: indices, size: 1} : indices;\n    }\n\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n\n      // Wrap \"unwrapped\" arrays and try to autodetect their type\n      attribute = ArrayBuffer.isView(attribute) ? {value: attribute} : attribute;\n\n      assert(\n        ArrayBuffer.isView(attribute.value),\n        `${this._print(attributeName)}: must be typed array or object with value as typed array`\n      );\n\n      if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n        attribute.size = 3;\n      }\n\n      // Move indices to separate field\n      if (attributeName === 'indices') {\n        assert(!this.indices);\n        this.indices = attribute;\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n\n    if (this.indices && this.indices.isIndexed !== undefined) {\n      this.indices = Object.assign({}, this.indices);\n      delete this.indices.isIndexed;\n    }\n\n    return this;\n  }\n\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n    let vertexCount = Infinity;\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {value, size, constant} = attribute;\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n\n    assert(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n}\n","import React, {Component} from 'react'; // eslint-disable-line\nimport PropTypes from 'prop-types';\nimport {lumaStats, setPathPrefix} from '@luma.gl/core';\nimport {VRDisplay} from '@luma.gl/addons';\nimport StatsWidget from '@probe.gl/stats-widget';\n\nimport InfoPanel from './info-panel';\n\n// WORKAROUND FOR luma.gl VRDisplay\nif (typeof global !== 'undefined' && !global.navigator) {\n  global.navigator = {};\n}\n\nif (typeof window !== 'undefined') {\n  window.website = true;\n}\n\nconst STYLES = {\n  EXAMPLE_NOT_SUPPPORTED: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100vh'\n  }\n};\n\nconst STAT_STYLES = {\n  position: 'fixed',\n  fontSize: '12px',\n  zIndex: 10000,\n  color: '#fff',\n  background: '#000',\n  padding: '8px',\n  opacity: 0.8\n};\n\nconst propTypes = {\n  AnimationLoop: PropTypes.func.isRequired,\n  exampleConfig: PropTypes.object.isRequired,\n  canvas: PropTypes.string\n};\n\nconst defaultProps = {\n  canvas: 'example-canvas'\n};\n\nconst DEFAULT_ALT_TEXT = 'THIS EXAMPLE IS NOT SUPPORTED';\n\nexport default class AnimationLoopExamplePage extends Component {\n  constructor(props) {\n    super(props);\n    const {AnimationLoop} = this.props;\n    this.animationLoop = new AnimationLoop();\n  }\n\n  componentDidMount() {\n    const {showStats} = this.props;\n\n    this.animationLoop._setDisplay(new VRDisplay());\n\n    // Ensure the example can find its images\n    // TODO - ideally ocular-gatsby should extract images from example source?\n    const {exampleConfig} = this.props;\n    if (exampleConfig && exampleConfig.path) {\n      const RAW_GITHUB = 'https://raw.githubusercontent.com/uber/luma.gl/master';\n      setPathPrefix(`${RAW_GITHUB}/${exampleConfig.path}`);\n    }\n\n    // Start the actual example\n    this.animationLoop.start(this.props);\n\n    // animationLoop.stats.reset();\n\n    if (showStats) {\n      this._showStats(this.animationLoop);\n    }\n  }\n\n  componentWillUnmount() {\n    this.animationLoop.stop(this.props);\n    this.animationLoop.delete();\n    this.animationLoop = null;\n    // this._stopStats();\n  }\n\n  _showStats(animationLoop) {\n    const timeWidget = new StatsWidget(animationLoop.stats, {\n      container: this.refs.renderStats,\n      title: 'Render Time',\n      css: {\n        header: {\n          fontWeight: 'bold'\n        }\n      },\n      framesPerUpdate: 60,\n      formatters: {\n        'CPU Time': 'averageTime',\n        'GPU Time': 'averageTime',\n        'Frame Rate': 'fps'\n      },\n      resetOnUpdate: {\n        'CPU Time': true,\n        'GPU Time': true,\n        'Frame Rate': true\n      }\n    });\n\n    lumaStats.get('Memory Usage').reset();\n    const memWidget = new StatsWidget(lumaStats.get('Memory Usage'), {\n      container: this.refs.memStats,\n      css: {\n        header: {\n          fontWeight: 'bold'\n        }\n      },\n      framesPerUpdate: 60,\n      formatters: {\n        'GPU Memory': 'memory',\n        'Buffer Memory': 'memory',\n        'Renderbuffer Memory': 'memory',\n        'Texture Memory': 'memory'\n      }\n    });\n\n    const updateStats = () => {\n      timeWidget.update();\n      memWidget.update();\n      this.animationFrame = window.requestAnimationFrame(updateStats);\n    };\n\n    this.animationFrame = window.requestAnimationFrame(updateStats);\n  }\n\n  _stopStats() {\n    window.cancelAnimationFrame(this.animationFrame);\n  }\n\n  render() {\n    const {name, panel = true, stats, sourceLink} = this.props;\n\n    const notSupported = this.animationLoop.isSupported && !this.animationLoop.isSupported();\n\n    if (notSupported) {\n      const altText = this.animationLoop.getAltText ? this.animationLoop.getAltText() : DEFAULT_ALT_TEXT;\n      return (\n        <div style={STYLES.EXAMPLE_NOT_SUPPPORTED}>\n          <h2> {altText} </h2>\n        </div>\n      );\n    }\n\n    // HTML is stored on the app\n    const controls = this.props.AnimationLoop.getInfo() ||\n      (this.animationLoop.getInfo && this.animationLoop.getInfo());\n\n    return (\n      <div className=\"fg\" style={{width: '100%', height: '100%', padding: 0, border: 0}}>\n        {\n          stats ?\n          <div ref=\"stats\" className=\"stats\" style={STAT_STYLES}>\n            <div ref=\"renderStats\" className=\"renderStats\"/>\n            <div ref=\"memStats\" className=\"memStats\"/>\n          </div> : null\n        }\n        <canvas\n          id={this.props.canvas}\n          style={{width: '100%', height: '100%', padding: 0, border: 0}}\n        />\n        {panel ? <InfoPanel name={name} controls={controls} sourceLink={sourceLink} /> : null}\n      </div>\n    );\n  }\n}\n\nAnimationLoopExamplePage.propTypes = propTypes;\nAnimationLoopExamplePage.defaultProps = defaultProps;\nAnimationLoopExamplePage.displayName = 'AnimationLoop';\n","import ShaderModule from './shader-module';\nimport {assert} from '../utils';\n\nexport default class ShaderModuleRegistry {\n  constructor() {\n    this.shaderModules = {};\n    this.defaultShaderModules = [];\n  }\n\n  setDefaultShaderModules(modules) {\n    this.defaultShaderModules = this.resolveModules(modules);\n  }\n\n  getDefaultShaderModules() {\n    return this.defaultShaderModules;\n  }\n\n  registerShaderModules(shaderModuleList, {ignoreMultipleRegistrations = false} = {}) {\n    for (const shaderModule of shaderModuleList) {\n      this._registerShaderModule(shaderModule, ignoreMultipleRegistrations);\n    }\n  }\n\n  getShaderModule(moduleOrName) {\n    // Check if \"inline\" module, return it\n    if (moduleOrName instanceof ShaderModule) {\n      return moduleOrName;\n    }\n\n    // Check if module descriptor\n    if (typeof moduleOrName !== 'string') {\n      return this._registerShaderModule(moduleOrName, true);\n    }\n\n    // Module name - Look up module\n    const module = this.shaderModules[moduleOrName];\n    if (!module) {\n      assert(false, `Unknown shader module ${moduleOrName}`);\n    }\n    return module;\n  }\n\n  // registers any supplied modules, resolves any names into modules\n  // returns a list of modules\n  resolveModules(modules) {\n    return modules.map(moduleOrName => this.getShaderModule(moduleOrName));\n  }\n\n  // PRIVATE API\n\n  _registerShaderModule(module, ignoreMultipleRegistrations = false) {\n    // Check if \"inline\" module, return it\n    if (module instanceof ShaderModule) {\n      return module;\n    }\n\n    assert(module.name, 'shader module has no name');\n\n    if (!this.shaderModules[module.name] || ignoreMultipleRegistrations) {\n      // if ignoreMultipleRegistrations = true, we allow module to be re-registered\n      module = new ShaderModule(module);\n      module.dependencies = this.resolveModules(module.dependencies);\n      this.shaderModules[module.name] = module;\n    } else {\n      // TODO - instead verify that definition is not changing...\n      throw new Error(`shader module ${module.name} already registered`);\n    }\n\n    return this.shaderModules[module.name];\n  }\n}\n","import ShaderModuleRegistry from './shader-module-registry';\n\nconst shaderModuleRegistry = new ShaderModuleRegistry();\n\n/**\n * Registers an array of default shader modules. These will be concatenated\n * automatically at the end of any shader module list passed to\n * `assembleShaders` (plus `resolveModules` and `getShaderDependencies`)\n * @param {Object[]} modules - Array of shader modules\n */\nexport function setDefaultShaderModules(modules) {\n  shaderModuleRegistry.setDefaultShaderModules(modules);\n}\n\nexport function getDefaultShaderModules() {\n  return shaderModuleRegistry.getDefaultShaderModules();\n}\n\n/**\n * Registers an array of shader modules\n * @param {Object[]} shaderModuleList - Array of shader modules\n */\nexport function registerShaderModules(\n  shaderModuleList,\n  {ignoreMultipleRegistrations = false} = {}\n) {\n  shaderModuleRegistry.registerShaderModules(shaderModuleList, {ignoreMultipleRegistrations});\n}\n\n// registers any supplied modules and returns a list of module names\nexport function resolveModules(modules) {\n  modules = modules.concat(shaderModuleRegistry.defaultShaderModules);\n  modules = shaderModuleRegistry.resolveModules(modules);\n  return getShaderDependencies(modules);\n}\n\n// Looks up a moduleName among registered modules and returns definition.\n// If \"inline\" module, returns it directly\nexport function getShaderModule(moduleOrName) {\n  return shaderModuleRegistry.getShaderModule(moduleOrName);\n}\n\n/**\n * Takes a list of shader module names and returns a new list of\n * shader module names that includes all dependencies, sorted so\n * that modules that are dependencies of other modules come first.\n *\n * If the shader glsl code from the returned modules is concatenated\n * in the reverse order, it is guaranteed that all functions be resolved and\n * that all function and variable definitions come before use.\n *\n * @param {String[]} modules - Array of modules (inline modules or module names)\n * @return {String[]} - Array of modules\n */\nfunction getShaderDependencies(modules) {\n  const moduleMap = {};\n  const moduleDepth = {};\n  getDependencyGraph({modules, level: 0, moduleMap, moduleDepth});\n\n  // Return a reverse sort so that dependencies come before the modules that use them\n  return Object.keys(moduleDepth)\n    .sort((a, b) => moduleDepth[b] - moduleDepth[a])\n    .map(name => moduleMap[name]);\n}\n\n/**\n * Recursively checks module dpendencies to calculate dependency\n * level of each module.\n *\n * @param {String[]} modules - Array of modules\n * @param {Number} level - Current level\n * @return {result} - Map of module name to its level\n */\n// Adds another level of dependencies to the result map\nfunction getDependencyGraph({modules, level, moduleMap, moduleDepth}) {\n  if (level >= 5) {\n    throw new Error('Possible loop in shader dependency graph');\n  }\n\n  // Update level on all current modules\n  for (const module of modules) {\n    moduleMap[module.name] = module;\n    if (moduleDepth[module.name] === undefined || moduleDepth[module.name] < level) {\n      moduleDepth[module.name] = level;\n    }\n  }\n\n  // Recurse\n  for (const module of modules) {\n    if (module.dependencies) {\n      getDependencyGraph({modules: module.dependencies, level: level + 1, moduleMap, moduleDepth});\n    }\n  }\n}\n\nexport const TEST_EXPORTS = {\n  getShaderDependencies,\n  getDependencyGraph\n};\n","import {lumaStats} from '../init';\nimport {assertWebGLContext, isWebGL2, getKey, getKeyValue} from '../webgl-utils';\nimport {uid, assert, stubRemovedMethods} from '../utils';\n\nconst ERR_RESOURCE_METHOD_UNDEFINED = 'Resource subclass must define virtual methods';\n\n// TODO - Handle context loss\n// function glGetContextLossCount(gl) {\n//   return (gl.luma && gl.luma.glCount) || 0;\n// }\n\nexport default class Resource {\n  constructor(gl, opts = {}) {\n    assertWebGLContext(gl);\n\n    const {id, userData = {}} = opts;\n    this.gl = gl;\n    // this.ext = polyfillContext(gl);\n    this.id = id || uid(this.constructor.name);\n    this.userData = userData;\n    this._bound = false;\n\n    // Set the handle\n    // If handle was provided, use it, otherwise create a new handle\n\n    // TODO - Stores the handle with context loss information\n    // this.glCount = glGetContextLossCount(this.gl);\n\n    // Default VertexArray needs to be created with null handle, so compare against undefined\n    this._handle = opts.handle;\n    if (this._handle === undefined) {\n      this._handle = this._createHandle();\n    }\n\n    // Only meaningful for resources that allocate GPU memory\n    this.byteLength = 0;\n\n    this._addStats();\n  }\n\n  toString() {\n    return `${this.constructor.name}(${this.id})`;\n  }\n\n  get handle() {\n    // TODO - Add context loss handling\n    // Will regenerate and reinitialize the handle if necessary\n    // const glCount = glGetContextLossCount(this.gl);\n    // if (this.glCount !== glCount) {\n    //   this._handle = this._createHandle(this.opts);\n    //   this._glCount = glCount;\n    //   // Reinitialize object\n    //   this.initialize(this.opts);\n    // }\n    return this._handle;\n  }\n\n  delete({deleteChildren = false} = {}) {\n    // Delete this object, and get refs to any children\n    const children = this._handle && this._deleteHandle(this._handle);\n    if (this._handle) {\n      this._removeStats();\n    }\n    this._handle = null;\n\n    // Optionally, recursively delete the children\n    if (children && deleteChildren) {\n      children.filter(Boolean).forEach(child => {\n        child.delete();\n      });\n    }\n\n    return this;\n  }\n\n  bind(funcOrHandle = this.handle) {\n    if (typeof funcOrHandle !== 'function') {\n      this._bindHandle(funcOrHandle);\n      return this;\n    }\n\n    let value;\n\n    if (!this._bound) {\n      this._bindHandle(this.handle);\n      this._bound = true;\n\n      value = funcOrHandle();\n\n      this._bound = false;\n      this._bindHandle(null);\n    } else {\n      value = funcOrHandle();\n    }\n\n    return value;\n  }\n\n  unbind() {\n    this.bind(null);\n  }\n\n  /**\n   * Query a Resource parameter\n   *\n   * @param {GLenum} pname\n   * @return {GLint|GLfloat|GLenum} param\n   */\n  getParameter(pname, opts = {}) {\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n\n    const parameters = this.constructor.PARAMETERS || {};\n\n    // Use parameter definitions to handle unsupported parameters\n    const parameter = parameters[pname];\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n\n      // Check if we can query for this parameter\n      const parameterAvailable =\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        const webgl1Default = parameter.webgl1;\n        const webgl2Default = 'webgl2' in parameter ? parameter.webgl2 : parameter.webgl1;\n        const defaultValue = isWebgl2 ? webgl2Default : webgl1Default;\n        return defaultValue;\n      }\n    }\n\n    // If unknown parameter - Could be a valid parameter not covered by PARAMS\n    // Attempt to query for it and let WebGL report errors\n    return this._getParameter(pname, opts);\n  }\n\n  // Many resources support a getParameter call -\n  // getParameters will get all parameters - slow but useful for debugging\n  // eslint-disable-next-line complexity\n  getParameters(opts = {}) {\n    const {parameters, keys} = {};\n\n    // Get parameter definitions for this Resource\n    const PARAMETERS = this.constructor.PARAMETERS || {};\n\n    const isWebgl2 = isWebGL2(this.gl);\n\n    const values = {};\n\n    // Query all parameters if no list provided\n    const parameterKeys = parameters || Object.keys(PARAMETERS);\n\n    // WEBGL limits\n    for (const pname of parameterKeys) {\n      const parameter = PARAMETERS[pname];\n\n      // Check if this parameter is available on this platform\n      const parameterAvailable =\n        parameter &&\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (parameterAvailable) {\n        const key = keys ? getKey(this.gl, pname) : pname;\n        values[key] = this.getParameter(pname, opts);\n        if (keys && parameter.type === 'GLenum') {\n          values[key] = getKey(this.gl, values[key]);\n        }\n      }\n    }\n\n    return values;\n  }\n\n  /**\n   * Update a Resource setting\n   *\n   * @todo - cache parameter to avoid issuing WebGL calls?\n   *\n   * @param {GLenum} pname - parameter (GL constant, value or key)\n   * @param {GLint|GLfloat|GLenum} value\n   * @return {Resource} returns self to enable chaining\n   */\n  setParameter(pname, value) {\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n\n    const parameters = this.constructor.PARAMETERS || {};\n\n    const parameter = parameters[pname];\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n\n      // Check if this parameter is available on this platform\n      const parameterAvailable =\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        throw new Error('Parameter not available on this platform');\n      }\n\n      // Handle string keys\n      if (parameter.type === 'GLenum') {\n        value = getKeyValue(value);\n      }\n    }\n\n    // If unknown parameter - Could be a valid parameter not covered by PARAMS\n    // attempt to set it and let WebGL report errors\n    this._setParameter(pname, value);\n    return this;\n  }\n\n  /*\n   * Batch update resource parameters\n   * Assumes the subclass supports a setParameter call\n   */\n  setParameters(parameters) {\n    for (const pname in parameters) {\n      this.setParameter(pname, parameters[pname]);\n    }\n    return this;\n  }\n\n  // Install stubs for removed methods\n  stubRemovedMethods(className, version, methodNames) {\n    return stubRemovedMethods(this, className, version, methodNames);\n  }\n\n  // PUBLIC VIRTUAL METHODS\n  initialize(opts) {}\n\n  // PROTECTED METHODS - These must be overridden by subclass\n  _createHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _deleteHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _bindHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _getOptsFromHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _getParameter(pname, opts) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  /**\n   * @param {GLenum} pname\n   * @param {GLint|GLfloat|GLenum} param\n   * @return {Sampler} returns self to enable chaining\n   */\n  _setParameter(pname, value) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  // PRIVATE METHODS\n\n  _context() {\n    this.gl.luma = this.gl.luma || {};\n    return this.gl.luma;\n  }\n\n  _addStats() {\n    const name = this.constructor.name;\n    const stats = lumaStats.get('Resource Counts');\n\n    stats.get('Resources Created').incrementCount();\n    stats.get(`${name}s Created`).incrementCount();\n    stats.get(`${name}s Active`).incrementCount();\n  }\n\n  _removeStats() {\n    const name = this.constructor.name;\n    const stats = lumaStats.get('Resource Counts');\n\n    stats.get(`${name}s Active`).decrementCount();\n  }\n\n  _trackAllocatedMemory(bytes, name = this.constructor.name) {\n    const stats = lumaStats.get('Memory Usage');\n\n    stats.get('GPU Memory').addCount(bytes);\n    stats.get(`${name} Memory`).addCount(bytes);\n    this.byteLength = bytes;\n  }\n\n  _trackDeallocatedMemory(name = this.constructor.name) {\n    const stats = lumaStats.get('Memory Usage');\n\n    stats.get('GPU Memory').subtractCount(this.byteLength);\n    stats.get(`${name} Memory`).subtractCount(this.byteLength);\n    this.byteLength = 0;\n  }\n}\n","import GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport Accessor from './accessor';\nimport {\n  assertWebGL2Context,\n  getGLTypeFromTypedArray,\n  getTypedArrayFromGLType\n} from '../webgl-utils';\nimport {log, assert, checkProps} from '../utils';\n\nconst DEBUG_DATA_LENGTH = 10;\n\n// Shared prop checks for constructor and setProps\nconst DEPRECATED_PROPS = {\n  offset: 'accessor.offset',\n  stride: 'accessor.stride',\n  type: 'accessor.type',\n  size: 'accessor.size',\n  divisor: 'accessor.divisor',\n  normalized: 'accessor.normalized',\n  integer: 'accessor.integer',\n  instanced: 'accessor.divisor',\n  isInstanced: 'accessor.divisor'\n};\n\n// Prop checks for constructor\nconst PROP_CHECKS_INITIALIZE = {\n  removedProps: {},\n  replacedProps: {\n    bytes: 'byteLength'\n  },\n  // new Buffer() with individual accessor props is still used in apps, emit warnings\n  deprecatedProps: DEPRECATED_PROPS\n};\n\n// Prop checks for setProps\nconst PROP_CHECKS_SET_PROPS = {\n  // Buffer.setProps() with individual accessor props is rare => emit errors\n  removedProps: DEPRECATED_PROPS\n};\n\nexport default class Buffer extends Resource {\n  constructor(gl, props = {}) {\n    super(gl, props);\n\n    this.stubRemovedMethods('Buffer', 'v6.0', ['layout', 'setLayout', 'getIndexedParameter']);\n    // this.stubRemovedMethods('Buffer', 'v7.0', ['updateAccessor']);\n\n    // In WebGL1, need to make sure we use GL.ELEMENT_ARRAY_BUFFER when initializing element buffers\n    // otherwise buffer type will lock to generic (non-element) buffer\n    // In WebGL2, we can use GL.COPY_READ_BUFFER which avoids locking the type here\n    this.target = props.target || (this.gl.webgl2 ? GL.COPY_READ_BUFFER : GL.ARRAY_BUFFER);\n\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  // returns number of elements in the buffer (assuming that the full buffer is used)\n  getElementCount(accessor = this.accessor) {\n    return Math.round(this.byteLength / Accessor.getBytesPerElement(accessor));\n  }\n\n  // returns number of vertices in the buffer (assuming that the full buffer is used)\n  getVertexCount(accessor = this.accessor) {\n    return Math.round(this.byteLength / Accessor.getBytesPerVertex(accessor));\n  }\n\n  // Creates and initializes the buffer object's data store.\n  // Signature: `new Buffer(gl, {data: new Float32Array(...)})`\n  // Signature: `new Buffer(gl, new Float32Array(...))`\n  // Signature: `new Buffer(gl, 100)`\n  initialize(props = {}) {\n    // Signature `new Buffer(gl, new Float32Array(...)`\n    if (ArrayBuffer.isView(props)) {\n      props = {data: props};\n    }\n\n    // Signature: `new Buffer(gl, 100)`\n    if (Number.isFinite(props)) {\n      props = {byteLength: props};\n    }\n\n    props = checkProps('Buffer', props, PROP_CHECKS_INITIALIZE);\n\n    // Initialize member fields\n    this.usage = props.usage || GL.STATIC_DRAW;\n    this.debugData = null;\n\n    // Deprecated: Merge main props and accessor\n    this.setAccessor(Object.assign({}, props, props.accessor));\n\n    // Set data: (re)initializes the buffer\n    if (props.data) {\n      this._setData(props.data);\n    } else {\n      this._setByteLength(props.byteLength || 0);\n    }\n\n    return this;\n  }\n\n  setProps(props) {\n    props = checkProps('Buffer', props, PROP_CHECKS_SET_PROPS);\n\n    if ('accessor' in props) {\n      this.setAccessor(props.accessor);\n    }\n\n    return this;\n  }\n\n  // Optionally stores an accessor with the buffer, makes it easier to use it as an attribute later\n  // {type, size = 1, offset = 0, stride = 0, normalized = false, integer = false, divisor = 0}\n  setAccessor(accessor) {\n    // NOTE: From luma.gl v7.0, Accessors have an optional `buffer `field\n    // (mainly to support \"interleaving\")\n    // To avoid confusion, ensure `buffer.accessor` does not have a `buffer.accessor.buffer` field:\n    accessor = Object.assign({}, accessor);\n    delete accessor.buffer;\n\n    // This new statement ensures that an \"accessor object\" is re-packaged as an Accessor instance\n    this.accessor = new Accessor(accessor);\n    return this;\n  }\n\n  // Allocate a bigger GPU buffer (if the current buffer is not big enough).\n  // If a reallocation is triggered it clears the buffer\n  // Returns:\n  //  `true`: buffer was reallocated, data was cleared\n  //  `false`: buffer was big enough, data is intact\n  reallocate(byteLength) {\n    if (byteLength > this.byteLength) {\n      this._setByteLength(byteLength);\n      return true;\n    }\n    this.bytesUsed = byteLength;\n    return false;\n  }\n\n  // Update with new data. Reinitializes the buffer\n  setData(props) {\n    return this.initialize(props);\n  }\n\n  // Updates a subset of a buffer object's data store.\n  // Data (Typed Array or ArrayBuffer), length is inferred unless provided\n  // Offset into buffer\n  // WebGL2 only: Offset into srcData\n  // WebGL2 only: Number of bytes to be copied\n  subData(props) {\n    // Signature: buffer.subData(new Float32Array([...]))\n    if (ArrayBuffer.isView(props)) {\n      props = {data: props};\n    }\n\n    const {data, offset = 0, srcOffset = 0} = props;\n    const byteLength = props.byteLength || props.length;\n\n    assert(data);\n\n    // Create the buffer - binding it here for the first time locks the type\n    // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type\n    const target = this.gl.webgl2 ? GL.COPY_WRITE_BUFFER : this.target;\n    this.gl.bindBuffer(target, this.handle);\n    // WebGL2: subData supports additional srcOffset and length parameters\n    if (srcOffset !== 0 || byteLength !== undefined) {\n      assertWebGL2Context(this.gl);\n      this.gl.bufferSubData(this.target, offset, data, srcOffset, byteLength);\n    } else {\n      this.gl.bufferSubData(target, offset, data);\n    }\n    this.gl.bindBuffer(target, null);\n\n    // TODO - update local `data` if offsets are right\n    this.debugData = null;\n\n    this._inferType(data);\n\n    return this;\n  }\n\n  // WEBGL2 ONLY: Copies part of the data of another buffer into this buffer\n  copyData({sourceBuffer, readOffset = 0, writeOffset = 0, size}) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n\n    // Use GL.COPY_READ_BUFFER+GL.COPY_WRITE_BUFFER avoid disturbing other targets and locking type\n    gl.bindBuffer(GL.COPY_READ_BUFFER, sourceBuffer.handle);\n    gl.bindBuffer(GL.COPY_WRITE_BUFFER, this.handle);\n    gl.copyBufferSubData(GL.COPY_READ_BUFFER, GL.COPY_WRITE_BUFFER, readOffset, writeOffset, size);\n    gl.bindBuffer(GL.COPY_READ_BUFFER, null);\n    gl.bindBuffer(GL.COPY_WRITE_BUFFER, null);\n\n    // TODO - update local `data` if offsets are 0\n    this.debugData = null;\n\n    return this;\n  }\n\n  // WEBGL2 ONLY: Reads data from buffer into an ArrayBufferView or SharedArrayBuffer.\n  getData({dstData = null, srcByteOffset = 0, dstOffset = 0, length = 0} = {}) {\n    assertWebGL2Context(this.gl);\n\n    const ArrayType = getTypedArrayFromGLType(this.accessor.type || GL.FLOAT, {clamped: false});\n    const sourceAvailableElementCount = this._getAvailableElementCount(srcByteOffset);\n\n    const dstElementOffset = dstOffset;\n\n    let dstAvailableElementCount;\n    let dstElementCount;\n    if (dstData) {\n      dstElementCount = dstData.length;\n      dstAvailableElementCount = dstElementCount - dstElementOffset;\n    } else {\n      // Allocate ArrayBufferView with enough size to copy all eligible data.\n      dstAvailableElementCount = Math.min(\n        sourceAvailableElementCount,\n        length || sourceAvailableElementCount\n      );\n      dstElementCount = dstElementOffset + dstAvailableElementCount;\n    }\n\n    const copyElementCount = Math.min(sourceAvailableElementCount, dstAvailableElementCount);\n    length = length || copyElementCount;\n    assert(length <= copyElementCount);\n    dstData = dstData || new ArrayType(dstElementCount);\n\n    // Use GL.COPY_READ_BUFFER to avoid disturbing other targets and locking type\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, this.handle);\n    this.gl.getBufferSubData(GL.COPY_READ_BUFFER, srcByteOffset, dstData, dstOffset, length);\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, null);\n\n    // TODO - update local `data` if offsets are 0\n    return dstData;\n  }\n\n  /**\n   * Binds a buffer to a given binding point (target).\n   *   GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER take an index, and optionally a range.\n   *   - GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER need an index to affect state\n   *   - GL.UNIFORM_BUFFER: `offset` must be aligned to GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT.\n   *   - GL.UNIFORM_BUFFER: `size` must be a minimum of GL.UNIFORM_BLOCK_SIZE_DATA.\n   */\n  bind({\n    target = this.target, // target for the bind operation\n    index = this.accessor && this.accessor.index, // index = index of target (indexed bind point)\n    offset = 0,\n    size\n  } = {}) {\n    // NOTE: While GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER could\n    // be used as direct binding points, they will not affect transform feedback or\n    // uniform buffer state. Instead indexed bindings need to be made.\n    if (target === GL.UNIFORM_BUFFER || target === GL.TRANSFORM_FEEDBACK_BUFFER) {\n      if (size !== undefined) {\n        this.gl.bindBufferRange(target, index, this.handle, offset, size);\n      } else {\n        assert(offset === 0); // Make sure offset wasn't supplied\n        this.gl.bindBufferBase(target, index, this.handle);\n      }\n    } else {\n      this.gl.bindBuffer(target, this.handle);\n    }\n\n    return this;\n  }\n\n  unbind({target = this.target, index = this.accessor && this.accessor.index} = {}) {\n    const isIndexedBuffer = target === GL.UNIFORM_BUFFER || target === GL.TRANSFORM_FEEDBACK_BUFFER;\n    if (isIndexedBuffer) {\n      this.gl.bindBufferBase(target, index, null);\n    } else {\n      this.gl.bindBuffer(target, null);\n    }\n    return this;\n  }\n\n  // PROTECTED METHODS (INTENDED FOR USE BY OTHER FRAMEWORK CODE ONLY)\n\n  // Returns a short initial data array\n  getDebugData() {\n    if (!this.debugData) {\n      this.debugData = this.getData({length: DEBUG_DATA_LENGTH});\n      return {data: this.debugData, changed: true};\n    }\n    return {data: this.debugData, changed: false};\n  }\n\n  invalidateDebugData() {\n    this.debugData = null;\n  }\n\n  // PRIVATE METHODS\n\n  // Allocate a new buffer and initialize to contents of typed array\n  _setData(data, usage = this.usage) {\n    assert(ArrayBuffer.isView(data));\n\n    this._trackDeallocatedMemory();\n\n    const target = this._getTarget();\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, data, usage);\n    this.gl.bindBuffer(target, null);\n\n    this.usage = usage;\n    this.debugData = data.slice(0, DEBUG_DATA_LENGTH);\n    this.bytesUsed = data.byteLength;\n\n    this._trackAllocatedMemory(data.byteLength);\n\n    // infer GL type from supplied typed array\n    const type = getGLTypeFromTypedArray(data);\n    assert(type);\n    this.setAccessor(new Accessor(this.accessor, {type}));\n    return this;\n  }\n\n  // Allocate a GPU buffer of specified size.\n  _setByteLength(byteLength, usage = this.usage) {\n    assert(byteLength >= 0);\n\n    this._trackDeallocatedMemory();\n\n    // Workaround needed for Safari (#291):\n    // gl.bufferData with size equal to 0 crashes. Instead create zero sized array.\n    let data = byteLength;\n    if (byteLength === 0) {\n      data = new Float32Array(0);\n    }\n\n    const target = this._getTarget();\n    this.gl.bindBuffer(target, this.handle);\n    this.gl.bufferData(target, data, usage);\n    this.gl.bindBuffer(target, null);\n\n    this.usage = usage;\n    this.debugData = null;\n    this.bytesUsed = byteLength;\n\n    this._trackAllocatedMemory(byteLength);\n\n    return this;\n  }\n\n  // Binding a buffer for the first time locks the type\n  // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type\n  _getTarget() {\n    return this.gl.webgl2 ? GL.COPY_WRITE_BUFFER : this.target;\n  }\n\n  _getAvailableElementCount(srcByteOffset) {\n    const ArrayType = getTypedArrayFromGLType(this.accessor.type || GL.FLOAT, {clamped: false});\n    const sourceElementOffset = srcByteOffset / ArrayType.BYTES_PER_ELEMENT;\n    return this.getElementCount() - sourceElementOffset;\n  }\n\n  // Automatically infers type from typed array passed to setData\n  // Note: No longer that useful, since type is now autodeduced from the compiled shaders\n  _inferType(data) {\n    if (!this.accessor.type) {\n      this.setAccessor(new Accessor(this.accessor, {type: getGLTypeFromTypedArray(data)}));\n    }\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createBuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteBuffer(this.handle);\n    this._trackDeallocatedMemory();\n  }\n\n  _getParameter(pname) {\n    this.gl.bindBuffer(this.target, this.handle);\n    const value = this.gl.getBufferParameter(this.target, pname);\n    this.gl.bindBuffer(this.target, null);\n    return value;\n  }\n\n  // DEPRECATIONS - v7.0\n  get type() {\n    log.deprecated('Buffer.type', 'Buffer.accessor.type')();\n    return this.accessor.type;\n  }\n\n  get bytes() {\n    log.deprecated('Buffer.bytes', 'Buffer.byteLength')();\n    return this.byteLength;\n  }\n\n  // DEPRECATIONS - v6.0\n  // Deprecated in v6.x, but not warnings not properly implemented\n  setByteLength(byteLength) {\n    log.deprecated('setByteLength', 'reallocate')();\n    return this.reallocate(byteLength);\n  }\n\n  // Deprecated in v6.x, but not warnings not properly implemented\n  updateAccessor(opts) {\n    log.deprecated('updateAccessor(...)', 'setAccessor(new Accessor(buffer.accessor, ...)')();\n    this.accessor = new Accessor(this.accessor, opts);\n    return this;\n  }\n}\n","// Feature detection for WebGL\n//\n// Provides a function that enables simple checking of which WebGL features are\n// available in an WebGL1 or WebGL2 environment.\n\n/* eslint-disable no-inline-comments, max-len */\nimport isOldIE from './is-old-ie';\nimport assert from './assert';\n\nconst GL_VENDOR = 0x1f00;\nconst GL_RENDERER = 0x1f01;\nconst GL_VERSION = 0x1f02;\nconst GL_SHADING_LANGUAGE_VERSION = 0x8b8c;\n\n// Defines luma.gl \"feature\" names and semantics\nconst WEBGL_FEATURES = {\n  // GLSL extensions\n  GLSL_FRAG_DATA: ['WEBGL_draw_buffers', true], // TODO - name makes no sense in GLSL 3.00\n  GLSL_FRAG_DEPTH: ['EXT_frag_depth', true],\n  GLSL_DERIVATIVES: ['OES_standard_derivatives', true],\n  GLSL_TEXTURE_LOD: ['EXT_shader_texture_lod', true]\n};\n\n// Create a key-mirrored FEATURES array\nconst FEATURES = {};\nObject.keys(WEBGL_FEATURES).forEach(key => {\n  FEATURES[key] = key;\n});\n\nexport {FEATURES};\n\nfunction isWebGL2(gl) {\n  return Boolean(gl && gl._version === 2);\n}\n\nexport function getContextInfo(gl) {\n  const info = gl.getExtension('WEBGL_debug_renderer_info');\n  const vendor = gl.getParameter((info && info.UNMASKED_VENDOR_WEBGL) || GL_VENDOR);\n  const renderer = gl.getParameter((info && info.UNMASKED_RENDERER_WEBGL) || GL_RENDERER);\n  const gpuVendor = identifyGPUVendor(vendor, renderer);\n  const gpuInfo = {\n    gpuVendor,\n    vendor,\n    renderer,\n    version: gl.getParameter(GL_VERSION),\n    shadingLanguageVersion: gl.getParameter(GL_SHADING_LANGUAGE_VERSION)\n  };\n  return gpuInfo;\n}\n\nfunction identifyGPUVendor(vendor, renderer) {\n  if (vendor.match(/NVIDIA/i) || renderer.match(/NVIDIA/i)) {\n    return 'NVIDIA';\n  }\n  if (vendor.match(/INTEL/i) || renderer.match(/INTEL/i)) {\n    return 'INTEL';\n  }\n  if (\n    vendor.match(/AMD/i) ||\n    renderer.match(/AMD/i) ||\n    vendor.match(/ATI/i) ||\n    renderer.match(/ATI/i)\n  ) {\n    return 'AMD';\n  }\n  return 'UNKNOWN GPU';\n}\n\nconst compiledGlslExtensions = {};\n\n// Enables feature detection in IE11 due to a bug where gl.getExtension may return true\n// but fail to compile when the extension is enabled in the shader. Specifically,\n// the OES_standard_derivatives and WEBGL_draw_buffers extensions fails to compile in IE11 even though its included\n// in the list of supported extensions.\n// opts allows user agent to be overridden for testing\n/*\n* Inputs :\n*  gl : WebGL context\n*  cap : Key of WEBGL_FEATURES object identifying the extension\n*  opts :\n*   behavior : behavor of extension to be tested, by defualt `enable` is used\n* Returns : true, if shader is compiled successfully, false otherwise\n*/\nexport function canCompileGLGSExtension(gl, cap, opts = {}) {\n  const feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n\n  if (!isOldIE(opts)) {\n    return true;\n  }\n\n  if (cap in compiledGlslExtensions) {\n    return compiledGlslExtensions[cap];\n  }\n\n  const extensionName = feature[0];\n  const behavior = opts.behavior || 'enable';\n  const source = `#extension GL_${extensionName} : ${behavior}\\nvoid main(void) {}`;\n\n  const shader = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const canCompile = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  gl.deleteShader(shader);\n  compiledGlslExtensions[cap] = canCompile;\n  return canCompile;\n}\n\n// TODO - cache the value\nfunction getFeature(gl, cap) {\n  const feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n\n  // Get extension name from table\n  const extensionName = isWebGL2(gl) ? feature[1] || feature[0] : feature[0];\n\n  // Check if the value is dependent on checking an extension\n  const value =\n    typeof extensionName === 'string' ? Boolean(gl.getExtension(extensionName)) : extensionName;\n\n  assert(value === false || value === true);\n\n  return value;\n}\n\nexport function hasFeatures(gl, features) {\n  features = Array.isArray(features) ? features : [features];\n  return features.every(feature => getFeature(gl, feature));\n}\n","/* global window */\n// opts allows user agent to be overridden for testing\nexport default function isOldIE(opts = {}) {\n  const navigator = typeof window !== 'undefined' ? window.navigator || {} : {};\n  const userAgent = opts.userAgent || navigator.userAgent || '';\n  // We only care about older versions of IE (IE 11 and below). Newer versions of IE (Edge)\n  // have much better web standards support.\n  const isMSIE = userAgent.indexOf('MSIE ') !== -1;\n  const isTrident = userAgent.indexOf('Trident/') !== -1;\n  return isMSIE || isTrident;\n}\n","import {getContextInfo, hasFeatures, canCompileGLGSExtension, FEATURES} from '../utils/webgl-info';\n\nexport function getPlatformShaderDefines(gl) {\n  const debugInfo = getContextInfo(gl);\n\n  switch (debugInfo.gpuVendor.toLowerCase()) {\n    case 'nvidia':\n      return `\\\n#define NVIDIA_GPU\n// Nvidia optimizes away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n`;\n\n    case 'intel':\n      return `\\\n#define INTEL_GPU\n// Intel optimizes away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n// Intel's built-in 'tan' function doesn't have acceptable precision\n#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1\n// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow\n#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1\n`;\n\n    case 'amd':\n      // AMD Does not eliminate fp64 code\n      return `\\\n#define AMD_GPU\n`;\n\n    default:\n      // We don't know what GPU it is, could be that the GPU driver or\n      // browser is not implementing UNMASKED_RENDERER constant and not\n      // reporting a correct name\n      return `\\\n#define DEFAULT_GPU\n// Prevent driver from optimizing away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n// Intel's built-in 'tan' function doesn't have acceptable precision\n#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1\n// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow\n#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1\n`;\n  }\n}\n\nexport function getVersionDefines(gl, glslVersion, isFragment) {\n  // Add shadertools defines to let shaders portably v1/v3 check for features\n  let versionDefines = `\\\n#if (__VERSION__ > 120)\n\n# define FRAG_DEPTH\n# define DERIVATIVES\n# define DRAW_BUFFERS\n# define TEXTURE_LOD\n\n#endif // __VERSION\n`;\n\n  if (hasFeatures(gl, FEATURES.GLSL_FRAG_DEPTH)) {\n    versionDefines += `\\\n// FRAG_DEPTH => gl_FragDepth is available\n#ifdef GL_EXT_frag_depth\n#extension GL_EXT_frag_depth : enable\n# define FRAG_DEPTH\n# define gl_FragDepth gl_FragDepthEXT\n#endif\n`;\n  }\n  if (\n    hasFeatures(gl, FEATURES.GLSL_DERIVATIVES) &&\n    canCompileGLGSExtension(gl, FEATURES.GLSL_DERIVATIVES)\n  ) {\n    versionDefines += `\\\n// DERIVATIVES => dxdF, dxdY and fwidth are available\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n# define DERIVATIVES\n#endif\n`;\n  }\n  if (\n    hasFeatures(gl, FEATURES.GLSL_FRAG_DATA) &&\n    canCompileGLGSExtension(gl, FEATURES.GLSL_FRAG_DATA, {behavior: 'require'})\n  ) {\n    versionDefines += `\\\n// DRAW_BUFFERS => gl_FragData[] is available\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers : require\n#define DRAW_BUFFERS\n#endif\n`;\n  }\n  if (hasFeatures(gl, FEATURES.GLSL_TEXTURE_LOD)) {\n    versionDefines += `\\\n// TEXTURE_LOD => texture2DLod etc are available\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n# define TEXTURE_LOD\n#define texture2DLod texture2DLodEXT\n#define texture2DProjLod texture2DProjLodEXT\n#define texture2DProjLod texture2DProjLodEXT\n#define textureCubeLod textureCubeLodEXT\n#define texture2DGrad texture2DGradEXT\n#define texture2DProjGrad texture2DProjGradEXT\n#define texture2DProjGrad texture2DProjGradEXT\n#define textureCubeGrad textureCubeGradEXT\n#endif\n`;\n  }\n  return versionDefines;\n}\n","import {VERTEX_SHADER, FRAGMENT_SHADER} from './constants';\nimport {resolveModules, getShaderModule} from './resolve-modules';\nimport {getPlatformShaderDefines, getVersionDefines} from './platform-defines';\nimport injectShader, {DECLARATION_INJECT_MARKER} from './inject-shader';\nimport {assert} from '../utils';\n/* eslint-disable max-depth, complexity */\n\nconst INJECT_SHADER_DECLARATIONS = `\\n\\n${DECLARATION_INJECT_MARKER}\\n\\n`;\n\nconst SHADER_TYPE = {\n  [VERTEX_SHADER]: 'vertex',\n  [FRAGMENT_SHADER]: 'fragment'\n};\n\nconst HOOK_FUNCTIONS = {\n  [VERTEX_SHADER]: {},\n  [FRAGMENT_SHADER]: {}\n};\n\nconst MODULE_INJECTIONS = {};\n\n// Precision prologue to inject before functions are injected in shader\n// TODO - extract any existing prologue in the fragment source and move it up...\nconst FRAGMENT_SHADER_PROLOGUE = `\\\nprecision highp float;\n\n`;\n\nexport function createShaderHook(hook, opts = {}) {\n  hook = hook.trim();\n  const [stage, signature] = hook.split(':');\n  const name = hook.replace(/\\(.+/, '');\n  HOOK_FUNCTIONS[stage][name] = Object.assign(opts, {signature});\n}\n\nexport function createModuleInjection(moduleName, opts) {\n  const {hook, injection, order = 0} = opts;\n  const shaderStage = hook.slice(0, 2);\n\n  MODULE_INJECTIONS[moduleName] = MODULE_INJECTIONS[moduleName] || {};\n  MODULE_INJECTIONS[moduleName][shaderStage] = MODULE_INJECTIONS[moduleName][shaderStage] || {};\n\n  assert(!MODULE_INJECTIONS[moduleName][shaderStage][hook], 'Module injection already created');\n\n  MODULE_INJECTIONS[moduleName][shaderStage][hook] = {\n    injection,\n    order\n  };\n}\n\n// Inject a list of modules\nexport function assembleShaders(gl, opts) {\n  const {vs, fs} = opts;\n  const modules = resolveModules(opts.modules || []);\n  return {\n    gl,\n    vs: assembleShader(gl, Object.assign({}, opts, {source: vs, type: VERTEX_SHADER, modules})),\n    fs: assembleShader(gl, Object.assign({}, opts, {source: fs, type: FRAGMENT_SHADER, modules})),\n    getUniforms: assembleGetUniforms(modules),\n    modules: assembleModuleMap(modules)\n  };\n}\n\n// Pulls together complete source code for either a vertex or a fragment shader\n// adding prologues, requested module chunks, and any final injections.\nfunction assembleShader(\n  gl,\n  {id, source, type, modules, defines = {}, inject = {}, prologue = true, log}\n) {\n  assert(typeof source === 'string', 'shader source must be a string');\n\n  const isVertex = type === VERTEX_SHADER;\n\n  const sourceLines = source.split('\\n');\n  let glslVersion = 100;\n  let versionLine = '';\n  let coreSource = source;\n  // Extract any version directive string from source.\n  // TODO : keep all pre-processor statements at the begining of the shader.\n  if (sourceLines[0].indexOf('#version ') === 0) {\n    glslVersion = 300; // TODO - regexp that matches atual version number\n    versionLine = sourceLines[0];\n    coreSource = sourceLines.slice(1).join('\\n');\n  }\n\n  // Combine Module and Application Defines\n  const allDefines = {};\n  modules.forEach(module => {\n    Object.assign(allDefines, module.getDefines());\n  });\n  Object.assign(allDefines, defines);\n\n  // Add platform defines (use these to work around platform-specific bugs and limitations)\n  // Add common defines (GLSL version compatibility, feature detection)\n  // Add precision declaration for fragment shaders\n  let assembledSource = prologue\n    ? `\\\n${versionLine}\n${getShaderName({id, source, type})}\n${getShaderType({type})}\n${getPlatformShaderDefines(gl)}\n${getVersionDefines(gl, glslVersion, !isVertex)}\n${getApplicationDefines(allDefines)}\n${isVertex ? '' : FRAGMENT_SHADER_PROLOGUE}\n`\n    : `${versionLine}\n`;\n\n  // Add source of dependent modules in resolved order\n  let injectStandardStubs = false;\n  const hookInjections = {};\n  const mainInjections = {};\n\n  for (const key in inject) {\n    const injection =\n      typeof inject[key] === 'string' ? {injection: inject[key], order: 0} : inject[key];\n    if (key.match(/^(v|f)s:/)) {\n      if (key[3] === '#') {\n        mainInjections[key] = [injection];\n      } else {\n        hookInjections[key] = [injection];\n      }\n    } else {\n      // Regex injection\n      mainInjections[key] = [injection];\n    }\n  }\n\n  for (const module of modules) {\n    switch (module.name) {\n      case 'inject':\n        injectStandardStubs = true;\n        break;\n\n      default:\n        if (log) {\n          module.checkDeprecations(coreSource, log);\n        }\n        const moduleSource = module.getModuleSource(type, glslVersion);\n        // Add the module source, and a #define that declares it presence\n        assembledSource += moduleSource;\n\n        if (MODULE_INJECTIONS[module.name]) {\n          const injections = MODULE_INJECTIONS[module.name][type];\n          for (const key in injections) {\n            if (key.match(/^(v|f)s:#/)) {\n              mainInjections[key] = mainInjections[key] || [];\n              mainInjections[key].push(injections[key]);\n            } else {\n              hookInjections[key] = hookInjections[key] || [];\n              hookInjections[key].push(injections[key]);\n            }\n          }\n        }\n    }\n  }\n\n  // For injectShader\n  assembledSource += INJECT_SHADER_DECLARATIONS;\n\n  assembledSource += getHookFunctions(type, hookInjections);\n\n  // Add the version directive and actual source of this shader\n  assembledSource += coreSource;\n\n  // Apply any requested shader injections\n  assembledSource = injectShader(assembledSource, type, mainInjections, injectStandardStubs);\n\n  return assembledSource;\n}\n\n// Returns a combined `getUniforms` covering the options for all the modules,\n// the created function will pass on options to the inidividual `getUniforms`\n// function of each shader module and combine the results into one object that\n// can be passed to setUniforms.\nfunction assembleGetUniforms(modules) {\n  return function getUniforms(opts) {\n    const uniforms = {};\n    for (const module of modules) {\n      // `modules` is already sorted by dependency level. This guarantees that\n      // modules have access to the uniforms that are generated by their dependencies.\n      const moduleUniforms = module.getUniforms(opts, uniforms);\n      Object.assign(uniforms, moduleUniforms);\n    }\n    return uniforms;\n  };\n}\n\n// Returns a map with module names as keys, resolving to their module definitions\n// The presence of a key indicates that the module is available in this program,\n// whether directly included, or through a dependency of some other module\nfunction assembleModuleMap(modules) {\n  const result = {};\n  for (const moduleName of modules) {\n    const shaderModule = getShaderModule(moduleName);\n    result[moduleName] = shaderModule;\n  }\n  return result;\n}\n\nfunction getShaderType({type}) {\n  return `\n#define SHADER_TYPE_${SHADER_TYPE[type].toUpperCase()}\n`;\n}\n\n// Generate \"glslify-compatible\" SHADER_NAME defines\n// These are understood by the GLSL error parsing function\n// If id is provided and no SHADER_NAME constant is present in source, create one\nfunction getShaderName({id, source, type}) {\n  const injectShaderName = id && typeof id === 'string' && source.indexOf('SHADER_NAME') === -1;\n  return injectShaderName\n    ? `\n#define SHADER_NAME ${id}_${SHADER_TYPE[type]}\n\n`\n    : '';\n}\n\n// Generates application defines from an object\nfunction getApplicationDefines(defines = {}) {\n  let count = 0;\n  let sourceText = '';\n  for (const define in defines) {\n    if (count === 0) {\n      sourceText += '\\n// APPLICATION DEFINES\\n';\n    }\n    count++;\n\n    const value = defines[define];\n    if (value || Number.isFinite(value)) {\n      sourceText += `#define ${define.toUpperCase()} ${defines[define]}\\n`;\n    }\n  }\n  if (count === 0) {\n    sourceText += '\\n';\n  }\n  return sourceText;\n}\n\nfunction getHookFunctions(shaderStage, hookInjections) {\n  let result = '';\n  const hookFunctions = HOOK_FUNCTIONS[shaderStage];\n  for (const hookName in hookFunctions) {\n    const hookFunction = hookFunctions[hookName];\n    result += `void ${hookFunction.signature} {\\n`;\n    if (hookFunction.header) {\n      result += `  ${hookFunction.header}`;\n    }\n    if (hookInjections[hookName]) {\n      const injections = hookInjections[hookName];\n      injections.sort((a, b) => a.order - b.order);\n      for (const injection of injections) {\n        result += `  ${injection.injection}\\n`;\n      }\n    }\n    if (hookFunction.footer) {\n      result += `  ${hookFunction.footer}`;\n    }\n    result += '}\\n';\n  }\n\n  return result;\n}\n","import GL from '@luma.gl/constants';\nimport {Buffer} from '@luma.gl/webgl';\nimport {assert} from '../utils';\n\n// Support for mapping new geometries with glTF attribute names to \"classic\" luma.gl shader names\nconst GLTF_TO_LUMA_ATTRIBUTE_MAP = {\n  POSITION: 'positions',\n  NORMAL: 'normals',\n  COLOR_0: 'colors',\n  TEXCOORD_0: 'texCoords',\n  TEXCOORD_1: 'texCoords1',\n  TEXCOORD_2: 'texCoords2'\n};\n\nexport function getBuffersFromGeometry(gl, geometry, options) {\n  const buffers = {};\n  let indices = geometry.indices;\n\n  for (const name in geometry.attributes) {\n    const attribute = geometry.attributes[name];\n    const remappedName = mapAttributeName(name, options);\n\n    if (name === 'indices') {\n      indices = attribute;\n    } else if (attribute.constant) {\n      buffers[remappedName] = attribute.value;\n    } else {\n      const typedArray = attribute.value;\n      // Create accessor by copying the attribute and removing `value``\n      const accessor = {...attribute};\n      delete accessor.value;\n      buffers[remappedName] = [new Buffer(gl, typedArray), accessor];\n\n      inferAttributeAccessor(name, accessor);\n    }\n  }\n\n  if (indices) {\n    const data = indices.value || indices;\n    assert(\n      data instanceof Uint16Array || data instanceof Uint32Array,\n      'attribute array for \"indices\" must be of integer type'\n    );\n    const accessor = {\n      size: 1,\n      isIndexed: indices.isIndexed === undefined ? true : indices.isIndexed\n    };\n    buffers.indices = [\n      new Buffer(gl, {\n        data,\n        target: GL.ELEMENT_ARRAY_BUFFER\n      }),\n      accessor\n    ];\n  }\n\n  return buffers;\n}\n\nfunction mapAttributeName(name, options) {\n  const {attributeMap = GLTF_TO_LUMA_ATTRIBUTE_MAP} = options || {};\n  return (attributeMap && attributeMap[name]) || name;\n}\n\n// Check for well known attribute names\n// eslint-disable-next-line complexity\nexport function inferAttributeAccessor(attributeName, attribute) {\n  let category;\n  switch (attributeName) {\n    case 'texCoords':\n    case 'texCoord1':\n    case 'texCoord2':\n    case 'texCoord3':\n      category = 'uvs';\n      break;\n    case 'vertices':\n    case 'positions':\n    case 'normals':\n    case 'pickingColors':\n      category = 'vectors';\n      break;\n    default:\n  }\n\n  // Check for categorys\n  switch (category) {\n    case 'vectors':\n      attribute.size = attribute.size || 3;\n      break;\n    case 'uvs':\n      attribute.size = attribute.size || 2;\n      break;\n    default:\n  }\n\n  assert(Number.isFinite(attribute.size), `attribute ${attributeName} needs size`);\n}\n","// TODO / DEPRECATED - delete when confident that probe.gl logging implements all opts\n/* eslint-disable no-console */\nfunction formatArrayValue(v, opts) {\n  const {maxElts = 16, size = 1} = opts;\n  let string = '[';\n  for (let i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += `,${i % size === 0 ? ' ' : ''}`;\n    }\n    string += formatValue(v[i], opts);\n  }\n  const terminator = v.length > maxElts ? '...' : ']';\n  return `${string}${terminator}`;\n}\n\nexport function formatValue(v, opts = {}) {\n  const EPSILON = 1e-16;\n  const {isInteger = false} = opts;\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, opts);\n  }\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n  if (Math.abs(v) < EPSILON) {\n    return isInteger ? '0' : '0.';\n  }\n  if (isInteger) {\n    return v.toFixed(0);\n  }\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    return v.toFixed(0);\n  }\n  const string = v.toPrecision(2);\n  const decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}\n","import Buffer from '../classes/buffer';\nimport {getKey} from '../webgl-utils';\nimport {getCompositeGLType} from '../webgl-utils/attribute-utils';\nimport {formatValue} from '../utils';\n\n// Creates object suitable as input for console.table\nexport function getDebugTableForVertexArray({vertexArray, header = 'Attributes'} = {}) {\n  if (!vertexArray.configuration) {\n    return {};\n  }\n\n  const table = {}; // {[header]: {}};\n\n  // Add index (elements) if available\n  if (vertexArray.elements) {\n    // const elements = Object.assign({size: 1}, vertexArray.elements);\n    table.ELEMENT_ARRAY_BUFFER = getDebugTableRow(vertexArray, vertexArray.elements, null, header);\n  }\n\n  // Add used attributes\n  const attributes = vertexArray.values;\n\n  for (const attributeLocation in attributes) {\n    const info = vertexArray._getAttributeInfo(attributeLocation);\n    if (info) {\n      let rowHeader = `${attributeLocation}: ${info.name}`;\n      const accessor = vertexArray.accessors[info.location];\n      if (accessor) {\n        rowHeader = `${attributeLocation}: ${getGLSLDeclaration(info.name, accessor)}`;\n      }\n      table[rowHeader] = getDebugTableRow(\n        vertexArray,\n        attributes[attributeLocation],\n        accessor,\n        header\n      );\n    }\n  }\n\n  return table;\n}\n\n/* eslint-disable max-statements */\nfunction getDebugTableRow(vertexArray, attribute, accessor, header) {\n  // const round = xnum => Math.round(num * 10) / 10;\n  const {gl} = vertexArray;\n\n  let type = 'NOT PROVIDED';\n  let size = 'N/A';\n  let verts = 'N/A';\n  let bytes = 'N/A';\n\n  let isInteger;\n  let marker;\n  let value;\n\n  if (accessor) {\n    type = accessor.type;\n    size = accessor.size;\n\n    // Generate a type name by dropping Array from Float32Array etc.\n    type = String(type).replace('Array', '');\n\n    // Look for 'nt' to detect integer types, e.g. Int32Array, Uint32Array\n    isInteger = type.indexOf('nt') !== -1;\n  }\n\n  if (attribute instanceof Buffer) {\n    const buffer = attribute;\n\n    const {data, modified} = buffer.getDebugData();\n    marker = modified ? '*' : '';\n\n    value = data;\n    bytes = buffer.byteLength;\n    verts = bytes / data.BYTES_PER_ELEMENT / size;\n\n    let format;\n\n    if (accessor) {\n      const instanced = accessor.divisor > 0;\n      format = `${instanced ? 'I ' : 'P '} ${verts} (x${size}=${bytes} bytes ${getKey(gl, type)})`;\n    } else {\n      // element buffer\n      isInteger = true;\n      format = `${bytes} bytes`;\n    }\n\n    return {\n      [header]: `${marker}${formatValue(value, {size, isInteger})}`,\n      'Format ': format\n    };\n  }\n\n  // CONSTANT VALUE\n  value = attribute;\n  size = attribute.length;\n  // Generate a type name by dropping Array from Float32Array etc.\n  type = String(attribute.constructor.name).replace('Array', '');\n  // Look for 'nt' to detect integer types, e.g. Int32Array, Uint32Array\n  isInteger = type.indexOf('nt') !== -1;\n\n  return {\n    [header]: `${formatValue(value, {size, isInteger})} (constant)`,\n    'Format ': `${size}x${type} (constant)`\n  };\n}\n/* eslint-ensable max-statements */\n\nfunction getGLSLDeclaration(name, accessor) {\n  const {type, size} = accessor;\n  const typeAndName = getCompositeGLType(type, size);\n  if (typeAndName) {\n    return `${name} (${typeAndName.name})`;\n  }\n  return name;\n}\n","import {formatValue, assert} from '../utils';\n\n// Prepares a table suitable for console.table\n/* eslint-disable max-statements, complexity */\nexport function getDebugTableForUniforms({\n  header = 'Uniforms',\n  program,\n  uniforms,\n  undefinedOnly = false\n} = {}) {\n  assert(program);\n\n  const SHADER_MODULE_UNIFORM_REGEXP = '.*_.*';\n  const PROJECT_MODULE_UNIFORM_REGEXP = '.*Matrix'; // TODO - Use explicit list\n\n  const uniformLocations = program._uniformSetters;\n  const table = {}; // {[header]: {}};\n\n  // Add program's provided uniforms (in alphabetical order)\n  const uniformNames = Object.keys(uniformLocations).sort();\n\n  let count = 0;\n\n  // First add non-underscored uniforms (assumed not coming from shader modules)\n  for (const uniformName of uniformNames) {\n    if (\n      !uniformName.match(SHADER_MODULE_UNIFORM_REGEXP) &&\n      !uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)\n    ) {\n      if (addUniformToTable({table, header, uniforms, uniformName, undefinedOnly})) {\n        count++;\n      }\n    }\n  }\n\n  // add underscored uniforms (assumed from shader modules)\n  for (const uniformName of uniformNames) {\n    if (uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)) {\n      if (addUniformToTable({table, header, uniforms, uniformName, undefinedOnly})) {\n        count++;\n      }\n    }\n  }\n\n  for (const uniformName of uniformNames) {\n    if (!table[uniformName]) {\n      if (addUniformToTable({table, header, uniforms, uniformName, undefinedOnly})) {\n        count++;\n      }\n    }\n  }\n\n  // Create a table of unused uniforms\n  let unusedCount = 0;\n  const unusedTable = {};\n  if (!undefinedOnly) {\n    for (const uniformName in uniforms) {\n      const uniform = uniforms[uniformName];\n      if (!table[uniformName]) {\n        unusedCount++;\n        unusedTable[uniformName] = {\n          Type: `NOT USED: ${uniform}`,\n          [header]: formatValue(uniform)\n        };\n      }\n    }\n  }\n\n  return {table, count, unusedTable, unusedCount};\n}\n\n// Helper\nfunction addUniformToTable({table, header, uniforms, uniformName, undefinedOnly}) {\n  const value = uniforms[uniformName];\n  const isDefined = isUniformDefined(value);\n  if (!undefinedOnly || !isDefined) {\n    table[uniformName] = {\n      // Add program's unprovided uniforms\n      [header]: isDefined ? formatValue(value) : 'N/A',\n      'Uniform Type': isDefined ? value : 'NOT PROVIDED'\n    };\n    return true;\n  }\n  return false;\n}\n\nfunction isUniformDefined(value) {\n  return value !== undefined && value !== null;\n}\n","import {getCompositeGLType} from '../webgl-utils/attribute-utils';\n\nexport function getDebugTableForProgramConfiguration(config) {\n  const table = {};\n\n  const header = `Accessors for ${config.id}`;\n\n  for (const attributeInfo of config.attributeInfos) {\n    if (attributeInfo) {\n      const glslDeclaration = getGLSLDeclaration(attributeInfo);\n      table[`in ${glslDeclaration}`] = {[header]: JSON.stringify(attributeInfo.accessor)};\n    }\n  }\n\n  for (const varyingInfo of config.varyingInfos) {\n    if (varyingInfo) {\n      const glslDeclaration = getGLSLDeclaration(varyingInfo);\n      table[`out ${glslDeclaration}`] = {[header]: JSON.stringify(varyingInfo.accessor)};\n    }\n  }\n\n  return table;\n}\n\nfunction getGLSLDeclaration(attributeInfo) {\n  const {type, size} = attributeInfo.accessor;\n  const typeAndName = getCompositeGLType(type, size);\n  if (typeAndName) {\n    return `${typeAndName.name} ${attributeInfo.name}`;\n  }\n  return attributeInfo.name;\n}\n","import seer from 'seer';\n\nimport {window} from '../utils';\n\nconst models = {};\n\n/**\n * Add a model to our cache indexed by id\n */\nexport const addModel = model => {\n  if (models[model.id]) {\n    return;\n  }\n  models[model.id] = model;\n\n  seer.listItem('luma.gl', model.id);\n};\n\n/**\n * Log a model uniforms and attributes.\n */\nexport const logModel = (model, uniforms) => {\n  if (!seer.isReady() || seer.throttle(`luma.gl:${model.id}`, 1e3)) {\n    return;\n  }\n\n  const attributesObject = model.geometry\n    ? Object.assign({}, model.geometry.attributes, model.attributes)\n    : model.attributes;\n  const uniformsObject = Object.assign({}, model.uniforms, uniforms);\n\n  seer.multiUpdate('luma.gl', model.id, [\n    {path: 'objects.uniforms', data: uniformsObject},\n    {path: 'objects.attributes', data: attributesObject}\n  ]);\n};\n\n/**\n * Remove a previously set model from the cache\n */\nexport const removeModel = id => {\n  delete models[id];\n  seer.deleteItem('luma.gl', id);\n};\n\n/**\n * Recursively traverse an object given a path of properties and set the given value\n */\nconst recursiveSet = (obj, path, value) => {\n  if (!obj) {\n    return;\n  }\n\n  if (path.length > 1) {\n    recursiveSet(obj[path[0]], path.slice(1), value);\n  } else {\n    obj[path[0]] = value;\n  }\n};\n\nconst overrides = new Map();\n\n/**\n * Create an override on the specify layer, indexed by a valuePath array.\n * Do nothing in case Seer as not been initialized to prevent any preformance drawback.\n */\nexport const setOverride = (id, valuePath, value) => {\n  if (!window.__SEER_INITIALIZED__) {\n    return;\n  }\n\n  if (!overrides.has(id)) {\n    overrides.set(id, new Map());\n  }\n\n  const uniforms = overrides.get(id);\n  uniforms.set(valuePath, value);\n};\n\n/**\n * Apply overrides to a specific model's uniforms\n */\nexport const getOverrides = (id, uniforms) => {\n  if (!window.__SEER_INITIALIZED__ || !id) {\n    return;\n  }\n\n  const overs = overrides.get(id);\n  if (!overs) {\n    return;\n  }\n\n  overs.forEach((value, valuePath) => {\n    recursiveSet(uniforms, valuePath, value);\n  });\n};\n\n/**\n * Listen for luma.gl edit events\n */\nseer.listenFor('luma.gl', payload => {\n  const model = models[payload.itemKey];\n  if (!model || payload.type !== 'edit' || payload.valuePath[0] !== 'uniforms') {\n    return;\n  }\n\n  const valuePath = payload.valuePath.slice(1);\n  setOverride(payload.itemKey, valuePath, payload.value);\n\n  const uniforms = model.getUniforms();\n  recursiveSet(uniforms, valuePath, payload.value);\n  model.setUniforms(uniforms);\n});\n","// Shared code between Model and MeshModel\n\nimport GL from '@luma.gl/constants';\nimport {isWebGL, Query, Program, VertexArray} from '@luma.gl/webgl';\nimport {MODULAR_SHADERS, assembleShaders} from '@luma.gl/shadertools';\nimport {\n  getDebugTableForUniforms,\n  getDebugTableForVertexArray,\n  getDebugTableForProgramConfiguration\n} from '@luma.gl/webgl';\nimport {addModel, removeModel, logModel, getOverrides} from '../debug/seer-integration';\nimport {log, isObjectEmpty, uid, assert} from '../utils';\n\nconst LOG_DRAW_PRIORITY = 2;\nconst LOG_DRAW_TIMEOUT = 10000;\n\n// Model abstract O3D Class\nexport default class BaseModel {\n  constructor(gl, props = {}) {\n    assert(isWebGL(gl));\n    const {id = uid('base-model')} = props;\n    this.id = id;\n    this.gl = gl;\n    this.id = props.id || uid('Model');\n    this.lastLogTime = 0; // TODO - move to probe.gl\n    this.initialize(props);\n    this._setBaseModelProps(props);\n  }\n\n  initialize(props) {\n    this.props = {};\n    this.program = this._createProgram(props);\n\n    // Create a vertex array configured after this program\n    this.vertexArray = new VertexArray(this.gl, {program: this.program});\n\n    // Initialize state\n    this.userData = {};\n    this.needsRedraw = true;\n\n    // Attributes and buffers\n    // Model manages auto Buffer creation from typed arrays\n    this._attributes = {}; // All attributes\n    this.attributes = {}; // User defined attributes\n\n    // Model manages uniform animation\n    this.animatedUniforms = {};\n    this.animated = false;\n    this.animationLoop = null; // if set, used as source for animationProps\n\n    this.timerQueryEnabled = false;\n    this.timeElapsedQuery = undefined;\n    this.lastQueryReturned = true;\n\n    this.stats = {\n      accumulatedFrameTime: 0,\n      averageFrameTime: 0,\n      profileFrameCount: 0\n    };\n\n    // picking options\n    this.pickable = true;\n\n    this._setBaseModelProps(props);\n\n    // Make sure we have some reasonable default uniforms in place\n    this.setUniforms(\n      Object.assign(\n        {},\n        this.getModuleUniforms(), // Get all default uniforms\n        this.getModuleUniforms(props.moduleSettings) // Get unforms for supplied parameters\n      )\n    );\n  }\n\n  setProps(props) {\n    this._setBaseModelProps(props);\n  }\n\n  delete() {\n    // delete all attributes created by this model\n    // TODO - should buffer deletes be handled by vertex array?\n    for (const key in this._attributes) {\n      if (this._attributes[key] !== this.attributes[key]) {\n        this._attributes[key].delete();\n      }\n    }\n\n    this.program.delete();\n    this.vertexArray.delete();\n\n    removeModel(this.id);\n  }\n\n  // GETTERS\n\n  isAnimated() {\n    return this.animated;\n  }\n\n  getProgram() {\n    return this.program;\n  }\n\n  getUniforms() {\n    return this.program.uniforms;\n  }\n\n  // SETTERS\n\n  // TODO - should actually set the uniforms\n  setUniforms(uniforms = {}) {\n    // Let Seer override edited uniforms\n    uniforms = Object.assign({}, uniforms);\n    getOverrides(this.id, uniforms);\n\n    // Resolve any animated uniforms so that we have an initial value\n    uniforms = this._extractAnimatedUniforms(uniforms);\n\n    this.program.setUniforms(uniforms);\n\n    return this;\n  }\n\n  updateModuleSettings(opts) {\n    const uniforms = this.getModuleUniforms(opts || {});\n    return this.setUniforms(uniforms);\n  }\n\n  // DRAW CALLS\n\n  /* eslint-disable max-statements  */\n  drawGeometry(opts = {}) {\n    const {\n      moduleSettings = null,\n      framebuffer,\n      uniforms = {},\n      attributes = {},\n      transformFeedback = this.transformFeedback,\n      parameters = {},\n      vertexArray = this.vertexArray,\n      animationProps\n    } = opts;\n\n    // Update module settings\n\n    addModel(this);\n\n    // Update model with any just provided attributes, settings or uniforms\n    this.setAttributes(attributes);\n    this.updateModuleSettings(moduleSettings);\n    this.setUniforms(uniforms);\n\n    // Animate any function valued uniforms\n    this._refreshAnimationProps(animationProps);\n\n    const logPriority = this._logDrawCallStart(2);\n\n    const drawParams = this.vertexArray.getDrawParams(this.props);\n    if (drawParams.isInstanced && !this.isInstanced) {\n      log.warn('Found instanced attributes on non-instanced model', this.id)();\n    }\n\n    const {isIndexed, indexType, indexOffset} = drawParams;\n    const {isInstanced, instanceCount} = this;\n\n    const noop = () => {};\n    const {onBeforeRender = noop, onAfterRender = noop} = this.props;\n\n    onBeforeRender();\n\n    this._timerQueryStart();\n\n    const didDraw = this.program.draw(\n      Object.assign({}, opts, {\n        logPriority,\n        uniforms: null, // Already set (may contain \"function values\" not understood by Program)\n        framebuffer,\n        parameters,\n        drawMode: this.getDrawMode(),\n        vertexCount: this.getVertexCount(),\n        vertexArray,\n        transformFeedback,\n        isIndexed,\n        indexType,\n        isInstanced,\n        instanceCount,\n        offset: isIndexed ? indexOffset : 0\n      })\n    );\n\n    this._timerQueryEnd();\n\n    onAfterRender();\n\n    this._logDrawCallEnd(logPriority, vertexArray, framebuffer);\n\n    return didDraw;\n  }\n  /* eslint-enable max-statements  */\n\n  // PRIVATE METHODS\n\n  // eslint-disable-next-line max-statements, complexity\n  _setBaseModelProps(props) {\n    Object.assign(this.props, props);\n\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms);\n    }\n\n    if ('pickable' in props) {\n      this.pickable = props.pickable;\n    }\n\n    // if ('onBeforeRender' in props) {}\n    // if ('onAfterRender' in props) {}\n\n    // Experimental props\n    if ('timerQueryEnabled' in props) {\n      this.timerQueryEnabled = props.timerQueryEnabled && Query.isSupported(this.gl, ['timers']);\n      if (props.timerQueryEnabled && !this.timerQueryEnabled) {\n        log.warn('GPU timer not supported')();\n      }\n    }\n\n    if ('_animationProps' in props) {\n      this._setAnimationProps(props._animationProps);\n    }\n\n    if ('_animationLoop' in props) {\n      this.animationLoop = props._animationLoop;\n    }\n  }\n\n  _createProgram({\n    vs = null,\n    fs = null,\n    // 1: Modular shaders\n    modules = null,\n    defines = {},\n    inject = {},\n    shaderCache = null,\n    // TransformFeedback\n    varyings = null,\n    bufferMode = GL.SEPARATE_ATTRIBS,\n    program = null\n  }) {\n    this.getModuleUniforms = x => {};\n\n    const id = this.id;\n\n    if (!program) {\n      // Assign default shaders if none are provided\n      vs = vs || MODULAR_SHADERS.vs;\n      fs = fs || MODULAR_SHADERS.fs;\n\n      const assembleResult = assembleShaders(this.gl, {vs, fs, modules, inject, defines, log});\n      ({vs, fs} = assembleResult);\n\n      if (shaderCache) {\n        program = shaderCache.getProgram(this.gl, {id, vs, fs});\n      } else {\n        program = new Program(this.gl, {id, vs, fs, varyings, bufferMode});\n      }\n\n      this.getModuleUniforms = assembleResult.getUniforms || (x => {});\n    }\n\n    assert(program instanceof Program, 'Model needs a program');\n    return program;\n  }\n\n  // Refreshes animated uniforms, attempting to get animated props from animationLoop if registered\n  _refreshAnimationProps(animationProps) {\n    // Try to read animationProps\n    animationProps = animationProps || (this.animationLoop && this.animationLoop.animationProps);\n    if (animationProps) {\n      this._setAnimationProps(animationProps);\n    }\n  }\n\n  // Calculate new values for any function uniforms based on supplied animationProps\n  _evaluateAnimateUniforms(animationProps) {\n    if (!this.animated) {\n      return {};\n    }\n    const animatedUniforms = {};\n    for (const uniformName in this.animatedUniforms) {\n      const valueFunction = this.animatedUniforms[uniformName];\n      animatedUniforms[uniformName] = valueFunction(animationProps);\n    }\n    return animatedUniforms;\n  }\n\n  // Extracts a list of function valued uniforms, so we can update them before each draw call\n  // Also removes such uniforms from the returned list\n  _extractAnimatedUniforms(uniforms) {\n    let foundAnimated = false;\n\n    // Keep our animatedUniforms map up-to-date\n    for (const uniformName in uniforms) {\n      const newValue = uniforms[uniformName];\n      if (typeof newValue === 'function') {\n        this.animatedUniforms[uniformName] = newValue;\n        foundAnimated = true;\n      } else {\n        delete this.animatedUniforms[uniformName];\n      }\n    }\n\n    // Update animated flag: `Model` is animated if any uniforms are animated (i.e. functions)\n    this.animated = !isObjectEmpty(this.animatedUniforms);\n\n    if (!foundAnimated) {\n      return uniforms;\n    }\n\n    // If animated uniforms were found, remove them from ordinary uniform list\n    // `Program` class can't (and shouldn't) handle function valued uniforms\n    const staticUniforms = {};\n    for (const uniformName in uniforms) {\n      if (!this.animatedUniforms[uniformName]) {\n        staticUniforms[uniformName] = uniforms[uniformName];\n      }\n    }\n    return staticUniforms;\n  }\n\n  // Timer Queries\n\n  _timerQueryStart() {\n    if (this.timerQueryEnabled === true) {\n      if (!this.timeElapsedQuery) {\n        this.timeElapsedQuery = new Query(this.gl);\n      }\n      if (this.lastQueryReturned) {\n        this.lastQueryReturned = false;\n        this.timeElapsedQuery.beginTimeElapsedQuery();\n      }\n    }\n  }\n\n  _timerQueryEnd() {\n    if (this.timerQueryEnabled === true) {\n      this.timeElapsedQuery.end();\n      // TODO: Skip results if 'gl.getParameter(this.ext.GPU_DISJOINT_EXT)' returns false\n      // should this be incorporated into Query object?\n      if (this.timeElapsedQuery.isResultAvailable()) {\n        this.lastQueryReturned = true;\n        const elapsedTime = this.timeElapsedQuery.getTimerMilliseconds();\n\n        // Update stats (e.g. for seer)\n        this.stats.lastFrameTime = elapsedTime;\n        this.stats.accumulatedFrameTime += elapsedTime;\n        this.stats.profileFrameCount++;\n        this.stats.averageFrameTime =\n          this.stats.accumulatedFrameTime / this.stats.profileFrameCount;\n\n        // Log stats\n        log.log(\n          LOG_DRAW_PRIORITY,\n          `\\\nGPU time ${this.program.id}: ${this.stats.lastFrameTime}ms \\\naverage ${this.stats.averageFrameTime}ms \\\naccumulated: ${this.stats.accumulatedFrameTime}ms \\\ncount: ${this.stats.profileFrameCount}`\n        )();\n      }\n    }\n  }\n\n  _logDrawCallStart(priority) {\n    const logDrawTimeout = priority > 3 ? 0 : LOG_DRAW_TIMEOUT;\n    if (log.priority < priority || Date.now() - this.lastLogTime < logDrawTimeout) {\n      return undefined;\n    }\n\n    this.lastLogTime = Date.now();\n\n    log.group(LOG_DRAW_PRIORITY, `>>> DRAWING MODEL ${this.id}`, {collapsed: log.priority <= 2})();\n\n    return priority;\n  }\n\n  _logDrawCallEnd(priority, vertexArray, uniforms, framebuffer) {\n    // HACK: priority === undefined means logDrawCallStart didn't run\n    if (priority === undefined) {\n      return;\n    }\n\n    const attributeTable = getDebugTableForVertexArray({\n      vertexArray,\n      header: `${this.id} attributes`,\n      attributes: this._attributes\n    });\n\n    const {table: uniformTable, unusedTable, unusedCount} = getDebugTableForUniforms({\n      header: `${this.id} uniforms`,\n      program: this.program,\n      uniforms: Object.assign({}, this.program.uniforms, uniforms)\n    });\n\n    // log missing uniforms\n    const {table: missingTable, count: missingCount} = getDebugTableForUniforms({\n      header: `${this.id} uniforms`,\n      program: this.program,\n      uniforms: Object.assign({}, this.program.uniforms, uniforms),\n      undefinedOnly: true\n    });\n\n    if (missingCount > 0) {\n      log.log('MISSING UNIFORMS', Object.keys(missingTable))();\n      // log.table(priority, missingTable)();\n    }\n    if (unusedCount > 0) {\n      log.log('UNUSED UNIFORMS', Object.keys(unusedTable))();\n      // log.log(priority, 'Unused uniforms ', unusedTable)();\n    }\n\n    const configTable = getDebugTableForProgramConfiguration(this.vertexArray.configuration);\n\n    log.table(priority, attributeTable)();\n\n    log.table(priority, uniformTable)();\n\n    log.table(priority + 1, configTable)();\n\n    logModel(this, uniforms);\n\n    if (framebuffer) {\n      framebuffer.log({priority: LOG_DRAW_PRIORITY, message: `Rendered to ${framebuffer.id}`});\n    }\n\n    log.groupEnd(LOG_DRAW_PRIORITY, `>>> DRAWING MODEL ${this.id}`)();\n  }\n}\n","import GL from '@luma.gl/constants';\nimport {TransformFeedback, Buffer} from '@luma.gl/webgl';\nimport {getBuffersFromGeometry} from './model-utils';\nimport BaseModel from './base-model';\nimport {log, isObjectEmpty, uid, assert} from '../utils';\n\nconst ERR_MODEL_PARAMS = 'Model needs drawMode and vertexCount';\n\nexport default class Model extends BaseModel {\n  constructor(gl, props = {}) {\n    // Deduce a helpful id\n    const {id = uid('model')} = props;\n    super(gl, {...props, id});\n  }\n\n  initialize(props) {\n    super.initialize(props);\n\n    this.drawMode = props.drawMode !== undefined ? props.drawMode : GL.TRIANGLES;\n    this.vertexCount = props.vertexCount || 0;\n\n    // Track buffers created by setGeometry\n    this.geometryBuffers = {};\n\n    // geometry might have set drawMode and vertexCount\n    this.isInstanced = props.isInstanced || props.instanced;\n\n    this._setModelProps(props);\n\n    // TODO - just to unbreak deck.gl 7.0-beta, remove as soon as updated\n    this.geometry = {};\n\n    // assert(program || program instanceof Program);\n    assert(this.drawMode !== undefined && Number.isFinite(this.vertexCount), ERR_MODEL_PARAMS);\n  }\n\n  setProps(props) {\n    super.setProps(props);\n    this._setModelProps(props);\n  }\n\n  delete() {\n    super.delete();\n\n    this._deleteGeometryBuffers();\n  }\n\n  // GETTERS\n\n  getDrawMode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  getInstanceCount() {\n    return this.instanceCount;\n  }\n\n  getAttributes() {\n    return this.attributes;\n  }\n\n  // SETTERS\n\n  setDrawMode(drawMode) {\n    this.drawMode = drawMode;\n    return this;\n  }\n\n  setVertexCount(vertexCount) {\n    assert(Number.isFinite(vertexCount));\n    this.vertexCount = vertexCount;\n    return this;\n  }\n\n  setInstanceCount(instanceCount) {\n    assert(Number.isFinite(instanceCount));\n    this.instanceCount = instanceCount;\n    return this;\n  }\n\n  setGeometry(geometry) {\n    this.drawMode = geometry.drawMode;\n    this.vertexCount = geometry.getVertexCount();\n\n    this._deleteGeometryBuffers();\n\n    this.geometryBuffers = getBuffersFromGeometry(this.gl, geometry);\n    this.vertexArray.setAttributes(this.geometryBuffers);\n    return this;\n  }\n\n  setAttributes(attributes = {}) {\n    // Avoid setting needsRedraw if no attributes\n    if (isObjectEmpty(attributes)) {\n      return this;\n    }\n\n    const normalizedAttributes = {};\n    for (const name in attributes) {\n      const attribute = attributes[name];\n      // The `getValue` call provides support for deck.gl `Attribute` class\n      // TODO - remove once deck refactoring completes\n      normalizedAttributes[name] = attribute.getValue ? attribute.getValue() : attribute;\n    }\n\n    this.vertexArray.setAttributes(normalizedAttributes);\n    return this;\n  }\n\n  // DRAW CALLS\n\n  draw(options = {}) {\n    return this.drawGeometry(options);\n  }\n\n  // Draw call for transform feedback\n  transform(opts = {}) {\n    const {discard = true, feedbackBuffers, unbindModels = []} = opts;\n\n    let {parameters} = opts;\n\n    if (feedbackBuffers) {\n      this._setFeedbackBuffers(feedbackBuffers);\n    }\n\n    if (discard) {\n      parameters = Object.assign({}, parameters, {[GL.RASTERIZER_DISCARD]: discard});\n    }\n\n    unbindModels.forEach(model => model.vertexArray.unbindBuffers());\n    try {\n      this.draw(Object.assign({}, opts, {parameters}));\n    } finally {\n      unbindModels.forEach(model => model.vertexArray.bindBuffers());\n    }\n\n    return this;\n  }\n\n  // DEPRECATED METHODS\n\n  render(uniforms = {}) {\n    log.warn('Model.render() is deprecated. Use Model.setUniforms() and Model.draw()')();\n    return this.setUniforms(uniforms).draw();\n  }\n\n  // PRIVATE METHODS\n\n  _setModelProps(props) {\n    // params\n    // if ('drawMode' in props) {\n    //   this.drawMode = getDrawMode(props.drawMode);\n    // }\n    // if ('vertexCount' in props) {\n    //   this.vertexCount = props.vertexCount;\n    // }\n    if ('instanceCount' in props) {\n      this.instanceCount = props.instanceCount;\n    }\n    if ('geometry' in props) {\n      this.setGeometry(props.geometry);\n    }\n\n    // webgl settings\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('_feedbackBuffers' in props) {\n      this._setFeedbackBuffers(props._feedbackBuffers);\n    }\n  }\n\n  _deleteGeometryBuffers() {\n    for (const name in this.geometryBuffers) {\n      // Buffer is raw value (for indices) or first element of [buffer, accessor] pair\n      const buffer = this.geometryBuffers[name][0] || this.geometryBuffers[name];\n      if (buffer instanceof Buffer) {\n        buffer.delete();\n      }\n    }\n  }\n\n  // Updates (evaluates) all function valued uniforms based on a new set of animationProps\n  // experimental\n  _setAnimationProps(animationProps) {\n    if (this.animated) {\n      assert(animationProps, 'Model.draw(): animated uniforms but no animationProps');\n      const animatedUniforms = this._evaluateAnimateUniforms(animationProps);\n      this.program.setUniforms(animatedUniforms);\n    }\n  }\n\n  // Transform Feedback\n\n  _setFeedbackBuffers(feedbackBuffers = {}) {\n    // Avoid setting needsRedraw if no feedbackBuffers\n    if (isObjectEmpty(feedbackBuffers)) {\n      return this;\n    }\n\n    const {gl} = this.program;\n    this.transformFeedback =\n      this.transformFeedback ||\n      new TransformFeedback(gl, {\n        program: this.program\n      });\n\n    this.transformFeedback.setBuffers(feedbackBuffers);\n    return this;\n  }\n}\n","// Transpiles shader source code to target GLSL version\n// Note: We always run transpiler even if same version e.g. 3.00 => 3.00\n// RFC: https://github.com/uber/luma.gl/blob/7.0-release/dev-docs/RFCs/v6.0/portable-glsl-300-rfc.md\nexport default function transpileShader(source, targetGLSLVersion, isVertex) {\n  switch (targetGLSLVersion) {\n    case 300:\n      return isVertex ? convertVertexShaderTo300(source) : convertFragmentShaderTo300(source);\n    case 100:\n      return isVertex ? convertVertexShaderTo100(source) : convertFragmentShaderTo100(source);\n    default:\n      throw new Error(`unknown GLSL version ${targetGLSLVersion}`);\n  }\n}\n\nfunction convertVertexShaderTo300(source) {\n  return source\n    .replace(/attribute\\s+/g, 'in ')\n    .replace(/varying\\s+/g, 'out ')\n    .replace(/texture2D\\(/g, 'texture(')\n    .replace(/textureCube\\(+/g, 'texture(')\n    .replace(/texture2DLodEXT\\(/g, 'textureLod(')\n    .replace(/textureCubeLodEXT\\(/g, 'textureLod(');\n}\n\nfunction convertFragmentShaderTo300(source) {\n  return source\n    .replace(/varying\\s+/g, 'in ')\n    .replace(/texture2D\\(/g, 'texture(')\n    .replace(/textureCube\\(/g, 'texture(')\n    .replace(/texture2DLodEXT\\(/g, 'textureLod(')\n    .replace(/textureCubeLodEXT\\(/g, 'textureLod(');\n\n  // Deal with fragColor\n  // .replace(/gl_fragColor/g, 'fragColor ');\n}\n\nfunction convertVertexShaderTo100(source) {\n  // /gm - treats each line as a string, so that ^ matches after newlines\n  return source\n    .replace(/^in\\s+/gm, 'attribute ')\n    .replace(/^out\\s+/gm, 'varying ')\n    .replace(/texture\\(/g, 'texture2D(');\n}\n\nfunction convertFragmentShaderTo100(source) {\n  // /gm - treats each line as a string, so that ^ matches after newlines\n  return source.replace(/^in\\s+/gm, 'varying ').replace(/texture\\(/g, 'texture2D(');\n\n  // Deal with fragColor\n  // .replace(/^out\\s+/g, 'varying ')\n}\n","const TYPE_DEFINITIONS = {\n  number: {\n    validate(value, propType) {\n      return (\n        Number.isFinite(value) &&\n        (!('max' in propType) || value <= propType.max) &&\n        (!('min' in propType) || value >= propType.min)\n      );\n    }\n  },\n  array: {\n    validate(value, propType) {\n      return Array.isArray(value) || ArrayBuffer.isView(value);\n    }\n  }\n};\n\nexport function parsePropTypes(propDefs) {\n  const propTypes = {};\n  for (const propName in propDefs) {\n    const propDef = propDefs[propName];\n    const propType = parsePropType(propDef);\n    propTypes[propName] = propType;\n  }\n  return propTypes;\n}\n\n// Parses one property definition entry. Either contains:\n// * a valid prop type object ({type, ...})\n// * or just a default value, in which case type and name inference is used\nfunction parsePropType(propDef) {\n  let type = getTypeOf(propDef);\n  if (type === 'object') {\n    if (!propDef) {\n      return {type: 'object', value: null};\n    }\n    if ('type' in propDef) {\n      return Object.assign({}, propDef, TYPE_DEFINITIONS[propDef.type]);\n    }\n    if (!('value' in propDef)) {\n      // If no type and value this object is likely the value\n      return {type: 'object', value: propDef};\n    }\n    type = getTypeOf(propDef.value);\n    return Object.assign({type}, propDef, TYPE_DEFINITIONS[type]);\n  }\n  return Object.assign({type, value: propDef}, TYPE_DEFINITIONS[type]);\n}\n\n// improved version of javascript typeof that can distinguish arrays and null values\nfunction getTypeOf(value) {\n  if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n    return 'array';\n  }\n  return typeof value;\n}\n","import transpileShader from './transpile-shader';\nimport {assert} from '../utils';\nimport {parsePropTypes} from './filters/prop-types';\n\nconst VERTEX_SHADER = 'vs';\nconst FRAGMENT_SHADER = 'fs';\n\nexport default class ShaderModule {\n  constructor({\n    name,\n    vs,\n    fs,\n    dependencies = [],\n    uniforms,\n    getUniforms,\n    deprecations = [],\n    defines = {},\n    // DEPRECATED\n    vertexShader,\n    fragmentShader\n  }) {\n    assert(typeof name === 'string');\n    this.name = name;\n    this.vs = vs || vertexShader;\n    this.fs = fs || fragmentShader;\n    this.getModuleUniforms = getUniforms;\n    this.dependencies = dependencies;\n    this.deprecations = this._parseDeprecationDefinitions(deprecations);\n    this.defines = defines;\n\n    if (uniforms) {\n      this.uniforms = parsePropTypes(uniforms);\n    }\n  }\n\n  // Extracts the source code chunk for the specified shader type from the named shader module\n  getModuleSource(type, targetGLSLVersion) {\n    let moduleSource;\n    switch (type) {\n      case VERTEX_SHADER:\n        moduleSource = transpileShader(this.vs || '', targetGLSLVersion, true);\n        break;\n      case FRAGMENT_SHADER:\n        moduleSource = transpileShader(this.fs || '', targetGLSLVersion, false);\n        break;\n      default:\n        assert(false);\n    }\n\n    return `\\\n#define MODULE_${this.name.toUpperCase()}\n${moduleSource}\\\n// END MODULE_${this.name}\n\n`;\n  }\n\n  getUniforms(opts, uniforms) {\n    if (this.getModuleUniforms) {\n      return this.getModuleUniforms(opts, uniforms);\n    }\n    // Build uniforms from the uniforms array\n    if (this.uniforms) {\n      return this._defaultGetUniforms(opts);\n    }\n    return {};\n  }\n\n  getDefines() {\n    return this.defines;\n  }\n\n  // Warn about deprecated uniforms or functions\n  checkDeprecations(shaderSource, log) {\n    this.deprecations.forEach(def => {\n      if (def.regex.test(shaderSource)) {\n        if (def.deprecated) {\n          log.deprecated(def.old, def.new)();\n        } else {\n          log.removed(def.old, def.new)();\n        }\n      }\n    });\n  }\n\n  _parseDeprecationDefinitions(deprecations) {\n    deprecations.forEach(def => {\n      switch (def.type) {\n        case 'function':\n          def.regex = new RegExp(`\\\\b${def.old}\\\\(`);\n          break;\n        default:\n          def.regex = new RegExp(`${def.type} ${def.old};`);\n      }\n    });\n\n    return deprecations;\n  }\n\n  _defaultGetUniforms(opts = {}) {\n    const uniforms = {};\n    const propTypes = this.uniforms;\n\n    for (const key in propTypes) {\n      const propDef = propTypes[key];\n      if (key in opts && !propDef.private) {\n        if (propDef.validate) {\n          assert(propDef.validate(opts[key], propDef), `${this.name}: invalid ${key}`);\n        }\n        uniforms[key] = opts[key];\n      } else {\n        uniforms[key] = propDef.value;\n      }\n    }\n\n    return uniforms;\n  }\n}\n\n// This utility mutates the original module\n// Keeping for backward compatibility\n// TODO - remove in v8\nexport function normalizeShaderModule(module) {\n  if (!module.normalized) {\n    module.normalized = true;\n    if (module.uniforms && !module.getUniforms) {\n      const shaderModule = new ShaderModule(module);\n      module.getUniforms = shaderModule.getUniforms.bind(shaderModule);\n    }\n  }\n  return module;\n}\n","import {MODULE_INJECTORS_VS, MODULE_INJECTORS_FS} from '../modules/module-injectors';\nimport {VERTEX_SHADER, FRAGMENT_SHADER} from './constants';\nimport {assert} from '../utils';\n\n// TODO - experimental\nconst MODULE_INJECTORS = {\n  [VERTEX_SHADER]: MODULE_INJECTORS_VS,\n  [FRAGMENT_SHADER]: MODULE_INJECTORS_FS\n};\n\nexport const DECLARATION_INJECT_MARKER = '__LUMA_INJECT_DECLARATIONS__'; // Uniform/attribute declarations\n\nconst REGEX_START_OF_MAIN = /void main\\s*\\([^)]*\\)\\s*\\{\\n?/; // Beginning of main\nconst REGEX_END_OF_MAIN = /}\\n?[^{}]*$/; // End of main, assumes main is last function\nconst fragments = [];\n\n// A minimal shader injection/templating system.\n// RFC: https://github.com/uber/luma.gl/blob/7.0-release/dev-docs/RFCs/v6.0/shader-injection-rfc.md\n/* eslint-disable complexity */\nexport default function injectShader(source, type, inject, injectStandardStubs) {\n  const isVertex = type === VERTEX_SHADER;\n\n  for (const key in inject) {\n    const fragmentData = inject[key];\n    fragmentData.sort((a, b) => a.order - b.order);\n    fragments.length = fragmentData.length;\n    for (let i = 0, len = fragmentData.length; i < len; ++i) {\n      fragments[i] = fragmentData[i].injection;\n    }\n    const fragmentString = `${fragments.join('\\n')}\\n`;\n    switch (key) {\n      // declarations are injected before the main function\n      case 'vs:#decl':\n        if (isVertex) {\n          source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);\n        }\n        break;\n      // main code is injected at the end of main function\n      case 'vs:#main-start':\n        if (isVertex) {\n          source = source.replace(REGEX_START_OF_MAIN, match => match + fragmentString);\n        }\n        break;\n      case 'vs:#main-end':\n        if (isVertex) {\n          source = source.replace(REGEX_END_OF_MAIN, match => fragmentString + match);\n        }\n        break;\n      case 'fs:#decl':\n        if (!isVertex) {\n          source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);\n        }\n        break;\n      case 'fs:#main-start':\n        if (!isVertex) {\n          source = source.replace(REGEX_START_OF_MAIN, match => match + fragmentString);\n        }\n        break;\n      case 'fs:#main-end':\n        if (!isVertex) {\n          source = source.replace(REGEX_END_OF_MAIN, match => fragmentString + match);\n        }\n        break;\n\n      default:\n        // TODO(Tarek): I think this usage should be deprecated.\n\n        // inject code after key, leaving key in place\n        source = source.replace(key, match => match + fragmentString);\n    }\n  }\n\n  // Remove if it hasn't already been replaced\n  source = source.replace(DECLARATION_INJECT_MARKER, '');\n\n  // Finally, if requested, insert an automatic module injector chunk\n  if (injectStandardStubs) {\n    source = source.replace(/\\}\\s*$/, match => match + MODULE_INJECTORS[type]);\n  }\n\n  return source;\n}\n\n/* eslint-enable complexity */\n\n// Takes an array of inject objects and combines them into one\nexport function combineInjects(injects) {\n  const result = {};\n  assert(Array.isArray(injects) && injects.length > 1);\n  injects.forEach(inject => {\n    for (const key in inject) {\n      result[key] = result[key] ? `${result[key]}\\n${inject[key]}` : inject[key];\n    }\n  });\n  return result;\n}\n","export const MODULE_INJECTORS_VS = `\\\n#ifdef MODULE_LOGDEPTH\n  logdepth_adjustPosition(gl_Position);\n#endif\n`;\n\nexport const MODULE_INJECTORS_FS = `\\\n#ifdef MODULE_MATERIAL\n  gl_FragColor = material_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LIGHTING\n  gl_FragColor = lighting_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_FOG\n  gl_FragColor = fog_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_PICKING\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LOGDEPTH\n  logdepth_setFragDepth();\n#endif\n`;\n","/* eslint-disable camelcase */\nimport {assert} from '../utils';\n\nconst GL_BYTE = 0x1400;\nconst GL_UNSIGNED_BYTE = 0x1401;\nconst GL_SHORT = 0x1402;\nconst GL_UNSIGNED_SHORT = 0x1403;\n\nconst GL_POINTS = 0x0;\nconst GL_LINES = 0x1;\nconst GL_LINE_LOOP = 0x2;\nconst GL_LINE_STRIP = 0x3;\nconst GL_TRIANGLES = 0x4;\nconst GL_TRIANGLE_STRIP = 0x5;\nconst GL_TRIANGLE_FAN = 0x6;\n\n// Local constants - these will \"collapse\" during minification\nconst GL_FLOAT = 0x1406;\nconst GL_FLOAT_VEC2 = 0x8b50;\nconst GL_FLOAT_VEC3 = 0x8b51;\nconst GL_FLOAT_VEC4 = 0x8b52;\n\nconst GL_INT = 0x1404;\nconst GL_INT_VEC2 = 0x8b53;\nconst GL_INT_VEC3 = 0x8b54;\nconst GL_INT_VEC4 = 0x8b55;\n\nconst GL_UNSIGNED_INT = 0x1405;\nconst GL_UNSIGNED_INT_VEC2 = 0x8dc6;\nconst GL_UNSIGNED_INT_VEC3 = 0x8dc7;\nconst GL_UNSIGNED_INT_VEC4 = 0x8dc8;\n\nconst GL_BOOL = 0x8b56;\nconst GL_BOOL_VEC2 = 0x8b57;\nconst GL_BOOL_VEC3 = 0x8b58;\nconst GL_BOOL_VEC4 = 0x8b59;\n\nconst GL_FLOAT_MAT2 = 0x8b5a;\nconst GL_FLOAT_MAT3 = 0x8b5b;\nconst GL_FLOAT_MAT4 = 0x8b5c;\n\nconst GL_FLOAT_MAT2x3 = 0x8b65;\nconst GL_FLOAT_MAT2x4 = 0x8b66;\nconst GL_FLOAT_MAT3x2 = 0x8b67;\nconst GL_FLOAT_MAT3x4 = 0x8b68;\nconst GL_FLOAT_MAT4x2 = 0x8b69;\nconst GL_FLOAT_MAT4x3 = 0x8b6a;\n\n// Composite types table\nconst COMPOSITE_GL_TYPES = {\n  [GL_FLOAT]: [GL_FLOAT, 1, 'float'],\n  [GL_FLOAT_VEC2]: [GL_FLOAT, 2, 'vec2'],\n  [GL_FLOAT_VEC3]: [GL_FLOAT, 3, 'vec3'],\n  [GL_FLOAT_VEC4]: [GL_FLOAT, 4, 'vec4'],\n\n  [GL_INT]: [GL_INT, 1, 'int'],\n  [GL_INT_VEC2]: [GL_INT, 2, 'ivec2'],\n  [GL_INT_VEC3]: [GL_INT, 3, 'ivec3'],\n  [GL_INT_VEC4]: [GL_INT, 4, 'ivec4'],\n\n  [GL_UNSIGNED_INT]: [GL_UNSIGNED_INT, 1, 'uint'],\n  [GL_UNSIGNED_INT_VEC2]: [GL_UNSIGNED_INT, 2, 'uvec2'],\n  [GL_UNSIGNED_INT_VEC3]: [GL_UNSIGNED_INT, 3, 'uvec3'],\n  [GL_UNSIGNED_INT_VEC4]: [GL_UNSIGNED_INT, 4, 'uvec4'],\n\n  [GL_BOOL]: [GL_FLOAT, 1, 'bool'],\n  [GL_BOOL_VEC2]: [GL_FLOAT, 2, 'bvec2'],\n  [GL_BOOL_VEC3]: [GL_FLOAT, 3, 'bvec3'],\n  [GL_BOOL_VEC4]: [GL_FLOAT, 4, 'bvec4'],\n\n  [GL_FLOAT_MAT2]: [GL_FLOAT, 8, 'mat2'], // 4\n  [GL_FLOAT_MAT2x3]: [GL_FLOAT, 8, 'mat2x3'], // 6\n  [GL_FLOAT_MAT2x4]: [GL_FLOAT, 8, 'mat2x4'], // 8\n\n  [GL_FLOAT_MAT3]: [GL_FLOAT, 12, 'mat3'], // 9\n  [GL_FLOAT_MAT3x2]: [GL_FLOAT, 12, 'mat3x2'], // 6\n  [GL_FLOAT_MAT3x4]: [GL_FLOAT, 12, 'mat3x4'], // 12\n\n  [GL_FLOAT_MAT4]: [GL_FLOAT, 16, 'mat4'], // 16\n  [GL_FLOAT_MAT4x2]: [GL_FLOAT, 16, 'mat4x2'], // 8\n  [GL_FLOAT_MAT4x3]: [GL_FLOAT, 16, 'mat4x3'] // 12\n};\n\n// Counts the number of complete primitives given a number of vertices and a drawMode\nexport function getPrimitiveDrawMode(drawMode) {\n  switch (drawMode) {\n    case GL_POINTS:\n      return GL_POINTS;\n    case GL_LINES:\n      return GL_LINES;\n    case GL_LINE_STRIP:\n      return GL_LINES;\n    case GL_LINE_LOOP:\n      return GL_LINES;\n    case GL_TRIANGLES:\n      return GL_TRIANGLES;\n    case GL_TRIANGLE_STRIP:\n      return GL_TRIANGLES;\n    case GL_TRIANGLE_FAN:\n      return GL_TRIANGLES;\n    default:\n      assert(false);\n      return 0;\n  }\n}\n\n// Counts the number of complete \"primitives\" given a number of vertices and a drawMode\nexport function getPrimitiveCount({drawMode, vertexCount}) {\n  switch (drawMode) {\n    case GL_POINTS:\n    case GL_LINE_LOOP:\n      return vertexCount;\n    case GL_LINES:\n      return vertexCount / 2;\n    case GL_LINE_STRIP:\n      return vertexCount - 1;\n    case GL_TRIANGLES:\n      return vertexCount / 3;\n    case GL_TRIANGLE_STRIP:\n    case GL_TRIANGLE_FAN:\n      return vertexCount - 2;\n    default:\n      assert(false);\n      return 0;\n  }\n}\n\n// Counts the number of vertices after splitting the vertex stream into separate \"primitives\"\nexport function getVertexCount({drawMode, vertexCount}) {\n  const primitiveCount = getPrimitiveCount({drawMode, vertexCount});\n  switch (getPrimitiveDrawMode(drawMode)) {\n    case GL_POINTS:\n      return primitiveCount;\n    case GL_LINES:\n      return primitiveCount * 2;\n    case GL_TRIANGLES:\n      return primitiveCount * 3;\n    default:\n      assert(false);\n      return 0;\n  }\n}\n\n// Decomposes a composite type GL.VEC3 into a basic type (GL.FLOAT) and components (3)\nexport function decomposeCompositeGLType(compositeGLType) {\n  const typeAndSize = COMPOSITE_GL_TYPES[compositeGLType];\n  if (!typeAndSize) {\n    return null;\n  }\n  const [type, components] = typeAndSize;\n  return {type, components};\n}\n\nexport function getCompositeGLType(type, components) {\n  switch (type) {\n    case GL_BYTE:\n    case GL_UNSIGNED_BYTE:\n    case GL_SHORT:\n    case GL_UNSIGNED_SHORT:\n      type = GL_FLOAT;\n      break;\n    default:\n  }\n\n  for (const glType in COMPOSITE_GL_TYPES) {\n    const [compType, compComponents, name] = COMPOSITE_GL_TYPES[glType];\n    if (compType === type && compComponents === components) {\n      return {glType, name};\n    }\n  }\n  return null;\n}\n","import GL from '@luma.gl/constants';\n\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {\n  TEXTURE_FORMATS,\n  DATA_FORMAT_CHANNELS,\n  TYPE_SIZES,\n  isFormatSupported,\n  isLinearFilteringSupported\n} from './texture-formats';\n\nimport {withParameters} from '../context';\nimport {isWebGL2, assertWebGL2Context, WebGLBuffer} from '../webgl-utils';\nimport {log, uid, isPowerOfTwo, assert} from '../utils';\n\n// Supported min filters for NPOT texture.\nconst NPOT_MIN_FILTERS = [GL.LINEAR, GL.NEAREST];\n\nexport default class Texture extends Resource {\n  static isSupported(gl, {format, linearFiltering} = {}) {\n    let supported = true;\n    if (format) {\n      supported = supported && isFormatSupported(gl, format);\n      supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));\n    }\n    return supported;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n  constructor(gl, props) {\n    const {\n      id = uid('texture'),\n      handle,\n      target\n      // , magFilter, minFilter, wrapS, wrapT\n    } = props;\n\n    super(gl, {id, handle});\n\n    this.target = target;\n    this.textureUnit = undefined;\n\n    // Program.draw() checks the loaded flag of all textures to avoid\n    // Textures that are still loading from promises\n    // Set to true as soon as texture has been initialized with valid data\n    this.loaded = false;\n\n    this.width = undefined;\n    this.height = undefined;\n    this.depth = undefined;\n    this.format = undefined;\n    this.type = undefined;\n    this.dataFormat = undefined;\n    this.border = undefined;\n    this.textureUnit = undefined;\n    this.mipmaps = undefined;\n  }\n\n  toString() {\n    return `Texture(${this.id},${this.width}x${this.height})`;\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(props = {}) {\n    let data = props.data;\n\n    if (data instanceof Promise) {\n      data.then(resolvedImageData =>\n        this.initialize(\n          Object.assign({}, props, {\n            pixels: resolvedImageData,\n            data: resolvedImageData\n          })\n        )\n      );\n      return this;\n    }\n\n    const {\n      pixels = null,\n      format = GL.RGBA,\n      border = 0,\n      recreate = false,\n      parameters = {},\n      pixelStore = {},\n      textureUnit = undefined,\n      // Deprecated parameters\n      unpackFlipY = true\n    } = props;\n\n    let {mipmaps = true} = props;\n\n    // pixels variable is for API compatibility purpose\n    if (!data) {\n      // TODO - This looks backwards? Commenting out for now until we decide\n      // which prop to use\n      // log.deprecated('data', 'pixels')();\n      data = pixels;\n    }\n\n    let {width, height, dataFormat, type} = props;\n    const {depth = 0} = props;\n\n    // Deduce width and height\n    ({width, height, dataFormat, type} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed: false,\n      data,\n      width,\n      height\n    }));\n\n    // Store opts for accessors\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.format = format;\n    this.type = type;\n    this.dataFormat = dataFormat;\n    this.border = border;\n    this.textureUnit = textureUnit;\n\n    if (Number.isFinite(this.textureUnit)) {\n      this.gl.activeTexture(GL.TEXTURE0 + this.textureUnit);\n      this.gl.bindTexture(this.target, this.handle);\n    }\n\n    // Note: luma.gl defaults to GL.UNPACK_FLIP_Y_WEBGL = true;\n    // TODO - compare v4 and v3\n    const DEFAULT_TEXTURE_SETTINGS = {\n      // Pixel store\n      [GL.UNPACK_FLIP_Y_WEBGL]: unpackFlipY\n    };\n    const glSettings = Object.assign({}, DEFAULT_TEXTURE_SETTINGS, pixelStore);\n\n    if (mipmaps && this._isNPOT()) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      mipmaps = false;\n\n      this._updateForNPOT(parameters);\n    }\n\n    this.mipmaps = mipmaps;\n\n    this.setImageData({\n      data,\n      width,\n      height,\n      depth,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps,\n      parameters: glSettings\n    });\n\n    if (mipmaps) {\n      this.generateMipmap();\n    }\n\n    // Set texture sampler parameters\n    this.setParameters(parameters);\n\n    // TODO - Store data to enable auto recreate on context loss\n    if (recreate) {\n      this.data = data;\n    }\n\n    return this;\n  }\n\n  // If size has changed, reinitializes with current format\n  // note clears image and mipmaps\n  resize({height, width, mipmaps = false}) {\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({\n        width,\n        height,\n        format: this.format,\n        type: this.type,\n        dataFormat: this.dataFormat,\n        border: this.border,\n        mipmaps\n      });\n    }\n    return this;\n  }\n\n  // Call to regenerate mipmaps after modifying texture(s)\n  generateMipmap(params = {}) {\n    if (this._isNPOT()) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      return this;\n    }\n\n    this.mipmaps = true;\n\n    this.gl.bindTexture(this.target, this.handle);\n    withParameters(this.gl, params, () => {\n      this.gl.generateMipmap(this.target);\n    });\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  /*\n   * Allocates storage\n   * @param {*} pixels -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} width -\n   * @param {GLint} height -\n   * @param {GLint} mipMapLevel -\n   * @param {GLenum} format - format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  /* eslint-disable max-len, max-statements, complexity */\n  setImageData(options) {\n    this._trackDeallocatedMemory('Texture');\n\n    const {\n      target = this.target,\n      pixels = null,\n      level = 0,\n      format = this.format,\n      border = this.border,\n      offset = 0,\n      parameters = {}\n    } = options;\n\n    let {\n      data = null,\n      type = this.type,\n      width = this.width,\n      height = this.height,\n      dataFormat = this.dataFormat,\n      compressed = false\n    } = options;\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    const {gl} = this;\n    gl.bindTexture(this.target, this.handle);\n\n    let dataType = null;\n    ({data, dataType} = this._getDataType({data, compressed}));\n\n    withParameters(this.gl, parameters, () => {\n      switch (dataType) {\n        case 'null':\n          gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          break;\n        case 'typed-array':\n          // Looks like this assert is not necessary, as offset is ignored under WebGL1\n          // assert((offset === 0 || isWebGL2(gl)), 'offset supported in WebGL2 only');\n          gl.texImage2D(\n            target,\n            level,\n            format,\n            width,\n            height,\n            border,\n            dataFormat,\n            type,\n            data,\n            offset\n          );\n          break;\n        case 'buffer':\n          // WebGL2 enables creating textures directly from a WebGL buffer\n          assertWebGL2Context(gl);\n          gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle || data);\n          gl.texImage2D(target, level, format, width, height, border, dataFormat, type, offset);\n          gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n          break;\n        case 'browser-object':\n          if (isWebGL2(gl)) {\n            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          } else {\n            gl.texImage2D(target, level, format, dataFormat, type, data);\n          }\n          break;\n        case 'compressed':\n          gl.compressedTexImage2D(target, level, format, width, height, border, data);\n          break;\n        default:\n          assert(false, 'Unknown image data type');\n      }\n    });\n\n    if (data && data.byteLength) {\n      this._trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      // NOTE(Tarek): Default to RGBA bytes\n      const channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n      const channelSize = TYPE_SIZES[this.type] || 1;\n\n      this._trackAllocatedMemory(this.width * this.height * channels * channelSize, 'Texture');\n    }\n\n    this.loaded = true;\n\n    return this;\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Redefines an area of an existing texture\n   * Note: does not allocate storage\n   */\n  /*\n   * Redefines an area of an existing texture\n   * @param {*} pixels, data -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} x - xOffset from where texture to be updated\n   * @param {GLint} y - yOffset from where texture to be updated\n   * @param {GLint} width - width of the sub image to be updated\n   * @param {GLint} height - height of the sub image to be updated\n   * @param {GLint} level - mip level to be updated\n   * @param {GLenum} format - internal format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer or ArrayBufferView\n   * @param {GLenum} dataFormat - format of image data.\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  setSubImageData({\n    target = this.target,\n    pixels = null,\n    data = null,\n    x = 0,\n    y = 0,\n    width = this.width,\n    height = this.height,\n    level = 0,\n    format = this.format,\n    type = this.type,\n    dataFormat = this.dataFormat,\n    compressed = false,\n    offset = 0,\n    border = this.border,\n    parameters = {}\n  }) {\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    assert(this.depth === 0, 'texSubImage not supported for 3D textures');\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    // Support ndarrays\n    if (data && data.data) {\n      const ndarray = data;\n      data = ndarray.data;\n      width = ndarray.shape[0];\n      height = ndarray.shape[1];\n    }\n\n    // Support buffers\n    if (data instanceof Buffer) {\n      data = data.handle;\n    }\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withParameters(this.gl, parameters, () => {\n      // TODO - x,y parameters\n      if (compressed) {\n        this.gl.compressedTexSubImage2D(target, level, x, y, width, height, format, data);\n      } else if (data === null) {\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, null);\n      } else if (ArrayBuffer.isView(data)) {\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data, offset);\n      } else if (data instanceof WebGLBuffer) {\n        // WebGL2 allows us to create texture directly from a WebGL buffer\n        assertWebGL2Context(this.gl);\n        // This texImage2D signature uses currently bound GL.PIXEL_UNPACK_BUFFER\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data);\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, offset);\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n      } else if (isWebGL2(this.gl)) {\n        // Assume data is a browser supported object (ImageData, Canvas, ...)\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data);\n      } else {\n        this.gl.texSubImage2D(target, level, x, y, dataFormat, type, data);\n      }\n    });\n\n    this.gl.bindTexture(this.target, null);\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Defines a two-dimensional texture image or cube-map texture image with\n   * pixels from the current framebuffer (rather than from client memory).\n   * (gl.copyTexImage2D wrapper)\n   *\n   * Note that binding a texture into a Framebuffer's color buffer and\n   * rendering can be faster.\n   */\n  copyFramebuffer(opts = {}) {\n    log.error(\n      'Texture.copyFramebuffer({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  getActiveUnit() {\n    return this.gl.getParameter(GL.ACTIVE_TEXTURE) - GL.TEXTURE0;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n\n  bind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, this.handle);\n    return textureUnit;\n  }\n\n  unbind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, null);\n    return textureUnit;\n  }\n\n  // PRIVATE METHODS\n\n  _getDataType({data, compressed = false}) {\n    if (compressed) {\n      return {data, dataType: 'compressed'};\n    }\n    if (data === null) {\n      return {data, dataType: 'null'};\n    }\n    if (ArrayBuffer.isView(data)) {\n      return {data, dataType: 'typed-array'};\n    }\n    if (data instanceof Buffer) {\n      return {data: data.handle, dataType: 'buffer'};\n    }\n    if (data instanceof WebGLBuffer) {\n      return {data, dataType: 'buffer'};\n    }\n    // Assume data is a browser supported object (ImageData, Canvas, ...)\n    return {data, dataType: 'browser-object'};\n  }\n\n  /* Copied from texture-2d.js\n  // WebGL2\n  setPixels(opts = {}) {\n    const {\n      buffer,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n\n    // This signature of texImage2D uses currently bound GL.PIXEL_UNPACK_BUFFER\n    gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, buffer.target);\n    // And as always, we must also bind the texture itself\n    this.bind();\n\n    gl.texImage2D(gl.TEXTURE_2D,\n      mipmapLevel, format, width, height, border, format, type, buffer.target);\n\n    this.unbind();\n    gl.bindBuffer(GL.GL.PIXEL_UNPACK_BUFFER, null);\n    return this;\n  }\n\n  setImageDataFromCompressedBuffer(opts) {\n    const {\n      buffer,\n      // offset = 0,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      internalFormat = GL.RGBA,\n      // format = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n    gl.compressedTexImage2D(this.target,\n      mipmapLevel, internalFormat, width, height, border, buffer);\n    // gl.compressedTexSubImage2D(target,\n    //   level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);\n    return this;\n  }\n\n  copySubImage(opts) {\n    const {\n      // pixels,\n      // offset = 0,\n      // x,\n      // y,\n      // width,\n      // height,\n      // mipmapLevel = 0,\n      // internalFormat = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      // border = 0\n    } = opts;\n\n    // if (pixels instanceof ArrayBufferView) {\n    //   gl.texSubImage2D(target, level, x, y, width, height, format, type, pixels);\n    // }\n    // gl.texSubImage2D(target, level, x, y, format, type, ? pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLImageElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLCanvasElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLVideoElement pixels);\n    // // Additional signature in a WebGL 2 context:\n    // gl.texSubImage2D(target, level, x, y, format, type, GLintptr offset);\n  }\n  */\n\n  // HELPER METHODS\n\n  _deduceParameters(opts) {\n    const {format, data} = opts;\n    let {width, height, dataFormat, type, compressed} = opts;\n\n    // Deduce format and type from format\n    const textureFormat = TEXTURE_FORMATS[format];\n    dataFormat = dataFormat || (textureFormat && textureFormat.dataFormat);\n    type = type || (textureFormat && textureFormat.types[0]);\n\n    // Deduce compression from format\n    compressed = compressed || (textureFormat && textureFormat.compressed);\n\n    ({width, height} = this._deduceImageSize(data, width, height));\n\n    return {dataFormat, type, compressed, width, height, format, data};\n  }\n\n  /* global ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement, ImageBitmap */\n  // eslint-disable-next-line complexity\n  _deduceImageSize(data, width, height) {\n    let size;\n\n    if (typeof ImageData !== 'undefined' && data instanceof ImageData) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\n      size = {width: data.naturalWidth, height: data.naturalHeight};\n    } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\n      size = {width: data.videoWidth, height: data.videoHeight};\n    } else if (!data) {\n      size = {width: width >= 0 ? width : 1, height: height >= 0 ? height : 1};\n    } else {\n      size = {width, height};\n    }\n\n    assert(size, 'Could not deduced texture size');\n    assert(\n      width === undefined || size.width === width,\n      'Deduced texture width does not match supplied width'\n    );\n    assert(\n      height === undefined || size.height === height,\n      'Deduced texture height does not match supplied height'\n    );\n\n    return size;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createTexture();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTexture(this.handle);\n    this._trackDeallocatedMemory('Texture');\n  }\n\n  _getParameter(pname) {\n    switch (pname) {\n      case GL.TEXTURE_WIDTH:\n        return this.width;\n      case GL.TEXTURE_HEIGHT:\n        return this.height;\n      default:\n        this.gl.bindTexture(this.target, this.handle);\n        const value = this.gl.getTexParameter(this.target, pname);\n        this.gl.bindTexture(this.target, null);\n        return value;\n    }\n  }\n\n  _setParameter(pname, param) {\n    this.gl.bindTexture(this.target, this.handle);\n\n    // NOTE: Apply NPOT workaround\n    param = this._getNPOTParam(pname, param);\n\n    // Apparently there are some integer/float conversion rules that made\n    // the WebGL committe expose two parameter setting functions in JavaScript.\n    // For now, pick the float version for parameters specified as GLfloat.\n    switch (pname) {\n      case GL.TEXTURE_MIN_LOD:\n      case GL.TEXTURE_MAX_LOD:\n        this.gl.texParameterf(this.handle, pname, param);\n        break;\n\n      case GL.TEXTURE_WIDTH:\n      case GL.TEXTURE_HEIGHT:\n        assert(false);\n        break;\n\n      default:\n        this.gl.texParameteri(this.target, pname, param);\n        break;\n    }\n\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  _isNPOT() {\n    if (isWebGL2(this.gl)) {\n      // NPOT restriction is only for WebGL1\n      return false;\n    }\n    // Width and height not available, consider it is not NPOT texture\n    if (!this.width || !this.height) {\n      return false;\n    }\n    return !isPowerOfTwo(this.width) || !isPowerOfTwo(this.height);\n  }\n\n  // Update default settings which are not supported by NPOT textures.\n  _updateForNPOT(parameters) {\n    if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n      parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_S to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_T to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;\n    }\n  }\n\n  _getNPOTParam(pname, param) {\n    if (this._isNPOT()) {\n      switch (pname) {\n        case GL.TEXTURE_MIN_FILTER:\n          if (NPOT_MIN_FILTERS.indexOf(param) === -1) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n            param = GL.LINEAR;\n          }\n          break;\n        case GL.TEXTURE_WRAP_S:\n        case GL.TEXTURE_WRAP_T:\n          if (param !== GL.CLAMP_TO_EDGE) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, ${getKey(this.gl, pname)} to CLAMP_TO_EDGE`)();\n            param = GL.CLAMP_TO_EDGE;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    return param;\n  }\n}\n","export const VERTEX_SHADER = 'vs';\nexport const FRAGMENT_SHADER = 'fs';\n","import Geometry from '../geometry/geometry';\nimport {uid} from '../utils';\n\n// prettier-ignore\nconst CUBE_INDICES = new Uint16Array([\n  0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13,\n  14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23\n]);\n\n// prettier-ignore\nconst CUBE_POSITIONS = new Float32Array([\n  -1,  -1,  1, 1,  -1,  1,  1,  1,  1,  -1,  1,  1,\n  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1,  -1,\n  -1,  1,  -1,  -1,  1,  1,  1,  1,  1,  1,  1,  -1,\n  -1,  -1,  -1,  1,  -1,  -1,  1,  -1,  1,  -1,  -1,  1,\n  1,  -1,  -1,  1,  1,  -1,  1,  1,  1,  1,  -1,  1,\n  -1,  -1,  -1,  -1,  -1,  1,  -1,  1,  1,  -1,  1,  -1\n]);\n\n// TODO - could be Uint8\n// prettier-ignore\nconst CUBE_NORMALS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,\n  // Back face\n  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,\n  // Top face\n  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,\n  // Bottom face\n  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,\n  // Right face\n  1,  0,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,\n  // Left face\n  -1,  0,  0,  -1,  0,  0,  -1,  0,  0,  -1,  0,  0\n]);\n\n// prettier-ignore\nconst CUBE_TEX_COORDS = new Float32Array([\n  // Front face\n  0,  0,  1,  0,  1,  1,  0,  1,\n  // Back face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Top face\n  0,  1,  0,  0,  1,  0,  1,  1,\n  // Bottom face\n  1,  1,  0,  1,  0,  0,  1,  0,\n  // Right face\n  1,  0,  1,  1,  0,  1,  0,  0,\n  // Left face\n  0,  0,  1,  0,  1,  1,  0,  1\n]);\n\nconst ATTRIBUTES = {\n  POSITION: {size: 3, value: new Float32Array(CUBE_POSITIONS)},\n  NORMAL: {size: 3, value: new Float32Array(CUBE_NORMALS)},\n  TEXCOORD_0: {size: 2, value: new Float32Array(CUBE_TEX_COORDS)}\n};\n\nexport default class CubeGeometry extends Geometry {\n  constructor(props = {}) {\n    const {id = uid('cube-geometry')} = props;\n    super({\n      ...props,\n      id,\n      indices: {size: 1, value: new Uint16Array(CUBE_INDICES)},\n      attributes: {...ATTRIBUTES, ...props.attributes}\n    });\n  }\n}\n","// shadertools exports\n\n// DEFAULT SHADERS\n// A set of base shaders that leverage the shader module system,\n// dynamically enabling features depending on which modules are included\nimport MODULAR_VS from './shaders/modular-vertex.glsl';\nimport MODULAR_FS from './shaders/modular-fragment.glsl';\n\n// DOCUMENTED APIS\nexport {\n  registerShaderModules,\n  setDefaultShaderModules,\n  getDefaultShaderModules\n} from './lib/resolve-modules';\nexport {assembleShaders, createShaderHook, createModuleInjection} from './lib/assemble-shaders';\n\n// HELPERS\nexport {combineInjects} from './lib/inject-shader';\nexport {normalizeShaderModule} from './lib/shader-module';\n\n// UTILS\nexport {\n  getQualifierDetails,\n  getPassthroughFS,\n  typeToChannelSuffix,\n  typeToChannelCount,\n  convertToVec4\n} from './utils/shader-utils';\n\n// SHADER MODULES\nexport * from './modules';\n\nexport const MODULAR_SHADERS = {\n  vs: MODULAR_VS,\n  fs: MODULAR_FS,\n  uniforms: {}\n};\n","export default `\\\n#define SHADER_NAME luma_modular_vertex\n\n// object attributes\nattribute vec3 positions;\nattribute vec3 normals;\nattribute vec4 colors;\nattribute vec2 texCoords;\nattribute vec3 pickingColors;\n\nvoid main(void) {\n\n  // Set up position\n#ifdef MODULE_GEOMETRY\n  geometry_setPosition(positions);\n  geometry_setNormal(normals);\n#endif\n\n#ifdef MODULE_PROJECT\n  project_setPositionAndNormal_Model(positions, normals);\n  gl_Position = project_model_to_clipspace(positions);\n#endif\n\n  // Set up depth\n#ifdef MODULE_LOGDEPTH\n  logdepth_adjustPosition(gl_Position);\n#endif\n\n#ifdef MODULE_DIFFUSE\n  diffuse_setTextureCoordinate(texCoords);\n#endif\n\n  // Set up color calculations\n#ifdef MODULE_MATERIAL\n  material_setDiffuseColor(colors);\n  material_setDiffuseTextureCoordinates(texCoords);\n#endif\n\n#ifdef MODULE_LIGHTING\n  lighting_setPositionAndNormal(positions, normals);\n  lighting_apply_light(positions);\n  lighting_apply_reflection(positions);\n#endif\n\n#ifdef MODULE_PICKING\n  picking_setPickingColor(pickingColors);\n#endif\n\n}\n`;\n","export default `\\\n#define SHADER_NAME luma-modular-fragment\n\nprecision highp float;\n\n// varyings\nvarying vec4 vColor;\n\nvoid main(){\n  gl_FragColor = vec4(1., 0., 1., 1.);\n\n#ifdef MODULE_DIFFUSE\n  gl_FragColor = diffuse_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_MATERIAL\n  gl_FragColor = material_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LIGHTING\n  gl_FragColor = lighting_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_FOG\n  gl_FragColor = fog_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_PICKING\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LOGDEPTH\n  logdepth_setFragDepth(gl_Position);\n#endif\n}\n`;\n","// WebGL1/WebGL2 extension polyfill support\n//\n// Provides a function that creates polyfills for WebGL2 functions based\n// on available extensions and installs them on a supplied target (could be\n// the WebGLContext or its prototype, or a separate object).\n//\n// This is intended to be a stand-alone file with minimal dependencies,\n// easy to reuse or repurpose in other projects.\n\n/* eslint-disable camelcase, brace-style */\nimport assert from './assert';\n\nimport {WEBGL2_CONTEXT_POLYFILLS, WEBGL2_CONTEXT_OVERRIDES} from './polyfill-table';\n\n// Registers extensions, polyfills or mock functions for extensions in the polyfills list\n// TODO - remove use of name `luma`.\nexport default function polyfillContext(gl) {\n  gl.luma = gl.luma || {};\n  initializeExtensions(gl);\n  if (!gl.luma.polyfilled) {\n    installPolyfills(gl, WEBGL2_CONTEXT_POLYFILLS);\n    installOverrides(gl, {target: gl.luma, target2: gl});\n    gl.luma.polyfilled = true;\n  }\n  return gl;\n}\n\n// TODO - is this still required?\n/* global window, global */\nconst global_ = typeof global !== 'undefined' ? global : window;\nglobal_.polyfillContext = polyfillContext;\n\nfunction initializeExtensions(gl) {\n  gl.luma.extensions = {};\n  // `getSupportedExtensions` can return null when context is lost.\n  const EXTENSIONS = gl.getSupportedExtensions() || [];\n  for (const extension of EXTENSIONS) {\n    gl.luma[extension] = gl.getExtension(extension);\n  }\n}\n\n// Install simple overrides (mostly get* functions)\nfunction installOverrides(gl, {target, target2}) {\n  Object.keys(WEBGL2_CONTEXT_OVERRIDES).forEach(key => {\n    if (typeof WEBGL2_CONTEXT_OVERRIDES[key] === 'function') {\n      // install an override, if no implementation was detected\n      const originalFunc = gl[key] ? gl[key].bind(gl) : () => {};\n      const polyfill = WEBGL2_CONTEXT_OVERRIDES[key].bind(null, gl, originalFunc);\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  });\n}\n\nfunction installPolyfills(gl, polyfills) {\n  for (const extension of Object.getOwnPropertyNames(polyfills)) {\n    if (extension !== 'overrides') {\n      polyfillExtension(gl, {extension, target: gl.luma, target2: gl});\n    }\n  }\n}\n\n// Polyfills a single WebGL extension into the `target` object\nfunction polyfillExtension(gl, {extension, target, target2}) {\n  const defaults = WEBGL2_CONTEXT_POLYFILLS[extension];\n  assert(defaults);\n\n  const {meta = {}} = defaults;\n  const {suffix = ''} = meta;\n\n  const ext = gl.getExtension(extension);\n\n  for (const key of Object.keys(defaults)) {\n    const extKey = `${key}${suffix}`;\n\n    let polyfill = null;\n    if (key === 'meta') {\n      // ignore\n    } else if (typeof gl[key] === 'function') {\n      // WebGL2 implementation is already\n    } else if (ext && typeof ext[extKey] === 'function') {\n      // pick extension implemenentation,if available\n      polyfill = (...args) => ext[extKey](...args);\n    } else if (typeof defaults[key] === 'function') {\n      // pick the mock implementation, if no implementation was detected\n      polyfill = defaults[key].bind(target);\n    }\n\n    if (polyfill) {\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  }\n}\n","/* eslint-disable no-restricted-globals */\n/* global self, window, global, document */\n/* eslint-disable no-restricted-globals */\nconst globals = {\n  self: typeof self !== 'undefined' && self,\n  window: typeof window !== 'undefined' && window,\n  global: typeof global !== 'undefined' && global,\n  document: typeof document !== 'undefined' && document\n};\n\nconst self_ = globals.self || globals.window || globals.global;\nconst window_ = globals.window || globals.self || globals.global;\nconst global_ = globals.global || globals.self || globals.window;\nconst document_ = globals.document || {};\n\nexport {self_ as self, window_ as window, global_ as global, document_ as document};\n","import GL from '@luma.gl/constants';\n\nimport Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport {clear, clearBuffer} from './clear';\nimport {copyToDataUrl} from './copy-and-blit.js';\n\nimport {getFeatures} from '../features';\n\nimport {isWebGL2, assertWebGL2Context, getKey} from '../webgl-utils';\n\nimport {log, assert} from '../utils';\n\nconst ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\n\nexport default class Framebuffer extends Resource {\n  static isSupported(\n    gl,\n    {\n      colorBufferFloat, // Whether floating point textures can be rendered and read\n      colorBufferHalfFloat // Whether half float textures can be rendered and read\n    } = {}\n  ) {\n    let supported = true;\n    supported =\n      colorBufferFloat &&\n      gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'WEBGL.color_buffer_float');\n    supported =\n      colorBufferHalfFloat &&\n      gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'EXT_color_buffer_half_float');\n    return supported;\n  }\n\n  // Create a Framebuffer wrapper for the default framebuffer (target === null)\n  static getDefaultFramebuffer(gl) {\n    gl.luma = gl.luma || {};\n    gl.luma.defaultFramebuffer =\n      gl.luma.defaultFramebuffer ||\n      new Framebuffer(gl, {\n        id: 'default-framebuffer',\n        handle: null,\n        attachments: {}\n      });\n    // TODO - can we query for and get a handle to the GL.FRONT renderbuffer?\n    return gl.luma.defaultFramebuffer;\n  }\n\n  get MAX_COLOR_ATTACHMENTS() {\n    return this.gl.getParameter(this.gl.MAX_COLOR_ATTACHMENTS);\n  }\n\n  get MAX_DRAW_BUFFERS() {\n    return this.gl.getParameter(this.gl.MAX_DRAW_BUFFERS);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // Public members\n    this.width = null;\n    this.height = null;\n    this.attachments = {};\n    this.readBuffer = GL.COLOR_ATTACHMENT0;\n    this.drawBuffers = [GL.COLOR_ATTACHMENT0];\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  get color() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get texture() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get depth() {\n    return (\n      this.attachments[GL.DEPTH_ATTACHMENT] || this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] || null\n    );\n  }\n\n  get stencil() {\n    return (\n      this.attachments[GL.STENCIL_ATTACHMENT] ||\n      this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] ||\n      null\n    );\n  }\n\n  initialize({\n    width = 1,\n    height = 1,\n    attachments = null,\n    color = true,\n    depth = true,\n    stencil = false,\n    check = true,\n    readBuffer,\n    drawBuffers\n  }) {\n    assert(width >= 0 && height >= 0, 'Width and height need to be integers');\n\n    // Store actual width and height for diffing\n    this.width = width;\n    this.height = height;\n\n    // Resize any provided attachments - note that resize only resizes if needed\n    // Note: A framebuffer has no separate size, it is defined by its attachments (which must agree)\n    if (attachments) {\n      for (const attachment in attachments) {\n        const target = attachments[attachment];\n        const object = Array.isArray(target) ? target[0] : target;\n        object.resize({width, height});\n      }\n    } else {\n      // Create any requested default attachments\n      attachments = this._createDefaultAttachments(color, depth, stencil, width, height);\n    }\n\n    this.update({clearAttachments: true, attachments, readBuffer, drawBuffers});\n\n    // Checks that framebuffer was properly set up, if not, throws an explanatory error\n    if (attachments && check) {\n      this.checkStatus();\n    }\n  }\n\n  update({\n    attachments = {},\n    readBuffer,\n    drawBuffers,\n    clearAttachments = false,\n    resizeAttachments = true\n  }) {\n    this.attach(attachments, {clearAttachments, resizeAttachments});\n\n    const {gl} = this;\n    // Multiple render target support, set read buffer and draw buffers\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    if (readBuffer) {\n      this._setReadBuffer(readBuffer);\n    }\n    if (drawBuffers) {\n      this._setDrawBuffers(drawBuffers);\n    }\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // Attachment resize is expected to be a noop if size is same\n  resize({width, height} = {}) {\n    // for default framebuffer, just update the stored size\n    if (this.handle === null) {\n      assert(width === undefined && height === undefined);\n      this.width = this.gl.drawingBufferWidth;\n      this.height = this.gl.drawingBufferHeight;\n      return this;\n    }\n\n    if (width === undefined) {\n      width = this.gl.drawingBufferWidth;\n    }\n    if (height === undefined) {\n      height = this.gl.drawingBufferHeight;\n    }\n\n    if (width !== this.width && height !== this.height) {\n      log.log(2, `Resizing framebuffer ${this.id} to ${width}x${height}`)();\n    }\n    for (const attachmentPoint in this.attachments) {\n      this.attachments[attachmentPoint].resize({width, height});\n    }\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  // Attach from a map of attachments\n  attach(attachments, {clearAttachments = false, resizeAttachments = true} = {}) {\n    const newAttachments = {};\n\n    // Any current attachments need to be removed, add null values to map\n    if (clearAttachments) {\n      Object.keys(this.attachments).forEach(key => {\n        newAttachments[key] = null;\n      });\n    }\n\n    // Overlay the new attachments\n    Object.assign(newAttachments, attachments);\n\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    // Walk the attachments\n    for (const key in newAttachments) {\n      // Ensure key is not undefined\n      assert(key !== undefined, 'Misspelled framebuffer binding point?');\n\n      const attachment = Number(key);\n\n      const descriptor = newAttachments[attachment];\n      let object = descriptor;\n      if (!object) {\n        this._unattach(attachment);\n      } else if (object instanceof Renderbuffer) {\n        this._attachRenderbuffer({attachment, renderbuffer: object});\n      } else if (Array.isArray(descriptor)) {\n        const [texture, layer = 0, level = 0] = descriptor;\n        object = texture;\n        this._attachTexture({attachment, texture, layer, level});\n      } else {\n        this._attachTexture({attachment, texture: object, layer: 0, level: 0});\n      }\n\n      // Resize objects\n      if (resizeAttachments && object) {\n        object.resize({width: this.width, height: this.height});\n      }\n    }\n\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    // Assign to attachments and remove any nulls to get a clean attachment map\n    Object.assign(this.attachments, attachments);\n    Object.keys(this.attachments)\n      .filter(key => !this.attachments[key])\n      .forEach(key => {\n        delete this.attachments[key];\n      });\n  }\n\n  checkStatus() {\n    const {gl} = this;\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    const status = gl.checkFramebufferStatus(GL.FRAMEBUFFER);\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n      throw new Error(_getFrameBufferStatus(status));\n    }\n    return this;\n  }\n\n  clear({color, depth, stencil, drawBuffers = []} = {}) {\n    // Bind framebuffer and delegate to global clear functions\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    if (color || depth || stencil) {\n      clear(this.gl, {color, depth, stencil});\n    }\n\n    drawBuffers.forEach((value, drawBuffer) => {\n      clearBuffer({drawBuffer, value});\n    });\n\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // NOTE: Slow requires roundtrip to GPU\n  // App can provide pixelArray or have it auto allocated by this method\n  // @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n  //  newly allocated by this method unless provided by app.\n  readPixels(opts = {}) {\n    log.error(\n      'Framebuffer.readPixels() is no logner supported, use readPixelsToArray(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads data into provided buffer object asynchronously\n  // This function doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n  readPixelsToBuffer(opts = {}) {\n    log.error(\n      'Framebuffer.readPixelsToBuffer()is no logner supported, use readPixelsToBuffer(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels as a dataUrl\n  copyToDataUrl(opts = {}) {\n    log.error(\n      'Framebuffer.copyToDataUrl() is no logner supported, use copyToDataUrl(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels into an HTML Image\n  copyToImage(opts = {}) {\n    log.error('Framebuffer.copyToImage() is no logner supported, use copyToImage(framebuffer)')();\n    return null;\n  }\n\n  // copyToFramebuffer({width, height}) {\n  //   const scaleX = width / this.width;\n  //   const scaleY = height / this.height;\n  //   const scale = Math.min(scaleX, scaleY);\n  //   width = width * scale;\n  //   height = height * scale;\n  //   const scaledFramebuffer = new Framebuffer(this.gl, {width, height});\n  //   this.blit();\n  // }\n\n  // Copy a rectangle from a framebuffer attachment into a texture (at an offset)\n  // NOTE: assumes texture has enough storage allocated\n  // eslint-disable-next-line complexity\n  copyToTexture(opts = {}) {\n    log.error(\n      'Framebuffer.copyToTexture({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  // WEBGL2 INTERFACE\n\n  // Copies a rectangle of pixels between framebuffers\n  // eslint-disable-next-line complexity\n  blit(opts = {}) {\n    log.error('Framebuffer.blit({...}) is no logner supported, use blit(source, target, opts)')();\n    return null;\n  }\n\n  // signals to the GL that it need not preserve all pixels of a specified region of the framebuffer\n  invalidate({attachments = [], x = 0, y = 0, width, height}) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n    const prevHandle = gl.bindFramebuffer(GL.READ_FRAMEBUFFER, this.handle);\n    const invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n    if (invalidateAll) {\n      gl.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments);\n    } else {\n      gl.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments, x, y, width, height);\n    }\n    gl.bindFramebuffer(GL.READ_FRAMEBUFFER, prevHandle);\n    return this;\n  }\n\n  // Return the value for `pname` of the specified attachment.\n  // The type returned is the type of the requested pname\n  getAttachmentParameter(attachment, pname, keys) {\n    let value = this._getAttachmentParameterFallback(pname);\n    if (value === null) {\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n      value = this.gl.getFramebufferAttachmentParameter(GL.FRAMEBUFFER, attachment, pname);\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, null);\n    }\n    if (keys && value > 1000) {\n      value = getKey(this.gl, value);\n    }\n    return value;\n  }\n\n  getAttachmentParameters(\n    attachment = GL.COLOR_ATTACHMENT0,\n    keys,\n    parameters = this.constructor.ATTACHMENT_PARAMETERS || []\n  ) {\n    const values = {};\n    for (const pname of parameters) {\n      const key = keys ? getKey(this.gl, pname) : pname;\n      values[key] = this.getAttachmentParameter(attachment, pname, keys);\n    }\n    return values;\n  }\n\n  getParameters(keys = true) {\n    const attachments = Object.keys(this.attachments);\n    // if (this === this.gl.luma.defaultFramebuffer) {\n    //   attachments = [GL.COLOR_ATTACHMENT0, GL.DEPTH_STENCIL_ATTACHMENT];\n    // }\n    const parameters = {};\n    for (const attachmentName of attachments) {\n      const attachment = Number(attachmentName);\n      const key = keys ? getKey(this.gl, attachment) : attachment;\n      parameters[key] = this.getAttachmentParameters(attachment, keys);\n    }\n    return parameters;\n  }\n\n  // DEBUG\n\n  // Note: Will only work when called in an event handler\n  show() {\n    /* global window */\n    if (typeof window !== 'undefined') {\n      window.open(copyToDataUrl(this), 'luma-debug-texture');\n    }\n    return this;\n  }\n\n  log(priority = 0, message = '') {\n    if (priority > log.priority || typeof window === 'undefined') {\n      return this;\n    }\n    message = message || `Framebuffer ${this.id}`;\n    const image = copyToDataUrl(this, {maxHeight: 100});\n    log.image({priority, message, image}, message)();\n    return this;\n  }\n\n  // WEBGL INTERFACE\n  bind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, this.handle);\n    return this;\n  }\n\n  unbind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _createDefaultAttachments(color, depth, stencil, width, height) {\n    let defaultAttachments = null;\n\n    // Add a color buffer if requested and not supplied\n    if (color) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.COLOR_ATTACHMENT0] = new Texture2D(this.gl, {\n        id: `${this.id}-color0`,\n        pixels: null, // reserves texture memory, but texels are undefined\n        format: GL.RGBA,\n        type: GL.UNSIGNED_BYTE,\n        width,\n        height,\n        // Note: Mipmapping can be disabled by texture resource when we resize the texture\n        // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant\n        // behavior we always disable mipmaps.\n        mipmaps: false,\n        // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.\n        // Use LINEAR so subpixel algos like fxaa work.\n        // Set WRAP modes that support NPOT textures too.\n        parameters: {\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n        }\n      });\n    }\n\n    if (depth && stencil) {\n      // TODO - handle separate stencil\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_STENCIL_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth-stencil`,\n        format: GL.DEPTH24_STENCIL8,\n        width,\n        height: 111\n      });\n      // TODO - optional texture\n      // new Texture2D(this.gl, {\n      //   id: `${this.id}-depth-stencil`,\n      //   format: GL.DEPTH24_STENCIL8,\n      //   dataFormat: GL.DEPTH_STENCIL,\n      //   type: GL.UNSIGNED_INT_24_8,\n      //   width,\n      //   height,\n      //   mipmaps: false\n      // });\n    } else if (depth) {\n      // Add a depth buffer if requested and not supplied\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth`,\n        format: GL.DEPTH_COMPONENT16,\n        width,\n        height\n      });\n    } else if (stencil) {\n      // TODO - handle separate stencil\n      assert(false);\n    }\n\n    return defaultAttachments;\n  }\n\n  _unattach(attachment) {\n    const oldAttachment = this.attachments[attachment];\n    if (!oldAttachment) {\n      return;\n    }\n    if (oldAttachment instanceof Renderbuffer) {\n      // render buffer\n      this.gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, null);\n    } else {\n      // Must be a texture attachment\n      this.gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, null, 0);\n    }\n    delete this.attachments[attachment];\n  }\n\n  _attachRenderbuffer({attachment = GL.COLOR_ATTACHMENT0, renderbuffer}) {\n    const {gl} = this;\n    // TODO - is the bind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer.handle);\n    gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, renderbuffer.handle);\n    // TODO - is the unbind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.attachments[attachment] = renderbuffer;\n  }\n\n  // layer = 0 - index into Texture2DArray and Texture3D or face for `TextureCubeMap`\n  // level = 0 - mipmapLevel (must be 0 in WebGL1)\n  _attachTexture({attachment = GL.COLOR_ATTACHMENT0, texture, layer, level}) {\n    const {gl} = this;\n    gl.bindTexture(texture.target, texture.handle);\n\n    switch (texture.target) {\n      case GL.TEXTURE_2D_ARRAY:\n      case GL.TEXTURE_3D:\n        gl.framebufferTextureLayer(GL.FRAMEBUFFER, attachment, texture.target, level, layer);\n        break;\n\n      case GL.TEXTURE_CUBE_MAP:\n        // layer must be a cubemap face (or if index, converted to cube map face)\n        const face = mapIndexToCubeMapFace(layer);\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, face, texture.handle, level);\n        break;\n\n      case GL.TEXTURE_2D:\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, texture.handle, level);\n        break;\n\n      default:\n        assert(false, 'Illegal texture type');\n    }\n\n    gl.bindTexture(texture.target, null);\n    this.attachments[attachment] = texture;\n  }\n\n  // Expects framebuffer to be bound\n  _setReadBuffer(readBuffer) {\n    const {gl} = this;\n    if (isWebGL2(gl)) {\n      gl.readBuffer(readBuffer);\n    } else {\n      // Setting to color attachment 0 is a noop, so allow it in WebGL1\n      assert(\n        readBuffer === GL.COLOR_ATTACHMENT0 || readBuffer === GL.BACK,\n        ERR_MULTIPLE_RENDERTARGETS\n      );\n    }\n    this.readBuffer = readBuffer;\n  }\n\n  // Expects framebuffer to be bound\n  _setDrawBuffers(drawBuffers) {\n    const {gl} = this;\n    if (isWebGL2(gl)) {\n      gl.drawBuffers(drawBuffers);\n    } else {\n      const ext = gl.getExtension('WEBGL.draw_buffers');\n      if (ext) {\n        ext.drawBuffersWEBGL(drawBuffers);\n      } else {\n        // Setting a single draw buffer to color attachment 0 is a noop, allow in WebGL1\n        assert(\n          drawBuffers.length === 1 &&\n            (drawBuffers[0] === GL.COLOR_ATTACHMENT0 || drawBuffers[0] === GL.BACK),\n          ERR_MULTIPLE_RENDERTARGETS\n        );\n      }\n    }\n    this.drawBuffers = drawBuffers;\n  }\n\n  // Attempt to provide workable defaults for WebGL2 symbols under WebGL1\n  // null means OK to query\n  // TODO - move to webgl1 polyfills\n  /* eslint-disable complexity */\n  _getAttachmentParameterFallback(pname) {\n    const caps = getFeatures(this.gl);\n\n    switch (pname) {\n      case GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: // GLint\n        return !caps.webgl2 ? 0 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: // GLint\n        return !caps.webgl2 ? 8 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: // GLenum\n        return !caps.webgl2 ? GL.UNSIGNED_INT : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:\n        return !caps.webgl2 && !caps.EXT_sRGB ? GL.LINEAR : null;\n      default:\n        return null;\n    }\n  }\n  /* eslint-enable complexity */\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createFramebuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteFramebuffer(this.handle);\n  }\n\n  _bindHandle(handle) {\n    return this.gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  }\n}\n\n// PUBLIC METHODS\n\n// Map an index to a cube map face constant\nfunction mapIndexToCubeMapFace(layer) {\n  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)\n  // if smaller assume layer is index, otherwise assume it is already a cube map face constant\n  return layer < GL.TEXTURE_CUBE_MAP_POSITIVE_X ? layer + GL.TEXTURE_CUBE_MAP_POSITIVE_X : layer;\n}\n\n// Helper METHODS\n// Get a string describing the framebuffer error if installed\nfunction _getFrameBufferStatus(status) {\n  // Use error mapping if installed\n  const STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || `Framebuffer error ${status}`;\n}\n\nexport const FRAMEBUFFER_ATTACHMENT_PARAMETERS = [\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, // WebGLRenderbuffer or WebGLTexture\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, // GL.RENDERBUFFER, GL.TEXTURE, GL.NONE\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, // GL.TEXTURE_CUBE_MAP_POSITIVE_X, etc.\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, // GLint\n  // EXT_sRGB or WebGL2\n  GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, // GL.LINEAR, GL.SRBG\n  // WebGL2\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE // GLint\n  // GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE\n  // GL.FLOAT, GL.INT, GL.UNSIGNED_INT, GL.SIGNED_NORMALIZED, OR GL.UNSIGNED_NORMALIZED.\n];\n\nFramebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;\n","import {Vector3, Matrix4} from 'math.gl';\nimport {assert, uid} from '../../utils';\n\nexport default class ScenegraphNode {\n  constructor(props = {}) {\n    const {id} = props;\n\n    this.id = id || uid(this.constructor.name);\n\n    this.display = true; // whether to display the object at all\n    this.position = new Vector3();\n    this.rotation = new Vector3();\n    this.scale = new Vector3(1, 1, 1);\n    this.matrix = new Matrix4();\n    this.userData = {};\n\n    this.props = {};\n    this._setScenegraphNodeProps(props);\n  }\n\n  delete() {}\n\n  setProps(props) {\n    this._setScenegraphNodeProps(props);\n    return this;\n  }\n\n  toString() {\n    return `{type: ScenegraphNode, id: ${this.id})}`;\n  }\n\n  setPosition(position) {\n    assert(position.length === 3, 'setPosition requires vector argument');\n    this.position = position;\n    return this;\n  }\n\n  setRotation(rotation) {\n    assert(rotation.length === 3, 'setRotation requires vector argument');\n    this.rotation = rotation;\n    return this;\n  }\n\n  setScale(scale) {\n    assert(scale.length === 3, 'setScale requires vector argument');\n    this.scale = scale;\n    return this;\n  }\n\n  setMatrix(matrix, copyMatrix = true) {\n    if (copyMatrix) {\n      this.matrix.copy(matrix);\n    } else {\n      this.matrix = matrix;\n    }\n  }\n\n  setMatrixComponents({position, rotation, scale, update = true}) {\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    if (update) {\n      this.updateMatrix();\n    }\n    return this;\n  }\n\n  updateMatrix() {\n    const pos = this.position;\n    const rot = this.rotation;\n    const scale = this.scale;\n\n    this.matrix.identity();\n    this.matrix.translate(pos);\n    this.matrix.rotateXYZ(rot);\n    this.matrix.scale(scale);\n    return this;\n  }\n\n  update({position, rotation, scale} = {}) {\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    this.updateMatrix();\n    return this;\n  }\n\n  getCoordinateUniforms(viewMatrix, modelMatrix) {\n    // TODO - solve multiple class problem\n    // assert(viewMatrix instanceof Matrix4);\n    assert(viewMatrix);\n    modelMatrix = modelMatrix || this.matrix;\n    const worldMatrix = new Matrix4(viewMatrix).multiplyRight(modelMatrix);\n    const worldInverse = worldMatrix.invert();\n    const worldInverseTranspose = worldInverse.transpose();\n\n    return {\n      viewMatrix,\n      modelMatrix,\n      objectMatrix: modelMatrix,\n      worldMatrix,\n      worldInverseMatrix: worldInverse,\n      worldInverseTransposeMatrix: worldInverseTranspose\n    };\n  }\n\n  // TODO - copied code, not yet vetted\n  /*\n  transform() {\n    if (!this.parent) {\n      this.endPosition.set(this.position);\n      this.endRotation.set(this.rotation);\n      this.endScale.set(this.scale);\n    } else {\n      const parent = this.parent;\n      this.endPosition.set(this.position.add(parent.endPosition));\n      this.endRotation.set(this.rotation.add(parent.endRotation));\n      this.endScale.set(this.scale.add(parent.endScale));\n    }\n\n    const ch = this.children;\n    for (let i = 0; i < ch.length; ++i) {\n      ch[i].transform();\n    }\n\n    return this;\n  }\n  */\n\n  _setScenegraphNodeProps(props) {\n    if ('display' in props) {\n      this.display = props.display;\n    }\n\n    if ('position' in props) {\n      this.setPosition(props.position);\n    }\n    if ('rotation' in props) {\n      this.setRotation(props.rotation);\n    }\n    if ('scale' in props) {\n      this.setScale(props.scale);\n    }\n\n    // Matrix overwrites other props\n    if ('matrix' in props) {\n      this.setMatrix(props.matrix);\n    }\n\n    Object.assign(this.props, props);\n  }\n}\n","import Model from '../../lib/model';\nimport ScenegraphNode from './scenegraph-node';\n\nexport default class ModelNode extends ScenegraphNode {\n  constructor(gl, props = {}) {\n    super(props);\n\n    // pverride callbacks to make sure we call them with this\n    this.onBeforeRender = null;\n    this.AfterRender = null;\n\n    // Create new Model or used supplied Model\n    if (gl instanceof Model) {\n      this.model = gl;\n      this._setModelNodeProps(props);\n    } else {\n      this.model = new Model(gl, props);\n    }\n\n    this.managedResources = props.managedResources || [];\n  }\n\n  setProps(props) {\n    super.setProps(props);\n    this._setModelNodeProps(props);\n    return this;\n  }\n\n  delete() {\n    if (this.model) {\n      this.model.delete();\n      this.model = null;\n    }\n\n    this.managedResources.forEach(resource => resource.delete());\n    this.managedResources = [];\n  }\n\n  // Forward node methods\n  draw(...args) {\n    // Return value indicates if something was actually drawn\n    return this.model.draw(...args);\n  }\n\n  setUniforms(...args) {\n    this.model.setUniforms(...args);\n    return this;\n  }\n\n  setAttributes(...args) {\n    this.model.setAttributes(...args);\n    return this;\n  }\n\n  updateModuleSettings(...args) {\n    this.model.updateModuleSettings(...args);\n    return this;\n  }\n\n  // PRIVATE\n\n  _setModelNodeProps(props) {\n    this.model.setProps(props);\n  }\n}\n","import {Log} from 'probe.gl';\n\nexport default new Log({id: 'luma'}).enable();\n","// Recommendation is to ignore message but current test suite checks agains the\n// message so keep it for now.\nexport default function assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'shadertools: assertion failed.');\n  }\n}\n","import GL from '@luma.gl/constants';\nimport {getTypedArrayFromGLType} from '../webgl-utils';\nimport {checkProps, assert} from '../utils';\n\nconst DEFAULT_ACCESSOR_VALUES = {\n  offset: 0,\n  stride: 0,\n  type: GL.FLOAT,\n  size: 1,\n  divisor: 0,\n  normalized: false,\n  integer: false\n};\n\nconst PROP_CHECKS = {\n  deprecatedProps: {\n    instanced: 'divisor',\n    isInstanced: 'divisor'\n  }\n};\n\nexport default class Accessor {\n  static getBytesPerElement(accessor) {\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || GL.FLOAT);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n\n  static getBytesPerVertex(accessor) {\n    assert(accessor.size);\n    // TODO: using `FLOAT` when type is not specified,\n    // ensure this assumption is valid or force API to specify type.\n    const ArrayType = getTypedArrayFromGLType(accessor.type || GL.FLOAT);\n    return ArrayType.BYTES_PER_ELEMENT * accessor.size;\n  }\n\n  // Combines (merges) a list of accessors. On top of default values\n  // Usually [programAccessor, bufferAccessor, appAccessor]\n  // All props will be set in the returned object.\n  // TODO check for conflicts between values in the supplied accessors\n  static resolve(...accessors) {\n    return new Accessor(...[DEFAULT_ACCESSOR_VALUES, ...accessors]); // Default values\n  }\n\n  constructor(...accessors) {\n    accessors.forEach(accessor => this._assign(accessor)); // Merge in sequence\n    Object.freeze(this);\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  // ACCESSORS\n\n  // TODO - remove>\n  get BYTES_PER_ELEMENT() {\n    return Accessor.getBytesPerElement(this);\n  }\n\n  get BYTES_PER_VERTEX() {\n    return Accessor.getBytesPerVertex(this);\n  }\n\n  // PRIVATE\n\n  // eslint-disable-next-line complexity, max-statements\n  _assign(props = {}) {\n    props = checkProps('Accessor', props, PROP_CHECKS);\n\n    if (props.type !== undefined) {\n      this.type = props.type;\n\n      // Auto-deduce integer type?\n      if (props.type === GL.INT || props.type === GL.UNSIGNED_INT) {\n        this.integer = true;\n      }\n    }\n    if (props.size !== undefined) {\n      this.size = props.size;\n    }\n    if (props.offset !== undefined) {\n      this.offset = props.offset;\n    }\n    if (props.stride !== undefined) {\n      this.stride = props.stride;\n    }\n    if (props.normalized !== undefined) {\n      this.normalized = props.normalized;\n    }\n    if (props.integer !== undefined) {\n      this.integer = props.integer;\n    }\n\n    // INSTANCE DIVISOR\n    if (props.divisor !== undefined) {\n      this.divisor = props.divisor;\n    }\n\n    // Buffer is optional\n    if (props.buffer !== undefined) {\n      this.buffer = props.buffer;\n    }\n\n    // The binding index (for binding e.g. Transform feedbacks and Uniform buffers)\n    // TODO - should this be part of accessor?\n    if (props.index !== undefined) {\n      if (typeof index === 'boolean') {\n        this.index = props.index ? 1 : 0;\n      } else {\n        this.index = props.index;\n      }\n    }\n\n    // DEPRECATED\n    if (props.instanced !== undefined) {\n      this.divisor = props.instanced ? 1 : 0;\n    }\n    if (props.isInstanced !== undefined) {\n      this.divisor = props.isInstanced ? 1 : 0;\n    }\n\n    return this;\n  }\n}\n\n// TEST EXPORTS\nexport {DEFAULT_ACCESSOR_VALUES};\n","// Provides a unified API for getting and setting any WebGL parameter\n// Also knows default values of all parameters, enabling fast cache initialization\n// Provides base functionality for the state caching.\nimport {\n  GL_PARAMETER_DEFAULTS,\n  GL_PARAMETER_SETTERS,\n  GL_COMPOSITE_PARAMETER_SETTERS,\n  GL_PARAMETER_GETTERS\n} from './webgl-parameter-tables';\n\nimport deepArrayEqual from '../utils/deep-array-equal';\nimport {assert} from '../utils';\n\n// PUBLIC METHODS\n\n// Sets any single GL parameter regardless of function (gl.getParameter/gl.isEnabled...)\n// Returns the previous value\n// Note: limited to parameter values\nexport function setParameter(gl, key, value) {\n  const getter = GL_PARAMETER_GETTERS[key];\n  const prevValue = getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));\n  const setter = GL_PARAMETER_SETTERS[key];\n  assert(typeof setter === 'function');\n  setter(gl, value, Number(key));\n  return prevValue;\n}\n\n// Sets any GL parameter regardless of function (gl.blendMode, ...)\n// Note: requires a `cache` object to be set on the context (gl.state.cache)\n// This object is used to fill in any missing values for composite setter functions\nexport function setParameters(gl, values) {\n  const compositeSetters = {};\n\n  // HANDLE PRIMITIVE SETTERS (and make note of any composite setters)\n\n  for (const key in values) {\n    const glConstant = Number(key);\n    const setter = GL_PARAMETER_SETTERS[key];\n    if (setter) {\n      // Composite setters should only be called once, so save them\n      if (typeof setter === 'string') {\n        compositeSetters[setter] = true;\n      } else {\n        // if (gl[glConstant] !== undefined) {\n        // TODO - added above check since this is being called on WebGL2 values in WebGL1...\n        // TODO - deep equal on values? only call setter if value has changed?\n        // NOTE - the setter will automatically update this.state\n        setter(gl, values[key], glConstant);\n      }\n    }\n  }\n\n  // HANDLE COMPOSITE SETTERS\n\n  // NOTE: any non-provided values needed by composite setters are filled in from state cache\n  // The cache parameter is automatically retrieved from the context\n  // This depends on `trackContextState`, which is technically a \"circular\" dependency.\n  // But it is too inconvenient to always require a cache parameter here.\n  // This is the ONLY external dependency in this module/\n  const cache = gl.state && gl.state.cache;\n  if (cache) {\n    const mergedValues = Object.assign({}, cache, values);\n\n    for (const key in compositeSetters) {\n      // TODO - avoid calling composite setters if values have not changed.\n      const compositeSetter = GL_COMPOSITE_PARAMETER_SETTERS[key];\n      // Note - if `trackContextState` has been called,\n      // the setter will automatically update this.state.cache\n      compositeSetter(gl, mergedValues);\n    }\n  }\n  // Add a log for the else case?\n}\n\n// Queries any single GL parameter regardless of function (gl.getParameter/gl.isEnabled...)\nexport function getParameter(gl, key) {\n  const getter = GL_PARAMETER_GETTERS[key];\n  return getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));\n}\n\n// Copies the state from a context (gl.getParameter should not be overriden)\n// Reads the entire WebGL state from a context\n// Caveat: This generates a huge amount of synchronous driver roundtrips and should be\n// considered a very slow operation, to be used only if/when a context already manipulated\n// by external code needs to be synchronized for the first time\n// @return {Object} - a newly created map, with values keyed by GL parameters\nexport function getParameters(gl, parameters) {\n  // default to querying all parameters\n  parameters = parameters || GL_PARAMETER_DEFAULTS;\n  // support both arrays of parameters and objects (keys represent parameters)\n  const parameterKeys = Array.isArray(parameters) ? parameters : Object.keys(parameters);\n\n  const state = {};\n  for (const key of parameterKeys) {\n    state[key] = getParameter(gl, key);\n  }\n  return state;\n}\n\nexport function getDefaultParameters(gl) {\n  // TODO - Query GL.VIEWPORT and GL.SCISSOR_BOX since these are dynamic\n  return Object.assign({}, GL_PARAMETER_DEFAULTS, {\n    // TODO: For viewport and scissor default values are set at the time of\n    // context creation based on canvas size, we can query them here but it will\n    // not match with what we have in GL_PARAMETER_DEFAULTS table, we should revisit.\n    // [GL.VIEWPORT]: gl.constructor.prototype.getParameter.call(gl, GL.VIEWPORT),\n    // [GL.SCISSOR_BOX]: gl.constructor.prototype.getParameter.call(gl, GL.SCISSOR_BOX)\n  });\n}\n\n// Reset all parameters to a pure context state\nexport function resetParameters(gl) {\n  setParameters(gl, getDefaultParameters(gl));\n}\n\n// Get all parameters that have been modified from a pure context state\nexport function getModifiedParameters(gl) {\n  const values = getParameters(gl, Object.keys(GL_PARAMETER_DEFAULTS));\n  const modified = {};\n  for (const key in GL_PARAMETER_DEFAULTS) {\n    if (!deepArrayEqual(values[key], GL_PARAMETER_DEFAULTS[key])) {\n      modified[key] = values[key];\n    }\n  }\n  return modified;\n}\n","// Tables describing WebGL parameters\nimport GL from '@luma.gl/constants';\nimport {isWebGL2} from '../utils';\n\n// DEFAULT SETTINGS - FOR FAST CACHE INITIALIZATION AND CONTEXT RESETS\n\nexport const GL_PARAMETER_DEFAULTS = {\n  [GL.BLEND]: false,\n  [GL.BLEND_COLOR]: new Float32Array([0, 0, 0, 0]),\n  [GL.BLEND_EQUATION_RGB]: GL.FUNC_ADD,\n  [GL.BLEND_EQUATION_ALPHA]: GL.FUNC_ADD,\n  [GL.BLEND_SRC_RGB]: GL.ONE,\n  [GL.BLEND_DST_RGB]: GL.ZERO,\n  [GL.BLEND_SRC_ALPHA]: GL.ONE,\n  [GL.BLEND_DST_ALPHA]: GL.ZERO,\n  [GL.COLOR_CLEAR_VALUE]: new Float32Array([0, 0, 0, 0]), // TBD\n  [GL.COLOR_WRITEMASK]: [true, true, true, true],\n  [GL.CULL_FACE]: false,\n  [GL.CULL_FACE_MODE]: GL.BACK,\n  [GL.DEPTH_TEST]: false,\n  [GL.DEPTH_CLEAR_VALUE]: 1,\n  [GL.DEPTH_FUNC]: GL.LESS,\n  [GL.DEPTH_RANGE]: new Float32Array([0, 1]), // TBD\n  [GL.DEPTH_WRITEMASK]: true,\n  [GL.DITHER]: true,\n  // FRAMEBUFFER_BINDING and DRAW_FRAMEBUFFER_BINDING(WebGL2) refer same state.\n  [GL.FRAMEBUFFER_BINDING]: null,\n  [GL.FRONT_FACE]: GL.CCW,\n  [GL.GENERATE_MIPMAP_HINT]: GL.DONT_CARE,\n  [GL.LINE_WIDTH]: 1,\n  [GL.POLYGON_OFFSET_FILL]: false,\n  [GL.POLYGON_OFFSET_FACTOR]: 0,\n  [GL.POLYGON_OFFSET_UNITS]: 0,\n  [GL.SAMPLE_COVERAGE_VALUE]: 1.0,\n  [GL.SAMPLE_COVERAGE_INVERT]: false,\n  [GL.SCISSOR_TEST]: false,\n  // Note: Dynamic value. If scissor test enabled we expect users to set correct scissor box\n  [GL.SCISSOR_BOX]: new Int32Array([0, 0, 1024, 1024]),\n  [GL.STENCIL_TEST]: false,\n  [GL.STENCIL_CLEAR_VALUE]: 0,\n  [GL.STENCIL_WRITEMASK]: 0xffffffff,\n  [GL.STENCIL_BACK_WRITEMASK]: 0xffffffff,\n  [GL.STENCIL_FUNC]: GL.ALWAYS,\n  [GL.STENCIL_REF]: 0,\n  [GL.STENCIL_VALUE_MASK]: 0xffffffff,\n  [GL.STENCIL_BACK_FUNC]: GL.ALWAYS,\n  [GL.STENCIL_BACK_REF]: 0,\n  [GL.STENCIL_BACK_VALUE_MASK]: 0xffffffff,\n  [GL.STENCIL_FAIL]: GL.KEEP,\n  [GL.STENCIL_PASS_DEPTH_FAIL]: GL.KEEP,\n  [GL.STENCIL_PASS_DEPTH_PASS]: GL.KEEP,\n  [GL.STENCIL_BACK_FAIL]: GL.KEEP,\n  [GL.STENCIL_BACK_PASS_DEPTH_FAIL]: GL.KEEP,\n  [GL.STENCIL_BACK_PASS_DEPTH_PASS]: GL.KEEP,\n  // Dynamic value: We use [0, 0, 1024, 1024] as default, but usually this is updated in each frame.\n  [GL.VIEWPORT]: new Int32Array([0, 0, 1024, 1024]),\n  // WEBGL1 PIXEL PACK/UNPACK MODES\n  [GL.PACK_ALIGNMENT]: 4,\n  [GL.UNPACK_ALIGNMENT]: 4,\n  [GL.UNPACK_FLIP_Y_WEBGL]: false,\n  [GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL]: false,\n  [GL.UNPACK_COLORSPACE_CONVERSION_WEBGL]: GL.BROWSER_DEFAULT_WEBGL,\n\n  // WEBGL2 / EXTENSIONS\n  // gl1: 'OES_standard_derivatives'\n  [GL.FRAGMENT_SHADER_DERIVATIVE_HINT]: GL.DONT_CARE,\n  [GL.READ_FRAMEBUFFER_BINDING]: null,\n  [GL.RASTERIZER_DISCARD]: false,\n  [GL.PACK_ROW_LENGTH]: 0,\n  [GL.PACK_SKIP_PIXELS]: 0,\n  [GL.PACK_SKIP_ROWS]: 0,\n  [GL.UNPACK_ROW_LENGTH]: 0,\n  [GL.UNPACK_IMAGE_HEIGHT]: 0,\n  [GL.UNPACK_SKIP_PIXELS]: 0,\n  [GL.UNPACK_SKIP_ROWS]: 0,\n  [GL.UNPACK_SKIP_IMAGES]: 0\n};\n\n// SETTER TABLES - ENABLES SETTING ANY PARAMETER WITH A COMMON API\n\nconst enable = (gl, value, key) => (value ? gl.enable(key) : gl.disable(key));\nconst hint = (gl, value, key) => gl.hint(key, value);\nconst pixelStorei = (gl, value, key) => gl.pixelStorei(key, value);\n\nconst drawFramebuffer = (gl, value) => {\n  const target = isWebGL2(gl) ? GL.DRAW_FRAMEBUFFER : GL.FRAMEBUFFER;\n  return gl.bindFramebuffer(target, value);\n};\nconst readFramebuffer = (gl, value) => {\n  return gl.bindFramebuffer(GL.READ_FRAMEBUFFER, value);\n};\n\n// Map from WebGL parameter names to corresponding WebGL setter functions\n// WegGL constants are read by parameter names, but set by function names\n// NOTE: When value type is a string, it will be handled by 'GL_COMPOSITE_PARAMETER_SETTERS'\nexport const GL_PARAMETER_SETTERS = {\n  [GL.BLEND]: enable,\n  [GL.BLEND_COLOR]: (gl, value) => gl.blendColor(...value),\n  [GL.BLEND_EQUATION_RGB]: 'blendEquation',\n  [GL.BLEND_EQUATION_ALPHA]: 'blendEquation',\n  [GL.BLEND_SRC_RGB]: 'blendFunc',\n  [GL.BLEND_DST_RGB]: 'blendFunc',\n  [GL.BLEND_SRC_ALPHA]: 'blendFunc',\n  [GL.BLEND_DST_ALPHA]: 'blendFunc',\n  [GL.COLOR_CLEAR_VALUE]: (gl, value) => gl.clearColor(...value),\n  [GL.COLOR_WRITEMASK]: (gl, value) => gl.colorMask(...value),\n  [GL.CULL_FACE]: enable,\n  [GL.CULL_FACE_MODE]: (gl, value) => gl.cullFace(value),\n  [GL.DEPTH_TEST]: enable,\n  [GL.DEPTH_CLEAR_VALUE]: (gl, value) => gl.clearDepth(value),\n  [GL.DEPTH_FUNC]: (gl, value) => gl.depthFunc(value),\n  [GL.DEPTH_RANGE]: (gl, value) => gl.depthRange(...value),\n  [GL.DEPTH_WRITEMASK]: (gl, value) => gl.depthMask(value),\n  [GL.DITHER]: enable,\n  [GL.FRAGMENT_SHADER_DERIVATIVE_HINT]: hint,\n  // NOTE: FRAMEBUFFER_BINDING and DRAW_FRAMEBUFFER_BINDING(WebGL2) refer same state.\n  [GL.FRAMEBUFFER_BINDING]: drawFramebuffer,\n  [GL.FRONT_FACE]: (gl, value) => gl.frontFace(value),\n  [GL.GENERATE_MIPMAP_HINT]: hint,\n  [GL.LINE_WIDTH]: (gl, value) => gl.lineWidth(value),\n  [GL.POLYGON_OFFSET_FILL]: enable,\n  [GL.POLYGON_OFFSET_FACTOR]: 'polygonOffset',\n  [GL.POLYGON_OFFSET_UNITS]: 'polygonOffset',\n  [GL.RASTERIZER_DISCARD]: enable,\n  [GL.SAMPLE_COVERAGE_VALUE]: 'sampleCoverage',\n  [GL.SAMPLE_COVERAGE_INVERT]: 'sampleCoverage',\n  [GL.SCISSOR_TEST]: enable,\n  [GL.SCISSOR_BOX]: (gl, value) => gl.scissor(...value),\n  [GL.STENCIL_TEST]: enable,\n  [GL.STENCIL_CLEAR_VALUE]: (gl, value) => gl.clearStencil(value),\n  [GL.STENCIL_WRITEMASK]: (gl, value) => gl.stencilMaskSeparate(GL.FRONT, value),\n  [GL.STENCIL_BACK_WRITEMASK]: (gl, value) => gl.stencilMaskSeparate(GL.BACK, value),\n  [GL.STENCIL_FUNC]: 'stencilFuncFront',\n  [GL.STENCIL_REF]: 'stencilFuncFront',\n  [GL.STENCIL_VALUE_MASK]: 'stencilFuncFront',\n  [GL.STENCIL_BACK_FUNC]: 'stencilFuncBack',\n  [GL.STENCIL_BACK_REF]: 'stencilFuncBack',\n  [GL.STENCIL_BACK_VALUE_MASK]: 'stencilFuncBack',\n  [GL.STENCIL_FAIL]: 'stencilOpFront',\n  [GL.STENCIL_PASS_DEPTH_FAIL]: 'stencilOpFront',\n  [GL.STENCIL_PASS_DEPTH_PASS]: 'stencilOpFront',\n  [GL.STENCIL_BACK_FAIL]: 'stencilOpBack',\n  [GL.STENCIL_BACK_PASS_DEPTH_FAIL]: 'stencilOpBack',\n  [GL.STENCIL_BACK_PASS_DEPTH_PASS]: 'stencilOpBack',\n  [GL.VIEWPORT]: (gl, value) => gl.viewport(...value),\n\n  // WEBGL1 PIXEL PACK/UNPACK MODES\n  [GL.PACK_ALIGNMENT]: pixelStorei,\n  [GL.UNPACK_ALIGNMENT]: pixelStorei,\n  [GL.UNPACK_FLIP_Y_WEBGL]: pixelStorei,\n  [GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL]: pixelStorei,\n  [GL.UNPACK_COLORSPACE_CONVERSION_WEBGL]: pixelStorei,\n\n  // WEBGL2 PIXEL PACK/UNPACK MODES\n  // RASTERIZER_DISCARD ...\n  [GL.PACK_ROW_LENGTH]: pixelStorei,\n  [GL.PACK_SKIP_PIXELS]: pixelStorei,\n  [GL.PACK_SKIP_ROWS]: pixelStorei,\n  [GL.READ_FRAMEBUFFER_BINDING]: readFramebuffer,\n  [GL.UNPACK_ROW_LENGTH]: pixelStorei,\n  [GL.UNPACK_IMAGE_HEIGHT]: pixelStorei,\n  [GL.UNPACK_SKIP_PIXELS]: pixelStorei,\n  [GL.UNPACK_SKIP_ROWS]: pixelStorei,\n  [GL.UNPACK_SKIP_IMAGES]: pixelStorei\n};\n\n// COMPOSITE_WEBGL_PARAMETER_\nexport const GL_COMPOSITE_PARAMETER_SETTERS = {\n  blendEquation: (gl, values) =>\n    gl.blendEquationSeparate(values[GL.BLEND_EQUATION_RGB], values[GL.BLEND_EQUATION_ALPHA]),\n  blendFunc: (gl, values) =>\n    gl.blendFuncSeparate(\n      values[GL.BLEND_SRC_RGB],\n      values[GL.BLEND_DST_RGB],\n      values[GL.BLEND_SRC_ALPHA],\n      values[GL.BLEND_DST_ALPHA]\n    ),\n  polygonOffset: (gl, values) =>\n    gl.polygonOffset(values[GL.POLYGON_OFFSET_FACTOR], values[GL.POLYGON_OFFSET_UNITS]),\n  sampleCoverage: (gl, values) =>\n    gl.sampleCoverage(values[GL.SAMPLE_COVERAGE_VALUE], values[GL.SAMPLE_COVERAGE_INVERT]),\n  stencilFuncFront: (gl, values) =>\n    gl.stencilFuncSeparate(\n      GL.FRONT,\n      values[GL.STENCIL_FUNC],\n      values[GL.STENCIL_REF],\n      values[GL.STENCIL_VALUE_MASK]\n    ),\n  stencilFuncBack: (gl, values) =>\n    gl.stencilFuncSeparate(\n      GL.BACK,\n      values[GL.STENCIL_BACK_FUNC],\n      values[GL.STENCIL_BACK_REF],\n      values[GL.STENCIL_BACK_VALUE_MASK]\n    ),\n  stencilOpFront: (gl, values) =>\n    gl.stencilOpSeparate(\n      GL.FRONT,\n      values[GL.STENCIL_FAIL],\n      values[GL.STENCIL_PASS_DEPTH_FAIL],\n      values[GL.STENCIL_PASS_DEPTH_PASS]\n    ),\n  stencilOpBack: (gl, values) =>\n    gl.stencilOpSeparate(\n      GL.BACK,\n      values[GL.STENCIL_BACK_FAIL],\n      values[GL.STENCIL_BACK_PASS_DEPTH_FAIL],\n      values[GL.STENCIL_BACK_PASS_DEPTH_PASS]\n    )\n};\n\n// GETTER TABLE - FOR READING OUT AN ENTIRE CONTEXT\n\nconst isEnabled = (gl, key) => gl.isEnabled(key);\n\n// Exceptions for any keys that cannot be queried by gl.getParameters\nexport const GL_PARAMETER_GETTERS = {\n  [GL.BLEND]: isEnabled,\n  [GL.CULL_FACE]: isEnabled,\n  [GL.DEPTH_TEST]: isEnabled,\n  [GL.DITHER]: isEnabled,\n  [GL.POLYGON_OFFSET_FILL]: isEnabled,\n  [GL.SAMPLE_ALPHA_TO_COVERAGE]: isEnabled,\n  [GL.SAMPLE_COVERAGE]: isEnabled,\n  [GL.SCISSOR_TEST]: isEnabled,\n  [GL.STENCIL_TEST]: isEnabled,\n\n  // WebGL 2\n  [GL.RASTERIZER_DISCARD]: isEnabled\n};\n","export default function assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'webgl2-polyfill: assertion failed.');\n  }\n}\n","// This function is needed in initialization stages,\n// make sure it can be imported in isolation\n/* global process */\n\nimport isElectron from './is-electron';\n\nconst isNode =\n  typeof process === 'object' && String(process) === '[object process]' && !process.browser;\n\nconst isBrowser = !isNode || isElectron;\n\n// document does not exist on worker thread\nexport const isBrowserMainThread = isBrowser && typeof document !== 'undefined';\n\nexport default isBrowser;\n","import GL from '@luma.gl/constants';\nimport {isWebGL2} from '../webgl-utils';\n\n// const S3TC = 'WEBGL_compressed_texture_s3tc';\n// const PVRTC = 'WEBGL_compressed_texture_pvrtc';\n// const ES3 = 'WEBGL_compressed_texture_es3';\n// const ETC1 = 'WEBGL_compressed_texture_etc1';\n// const SRGB = 'EXT_sRGB';\n// const DEPTH = 'WEBGL_depth_texture';\n\n// Legal combinations for internalFormat, format and type\nexport const TEXTURE_FORMATS = {\n  // Unsized texture format - more performance\n  [GL.RGB]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5]},\n  // TODO: format: GL.RGBA type: GL.FLOAT is supported in WebGL1 when 'OES_texure_float' is suported\n  // we need to update this table structure to specify extensions (gl1: 'OES_texure_float', gl2: false) for each type.\n  [GL.RGBA]: {\n    dataFormat: GL.RGBA,\n    types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4, GL.UNSIGNED_SHORT_5_5_5_1]\n  },\n  [GL.ALPHA]: {dataFormat: GL.ALPHA, types: [GL.UNSIGNED_BYTE]},\n  [GL.LUMINANCE]: {dataFormat: GL.LUMINANCE, types: [GL.UNSIGNED_BYTE]},\n  [GL.LUMINANCE_ALPHA]: {dataFormat: GL.LUMINANCE_ALPHA, types: [GL.UNSIGNED_BYTE]},\n\n  // 32 bit floats\n  [GL.R32F]: {dataFormat: GL.RED, types: [GL.FLOAT], gl2: true},\n  [GL.RG32F]: {dataFormat: GL.RG, types: [GL.FLOAT], gl2: true},\n  [GL.RGB32F]: {dataFormat: GL.RGB, types: [GL.FLOAT], gl2: true},\n  [GL.RGBA32F]: {dataFormat: GL.RGBA, types: [GL.FLOAT], gl2: true}\n\n  // [GL.DEPTH_COMPONENT]: {types: [GL.UNSIGNED_SHORT, GL.UNSIGNED_INT, GL.UNSIGNED_INT_24_8], gl1: DEPTH},\n  // [GL.DEPTH_STENCIL]: {gl1: DEPTH},\n\n  // Sized texture format - more performance\n  // R\n  // [GL.R8]: {dataFormat: GL.RED, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // [GL.R16F]: {dataFormat: GL.RED, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.R8UI]: {dataFormat: GL.RED_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RG\n  // [GL.RG8]: {dataFormat: GL.RG, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // [GL.RG16F]: {dataFormat: GL.RG, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RG8UI]: {dataFormat: GL.RG_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RGB\n  // [GL.RGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.SRGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.RGB565]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5], gl2: true},\n  // [GL.R11F_G11F_B10F]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_INT_10F_11F_11F_REV, GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RGB9_E5]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_half_float'},\n  // [GL.RGB16F]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_float'},\n  // [GL.RGB8UI]: {dataFormat: GL.RGB_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RGBA\n  // [GL.RGBA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.SRGB8_ALPHA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.RGB5_A1]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_5_5_1], gl2: true},\n  // [GL.RGBA4]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4], gl2: true},\n  // [GL.RGBA16F]: {dataFormat: GL.RGBA, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RGBA8UI]: {dataFormat: GL.RGBA_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true}\n\n  // Compressed formats\n\n  // WEBGL_compressed_texture_s3tc\n\n  // [GL.COMPRESSED_RGB_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT3_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT5_EXT]: {compressed: true, gl1: S3TC},\n\n  // WEBGL_compressed_texture_es3\n\n  // [GL.COMPRESSED_R11_EAC]: {compressed: true, gl1: ES3}, // RED\n  // [GL.COMPRESSED_SIGNED_R11_EAC]: {compressed: true, gl1: ES3}, // RED\n  // [GL.COMPRESSED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG\n  // [GL.COMPRESSED_SIGNED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG\n  // [GL.COMPRESSED_RGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB\n  // [GL.COMPRESSED_RGBA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RBG\n  // [GL.COMPRESSED_SRGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB\n  // [GL.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RGBA\n  // [GL.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA\n  // [GL.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA\n  /* WebGL2 guaranteed availability compressed formats?\n  COMPRESSED_R11_EAC RED\n  COMPRESSED_SIGNED_R11_EAC RED\n  COMPRESSED_RG11_EAC RG\n  COMPRESSED_SIGNED_RG11_EAC RG\n  COMPRESSED_RGB8_ETC2 RGB\n  COMPRESSED_SRGB8_ETC2 RGB\n  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA\n  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA\n  COMPRESSED_RGBA8_ETC2_EAC RGBA\n  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\n  */\n\n  // WEBGL_compressed_texture_pvrtc\n\n  // [GL.COMPRESSED_RGB_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGB_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n\n  // WEBGL_compressed_texture_etc1\n\n  // [GL.COMPRESSED_RGB_ETC1_WEBGL]: {compressed: true, gl1: ETC1},\n\n  // WEBGL_compressed_texture_atc\n\n  // [GL.COMPRESSED_RGB_ATC_WEBGL]: {compressed: true, gl1: ETC1},\n  // [GL.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL]: {compressed: true, gl1: ETC1},\n  // [GL.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL]: {compressed: true, gl1: ETC1}\n};\n\nexport const DATA_FORMAT_CHANNELS = {\n  [GL.RED]: 1,\n  [GL.RED_INTEGER]: 1,\n  [GL.RG]: 2,\n  [GL.RG_INTEGER]: 2,\n  [GL.RGB]: 3,\n  [GL.RGB_INTEGER]: 3,\n  [GL.RGBA]: 4,\n  [GL.RGBA_INTEGER]: 4,\n  [GL.DEPTH_COMPONENT]: 1,\n  [GL.DEPTH_STENCIL]: 1,\n  [GL.ALPHA]: 1,\n  [GL.LUMINANCE]: 1,\n  [GL.LUMINANCE_ALPHA]: 2\n};\n\nexport const TYPE_SIZES = {\n  [GL.FLOAT]: 4,\n  [GL.UNSIGNED_INT]: 4,\n  [GL.INT]: 4,\n  [GL.UNSIGNED_SHORT]: 2,\n  [GL.SHORT]: 2,\n  [GL.HALF_FLOAT]: 2,\n  [GL.BYTE]: 1,\n  [GL.UNSIGNED_BYTE]: 1\n};\n\nexport function isFormatSupported(gl, format) {\n  const info = TEXTURE_FORMATS[format];\n  if (!info) {\n    return false;\n  }\n  if (info.gl1 === undefined && info.gl2 === undefined) {\n    // No info - always supported\n    return true;\n  }\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n  return typeof value === 'string' ? gl.getExtension(value) : value;\n}\n\nexport function isLinearFilteringSupported(gl, format) {\n  const info = TEXTURE_FORMATS[format];\n  switch (info && info.types[0]) {\n    // Both WebGL1 and WebGL2?\n    case GL.FLOAT:\n      return gl.getExtension('OES_texture_float_linear');\n    // Not in WebGL2?\n    case GL.HALF_FLOAT:\n      return gl.getExtension('OES_texture_half_float_linear');\n    default:\n      return true;\n  }\n}\n","import GL from '@luma.gl/constants';\nimport Texture from './texture';\nimport {assertWebGLContext} from '../webgl-utils';\nimport {loadImage} from '../utils/load-file';\n\nexport default class Texture2D extends Texture {\n  static isSupported(gl, opts) {\n    return Texture.isSupported(gl, opts);\n  }\n\n  constructor(gl, props = {}) {\n    assertWebGLContext(gl);\n\n    // Signature: new Texture2D(gl, url | Promise)\n    if (props instanceof Promise || typeof props === 'string') {\n      props = {data: props};\n    }\n\n    // Signature: new Texture2D(gl, {data: url})\n    if (typeof props.data === 'string') {\n      props = Object.assign({}, props, {data: loadImage(props.data)});\n    }\n\n    super(gl, Object.assign({}, props, {target: GL.TEXTURE_2D}));\n\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n}\n","import GL from '@luma.gl/constants';\n\n// Define local extension strings to optimize minification\n// const SRGB = 'EXT_sRGB';\n// const EXT_FLOAT_WEBGL1 = 'WEBGL.color_buffer_float';\nconst EXT_FLOAT_WEBGL2 = 'EXT_color_buffer_float';\n// const EXT_HALF_FLOAT_WEBGL1 = 'EXT_color_buffer_half_float';\n\n// NOTE(Tarek): bpp === \"bytes per pixel\", used for\n// memory usage calculations.\nexport default {\n  [GL.DEPTH_COMPONENT16]: {bpp: 2}, // 16 depth bits.\n  [GL.DEPTH_COMPONENT24]: {gl2: true, bpp: 3},\n  [GL.DEPTH_COMPONENT32F]: {gl2: true, bpp: 4},\n\n  [GL.STENCIL_INDEX8]: {bpp: 1}, // 8 stencil bits.\n\n  [GL.DEPTH_STENCIL]: {bpp: 4},\n  [GL.DEPTH24_STENCIL8]: {gl2: true, bpp: 4},\n  [GL.DEPTH32F_STENCIL8]: {gl2: true, bpp: 5},\n\n  // When using a WebGL 1 context, color renderbuffer formats are limited\n  [GL.RGBA4]: {bpp: 2},\n  [GL.RGB565]: {bpp: 2},\n  [GL.RGB5_A1]: {bpp: 2},\n\n  // When using a WebGL 2 context, the following values are available additionally:\n  [GL.R8]: {gl2: true, bpp: 1},\n  [GL.R8UI]: {gl2: true, bpp: 1},\n  [GL.R8I]: {gl2: true, bpp: 1},\n  [GL.R16UI]: {gl2: true, bpp: 2},\n  [GL.R16I]: {gl2: true, bpp: 2},\n  [GL.R32UI]: {gl2: true, bpp: 4},\n  [GL.R32I]: {gl2: true, bpp: 4},\n  [GL.RG8]: {gl2: true, bpp: 2},\n  [GL.RG8UI]: {gl2: true, bpp: 2},\n  [GL.RG8I]: {gl2: true, bpp: 2},\n  [GL.RG16UI]: {gl2: true, bpp: 4},\n  [GL.RG16I]: {gl2: true, bpp: 4},\n  [GL.RG32UI]: {gl2: true, bpp: 8},\n  [GL.RG32I]: {gl2: true, bpp: 8},\n  [GL.RGB8]: {gl2: true, bpp: 3},\n  [GL.RGBA8]: {gl2: true, bpp: 4},\n  // [GL.SRGB8_ALPHA8]: {gl2: true, gl1: SRGB}, // When using the EXT_sRGB WebGL1 extension\n  [GL.RGB10_A2]: {gl2: true, bpp: 4},\n  [GL.RGBA8UI]: {gl2: true, bpp: 4},\n  [GL.RGBA8I]: {gl2: true, bpp: 4},\n  [GL.RGB10_A2UI]: {gl2: true, bpp: 4},\n  [GL.RGBA16UI]: {gl2: true, bpp: 8},\n  [GL.RGBA16I]: {gl2: true, bpp: 8},\n  [GL.RGBA32I]: {gl2: true, bpp: 16},\n  [GL.RGBA32UI]: {gl2: true, bpp: 16},\n\n  // When using a WebGL 2 context and the EXT_color_buffer_float WebGL2 extension\n  [GL.R16F]: {gl2: EXT_FLOAT_WEBGL2, bpp: 2},\n  [GL.RG16F]: {gl2: EXT_FLOAT_WEBGL2, bpp: 4},\n  [GL.RGBA16F]: {gl2: EXT_FLOAT_WEBGL2, bpp: 8},\n  [GL.R32F]: {gl2: EXT_FLOAT_WEBGL2, bpp: 4},\n  [GL.RG32F]: {gl2: EXT_FLOAT_WEBGL2, bpp: 8},\n  // TODO - can't get WEBGL.color_buffer_float to work on renderbuffers\n  [GL.RGBA32F]: {gl2: EXT_FLOAT_WEBGL2, bpp: 16},\n  // [GL.RGBA32F]: {gl2: EXT_FLOAT_WEBGL2, gl1: EXT_FLOAT_WEBGL1},\n  [GL.R11F_G11F_B10F]: {gl2: EXT_FLOAT_WEBGL2, bpp: 4}\n};\n","/* eslint-disable no-inline-comments */\nimport GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport RENDERBUFFER_FORMATS from './renderbuffer-formats';\nimport {isWebGL2} from '../webgl-utils';\nimport {assert} from '../utils';\n\nfunction isFormatSupported(gl, format, formats) {\n  const info = formats[format];\n  if (!info) {\n    return false;\n  }\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n  if (typeof value === 'string') {\n    return gl.getExtension(value);\n  }\n  return value;\n}\n\nexport default class Renderbuffer extends Resource {\n  static isSupported(gl, {format} = {}) {\n    return !format || isFormatSupported(gl, format, RENDERBUFFER_FORMATS);\n  }\n\n  static getSamplesForFormat(gl, {format}) {\n    // Polyfilled to return [0] under WebGL1\n    return gl.getInternalformatParameter(GL.RENDERBUFFER, format, GL.SAMPLES);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  // Creates and initializes a renderbuffer object's data store\n  initialize({format, width = 1, height = 1, samples = 0}) {\n    assert(format, 'Needs format');\n\n    this._trackDeallocatedMemory();\n\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, this.handle);\n\n    if (samples !== 0 && isWebGL2(this.gl)) {\n      this.gl.renderbufferStorageMultisample(GL.RENDERBUFFER, samples, format, width, height);\n    } else {\n      this.gl.renderbufferStorage(GL.RENDERBUFFER, format, width, height);\n    }\n\n    // this.gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.format = format;\n    this.width = width;\n    this.height = height;\n    this.samples = samples;\n\n    this._trackAllocatedMemory(\n      this.width * this.height * (this.samples || 1) * RENDERBUFFER_FORMATS[this.format].bpp\n    );\n\n    return this;\n  }\n\n  resize({width, height}) {\n    // Don't resize if width/height haven't changed\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({width, height, format: this.format, samples: this.samples});\n    }\n    return this;\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createRenderbuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteRenderbuffer(this.handle);\n    this._trackDeallocatedMemory();\n  }\n\n  _bindHandle(handle) {\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, handle);\n  }\n\n  _syncHandle(handle) {\n    this.format = this.getParameter(GL.RENDERBUFFER_INTERNAL_FORMAT);\n    this.width = this.getParameter(GL.RENDERBUFFER_WIDTH);\n    this.height = this.getParameter(GL.RENDERBUFFER_HEIGHT);\n    this.samples = this.getParameter(GL.RENDERBUFFER_SAMPLES);\n  }\n\n  // @param {Boolean} opt.autobind=true - method call will bind/unbind object\n  // @returns {GLenum|GLint} - depends on pname\n  _getParameter(pname) {\n    this.gl.bindRenderbuffer(GL.RENDERBUFFER, this.handle);\n    const value = this.gl.getRenderbufferParameter(GL.RENDERBUFFER, pname);\n    // this.gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n    return value;\n  }\n}\n","import React, {PureComponent} from 'react';\n\nexport default class InfoPanel extends PureComponent {\n  render() {\n    const { name, controls, sourceLink} = this.props;\n\n    return (\n      <div className=\"options-panel top-right\" tabIndex=\"0\">\n        <h3>{name}</h3>\n        <div className=\"control-panel\" dangerouslySetInnerHTML={{__html: controls}} />\n\n        {sourceLink && (\n          <div className=\"source-link\">\n            <a href={sourceLink} target=\"_new\">\n              {'View Code ↗'}\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","// Support for listening to context state changes and intercepting state queries\n//\n// NOTE: this system does not handle buffer bindings\nimport GL_STATE_SETTERS from './webgl-function-to-parameters-table';\nimport {GL_PARAMETER_DEFAULTS} from '../unified-parameter-api/webgl-parameter-tables';\nimport {setParameters, getParameters} from '../unified-parameter-api/unified-parameter-api';\nimport {assert, deepArrayEqual} from '../utils';\n\n// HELPER FUNCTIONS - INSTALL GET/SET INTERCEPTORS (SPYS) ON THE CONTEXT\n\n// Overrides a WebGLRenderingContext state \"getter\" function\n// to return values directly from cache\nfunction installGetterOverride(gl, functionName) {\n  // Get the original function from the WebGLRenderingContext\n  const originalGetterFunc = gl[functionName].bind(gl);\n\n  // Wrap it with a spy so that we can update our state cache when it gets called\n  gl[functionName] = function get(...params) {\n    const pname = params[0];\n\n    // WebGL limits are not prepopulated in the cache, we must\n    // query first time. They are all primitive (single value)\n    if (!(pname in gl.state.cache)) {\n      gl.state.cache[pname] = originalGetterFunc(...params);\n    }\n\n    // Optionally call the original function to do a \"hard\" query from the WebGLRenderingContext\n    return gl.state.enable\n      ? // Call the getter the params so that it can e.g. serve from a cache\n        gl.state.cache[pname]\n      : // Optionally call the original function to do a \"hard\" query from the WebGLRenderingContext\n        originalGetterFunc(...params);\n  };\n\n  // Set the name of this anonymous function to help in debugging and profiling\n  Object.defineProperty(gl[functionName], 'name', {\n    value: `${functionName}-from-cache`,\n    configurable: false\n  });\n}\n\n// Overrides a WebGLRenderingContext state \"setter\" function\n// to call a setter spy before the actual setter. Allows us to keep a cache\n// updated with a copy of the WebGL context state.\nfunction installSetterSpy(gl, functionName, setter) {\n  // Get the original function from the WebGLRenderingContext\n  const originalSetterFunc = gl[functionName].bind(gl);\n\n  // Wrap it with a spy so that we can update our state cache when it gets called\n  gl[functionName] = function set(...params) {\n    // Update the value\n    // Call the setter with the state cache and the params so that it can store the parameters\n    const {valueChanged, oldValue} = setter(gl.state._updateCache, ...params);\n\n    // Call the original WebGLRenderingContext func to make sure the context actually gets updated\n    if (valueChanged) {\n      gl.state.log(`gl.${functionName}`, ...params); // eslint-disable-line\n      originalSetterFunc(...params);\n    }\n\n    // Note: if the original function fails to set the value, our state cache will be bad\n    // No solution for this at the moment, but assuming that this is unlikely to be a real problem\n    // We could call the setter after the originalSetterFunc. Concern is that this would\n    // cause different behavior in debug mode, where originalSetterFunc can throw exceptions\n\n    return oldValue;\n  };\n\n  // Set the name of this anonymous function to help in debugging and profiling\n  Object.defineProperty(gl[functionName], 'name', {\n    value: `${functionName}-to-cache`,\n    configurable: false\n  });\n}\n\n// HELPER CLASS - GLState\n\n/* eslint-disable no-shadow */\nclass GLState {\n  constructor(\n    gl,\n    {\n      copyState = false, // Copy cache from params (slow) or initialize from WebGL defaults (fast)\n      log = () => {} // Logging function, called when gl parameter change calls are actually issued\n    } = {}\n  ) {\n    this.gl = gl;\n    this.stateStack = [];\n    this.enable = true;\n    this.cache = copyState ? getParameters(gl) : Object.assign({}, GL_PARAMETER_DEFAULTS);\n    this.log = log;\n\n    this._updateCache = this._updateCache.bind(this);\n    Object.seal(this);\n  }\n\n  push(values = {}) {\n    this.stateStack.push({});\n  }\n\n  pop() {\n    assert(this.stateStack.length > 0);\n    // Use the saved values in the state stack to restore parameters\n    const oldValues = this.stateStack[this.stateStack.length - 1];\n    setParameters(this.gl, oldValues, this.cache);\n    // Don't pop until we have reset parameters (to make sure other \"stack frames\" are not affected)\n    this.stateStack.pop();\n  }\n\n  // interceptor for context set functions - update our cache and our stack\n  // values (Object) - the key values for this setter\n  _updateCache(values) {\n    let valueChanged = false;\n    let oldValue; // = undefined\n\n    const oldValues = this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1];\n\n    for (const key in values) {\n      assert(key !== undefined);\n      // Check that value hasn't already been shadowed\n      if (!deepArrayEqual(values[key], this.cache[key])) {\n        valueChanged = true;\n        oldValue = this.cache[key];\n\n        // First, save current value being shadowed\n        // If a state stack frame is active, save the current parameter values for pop\n        // but first check that value hasn't already been shadowed and saved\n        if (oldValues && !(key in oldValues)) {\n          oldValues[key] = this.cache[key];\n        }\n\n        // Save current value being shadowed\n        this.cache[key] = values[key];\n      }\n    }\n\n    return {valueChanged, oldValue};\n  }\n}\n\n// PUBLIC API\n\n/**\n * Initialize WebGL state caching on a context\n * can be called multiple times to enable/disable\n * @param {WebGLRenderingContext} - context\n */\n// After calling this function, context state will be cached\n// gl.state.push() and gl.state.pop() will be available for saving,\n// temporarily modifying, and then restoring state.\nexport default function trackContextState(gl, {enable = true, copyState} = {}) {\n  assert(copyState !== undefined);\n  if (!gl.state) {\n    /* global window, global */\n    const global_ = typeof global !== 'undefined' ? global : window;\n    if (global_.polyfillContext) {\n      global_.polyfillContext(gl);\n    }\n\n    // Create a state cache\n    gl.state = new GLState(gl, {copyState, enable});\n\n    // intercept all setter functions in the table\n    for (const key in GL_STATE_SETTERS) {\n      const setter = GL_STATE_SETTERS[key];\n      installSetterSpy(gl, key, setter);\n    }\n\n    // intercept all getter functions in the table\n    installGetterOverride(gl, 'getParameter');\n    installGetterOverride(gl, 'isEnabled');\n  }\n\n  gl.state.enable = enable;\n\n  return gl;\n}\n\nexport function pushContextState(gl) {\n  if (!gl.state) {\n    trackContextState(gl, {copyState: false});\n  }\n  gl.state.push();\n}\n\nexport function popContextState(gl) {\n  assert(gl.state);\n  gl.state.pop();\n}\n","export default function deepArrayEqual(x, y) {\n  if (x === y) {\n    return true;\n  }\n  const isArrayX = Array.isArray(x) || ArrayBuffer.isView(x);\n  const isArrayY = Array.isArray(y) || ArrayBuffer.isView(y);\n  if (isArrayX && isArrayY && x.length === y.length) {\n    for (let i = 0; i < x.length; ++i) {\n      if (x[i] !== y[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n","// Replacements for WebGL state setting functions that call supplied 'update'\n// function setting the individual parameters.\n// i.e. these \"setters\" map functions to gl parameters\n\n// The 'update' function is used to interceptor WEBGL functions that set\n// WebGLRenderingContext state so that state changes can be tracked.\n\n// It also enables checking values against cache and avoid unnecessary WebGL\n// set/get operations.\n\nimport GL from '@luma.gl/constants';\n\nexport default {\n  // GENERIC SETTERS\n\n  enable: (update, capability) =>\n    update({\n      [capability]: true\n    }),\n  disable: (update, capability) =>\n    update({\n      [capability]: false\n    }),\n  pixelStorei: (update, pname, value) =>\n    update({\n      [pname]: value\n    }),\n  hint: (update, pname, hint) =>\n    update({\n      [pname]: hint\n    }),\n\n  // SPECIFIC SETTERS\n\n  bindFramebuffer: (update, target, framebuffer) => {\n    switch (target) {\n      case GL.FRAMEBUFFER:\n        return update({\n          [GL.DRAW_FRAMEBUFFER_BINDING]: framebuffer,\n          [GL.READ_FRAMEBUFFER_BINDING]: framebuffer\n        });\n      case GL.DRAW_FRAMEBUFFER:\n        return update({[GL.DRAW_FRAMEBUFFER_BINDING]: framebuffer});\n      case GL.READ_FRAMEBUFFER:\n        return update({[GL.READ_FRAMEBUFFER_BINDING]: framebuffer});\n      default:\n        return null;\n    }\n  },\n  blendColor: (update, r, g, b, a) =>\n    update({\n      [GL.BLEND_COLOR]: new Float32Array([r, g, b, a])\n    }),\n\n  blendEquation: (update, mode) =>\n    update({\n      [GL.BLEND_EQUATION_RGB]: mode,\n      [GL.BLEND_EQUATION_ALPHA]: mode\n    }),\n\n  blendEquationSeparate: (update, modeRGB, modeAlpha) =>\n    update({\n      [GL.BLEND_EQUATION_RGB]: modeRGB,\n      [GL.BLEND_EQUATION_ALPHA]: modeAlpha\n    }),\n\n  blendFunc: (update, src, dst) =>\n    update({\n      [GL.BLEND_SRC_RGB]: src,\n      [GL.BLEND_DST_RGB]: dst,\n      [GL.BLEND_SRC_ALPHA]: src,\n      [GL.BLEND_DST_ALPHA]: dst\n    }),\n\n  blendFuncSeparate: (update, srcRGB, dstRGB, srcAlpha, dstAlpha) =>\n    update({\n      [GL.BLEND_SRC_RGB]: srcRGB,\n      [GL.BLEND_DST_RGB]: dstRGB,\n      [GL.BLEND_SRC_ALPHA]: srcAlpha,\n      [GL.BLEND_DST_ALPHA]: dstAlpha\n    }),\n\n  clearColor: (update, r, g, b, a) =>\n    update({\n      [GL.COLOR_CLEAR_VALUE]: new Float32Array([r, g, b, a])\n    }),\n\n  clearDepth: (update, depth) =>\n    update({\n      [GL.DEPTH_CLEAR_VALUE]: depth\n    }),\n\n  clearStencil: (update, s) =>\n    update({\n      [GL.STENCIL_CLEAR_VALUE]: s\n    }),\n\n  colorMask: (update, r, g, b, a) =>\n    update({\n      [GL.COLOR_WRITEMASK]: [r, g, b, a]\n    }),\n\n  cullFace: (update, mode) =>\n    update({\n      [GL.CULL_FACE_MODE]: mode\n    }),\n\n  depthFunc: (update, func) =>\n    update({\n      [GL.DEPTH_FUNC]: func\n    }),\n\n  depthRange: (update, zNear, zFar) =>\n    update({\n      [GL.DEPTH_RANGE]: new Float32Array([zNear, zFar])\n    }),\n\n  depthMask: (update, mask) =>\n    update({\n      [GL.DEPTH_WRITEMASK]: mask\n    }),\n\n  frontFace: (update, face) =>\n    update({\n      [GL.FRONT_FACE]: face\n    }),\n\n  lineWidth: (update, width) =>\n    update({\n      [GL.LINE_WIDTH]: width\n    }),\n\n  polygonOffset: (update, factor, units) =>\n    update({\n      [GL.POLYGON_OFFSET_FACTOR]: factor,\n      [GL.POLYGON_OFFSET_UNITS]: units\n    }),\n\n  sampleCoverage: (update, value, invert) =>\n    update({\n      [GL.SAMPLE_COVERAGE_VALUE]: value,\n      [GL.SAMPLE_COVERAGE_INVERT]: invert\n    }),\n\n  scissor: (update, x, y, width, height) =>\n    update({\n      [GL.SCISSOR_BOX]: new Int32Array([x, y, width, height])\n    }),\n\n  stencilMask: (update, mask) =>\n    update({\n      [GL.STENCIL_WRITEMASK]: mask,\n      [GL.STENCIL_BACK_WRITEMASK]: mask\n    }),\n\n  stencilMaskSeparate: (update, face, mask) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_WRITEMASK : GL.STENCIL_BACK_WRITEMASK]: mask\n    }),\n\n  stencilFunc: (update, func, ref, mask) =>\n    update({\n      [GL.STENCIL_FUNC]: func,\n      [GL.STENCIL_REF]: ref,\n      [GL.STENCIL_VALUE_MASK]: mask,\n      [GL.STENCIL_BACK_FUNC]: func,\n      [GL.STENCIL_BACK_REF]: ref,\n      [GL.STENCIL_BACK_VALUE_MASK]: mask\n    }),\n\n  stencilFuncSeparate: (update, face, func, ref, mask) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_FUNC : GL.STENCIL_BACK_FUNC]: func,\n      [face === GL.FRONT ? GL.STENCIL_REF : GL.STENCIL_BACK_REF]: ref,\n      [face === GL.FRONT ? GL.STENCIL_VALUE_MASK : GL.STENCIL_BACK_VALUE_MASK]: mask\n    }),\n\n  stencilOp: (update, fail, zfail, zpass) =>\n    update({\n      [GL.STENCIL_FAIL]: fail,\n      [GL.STENCIL_PASS_DEPTH_FAIL]: zfail,\n      [GL.STENCIL_PASS_DEPTH_PASS]: zpass,\n      [GL.STENCIL_BACK_FAIL]: fail,\n      [GL.STENCIL_BACK_PASS_DEPTH_FAIL]: zfail,\n      [GL.STENCIL_BACK_PASS_DEPTH_PASS]: zpass\n    }),\n\n  stencilOpSeparate: (update, face, fail, zfail, zpass) =>\n    update({\n      [face === GL.FRONT ? GL.STENCIL_FAIL : GL.STENCIL_BACK_FAIL]: fail,\n      [face === GL.FRONT ? GL.STENCIL_PASS_DEPTH_FAIL : GL.STENCIL_BACK_PASS_DEPTH_FAIL]: zfail,\n      [face === GL.FRONT ? GL.STENCIL_PASS_DEPTH_PASS : GL.STENCIL_BACK_PASS_DEPTH_PASS]: zpass\n    }),\n\n  viewport: (update, x, y, width, height) =>\n    update({\n      [GL.VIEWPORT]: new Int32Array([x, y, width, height])\n    })\n};\n","/* global fetch, Image */\nimport {assert} from '../utils';\n\nlet pathPrefix = '';\n\n/*\n * Set a relative path prefix\n */\nexport function setPathPrefix(prefix) {\n  pathPrefix = prefix;\n}\n\n// Reads raw file data from:\nexport function loadFile(url, options = {}) {\n  assert(typeof url === 'string');\n  url = pathPrefix + url;\n  const dataType = options.dataType || 'text';\n  return fetch(url, options).then(res => res[dataType]());\n}\n\n/*\n * Loads images asynchronously\n * image.crossOrigin can be set via opts.crossOrigin, default to 'anonymous'\n * returns a promise tracking the load\n */\nexport function loadImage(url, opts) {\n  assert(typeof url === 'string');\n  url = pathPrefix + url;\n  return new Promise((resolve, reject) => {\n    try {\n      const image = new Image();\n      image.onload = () => resolve(image);\n      image.onerror = () => reject(new Error(`Could not load image ${url}.`));\n      image.crossOrigin = (opts && opts.crossOrigin) || 'anonymous';\n      image.src = url;\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n","// Recommendation is to ignore message but current test suite checks agains the\n// message so keep it for now.\nexport default function assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'luma.gl: assertion failed.');\n  }\n}\n","// based on https://github.com/cheton/is-electron\n// https://github.com/electron/electron/issues/2288\n/* global window, process, navigator */\nfunction isElectron() {\n  // Renderer process\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.process === 'object' &&\n    window.process.type === 'renderer'\n  ) {\n    return true;\n  }\n  // Main process\n  if (\n    typeof process !== 'undefined' &&\n    typeof process.versions === 'object' &&\n    Boolean(process.versions.electron)\n  ) {\n    return true;\n  }\n  // Detect the user agent when the `nodeIntegration` option is set to true\n  if (\n    typeof navigator === 'object' &&\n    typeof navigator.userAgent === 'string' &&\n    navigator.userAgent.indexOf('Electron') >= 0\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport default isElectron();\n","import GL from '@luma.gl/constants';\n\nconst ERR_TYPE_DEDUCTION = 'Failed to deduce GL constant from typed array';\n\n// Converts TYPED ARRAYS to corresponding GL constant\n// Used to auto deduce gl parameter types\nexport function getGLTypeFromTypedArray(arrayOrType) {\n  // If typed array, look up constructor\n  const type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n  switch (type) {\n    case Float32Array:\n      return GL.FLOAT;\n    case Uint16Array:\n      return GL.UNSIGNED_SHORT;\n    case Uint32Array:\n      return GL.UNSIGNED_INT;\n    case Uint8Array:\n      return GL.UNSIGNED_BYTE;\n    case Uint8ClampedArray:\n      return GL.UNSIGNED_BYTE;\n    case Int8Array:\n      return GL.BYTE;\n    case Int16Array:\n      return GL.SHORT;\n    case Int32Array:\n      return GL.INT;\n    default:\n      throw new Error(ERR_TYPE_DEDUCTION);\n  }\n}\n\n// Converts GL constant to corresponding TYPED ARRAY\n// Used to auto deduce gl parameter types\n\n/* eslint-disable complexity */\nexport function getTypedArrayFromGLType(glType, {clamped = true} = {}) {\n  // Sorted in some order of likelihood to reduce amount of comparisons\n  switch (glType) {\n    case GL.FLOAT:\n      return Float32Array;\n    case GL.UNSIGNED_SHORT:\n    case GL.UNSIGNED_SHORT_5_6_5:\n    case GL.UNSIGNED_SHORT_4_4_4_4:\n    case GL.UNSIGNED_SHORT_5_5_5_1:\n      return Uint16Array;\n    case GL.UNSIGNED_INT:\n      return Uint32Array;\n    case GL.UNSIGNED_BYTE:\n      return clamped ? Uint8ClampedArray : Uint8Array;\n    case GL.BYTE:\n      return Int8Array;\n    case GL.SHORT:\n      return Int16Array;\n    case GL.INT:\n      return Int32Array;\n    default:\n      throw new Error('Failed to deduce typed array type from GL constant');\n  }\n}\n/* eslint-enable complexity */\n\n// Flip rows (can be used on arrays returned from `Framebuffer.readPixels`)\n// https://stackoverflow.com/questions/41969562/\n// how-can-i-flip-the-result-of-webglrenderingcontext-readpixels\nexport function flipRows({data, width, height, bytesPerPixel = 4, temp}) {\n  const bytesPerRow = width * bytesPerPixel;\n\n  // make a temp buffer to hold one row\n  temp = temp || new Uint8Array(bytesPerRow);\n  for (let y = 0; y < height / 2; ++y) {\n    const topOffset = y * bytesPerRow;\n    const bottomOffset = (height - y - 1) * bytesPerRow;\n    // make copy of a row on the top half\n    temp.set(data.subarray(topOffset, topOffset + bytesPerRow));\n    // copy a row from the bottom half to the top\n    data.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);\n    // copy the copy of the top half row to the bottom half\n    data.set(temp, bottomOffset);\n  }\n}\n\nexport function scalePixels({data, width, height}) {\n  const newWidth = Math.round(width / 2);\n  const newHeight = Math.round(height / 2);\n  const newData = new Uint8Array(newWidth * newHeight * 4);\n  for (let y = 0; y < newHeight; y++) {\n    for (let x = 0; x < newWidth; x++) {\n      for (let c = 0; c < 4; c++) {\n        newData[(y * newWidth + x) * 4 + c] = data[(y * 2 * width + x * 2) * 4 + c];\n      }\n    }\n  }\n  return {data: newData, width: newWidth, height: newHeight};\n}\n","import GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {isWebGL2, assertWebGL2Context} from '../webgl-utils';\nimport {log, isObjectEmpty} from '../utils';\n\n// NOTE: The `bindOnUse` flag is a major workaround:\n// See https://github.com/KhronosGroup/WebGL/issues/2346\n\nexport default class TransformFeedback extends Resource {\n  static isSupported(gl) {\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, props = {}) {\n    assertWebGL2Context(gl);\n    super(gl, props);\n\n    this.initialize(props);\n    this.stubRemovedMethods('TransformFeedback', 'v6.0', ['pause', 'resume']);\n    Object.seal(this);\n  }\n\n  initialize(props = {}) {\n    this.buffers = {};\n    this.unused = {};\n    this.configuration = null;\n    this.bindOnUse = true;\n\n    // Unbind any currently bound buffers\n    if (!isObjectEmpty(this.buffers)) {\n      this.bind(() => this._unbindBuffers());\n    }\n\n    this.setProps(props);\n    return this;\n  }\n\n  setProps(props) {\n    if ('program' in props) {\n      this.configuration = props.program && props.program.configuration;\n    }\n    if ('configuration' in props) {\n      this.configuration = props.configuration;\n    }\n    if ('bindOnUse' in props) {\n      props = props.bindOnUse;\n    }\n    if ('buffers' in props) {\n      this.setBuffers(props.buffers);\n    }\n  }\n\n  setBuffers(buffers = {}) {\n    this.bind(() => {\n      for (const bufferName in buffers) {\n        this.setBuffer(bufferName, buffers[bufferName]);\n      }\n    });\n    return this;\n  }\n\n  setBuffer(locationOrName, bufferOrParams) {\n    const location = this._getVaryingIndex(locationOrName);\n    const {buffer, byteSize, byteOffset} = this._getBufferParams(bufferOrParams);\n\n    if (location < 0) {\n      this.unused[locationOrName] = buffer;\n      log.warn(() => `${this.id} unused varying buffer ${locationOrName}`)();\n      return this;\n    }\n\n    this.buffers[location] = bufferOrParams;\n\n    // Need to avoid chrome bug where buffer that is already bound to a different target\n    // cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.\n    if (!this.bindOnUse) {\n      this._bindBuffer(location, buffer, byteOffset, byteSize);\n    }\n\n    return this;\n  }\n\n  begin(primitiveMode = GL.POINTS) {\n    this.gl.bindTransformFeedback(GL.TRANSFORM_FEEDBACK, this.handle);\n    this._bindBuffers();\n    this.gl.beginTransformFeedback(primitiveMode);\n    return this;\n  }\n\n  end() {\n    this.gl.endTransformFeedback();\n    this._unbindBuffers();\n    this.gl.bindTransformFeedback(GL.TRANSFORM_FEEDBACK, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _getBufferParams(bufferOrParams) {\n    let byteOffset;\n    let byteSize;\n    let buffer;\n    if (bufferOrParams instanceof Buffer === false) {\n      buffer = bufferOrParams.buffer;\n      byteSize = bufferOrParams.byteSize;\n      byteOffset = bufferOrParams.byteOffset;\n    } else {\n      buffer = bufferOrParams;\n    }\n    // to use bindBufferRange, either offset or size must be specified, use default value for the other.\n    if (byteOffset !== undefined || byteSize !== undefined) {\n      byteOffset = byteOffset || 0;\n      byteSize = byteSize || buffer.byteLength - byteOffset;\n    }\n    return {buffer, byteOffset, byteSize};\n  }\n\n  _getVaryingInfo(locationOrName) {\n    return this.configuration && this.configuration.getVaryingInfo(locationOrName);\n  }\n\n  _getVaryingIndex(locationOrName) {\n    if (this.configuration) {\n      return this.configuration.getVaryingInfo(locationOrName).location;\n    }\n    const location = Number(locationOrName);\n    return Number.isFinite(location) ? location : -1;\n  }\n\n  // Need to avoid chrome bug where buffer that is already bound to a different target\n  // cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.\n  _bindBuffers() {\n    if (this.bindOnUse) {\n      for (const bufferIndex in this.buffers) {\n        const {buffer, byteSize, byteOffset} = this._getBufferParams(this.buffers[bufferIndex]);\n        this._bindBuffer(bufferIndex, buffer, byteOffset, byteSize);\n      }\n    }\n  }\n\n  _unbindBuffers() {\n    if (this.bindOnUse) {\n      for (const bufferIndex in this.buffers) {\n        this._bindBuffer(bufferIndex, null);\n      }\n    }\n  }\n\n  _bindBuffer(index, buffer, byteOffset = 0, byteSize) {\n    const handle = buffer && buffer.handle;\n    if (!handle || byteSize === undefined) {\n      this.gl.bindBufferBase(GL.TRANSFORM_FEEDBACK_BUFFER, index, handle);\n    } else {\n      this.gl.bindBufferRange(GL.TRANSFORM_FEEDBACK_BUFFER, index, handle, byteOffset, byteSize);\n    }\n    return this;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createTransformFeedback();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTransformFeedback(this.handle);\n  }\n\n  _bindHandle(handle) {\n    this.gl.bindTransformFeedback(GL.TRANSFORM_FEEDBACK, this.handle);\n  }\n}\n","import {isWebGL2} from '../webgl-utils';\n\n// TODO - this should be the default export, test cases need updating\nexport const FEATURES = {\n  WEBGL2: 'WEBGL2',\n\n  // API SUPPORT\n  VERTEX_ARRAY_OBJECT: 'VERTEX_ARRAY_OBJECT',\n  TIMER_QUERY: 'TIMER_QUERY',\n  INSTANCED_RENDERING: 'INSTANCED_RENDERING',\n  MULTIPLE_RENDER_TARGETS: 'MULTIPLE_RENDER_TARGETS',\n\n  // FEATURES\n  ELEMENT_INDEX_UINT32: 'ELEMENT_INDEX_UINT32',\n  BLEND_EQUATION_MINMAX: 'BLEND_EQUATION_MINMAX',\n\n  // TEXTURES: '// TEXTURES', RENDERBUFFERS\n  COLOR_ENCODING_SRGB: 'COLOR_ENCODING_SRGB',\n\n  // TEXTURES\n  TEXTURE_DEPTH: 'TEXTURE_DEPTH',\n  TEXTURE_FLOAT: 'TEXTURE_FLOAT',\n  TEXTURE_HALF_FLOAT: 'TEXTURE_HALF_FLOAT',\n\n  TEXTURE_FILTER_LINEAR_FLOAT: 'TEXTURE_FILTER_LINEAR_FLOAT',\n  TEXTURE_FILTER_LINEAR_HALF_FLOAT: 'TEXTURE_FILTER_LINEAR_HALF_FLOAT',\n  TEXTURE_FILTER_ANISOTROPIC: 'TEXTURE_FILTER_ANISOTROPIC',\n\n  // FRAMEBUFFERS: '// FRAMEBUFFERS', TEXTURES AND RENDERBUFFERS\n  COLOR_ATTACHMENT_RGBA32F: 'COLOR_ATTACHMENT_RGBA32F',\n  COLOR_ATTACHMENT_FLOAT: 'COLOR_ATTACHMENT_FLOAT',\n  COLOR_ATTACHMENT_HALF_FLOAT: 'COLOR_ATTACHMENT_HALF_FLOAT',\n\n  // GLSL extensions\n  GLSL_FRAG_DATA: 'GLSL_FRAG_DATA',\n  GLSL_FRAG_DEPTH: 'GLSL_FRAG_DEPTH',\n  GLSL_DERIVATIVES: 'GLSL_DERIVATIVES',\n  GLSL_TEXTURE_LOD: 'GLSL_TEXTURE_LOD'\n};\n\n// Defines luma.gl \"feature\" names and semantics\nexport default {\n  [FEATURES.WEBGL2]: [gl => isWebGL2(gl)],\n\n  // API SUPPORT\n  [FEATURES.VERTEX_ARRAY_OBJECT]: ['OES_vertex_array_object', true],\n  [FEATURES.TIMER_QUERY]: ['EXT_disjoint_timer_query', 'EXT_disjoint_timer_query_webgl2'],\n  [FEATURES.INSTANCED_RENDERING]: ['ANGLE_instanced_arrays', true],\n  [FEATURES.MULTIPLE_RENDER_TARGETS]: ['WEBGL_draw_buffers', true],\n\n  // FEATURES\n  [FEATURES.ELEMENT_INDEX_UINT32]: ['OES_element_index_uint', true],\n  [FEATURES.BLEND_EQUATION_MINMAX]: ['EXT_blend_minmax', true],\n\n  // TEXTURES, RENDERBUFFERS\n  [FEATURES.COLOR_ENCODING_SRGB]: ['EXT_sRGB', true],\n\n  // TEXTURES\n  [FEATURES.TEXTURE_DEPTH]: ['WEBGL_depth_texture', true],\n  [FEATURES.TEXTURE_FLOAT]: ['OES_texture_float', true],\n  [FEATURES.TEXTURE_HALF_FLOAT]: ['OES_texture_half_float', true],\n\n  [FEATURES.TEXTURE_FILTER_LINEAR_FLOAT]: ['OES_texture_float_linear'],\n  [FEATURES.TEXTURE_FILTER_LINEAR_HALF_FLOAT]: ['OES_texture_half_float_linear'],\n  [FEATURES.TEXTURE_FILTER_ANISOTROPIC]: ['EXT_texture_filter_anisotropic'],\n\n  // FRAMEBUFFERS, TEXTURES AND RENDERBUFFERS\n  [FEATURES.COLOR_ATTACHMENT_RGBA32F]: ['WEBGL_color_buffer_float', 'EXT_color_buffer_float'],\n  [FEATURES.COLOR_ATTACHMENT_FLOAT]: [false, 'EXT_color_buffer_float'],\n  [FEATURES.COLOR_ATTACHMENT_HALF_FLOAT]: [false, 'EXT_color_buffer_half_float'],\n\n  // GLSL extensions\n  [FEATURES.GLSL_FRAG_DATA]: ['WEBGL_draw_buffers', true],\n  [FEATURES.GLSL_FRAG_DEPTH]: ['EXT_frag_depth', true],\n  [FEATURES.GLSL_DERIVATIVES]: ['OES_standard_derivatives', true],\n  [FEATURES.GLSL_TEXTURE_LOD]: ['EXT_shader_texture_lod', true]\n};\n","// WEBGL BUILT-IN TYPES\n// 1) Exports all WebGL constants as {GL}\n// 2) Enables app to \"import\" WebGL types\n//    - Importing these types makes them known to eslint etc.\n//    - Provides dummy types for WebGL2 when not available to streamline\n//      library code.\n//    - Exports types from headless gl when running under Node.js\n\n/* eslint-disable quotes, no-console */\nimport {global} from '../utils/globals';\nimport isBrowser from '../utils/is-browser';\n\nexport const ERR_HEADLESSGL_LOAD = `\\\nluma.gl: loaded under Node.js without headless gl installed, meaning that WebGL \\\ncontexts can not be created. This may not be an error. For example, this is a \\\ntypical configuration for isorender applications running on the server.`;\n\n// TODO(Tarek): OOGLY HACK to avoid webpack requiring headless\n//   browser bundles. Will be removed in 8.0 when we\n//   remove automatic headless context creation\nconst m = module;\n\n// Load headless gl dynamically, if available\nexport let headlessTypes = null;\nexport function headlessGL(...args) {\n  const headless = m.require('gl');\n  if (!headless) {\n    throw new Error(ERR_HEADLESSGL_LOAD);\n  }\n  return headless(...args);\n}\n\nif (!isBrowser) {\n  try {\n    headlessTypes = m.require('gl/wrap');\n  } catch (error) {\n    // /* global console */\n    // console.info(ERR_HEADLESSGL_LOAD);\n  }\n}\n\nclass DummyType {}\n\nconst {\n  WebGLRenderingContext = DummyType,\n  WebGLProgram = DummyType,\n  WebGLShader = DummyType,\n  WebGLBuffer = DummyType,\n  WebGLFramebuffer = DummyType,\n  WebGLRenderbuffer = DummyType,\n  WebGLTexture = DummyType,\n  WebGLUniformLocation = DummyType,\n  WebGLActiveInfo = DummyType,\n  WebGLShaderPrecisionFormat = DummyType\n} = headlessTypes || global;\n\nexport const webGLTypesAvailable =\n  WebGLRenderingContext !== DummyType &&\n  WebGLProgram !== DummyType &&\n  WebGLShader !== DummyType &&\n  WebGLBuffer !== DummyType &&\n  WebGLFramebuffer !== DummyType &&\n  WebGLRenderbuffer !== DummyType &&\n  WebGLTexture !== DummyType &&\n  WebGLUniformLocation !== DummyType &&\n  WebGLActiveInfo !== DummyType &&\n  WebGLShaderPrecisionFormat !== DummyType;\n\n// Ensures that WebGL2RenderingContext is defined in non-WebGL2 environments\n// so that apps can test their gl contexts with instanceof\n// E.g. if (gl instanceof WebGL2RenderingContext) { }\nfunction getWebGL2RenderingContext() {\n  class WebGL2RenderingContextNotSupported {}\n  return global.WebGL2RenderingContext || WebGL2RenderingContextNotSupported;\n}\n\n// Ensure that Image is defined under Node.js\nfunction getImage() {\n  class ImageNotSupported {}\n  return global.Image || ImageNotSupported;\n}\n\nconst WebGL2RenderingContext = getWebGL2RenderingContext();\nconst Image = getImage();\n\n// Export the standard WebGL types\nexport {\n  Image,\n  WebGLRenderingContext,\n  WebGLProgram,\n  WebGLShader,\n  WebGLBuffer,\n  WebGLFramebuffer,\n  WebGLRenderbuffer,\n  WebGLTexture,\n  WebGLUniformLocation,\n  WebGLActiveInfo,\n  WebGLShaderPrecisionFormat,\n  WebGL2RenderingContext\n};\n","import {withParameters} from '../context';\nimport {assertWebGL2Context} from '../webgl-utils';\nimport {assert} from '../utils';\n\n// Should collapse during minification\nconst GL_DEPTH_BUFFER_BIT = 0x00000100;\nconst GL_STENCIL_BUFFER_BIT = 0x00000400;\nconst GL_COLOR_BUFFER_BIT = 0x00004000;\n\nconst GL_COLOR = 0x1800;\nconst GL_DEPTH = 0x1801;\nconst GL_STENCIL = 0x1802;\nconst GL_DEPTH_STENCIL = 0x84f9;\n\n// Should disappear if asserts are removed\nconst ERR_ARGUMENTS = 'clear: bad arguments';\n\n// Optionally clears depth, color and stencil buffers\nexport function clear(gl, {framebuffer = null, color = null, depth = null, stencil = null} = {}) {\n  const parameters = {};\n\n  if (framebuffer) {\n    parameters.framebuffer = framebuffer;\n  }\n\n  let clearFlags = 0;\n\n  if (color) {\n    clearFlags |= GL_COLOR_BUFFER_BIT;\n    if (color !== true) {\n      parameters.clearColor = color;\n    }\n  }\n\n  if (depth) {\n    clearFlags |= GL_DEPTH_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearDepth = depth;\n    }\n  }\n\n  if (stencil) {\n    clearFlags |= GL_STENCIL_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearStencil = depth;\n    }\n  }\n\n  assert(clearFlags !== 0, ERR_ARGUMENTS);\n\n  // Temporarily set any clear \"colors\" and call clear\n  withParameters(gl, parameters, () => {\n    gl.clear(clearFlags);\n  });\n}\n\n// WebGL2 - clear a specific drawing buffer\nexport function clearBuffer(\n  gl,\n  {framebuffer = null, buffer = GL_COLOR, drawBuffer = 0, value = [0, 0, 0, 0]} = {}\n) {\n  assertWebGL2Context(gl);\n\n  withParameters(gl, {framebuffer}, () => {\n    // Method selection per OpenGL ES 3 docs\n    switch (buffer) {\n      case GL_COLOR:\n        switch (value.constructor) {\n          case Int32Array:\n            gl.clearBufferiv(buffer, drawBuffer, value);\n            break;\n          case Uint32Array:\n            gl.clearBufferuiv(buffer, drawBuffer, value);\n            break;\n          case Float32Array:\n          default:\n            gl.clearBufferfv(buffer, drawBuffer, value);\n        }\n        break;\n\n      case GL_DEPTH:\n        gl.clearBufferfv(GL_DEPTH, 0, [value]);\n        break;\n\n      case GL_STENCIL:\n        gl.clearBufferiv(GL_STENCIL, 0, [value]);\n        break;\n\n      case GL_DEPTH_STENCIL:\n        const [depth, stencil] = value;\n        gl.clearBufferfi(GL_DEPTH_STENCIL, 0, depth, stencil);\n        break;\n\n      default:\n        assert(false, ERR_ARGUMENTS);\n    }\n  });\n}\n","// TODO: Two subdirectories must not depend on each other (classes vs utils)!\nimport Texture2D from '../classes/texture-2d';\nimport TextureCube from '../classes/texture-cube';\nimport Texture3D from '../classes/texture-3d';\nimport Framebuffer from '../classes/framebuffer';\nimport GL from '@luma.gl/constants';\nimport {assert} from '../utils';\n\n// Clone a new texture object from a reference texture object.\nexport function cloneTextureFrom(refTexture, overrides) {\n  assert(\n    refTexture instanceof Texture2D ||\n      refTexture instanceof TextureCube ||\n      refTexture instanceof Texture3D\n  );\n\n  const TextureType = refTexture.constructor;\n\n  const {gl, width, height, format, type, dataFormat, border, mipmaps} = refTexture;\n\n  const textureOptions = Object.assign(\n    {\n      width,\n      height,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps\n    },\n    overrides\n  );\n\n  // TODO: move this to `Texture` class as instance method and use this.constructor\n  return new TextureType(gl, textureOptions);\n}\n\n// Wraps a given texture into a framebuffer object, that can be further used\n// to read data from the texture object.\nexport function toFramebuffer(texture, opts) {\n  const {gl, width, height, id} = texture;\n  const framebuffer = new Framebuffer(\n    gl,\n    Object.assign({}, opts, {\n      id: `framebuffer-for-${id}`,\n      width,\n      height,\n      attachments: {\n        [GL.COLOR_ATTACHMENT0]: texture\n      }\n    })\n  );\n  return framebuffer;\n}\n","import GL from '@luma.gl/constants';\nimport Texture from './texture';\nimport {assertWebGLContext} from '../webgl-utils';\nimport {log} from '../utils';\n\nconst FACES = [\n  GL.TEXTURE_CUBE_MAP_POSITIVE_X,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_X,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Y,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Z,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Z\n];\n\nexport default class TextureCube extends Texture {\n  constructor(gl, props = {}) {\n    assertWebGLContext(gl);\n\n    super(gl, Object.assign({}, props, {target: GL.TEXTURE_CUBE_MAP}));\n\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(props = {}) {\n    const {/* format = GL.RGBA, */ mipmaps = true, parameters = {}} = props;\n\n    // let {width = 1, height = 1, type = GL.UNSIGNED_BYTE, dataFormat} = props;\n\n    // Deduce width and height based on one of the faces\n    // ({type, dataFormat} = this._deduceParameters({format, type, dataFormat}));\n    // ({width, height} = this._deduceImageSize({\n    //   data: props[GL.TEXTURE_CUBE_MAP_POSITIVE_X],\n    //   width,\n    //   height\n    // }));\n\n    // Enforce cube\n    // assert(width === height);\n\n    // Temporarily apply any pixel store paramaters and build textures\n    // withParameters(this.gl, props, () => {\n    //   for (const face of CUBE_MAP_FACES) {\n    //     this.setImageData({\n    //       target: face,\n    //       data: props[face],\n    //       width, height, format, type, dataFormat, border, mipmaps\n    //     });\n    //   }\n    // });\n\n    // Store props for accessors\n    this.opts = props;\n\n    this.setCubeMapImageData(props).then(() => {\n      this.loaded = true;\n\n      // TODO - should genMipmap() be called on the cubemap or on the faces?\n      // TODO - without generateMipmap() cube textures do not work at all!!! Why?\n      if (mipmaps) {\n        this.generateMipmap(props);\n      }\n\n      this.setParameters(parameters);\n    });\n  }\n\n  subImage({face, data, x = 0, y = 0, mipmapLevel = 0}) {\n    return this._subImage({target: face, data, x, y, mipmapLevel});\n  }\n\n  /* eslint-disable max-statements, max-len */\n  async setCubeMapImageData({\n    width,\n    height,\n    pixels,\n    data,\n    border = 0,\n    format = GL.RGBA,\n    type = GL.UNSIGNED_BYTE\n  }) {\n    const {gl} = this;\n    const imageDataMap = pixels || data;\n\n    // pixel data (imageDataMap) is an Object from Face to Image or Promise.\n    // For example:\n    // {\n    // GL.TEXTURE_CUBE_MAP_POSITIVE_X : Image-or-Promise,\n    // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : Image-or-Promise,\n    // ... }\n    // To provide multiple level-of-details (LODs) this can be Face to Array\n    // of Image or Promise, like this\n    // {\n    // GL.TEXTURE_CUBE_MAP_POSITIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],\n    // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],\n    // ... }\n\n    const resolvedFaces = await Promise.all(\n      FACES.map(face => {\n        const facePixels = imageDataMap[face];\n        return Promise.all(Array.isArray(facePixels) ? facePixels : [facePixels]);\n      })\n    );\n\n    this.bind();\n\n    FACES.forEach((face, index) => {\n      if (resolvedFaces[index].length > 1 && this.opts.mipmaps !== false) {\n        // If the user provides multiple LODs, then automatic mipmap\n        // generation generateMipmap() should be disabled to avoid overwritting them.\n        log.warn(`${this.id} has mipmap and multiple LODs.`)();\n      }\n      resolvedFaces[index].forEach((image, lodLevel) => {\n        // TODO: adjust width & height for LOD!\n        if (width && height) {\n          gl.texImage2D(face, lodLevel, format, width, height, border, format, type, image);\n        } else {\n          gl.texImage2D(face, lodLevel, format, format, type, image);\n        }\n      });\n    });\n\n    this.unbind();\n  }\n\n  // TODO: update this method to accept LODs\n  setImageDataForFace(options) {\n    const {\n      face,\n      width,\n      height,\n      pixels,\n      data,\n      border = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE\n      // generateMipmap = false // TODO\n    } = options;\n\n    const {gl} = this;\n\n    const imageData = pixels || data;\n\n    this.bind();\n    if (imageData instanceof Promise) {\n      imageData.then(resolvedImageData =>\n        this.setImageDataForFace(\n          Object.assign({}, options, {\n            face,\n            data: resolvedImageData,\n            pixels: resolvedImageData\n          })\n        )\n      );\n    } else if (this.width || this.height) {\n      gl.texImage2D(face, 0, format, width, height, border, format, type, imageData);\n    } else {\n      gl.texImage2D(face, 0, format, format, type, imageData);\n    }\n\n    return this;\n  }\n}\n\nTextureCube.FACES = FACES;\n","import GL from '@luma.gl/constants';\nimport {withParameters} from '../context';\nimport {isWebGL2, assertWebGL2Context} from '../webgl-utils';\nimport Texture from './texture';\nimport {DATA_FORMAT_CHANNELS, TYPE_SIZES} from './texture-formats';\nimport Buffer from './buffer';\n\nexport default class Texture3D extends Texture {\n  static isSupported(gl) {\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, props = {}) {\n    assertWebGL2Context(gl);\n    props = Object.assign({depth: 1}, props, {target: GL.TEXTURE_3D, unpackFlipY: false});\n    super(gl, props);\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  // Image 3D copies from Typed Array or WebGLBuffer\n  setImageData({\n    level = 0,\n    dataFormat = GL.RGBA,\n    width,\n    height,\n    depth = 1,\n    border = 0,\n    format,\n    type = GL.UNSIGNED_BYTE,\n    offset = 0,\n    data,\n    parameters = {}\n  }) {\n    this._trackDeallocatedMemory('Texture');\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withParameters(this.gl, parameters, () => {\n      if (ArrayBuffer.isView(data)) {\n        this.gl.texImage3D(\n          this.target,\n          level,\n          dataFormat,\n          width,\n          height,\n          depth,\n          border,\n          format,\n          type,\n          data\n        );\n      }\n\n      if (data instanceof Buffer) {\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle);\n        this.gl.texImage3D(\n          this.target,\n          level,\n          dataFormat,\n          width,\n          height,\n          depth,\n          border,\n          format,\n          type,\n          offset\n        );\n      }\n    });\n\n    if (data && data.byteLength) {\n      this._trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      // NOTE(Tarek): Default to RGBA bytes\n      const channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n      const channelSize = TYPE_SIZES[this.type] || 1;\n\n      this._trackAllocatedMemory(\n        this.width * this.height * this.depth * channels * channelSize,\n        'Texture'\n      );\n    }\n\n    this.loaded = true;\n\n    return this;\n  }\n}\n","// map of parameter setter function names, parameter constants, default values and types\n// - Uses gl function names, except when setter function exist that are named differently\n// - When the WebGL api offers <setter> and <setter>Separate (e.g. blendEquation and\n//   blendEquationSeparate, we use non-separate name, but accept both non-separate and\n//   separate arguments. Thus, a `getParameter` call will always return all the separate values\n//   in an array, in a form that can be accepted by the setter.\n\nimport GL from '@luma.gl/constants';\n\n// HELPERS\n\nfunction isArray(array) {\n  return Array.isArray(array) || ArrayBuffer.isView(array);\n}\n\nexport default {\n  framebuffer: (gl, framebuffer) => {\n    // accepts 1) a WebGLFramebuffer 2) null (default framebuffer), or 3) luma.gl Framebuffer class\n    // framebuffer is null when restoring to default framebuffer, otherwise use the WebGL handle.\n    const handle = framebuffer && 'handle' in framebuffer ? framebuffer.handle : framebuffer;\n    return gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  },\n  blend: (gl, value) => (value ? gl.enable(GL.BLEND) : gl.disable(GL.BLEND)),\n  blendColor: (gl, value) => gl.blendColor(...value),\n  blendEquation: (gl, args) => {\n    args = isArray(args) ? args : [args, args];\n    gl.blendEquationSeparate(...args);\n  },\n  blendFunc: (gl, args) => {\n    args = isArray(args) && args.length === 2 ? [...args, ...args] : args;\n    gl.blendFuncSeparate(...args);\n  },\n\n  clearColor: (gl, value) => gl.clearColor(...value),\n  clearDepth: (gl, value) => gl.clearDepth(value),\n  clearStencil: (gl, value) => gl.clearStencil(value),\n\n  colorMask: (gl, value) => gl.colorMask(...value),\n\n  cull: (gl, value) => (value ? gl.enable(GL.CULL_FACE) : gl.disable(GL.CULL_FACE)),\n  cullFace: (gl, value) => gl.cullFace(value),\n\n  depthTest: (gl, value) => (value ? gl.enable(GL.DEPTH_TEST) : gl.disable(GL.DEPTH_TEST)),\n  depthFunc: (gl, value) => gl.depthFunc(value),\n  depthMask: (gl, value) => gl.depthMask(value),\n  depthRange: (gl, value) => gl.depthRange(...value),\n\n  dither: (gl, value) => (value ? gl.enable(GL.DITHER) : gl.disable(GL.DITHER)),\n\n  derivativeHint: (gl, value) => {\n    // gl1: 'OES_standard_derivatives'\n    gl.hint(GL.FRAGMENT_SHADER_DERIVATIVE_HINT, value);\n  },\n\n  frontFace: (gl, value) => gl.frontFace(value),\n\n  mipmapHint: (gl, value) => gl.hint(GL.GENERATE_MIPMAP_HINT, value),\n\n  lineWidth: (gl, value) => gl.lineWidth(value),\n\n  polygonOffsetFill: (gl, value) =>\n    value ? gl.enable(GL.POLYGON_OFFSET_FILL) : gl.disable(GL.POLYGON_OFFSET_FILL),\n  polygonOffset: (gl, value) => gl.polygonOffset(...value),\n\n  sampleCoverage: (gl, value) => gl.sampleCoverage(...value),\n\n  scissorTest: (gl, value) => (value ? gl.enable(GL.SCISSOR_TEST) : gl.disable(GL.SCISSOR_TEST)),\n  scissor: (gl, value) => gl.scissor(...value),\n\n  stencilTest: (gl, value) => (value ? gl.enable(GL.STENCIL_TEST) : gl.disable(GL.STENCIL_TEST)),\n  stencilMask: (gl, value) => {\n    value = isArray(value) ? value : [value, value];\n    const [mask, backMask] = value;\n    gl.stencilMaskSeparate(GL.FRONT, mask);\n    gl.stencilMaskSeparate(GL.BACK, backMask);\n  },\n  stencilFunc: (gl, args) => {\n    args = isArray(args) && args.length === 3 ? [...args, ...args] : args;\n    const [func, ref, mask, backFunc, backRef, backMask] = args;\n    gl.stencilFuncSeparate(GL.FRONT, func, ref, mask);\n    gl.stencilFuncSeparate(GL.BACK, backFunc, backRef, backMask);\n  },\n  stencilOp: (gl, args) => {\n    args = isArray(args) && args.length === 3 ? [...args, ...args] : args;\n    const [sfail, dpfail, dppass, backSfail, backDpfail, backDppass] = args;\n    gl.stencilOpSeparate(GL.FRONT, sfail, dpfail, dppass);\n    gl.stencilOpSeparate(GL.BACK, backSfail, backDpfail, backDppass);\n  },\n\n  viewport: (gl, value) => gl.viewport(...value)\n};\n","import {setParameters as glSetParameters} from './unified-parameter-api';\nimport FUNCTION_STYLE_PARAMETER_SETTERS from './webgl-setter-function-table';\n\n// Adds support for using gl function names (in addition to parameter constants)\n// as keys in setParameters\n//\n// Note: Value may be \"normalized\" (in case a short form is supported).\n// In that case the normalized value is returned.\n\nexport function setParameters(gl, parameters) {\n  // Handles any GL parameter keys\n  glSetParameters(gl, parameters);\n  // Check for function style keys\n  for (const key in parameters) {\n    const setter = FUNCTION_STYLE_PARAMETER_SETTERS[key];\n    if (setter) {\n      setter(gl, parameters[key], key);\n    }\n  }\n}\n","import isBrowser from './utils/is-browser';\nimport {global} from './utils/globals';\nimport log from './utils/log';\nimport {Stats} from 'probe.gl';\n\n// TODO - when webgl2 gets ubiquitous, remove default support for webgl1 by dropping next line\n// Can be installed by applications\nimport '@luma.gl/webgl2-polyfill';\n\n// Version detection using babel plugin\n/* global __VERSION__ */\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'untranspiled source';\n\nconst STARTUP_MESSAGE = 'set luma.log.priority=1 (or higher) to trace rendering';\n// Assign luma.log.priority in console to control logging: \\\n// 0: none, 1: minimal, 2: verbose, 3: attribute/uniforms, 4: gl logs\n// luma.log.break[], set to gl funcs, luma.log.profile[] set to model names`;\n\nclass StatsManager {\n  constructor() {\n    this.stats = new Map();\n  }\n\n  get(name) {\n    if (!this.stats.has(name)) {\n      this.stats.set(name, new Stats({id: name}));\n    }\n\n    return this.stats.get(name);\n  }\n}\n\nconst lumaStats = new StatsManager();\n\nif (global.luma && global.luma.VERSION !== VERSION) {\n  throw new Error(`luma.gl - multiple VERSIONs detected: ${global.luma.VERSION} vs ${VERSION}`);\n}\n\nif (!global.luma) {\n  if (isBrowser) {\n    log.log(1, `luma.gl ${VERSION} - ${STARTUP_MESSAGE}`)();\n  }\n\n  global.luma = global.luma || {\n    VERSION,\n    version: VERSION,\n    log,\n\n    // A global stats object that various components can add information to\n    // E.g. see webgl/resource.js\n    stats: lumaStats,\n\n    // Keep some luma globals in a sub-object\n    // This allows us to dynamically detect if certain modules have been\n    // included (such as IO and headless) and enable related functionality,\n    // without unconditionally requiring and thus bundling big dependencies\n    // into the app.\n    globals: {\n      modules: {},\n      nodeIO: {}\n    }\n  };\n}\n\nexport {global};\nexport {lumaStats};\nexport default global.luma;\n","import GL from '@luma.gl/constants';\nimport {assert} from '../utils';\n\n// Returns number of components in a specific readPixels WebGL format\nexport function glFormatToComponents(format) {\n  switch (format) {\n    case GL.ALPHA:\n    case GL.R32F:\n    case GL.RED:\n      return 1;\n    case GL.RG32F:\n    case GL.RG:\n      return 2;\n    case GL.RGB:\n    case GL.RGB32F:\n      return 3;\n    case GL.RGBA:\n    case GL.RGBA32F:\n      return 4;\n    // TODO: Add support for additional WebGL2 formats\n    default:\n      assert(false);\n      return 0;\n  }\n}\n\n// Return byte count for given readPixels WebGL type\nexport function glTypeToBytes(type) {\n  switch (type) {\n    case GL.UNSIGNED_BYTE:\n      return 1;\n    case GL.UNSIGNED_SHORT_5_6_5:\n    case GL.UNSIGNED_SHORT_4_4_4_4:\n    case GL.UNSIGNED_SHORT_5_5_5_1:\n      return 2;\n    case GL.FLOAT:\n      return 4;\n    // TODO: Add support for additional WebGL2 types\n    default:\n      assert(false);\n      return 0;\n  }\n}\n","import GL from '@luma.gl/constants';\nimport Buffer from './buffer';\nimport Framebuffer from './framebuffer';\nimport Texture from './texture';\nimport {withParameters} from '../context';\nimport {assertWebGL2Context, flipRows, scalePixels} from '../webgl-utils';\nimport {getTypedArrayFromGLType, getGLTypeFromTypedArray} from '../webgl-utils/typed-array-utils';\nimport {glFormatToComponents, glTypeToBytes} from '../webgl-utils/format-utils';\nimport {toFramebuffer} from '../webgl-utils/texture-utils';\nimport {assert, log} from '../utils';\n\n// NOTE: Slow requires roundtrip to GPU\n// Copies data from a Framebuffer or a Texture object into ArrayBuffer object.\n// App can provide targetPixelArray or have it auto allocated by this method\n// @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n//  newly allocated by this method unless provided by app.\nexport function readPixelsToArray(\n  source,\n  {\n    sourceX = 0,\n    sourceY = 0,\n    sourceFormat = GL.RGBA,\n    sourceAttachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    target = null,\n    // following parameters are auto deduced if not provided\n    sourceWidth,\n    sourceHeight,\n    sourceType\n  } = {}\n) {\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(source);\n  assert(framebuffer);\n  const {gl, handle, attachments} = framebuffer;\n  sourceWidth = sourceWidth || framebuffer.width;\n  sourceHeight = sourceHeight || framebuffer.height;\n\n  // TODO - Set and unset gl.readBuffer\n  if (sourceAttachment === GL.COLOR_ATTACHMENT0 && handle === null) {\n    sourceAttachment = GL.FRONT;\n  }\n\n  assert(attachments[sourceAttachment]);\n\n  // Deduce the type from color attachment if not provided.\n  sourceType = sourceType || attachments[sourceAttachment].type;\n\n  // Deduce type and allocated pixelArray if needed\n  target = getPixelArray(target, sourceType, sourceFormat, sourceWidth, sourceHeight);\n\n  // Pixel array available, if necessary, deduce type from it.\n  sourceType = sourceType || getGLTypeFromTypedArray(target);\n\n  const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  gl.readPixels(sourceX, sourceY, sourceWidth, sourceHeight, sourceFormat, sourceType, target);\n  gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n  return target;\n}\n\n// NOTE: doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n// Copies data from a Framebuffer or a Texture object into a Buffer object.\nexport function readPixelsToBuffer(\n  source,\n  {\n    sourceX = 0,\n    sourceY = 0,\n    sourceFormat = GL.RGBA,\n    target = null, // A new Buffer object is created when not provided.\n    targetByteOffset = 0, // byte offset in buffer object\n    // following parameters are auto deduced if not provided\n    sourceWidth,\n    sourceHeight,\n    sourceType\n  }\n) {\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(source);\n  assert(framebuffer);\n  const {gl} = framebuffer;\n  sourceWidth = sourceWidth || framebuffer.width;\n  sourceHeight = sourceHeight || framebuffer.height;\n\n  // Asynchronus read (PIXEL_PACK_BUFFER) is WebGL2 only feature\n  assertWebGL2Context(gl);\n\n  // deduce type if not available.\n  sourceType = sourceType || (target ? target.type : GL.UNSIGNED_BYTE);\n\n  if (!target) {\n    // Create new buffer with enough size\n    const components = glFormatToComponents(sourceFormat);\n    const byteCount = glTypeToBytes(sourceType);\n    const byteLength = targetByteOffset + sourceWidth * sourceHeight * components * byteCount;\n    target = new Buffer(gl, {byteLength, accessor: {type: sourceType, size: components}});\n  }\n\n  target.bind({target: GL.PIXEL_PACK_BUFFER});\n  withParameters(gl, {framebuffer}, () => {\n    gl.readPixels(\n      sourceX,\n      sourceY,\n      sourceWidth,\n      sourceHeight,\n      sourceFormat,\n      sourceType,\n      targetByteOffset\n    );\n  });\n  target.unbind({target: GL.PIXEL_PACK_BUFFER});\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n\n  return target;\n}\n\n// Reads pixels from a Framebuffer or Texture object to a dataUrl\nexport function copyToDataUrl(\n  source,\n  {\n    sourceAttachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    targetMaxHeight = Number.MAX_SAFE_INTEGER\n  } = {}\n) {\n  let data = readPixelsToArray(source, {sourceAttachment});\n\n  // Scale down\n  let {width, height} = source;\n  while (height > targetMaxHeight) {\n    ({data, width, height} = scalePixels({data, width, height}));\n  }\n\n  // Flip to top down coordinate system\n  flipRows({data, width, height});\n\n  /* global document */\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  const context = canvas.getContext('2d');\n\n  // Copy the pixels to a 2D canvas\n  const imageData = context.createImageData(width, height);\n  imageData.data.set(data);\n  context.putImageData(imageData, 0, 0);\n\n  return canvas.toDataURL();\n}\n\n// Reads pixels from a Framebuffer or Texture object into an HTML Image\nexport function copyToImage(\n  source,\n  {\n    sourceAttachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    targetImage = null\n  } = {}\n) {\n  /* global Image */\n  const dataUrl = copyToDataUrl(source, {sourceAttachment});\n  targetImage = targetImage || new Image();\n  targetImage.src = dataUrl;\n  return targetImage;\n}\n\n// Copy a rectangle from a Framebuffer or Texture object into a texture (at an offset)\n// eslint-disable-next-line complexity, max-statements\nexport function copyToTexture(\n  source,\n  target,\n  {\n    sourceX = 0,\n    sourceY = 0,\n    // attachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n\n    targetX,\n    targetY,\n    targetZ,\n    targetMipmaplevel = 0,\n    targetInternalFormat = GL.RGBA,\n\n    width, // defaults to target width\n    height // defaults to target height\n  } = {}\n) {\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(source);\n  assert(framebuffer);\n  const {gl, handle} = framebuffer;\n  const isSubCopy =\n    typeof targetX !== 'undefined' ||\n    typeof targetY !== 'undefined' ||\n    typeof targetZ !== 'undefined';\n  targetX = targetX || 0;\n  targetY = targetY || 0;\n  targetZ = targetZ || 0;\n  const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  // TODO - support gl.readBuffer (WebGL2 only)\n  // const prevBuffer = gl.readBuffer(attachment);\n  assert(target);\n  let texture = null;\n  if (target instanceof Texture) {\n    texture = target;\n    width = Number.isFinite(width) ? width : texture.width;\n    height = Number.isFinite(height) ? height : texture.height;\n    texture.bind(0);\n    target = texture.target;\n  }\n\n  if (!isSubCopy) {\n    gl.copyTexImage2D(\n      target,\n      targetMipmaplevel,\n      targetInternalFormat,\n      sourceX,\n      sourceY,\n      width,\n      height,\n      0 /* border must be 0 */\n    );\n  } else {\n    switch (target) {\n      case GL.TEXTURE_2D:\n      case GL.TEXTURE_CUBE_MAP:\n        gl.copyTexSubImage2D(\n          target,\n          targetMipmaplevel,\n          targetX,\n          targetY,\n          sourceX,\n          sourceY,\n          width,\n          height\n        );\n        break;\n      case GL.TEXTURE_2D_ARRAY:\n      case GL.TEXTURE_3D:\n        gl.copyTexSubImage3D(\n          target,\n          targetMipmaplevel,\n          targetX,\n          targetY,\n          targetZ,\n          sourceX,\n          sourceY,\n          width,\n          height\n        );\n        break;\n      default:\n    }\n  }\n  if (texture) {\n    texture.unbind();\n  }\n  gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n  return texture;\n}\n\n// NOTE: WEBLG2 only\n// Copies a rectangle of pixels between Framebuffer or Texture objects\n// eslint-disable-next-line max-statements, complexity\nexport function blit(\n  source,\n  target,\n  {\n    sourceAttachment = GL.COLOR_ATTACHMENT0,\n    sourceX0 = 0,\n    sourceY0 = 0,\n    sourceX1,\n    sourceY1,\n    targetX0 = 0,\n    targetY0 = 0,\n    targetX1,\n    targetY1,\n    color = true,\n    depth = false,\n    stencil = false,\n    mask = 0,\n    filter = GL.NEAREST\n  } = {}\n) {\n  const {framebuffer: srcFramebuffer, deleteFramebuffer: deleteSrcFramebuffer} = getFramebuffer(\n    source\n  );\n  const {framebuffer: dstFramebuffer, deleteFramebuffer: deleteDstFramebuffer} = getFramebuffer(\n    target\n  );\n\n  assert(srcFramebuffer);\n  assert(dstFramebuffer);\n  const {gl, handle, width, height, readBuffer} = dstFramebuffer;\n  assertWebGL2Context(gl);\n\n  if (!srcFramebuffer.handle && sourceAttachment === GL.COLOR_ATTACHMENT0) {\n    sourceAttachment = GL.FRONT;\n  }\n\n  if (color) {\n    mask |= GL.COLOR_BUFFER_BIT;\n  }\n  if (depth) {\n    mask |= GL.DEPTH_BUFFER_BIT;\n  }\n  if (stencil) {\n    mask |= GL.STENCIL_BUFFER_BIT;\n  }\n\n  if (deleteSrcFramebuffer || deleteDstFramebuffer) {\n    // Either source or destiantion was a texture object, which is wrapped in a Framebuffer objecgt as color attachment.\n    // Overwrite the mask to `COLOR_BUFFER_BIT`\n    if (mask & (GL.DEPTH_BUFFER_BIT | GL.STENCIL_BUFFER_BIT)) {\n      mask = GL.COLOR_BUFFER_BIT;\n      log.warn('Blitting from or into a Texture object, forcing mask to GL.COLOR_BUFFER_BIT')();\n    }\n  }\n  assert(mask);\n\n  sourceX1 = sourceX1 === undefined ? srcFramebuffer.width : sourceX1;\n  sourceY1 = sourceY1 === undefined ? srcFramebuffer.height : sourceY1;\n  targetX1 = targetX1 === undefined ? width : targetX1;\n  targetY1 = targetY1 === undefined ? height : targetY1;\n\n  const prevDrawHandle = gl.bindFramebuffer(GL.DRAW_FRAMEBUFFER, handle);\n  const prevReadHandle = gl.bindFramebuffer(GL.READ_FRAMEBUFFER, srcFramebuffer.handle);\n  gl.readBuffer(sourceAttachment);\n  gl.blitFramebuffer(\n    sourceX0,\n    sourceY0,\n    sourceX1,\n    sourceY1,\n    targetX0,\n    targetY0,\n    targetX1,\n    targetY1,\n    mask,\n    filter\n  );\n  gl.readBuffer(readBuffer);\n  gl.bindFramebuffer(GL.READ_FRAMEBUFFER, prevReadHandle || null);\n  gl.bindFramebuffer(GL.DRAW_FRAMEBUFFER, prevDrawHandle || null);\n  if (deleteSrcFramebuffer) {\n    srcFramebuffer.delete();\n  }\n  if (deleteDstFramebuffer) {\n    dstFramebuffer.delete();\n  }\n\n  return dstFramebuffer;\n}\n\n// Helper methods\n\nfunction getFramebuffer(source) {\n  if (!(source instanceof Framebuffer)) {\n    return {framebuffer: toFramebuffer(source), deleteFramebuffer: true};\n  }\n  return {framebuffer: source, deleteFramebuffer: false};\n}\n\nfunction getPixelArray(pixelArray, type, format, width, height) {\n  if (pixelArray) {\n    return pixelArray;\n  }\n  // Allocate pixel array if not already available, using supplied type\n  type = type || GL.UNSIGNED_BYTE;\n  const ArrayType = getTypedArrayFromGLType(type, {clamped: false});\n  const components = glFormatToComponents(format);\n  // TODO - check for composite type (components = 1).\n  return new ArrayType(width * height * components);\n}\n","/* eslint-disable no-inline-comments, max-len, camelcase */\nimport GL from '@luma.gl/constants';\n\nconst OES_element_index = 'OES_element_index';\nconst WEBGL_draw_buffers = 'WEBGL_draw_buffers';\nconst EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';\nconst EXT_disjoint_timer_query_webgl2 = 'EXT_disjoint_timer_query_webgl2';\nconst EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';\nconst WEBGL_debug_renderer_info = 'WEBGL_debug_renderer_info';\n\nconst GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8b8b;\nconst GL_DONT_CARE = 0x1100;\nconst GL_GPU_DISJOINT_EXT = 0x8fbb;\nconst GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84ff;\nconst GL_UNMASKED_VENDOR_WEBGL = 0x9245; // vendor string of the graphics driver.\nconst GL_UNMASKED_RENDERER_WEBGL = 0x9246; // renderer string of the graphics driver.\n\nconst getWebGL2ValueOrZero = gl => (!isWebGL2(gl) ? 0 : undefined);\n\n// if a function returns undefined in this table,\n// the original getParameter will be called, defeating the override\nconst WEBGL_PARAMETERS = {\n  [GL.READ_BUFFER]: gl => (!isWebGL2(gl) ? GL.COLOR_ATTACHMENT0 : undefined),\n\n  // WebGL2 context parameters\n  [GL_FRAGMENT_SHADER_DERIVATIVE_HINT]: gl => (!isWebGL2(gl) ? GL_DONT_CARE : undefined),\n\n  [GL.RASTERIZER_DISCARD]: getWebGL2ValueOrZero,\n\n  [GL.SAMPLES]: getWebGL2ValueOrZero,\n\n  // WebGL2 extension context parameters\n  [GL_GPU_DISJOINT_EXT]: (gl, getParameter) => {\n    const ext = isWebGL2(gl)\n      ? gl.getExtension(EXT_disjoint_timer_query_webgl2)\n      : gl.getExtension(EXT_disjoint_timer_query);\n    return ext && ext.GPU_DISJOINT_EXT ? getParameter(ext.GPU_DISJOINT_EXT) : 0;\n  },\n\n  // Extension fixed values\n  [GL_UNMASKED_VENDOR_WEBGL]: (gl, getParameter) => {\n    const ext = gl.getExtension(WEBGL_debug_renderer_info);\n    return getParameter((ext && ext.UNMASKED_VENDOR_WEBGL) || GL.VENDOR);\n  },\n\n  [GL_UNMASKED_RENDERER_WEBGL]: (gl, getParameter) => {\n    const ext = gl.getExtension(WEBGL_debug_renderer_info);\n    return getParameter((ext && ext.UNMASKED_RENDERER_WEBGL) || GL.RENDERER);\n  },\n\n  // Extension LIMITS\n  [GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT]: (gl, getParameter) => {\n    const ext = gl.luma.extensions[EXT_texture_filter_anisotropic];\n    return ext ? getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1.0;\n  },\n\n  // WebGL2 Limits\n  [GL.MAX_3D_TEXTURE_SIZE]: getWebGL2ValueOrZero,\n  [GL.MAX_ARRAY_TEXTURE_LAYERS]: getWebGL2ValueOrZero,\n  [GL.MAX_CLIENT_WAIT_TIMEOUT_WEBGL]: getWebGL2ValueOrZero,\n  [GL.MAX_COLOR_ATTACHMENTS]: (gl, getParameter) => {\n    if (!isWebGL2(gl)) {\n      const ext = gl.getExtension(WEBGL_draw_buffers);\n      return ext ? getParameter(ext.MAX_COLOR_ATTACHMENTS_WEBGL) : 0;\n    }\n    return undefined;\n  },\n  [GL.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_COMBINED_UNIFORM_BLOCKS]: getWebGL2ValueOrZero,\n  [GL.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_DRAW_BUFFERS]: gl => {\n    if (!isWebGL2(gl)) {\n      const ext = gl.getExtension(WEBGL_draw_buffers);\n      return ext ? ext.MAX_DRAW_BUFFERS_WEBGL : 0;\n    }\n    return undefined;\n  },\n  [GL.MAX_ELEMENT_INDEX]:\n    // Guess: per webglstats.com 99.6% of webgl2 supports 2147483647\n    gl => (gl.getExtension(OES_element_index) ? 2147483647 : 65535),\n  [GL.MAX_ELEMENTS_INDICES]:\n    // Guess: \"Reasonably safe\" per webglstats.com - could be higher/lower (on some mobile devices)\n    gl => (gl.getExtension(OES_element_index) ? 16777216 : 65535),\n  [GL.MAX_ELEMENTS_VERTICES]:\n    // Guess: \"Reasonably safe\" per webglstats.com - could be higher/lower (on some mobile devices)\n    gl => 16777216,\n  [GL.MAX_FRAGMENT_INPUT_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_FRAGMENT_UNIFORM_BLOCKS]: getWebGL2ValueOrZero,\n  [GL.MAX_FRAGMENT_UNIFORM_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_SAMPLES]: getWebGL2ValueOrZero,\n  [GL.MAX_SERVER_WAIT_TIMEOUT]: getWebGL2ValueOrZero,\n  [GL.MAX_TEXTURE_LOD_BIAS]: getWebGL2ValueOrZero,\n  [GL.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS]: getWebGL2ValueOrZero,\n  [GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_UNIFORM_BLOCK_SIZE]: getWebGL2ValueOrZero,\n  [GL.MAX_UNIFORM_BUFFER_BINDINGS]: getWebGL2ValueOrZero,\n  [GL.MAX_VARYING_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_VERTEX_OUTPUT_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MAX_VERTEX_UNIFORM_BLOCKS]: getWebGL2ValueOrZero,\n  [GL.MAX_VERTEX_UNIFORM_COMPONENTS]: getWebGL2ValueOrZero,\n  [GL.MIN_PROGRAM_TEXEL_OFFSET]: getWebGL2ValueOrZero,\n  [GL.MAX_PROGRAM_TEXEL_OFFSET]: getWebGL2ValueOrZero,\n  [GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT]: getWebGL2ValueOrZero\n};\n\n// Return true if WebGL2 context\nfunction isWebGL2(gl) {\n  return Boolean(gl && gl._version === 2);\n}\n\n// A \"replacement\" gl.getParameter that accepts \"enums\" from extensions and WebGL2\n// and returns reasonably safe defaults\nexport function getParameterPolyfill(gl, originalGetParameter, pname) {\n  // Return mock limits (usually 0) for WebGL2 constants to ensure these\n  // can be queries without error\n  const limit = WEBGL_PARAMETERS[pname];\n  const value = typeof limit === 'function' ? limit(gl, originalGetParameter, pname) : limit;\n  const result = value !== undefined ? value : originalGetParameter(pname);\n  return result;\n}\n","import GL from '@luma.gl/constants';\nimport assert from './assert';\n\nimport {getParameterPolyfill} from './polyfills/get-parameter-polyfill';\n\nconst OES_vertex_array_object = 'OES_vertex_array_object';\nconst ANGLE_instanced_arrays = 'ANGLE_instanced_arrays';\nconst WEBGL_draw_buffers = 'WEBGL_draw_buffers';\nconst EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';\nconst EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';\n\nconst ERR_VAO_NOT_SUPPORTED = 'VertexArray requires WebGL2 or OES_vertex_array_object extension';\n\n// Return true if WebGL2 context\nfunction isWebGL2(gl) {\n  return Boolean(gl && gl._version === 2);\n}\n\n// Return object with webgl2 flag and an extension\nfunction getExtensionData(gl, extension) {\n  return {\n    webgl2: isWebGL2(gl),\n    ext: gl.getExtension(extension)\n  };\n}\n\n// function mapExtensionConstant(gl, constant) {\n//   switch (constant) {\n//   case ext.FRAGMENT_SHADER_DERIVATIVE_HINT_OES: return GL.FRAGMENT_SHADER_DERIVATIVE_HINT;\n//   }\n// }\n\nexport const WEBGL2_CONTEXT_POLYFILLS = {\n  // POLYFILL TABLE\n  [OES_vertex_array_object]: {\n    meta: {suffix: 'OES'},\n    // NEW METHODS\n    createVertexArray: () => {\n      assert(false, ERR_VAO_NOT_SUPPORTED);\n    },\n    deleteVertexArray: () => {},\n    bindVertexArray: () => {},\n    isVertexArray: () => false\n  },\n  [ANGLE_instanced_arrays]: {\n    meta: {\n      suffix: 'ANGLE'\n      // constants: {\n      //   VERTEX_ATTRIB_ARRAY_DIVISOR: 'VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE'\n      // }\n    },\n    vertexAttribDivisor(location, divisor) {\n      // Accept divisor 0 even if instancing is not supported (0 = no instancing)\n      assert(divisor === 0, 'WebGL instanced rendering not supported');\n    },\n    drawElementsInstanced: () => {},\n    drawArraysInstanced: () => {}\n  },\n  [WEBGL_draw_buffers]: {\n    meta: {\n      suffix: 'WEBGL'\n    },\n    drawBuffers: () => {\n      assert(false);\n    }\n  },\n  [EXT_disjoint_timer_query]: {\n    meta: {suffix: 'EXT'},\n    // WebGL1: Polyfills the WebGL2 Query API\n    createQuery: () => {\n      assert(false);\n    },\n    deleteQuery: () => {\n      assert(false);\n    },\n    beginQuery: () => {\n      assert(false);\n    },\n    endQuery: () => {},\n    getQuery(handle, pname) {\n      return this.getQueryObject(handle, pname);\n    },\n    // The WebGL1 extension uses getQueryObject rather then getQueryParameter\n    getQueryParameter(handle, pname) {\n      return this.getQueryObject(handle, pname);\n    },\n    getQueryObject: () => {}\n  }\n};\n\nexport const WEBGL2_CONTEXT_OVERRIDES = {\n  // Ensure readBuffer is a no-op\n  readBuffer: (gl, originalFunc, attachment) => {\n    if (isWebGL2(gl)) {\n      originalFunc(attachment);\n    } else {\n      // assert(attachment !== GL_COLOR_ATTACHMENT0 && attachment !== GL_FRONT);\n    }\n  },\n  // Override for getVertexAttrib that returns sane values for non-WebGL1 constants\n  getVertexAttrib: (gl, originalFunc, location, pname) => {\n    // const gl = this; // eslint-disable-line\n    const {webgl2, ext} = getExtensionData(gl, ANGLE_instanced_arrays);\n\n    let result;\n    switch (pname) {\n      // WebGL1 attributes will never be integer\n      case GL.VERTEX_ATTRIB_ARRAY_INTEGER:\n        result = !webgl2 ? false : undefined;\n        break;\n      // if instancing is not available, return 0 meaning divisor has not been set\n      case GL.VERTEX_ATTRIB_ARRAY_DIVISOR:\n        result = !webgl2 && !ext ? 0 : undefined;\n        break;\n      default:\n    }\n\n    return result !== undefined ? result : originalFunc(location, pname);\n  },\n  // Handle transform feedback and uniform block queries in WebGL1\n  getProgramParameter: (gl, originalFunc, program, pname) => {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case GL.TRANSFORM_FEEDBACK_BUFFER_MODE:\n          return GL.SEPARATE_ATTRIBS;\n        case GL.TRANSFORM_FEEDBACK_VARYINGS:\n          return 0;\n        case GL.ACTIVE_UNIFORM_BLOCKS:\n          return 0;\n        default:\n      }\n    }\n    return originalFunc(program, pname);\n  },\n  getInternalformatParameter: (gl, originalFunc, target, format, pname) => {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case GL.SAMPLES:\n          return new Int32Array([0]);\n        default:\n      }\n    }\n    return gl.getInternalformatParameter(target, format, pname);\n  },\n  getTexParameter(gl, originalFunc, target, pname) {\n    switch (pname) {\n      case GL.TEXTURE_MAX_ANISOTROPY_EXT:\n        const {extensions} = gl.luma;\n        const ext = extensions[EXT_texture_filter_anisotropic];\n        pname = (ext && ext.TEXTURE_MAX_ANISOTROPY_EXT) || GL.TEXTURE_MAX_ANISOTROPY_EXT;\n        break;\n      default:\n    }\n    return originalFunc(target, pname);\n  },\n  getParameter: getParameterPolyfill,\n  hint(gl, originalFunc, pname, value) {\n    // TODO - handle GL.FRAGMENT_SHADER_DERIVATIVE_HINT:\n    // switch (pname) {\n    // case GL.FRAGMENT_SHADER_DERIVATIVE_HINT:\n    // }\n    return originalFunc(pname, value);\n  }\n};\n","import {pushContextState, popContextState} from './track-context-state';\nimport {setParameters} from '../unified-parameter-api/set-parameters';\nimport {assert, isObjectEmpty} from '../utils';\n\n// Stores current \"global\" WebGL context settings, changes selected parameters,\n// executes function, restores parameters\nexport function withParameters(gl, parameters, func) {\n  // assertWebGLContext(gl);\n\n  if (isObjectEmpty(parameters)) {\n    // Avoid setting state if no parameters provided. Just call and return\n    return func(gl);\n  }\n\n  const {nocatch = true} = parameters;\n\n  // frameBuffer not supported: use framebuffer API\n  // TODO - is this still true?\n  assert(!parameters.frameBuffer);\n\n  pushContextState(gl);\n  setParameters(gl, parameters);\n\n  // Setup is done, call the function\n  let value;\n\n  if (nocatch) {\n    // Avoid try catch to minimize stack size impact for safe execution paths\n    value = func(gl);\n    popContextState(gl);\n  } else {\n    // Wrap in a try-catch to ensure that parameters are restored on exceptions\n    try {\n      value = func(gl);\n    } finally {\n      popContextState(gl);\n    }\n  }\n\n  return value;\n}\n","// Returns true if given object is empty, false otherwise.\nexport function isObjectEmpty(object) {\n  for (const key in object) {\n    return false;\n  }\n  return true;\n}\n\n// Returns true if WebGL2 context (Heuristic)\nexport function isWebGL2(gl) {\n  return Boolean(gl && gl._version === 2);\n}\n","// Avoid bundling assert polyfill module\nexport default function assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'luma.gl: assertion failed.');\n  }\n}\n","/* Use as\nimport {checkProps} from '../util/check-props;'\n\nconst PROP_CHECKS = {\n  // Removed props no longer supported, print error and link to upgrade guide\n  removedProps: {\n  },\n  // Deprecated props\n  deprecatedProps: {\n    offset: 'accessor',\n    stride: 'accessor',\n    type: 'accessor',\n    size: 'accessor',\n    divisor: 'accessor',\n    normalized: 'accessor',\n    integer: 'accessor'\n  },\n  // Deprecated props that can be autosubstituted, print warning and return updated props object\n  replacedProps: {\n    bytes: 'byteLength'\n  }\n}\n\nclass Buffer {\n  setProps(props) {\n    checkProps('Buffer', props, PROP_CHECKS);\n  }\n}\n*/\nimport log from './log';\n\nexport function checkProps(className, props, propChecks) {\n  const {removedProps = {}, deprecatedProps = {}, replacedProps = {}} = propChecks;\n\n  // removedProps: Removed props no longer supported\n  // print error and link to upgrade guide\n  for (const propName in removedProps) {\n    if (propName in props) {\n      const replacementProp = removedProps[propName];\n      const replacement = replacementProp ? `${className}.${removedProps[propName]}` : 'N/A';\n      log.removed(`${className}.${propName}`, replacement)();\n    }\n  }\n\n  // deprecatedProps: Deprecated props that can not be autosubstituted\n  // print warning and rely on caller to substitute\n  for (const propName in deprecatedProps) {\n    if (propName in props) {\n      const replacementProp = deprecatedProps[propName];\n      log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();\n    }\n  }\n\n  // replacedProps: Deprecated props that can be autosubstituted\n  // print warning and return updated props object\n  let newProps = null;\n  for (const propName in replacedProps) {\n    if (propName in props) {\n      const replacementProp = replacedProps[propName];\n      log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();\n      newProps = newProps || Object.assign({}, props);\n      newProps[replacementProp] = props[propName];\n      delete newProps[propName];\n    }\n  }\n\n  return newProps || props;\n}\n","// import {WebGLRenderingContext, WebGL2RenderingContext} from './webgl-types';\nimport {assert} from '../utils';\n\n// Heuristic testing of contexts (to indentify debug wrappers around gl contexts)\n// const GL_ARRAY_BUFFER = 0x8892;\n\nexport const ERR_CONTEXT = 'Invalid WebGLRenderingContext';\nexport const ERR_WEBGL = ERR_CONTEXT;\nexport const ERR_WEBGL2 = 'Requires WebGL2';\n\nexport function isWebGL(gl) {\n  return Boolean(gl && Number.isFinite(gl._version));\n}\n\nexport function isWebGL2(gl) {\n  return Boolean(gl && gl._version === 2);\n}\n\nexport function assertWebGLContext(gl) {\n  // Need to handle debug context\n  assert(isWebGL(gl), ERR_CONTEXT);\n}\n\nexport function assertWebGL2Context(gl) {\n  // Need to handle debug context\n  assert(isWebGL2(gl), ERR_WEBGL2);\n}\n","import assert from './assert';\n\nconst uidCounters = {};\n\n/**\n * Returns a UID.\n * @param {String} id= - Identifier base name\n * @return {number} uid\n **/\nexport function uid(id = 'id') {\n  uidCounters[id] = uidCounters[id] || 1;\n  const count = uidCounters[id]++;\n  return `${id}-${count}`;\n}\n\n/**\n * Verifies if a given number is power of two or not.\n * @param {object} n - The number to check.\n * @return {Array} Returns true if the given number is power of 2, false otherwise.\n **/\nexport function isPowerOfTwo(n) {\n  assert(typeof n === 'number', 'Input must be a number');\n  return n && (n & (n - 1)) === 0;\n}\n\n// Returns true if given object is empty, false otherwise.\nexport function isObjectEmpty(obj) {\n  let isEmpty = true;\n  /* eslint-disable no-unused-vars  */\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n  /* eslint-enable no-unused-vars  */\n  return isEmpty;\n}\n","import {assert} from '../utils';\n\n// Resolve a WebGL enumeration name (returns itself if already a number)\nexport function getKeyValue(gl, name) {\n  // If not a string, return (assume number)\n  if (typeof name !== 'string') {\n    return name;\n  }\n\n  // If string converts to number, return number\n  const number = Number(name);\n  if (!isNaN(number)) {\n    return number;\n  }\n\n  // Look up string, after removing any 'GL.' or 'gl.' prefix\n  name = name.replace(/^.*\\./, '');\n  const value = gl[name];\n  assert(value !== undefined, `Accessing undefined constant GL.${name}`);\n  return value;\n}\n\nexport function getKey(gl, value) {\n  value = Number(value);\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return `GL.${key}`;\n    }\n  }\n  return String(value);\n}\n\nexport function getKeyType(gl, value) {\n  assert(value !== undefined, 'undefined key');\n  value = Number(value);\n  for (const key in gl) {\n    if (gl[key] === value) {\n      return `GL.${key}`;\n    }\n  }\n  return String(value);\n}\n","import log from './log';\n\n// Install stubs for removed methods\nexport function stubRemovedMethods(instance, className, version, methodNames) {\n  const upgradeMessage = `See luma.gl ${version} Upgrade Guide at \\\nhttp://uber.github.io/luma.gl/#/documentation/overview/upgrade-guide`;\n\n  const prototype = Object.getPrototypeOf(instance);\n\n  methodNames.forEach(methodName => {\n    if (prototype.methodName) {\n      return;\n    }\n\n    prototype[methodName] = () => {\n      log.removed(`Calling removed method ${className}.${methodName}: `, upgradeMessage)();\n      throw new Error(methodName);\n    };\n  });\n}\n","const DEFAULT_HIGHLIGHT_COLOR = new Uint8Array([0, 255, 255, 255]);\n\nconst DEFAULT_MODULE_OPTIONS = {\n  pickingSelectedColor: null, //  Set to a picking color to visually highlight that item\n  pickingHighlightColor: DEFAULT_HIGHLIGHT_COLOR, // Color of visual highlight of \"selected\" item\n  pickingThreshold: 1.0,\n  pickingActive: false // Set to true when rendering to off-screen \"picking\" buffer\n};\n\n/* eslint-disable camelcase */\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS) {\n  const uniforms = {};\n  if (opts.pickingSelectedColor !== undefined) {\n    if (opts.pickingSelectedColor === null) {\n      uniforms.picking_uSelectedColorValid = 0;\n    } else {\n      const selectedColor = [\n        opts.pickingSelectedColor[0],\n        opts.pickingSelectedColor[1],\n        opts.pickingSelectedColor[2]\n      ];\n      uniforms.picking_uSelectedColorValid = 1;\n      uniforms.picking_uSelectedColor = selectedColor;\n    }\n  }\n  if (opts.pickingHighlightColor !== undefined) {\n    uniforms.picking_uHighlightColor = opts.pickingHighlightColor;\n  }\n  // TODO - major hack - decide on normalization and remove\n  if (opts.pickingThreshold !== undefined) {\n    uniforms.picking_uThreshold = opts.pickingThreshold;\n  }\n  if (opts.pickingActive !== undefined) {\n    uniforms.picking_uActive = opts.pickingActive ? 1 : 0;\n  }\n  return uniforms;\n}\n\nconst vs = `\\\nuniform vec3 picking_uSelectedColor;\nuniform float picking_uThreshold;\nuniform bool picking_uSelectedColorValid;\n\nout vec4 picking_vRGBcolor_Aselected;\n\nconst float COLOR_SCALE = 1. / 255.;\n\nbool isVertexPicked(vec3 vertexColor) {\n  return\n    picking_uSelectedColorValid &&\n    abs(vertexColor.r - picking_uSelectedColor.r) < picking_uThreshold &&\n    abs(vertexColor.g - picking_uSelectedColor.g) < picking_uThreshold &&\n    abs(vertexColor.b - picking_uSelectedColor.b) < picking_uThreshold;\n}\n\nvoid picking_setPickingColor(vec3 pickingColor) {\n  // Do the comparison with selected item color in vertex shader as it should mean fewer compares\n  picking_vRGBcolor_Aselected.a =\n    float(isVertexPicked(pickingColor));\n\n  // Stores the picking color so that the fragment shader can render it during picking\n  picking_vRGBcolor_Aselected.rgb = pickingColor * COLOR_SCALE;\n}\n`;\n\nconst fs = `\\\nuniform bool picking_uActive; // true during rendering to offscreen picking buffer\nuniform vec3 picking_uSelectedColor;\nuniform vec4 picking_uHighlightColor;\n\nin vec4 picking_vRGBcolor_Aselected;\n\nconst float COLOR_SCALE = 1. / 255.;\n\n/*\n * Returns highlight color if this item is selected.\n */\nvec4 picking_filterHighlightColor(vec4 color) {\n  bool selected = bool(picking_vRGBcolor_Aselected.a);\n\n  if (selected) {\n    vec4 highLightColor = picking_uHighlightColor * COLOR_SCALE;\n\n    float highLightAlpha = highLightColor.a;\n    float blendedAlpha = highLightAlpha + color.a * (1.0 - highLightAlpha);\n    float highLightRatio = highLightAlpha / blendedAlpha;\n\n    vec3 blendedRGB = mix(color.rgb, highLightColor.rgb, highLightRatio);\n    return vec4(blendedRGB, blendedAlpha);\n  } else {\n    return color;\n  }\n}\n\n/*\n * Returns picking color if picking enabled else unmodified argument.\n */\nvec4 picking_filterPickingColor(vec4 color) {\n  vec3 pickingColor = picking_vRGBcolor_Aselected.rgb;\n  if (picking_uActive && length(pickingColor) < 0.001) {\n    discard;\n  }\n  return picking_uActive ? vec4(pickingColor, 1.0) : color;\n}\n\n/*\n * Returns picking color if picking is enabled if not\n * highlight color if this item is selected, otherwise unmodified argument.\n */\nvec4 picking_filterColor(vec4 color) {\n  vec4 highightColor = picking_filterHighlightColor(color);\n  return picking_filterPickingColor(highightColor);\n}\n\n`;\n\nexport default {\n  name: 'picking',\n  vs,\n  fs,\n  getUniforms\n};\n","// WebGL2 Query (also handles disjoint timer extensions)\n/* global requestAnimationFrame */\nimport Resource from './resource';\nimport {FEATURES, hasFeatures} from '../features';\nimport {isWebGL2} from '../webgl-utils';\nimport {assert} from '../utils';\n\nconst GL_QUERY_RESULT = 0x8866; // Returns a GLuint containing the query result.\nconst GL_QUERY_RESULT_AVAILABLE = 0x8867; // whether query result is available.\n\nconst GL_TIME_ELAPSED_EXT = 0x88bf; // Elapsed time (in nanoseconds).\nconst GL_GPU_DISJOINT_EXT = 0x8fbb; // Whether GPU performed any disjoint operation.\n\nconst GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8c88; // #primitives written to feedback buffers\nconst GL_ANY_SAMPLES_PASSED = 0x8c2f; // Occlusion query (if drawing passed depth test)\nconst GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8d6a; // Occlusion query less accurate/faster version\n\nexport default class Query extends Resource {\n  // Returns true if Query is supported by the WebGL implementation\n  // Can also check whether timestamp queries are available.\n  static isSupported(gl, opts = []) {\n    const webgl2 = isWebGL2(gl);\n\n    // Initial value\n    const hasTimerQuery = hasFeatures(gl, FEATURES.TIMER_QUERY);\n    let supported = webgl2 || hasTimerQuery;\n\n    for (const key of opts) {\n      switch (key) {\n        case 'queries':\n          supported = supported && webgl2;\n          break;\n        case 'timers':\n          supported = supported && hasTimerQuery;\n          break;\n        default:\n          assert(false);\n      }\n    }\n\n    return supported;\n  }\n\n  // Create a query class\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    this.target = null;\n    this._queryPending = false;\n    this._pollingPromise = null;\n\n    Object.seal(this);\n  }\n\n  // Shortcut for timer query (dependent on extension in both WebGL1 and 2)\n  // Measures GPU time delta between this call and a matching `end` call in the\n  // GPU instruction stream.\n  beginTimeElapsedQuery() {\n    return this.begin(GL_TIME_ELAPSED_EXT);\n  }\n\n  // Shortcut for occlusion queries\n  beginOcclusionQuery({conservative = false} = {}) {\n    return this.begin(conservative ? GL_ANY_SAMPLES_PASSED_CONSERVATIVE : GL_ANY_SAMPLES_PASSED);\n  }\n\n  // Shortcut for transformFeedbackQuery\n  beginTransformFeedbackQuery() {\n    return this.begin(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);\n  }\n\n  // Due to OpenGL API limitations, after calling `begin()` on one Query\n  // instance, `end()` must be called on that same instance before\n  // calling `begin()` on another query. While there can be multiple\n  // outstanding queries representing disjoint `begin()`/`end()` intervals.\n  // It is not possible to interleave or overlap `begin` and `end` calls.\n  begin(target) {\n    // Don't start a new query if one is already active.\n    if (this._queryPending) {\n      return this;\n    }\n\n    this.target = target;\n    this.gl.beginQuery(this.target, this.handle);\n\n    return this;\n  }\n\n  // ends the current query\n  end() {\n    // Can't end a new query if the last one hasn't been resolved.\n    if (this._queryPending) {\n      return this;\n    }\n\n    if (this.target) {\n      this.gl.endQuery(this.target);\n      this.target = null;\n      this._queryPending = true;\n    }\n    return this;\n  }\n\n  // Returns true if the query result is available\n  isResultAvailable() {\n    if (!this._queryPending) {\n      return false;\n    }\n\n    const resultAvailable = this.gl.getQueryParameter(this.handle, GL_QUERY_RESULT_AVAILABLE);\n    if (resultAvailable) {\n      this._queryPending = false;\n    }\n    return resultAvailable;\n  }\n\n  // Timing query is disjoint, i.e. results are invalid\n  isTimerDisjoint() {\n    return this.gl.getParameter(GL_GPU_DISJOINT_EXT);\n  }\n\n  // Returns query result.\n  getResult() {\n    return this.gl.getQueryParameter(this.handle, GL_QUERY_RESULT);\n  }\n\n  // Returns the query result, converted to milliseconds to match JavaScript conventions.\n  getTimerMilliseconds() {\n    return this.getResult() / 1e6;\n  }\n\n  // Polls the query\n  createPoll(limit = Number.POSITIVE_INFINITY) {\n    if (this._pollingPromise) {\n      return this._pollingPromise;\n    }\n\n    let counter = 0;\n\n    this._pollingPromise = new Promise((resolve, reject) => {\n      const poll = () => {\n        if (this.isResultAvailable()) {\n          resolve(this.getResult());\n          this._pollingPromise = null;\n        } else if (counter++ > limit) {\n          reject('Timed out');\n          this._pollingPromise = null;\n        } else {\n          requestAnimationFrame(poll);\n        }\n      };\n\n      requestAnimationFrame(poll);\n    });\n\n    return this._pollingPromise;\n  }\n\n  _createHandle() {\n    return Query.isSupported(this.gl) ? this.gl.createQuery() : null;\n  }\n\n  _deleteHandle() {\n    this.gl.deleteQuery(this.handle);\n  }\n}\n","// Feature detection for WebGL\n//\n// Provides a function that enables simple checking of which WebGL features are\n// available in an WebGL1 or WebGL2 environment.\n\nimport WEBGL_FEATURES from './webgl-features-table';\nimport {isWebGL2} from '../webgl-utils';\nimport {assert} from '../utils';\n\n// Check one feature\nexport function hasFeature(gl, feature) {\n  return hasFeatures(gl, feature);\n}\n\n// Check one or more features\nexport function hasFeatures(gl, features) {\n  features = Array.isArray(features) ? features : [features];\n  return features.every(feature => {\n    return isFeatureSupported(gl, feature);\n  });\n}\n\n// Return a list of supported features\nexport function getFeatures(gl) {\n  gl.luma = gl.luma || {};\n  if (!gl.luma.caps) {\n    gl.luma.caps = {};\n    gl.luma.caps.webgl2 = isWebGL2(gl);\n    for (const cap in WEBGL_FEATURES) {\n      gl.luma.caps[cap] = isFeatureSupported(gl, cap);\n    }\n  }\n  return gl.luma.caps;\n}\n\n// TODO - cache the value\nfunction isFeatureSupported(gl, cap) {\n  const feature = WEBGL_FEATURES[cap];\n  assert(feature, cap);\n\n  // Get extension name from table\n  const featureDefinition = isWebGL2(gl) ? feature[1] || feature[0] : feature[0];\n\n  let isSupported;\n\n  // Check if the value is dependent on checking one or more extensions\n  if (typeof featureDefinition === 'function') {\n    isSupported = featureDefinition(gl);\n  } else if (Array.isArray(featureDefinition)) {\n    isSupported = true;\n    for (const extension of featureDefinition) {\n      isSupported = isSupported && Boolean(gl.getExtension(extension));\n    }\n  } else if (typeof featureDefinition === 'string') {\n    isSupported = Boolean(gl.getExtension(featureDefinition));\n  } else if (typeof featureDefinition === 'boolean') {\n    isSupported = featureDefinition;\n  } else {\n    assert(false);\n  }\n\n  return isSupported;\n}\n","import {headlessGL} from '../webgl-utils/webgl-types';\n\nconst ERR_HEADLESSGL_NOT_AVAILABLE =\n  'Failed to create WebGL context in Node.js, headless gl not available';\n\nconst ERR_HEADLESSGL_FAILED =\n  'Failed to create WebGL context in Node.js, headless gl returned null';\n\n// Create headless gl context (for running under Node.js)\nexport function createHeadlessContext(options) {\n  const {width, height, webgl1, webgl2, onError} = options;\n  if (webgl2 && !webgl1) {\n    return onError('headless-gl does not support WebGL2');\n  }\n  if (!headlessGL) {\n    return onError(ERR_HEADLESSGL_NOT_AVAILABLE);\n  }\n  const gl = headlessGL(width, height, options);\n  if (!gl) {\n    return onError(ERR_HEADLESSGL_FAILED);\n  }\n  return gl;\n}\n","// Resizing a webgl canvas\n\n/* global window, document */\nimport {isBrowser} from '../utils';\n\nconst isPage = isBrowser && typeof document !== 'undefined';\nlet isPageLoaded = isPage && document.readyState === 'complete';\n\nlet pageLoadPromise;\n\n/**\n * Returns a promise that resolves when the page is loaded\n * at this point the DOM can be manipulated, and e.g. a new canvas can be inserted\n * @return {Promise} - resolves when the page is loaded\n */\nexport function getPageLoadPromise() {\n  if (!pageLoadPromise) {\n    pageLoadPromise = isPage\n      ? new Promise((resolve, reject) => {\n          if (isPage && document.readyState === 'complete') {\n            isPageLoaded = true;\n            resolve(document);\n            return;\n          }\n          window.onload = () => {\n            isPageLoaded = true;\n            resolve(document);\n          };\n        })\n      : Promise.resolve({});\n  }\n  return pageLoadPromise;\n}\n\n/**\n * Create a canvas\n * @param {Number} width - set to 100%\n * @param {Number} height - set to 100%\n */\nexport function createCanvas({width = 800, height = 600, id = 'gl-canvas', insert = true}) {\n  const canvas = document.createElement('canvas');\n  canvas.id = id;\n  canvas.style.width = Number.isFinite(width) ? `${width}px` : '100%';\n  canvas.style.height = Number.isFinite(height) ? `${height}px` : '100%';\n  // add the canvas to the body element once the page has loaded\n  if (insert) {\n    const body = document.body;\n    body.insertBefore(canvas, body.firstChild);\n    // getPageLoadPromise().then(document => {});\n  }\n  return canvas;\n}\n\nexport function getCanvas({canvas, width, height, onError = () => {}}) {\n  let targetCanvas;\n  if (typeof canvas === 'string') {\n    if (!isPageLoaded) {\n      onError(`createGLContext called on canvas '${canvas}' before page was loaded`);\n    }\n    targetCanvas = document.getElementById(canvas);\n  } else if (canvas) {\n    targetCanvas = canvas;\n  } else {\n    targetCanvas = createCanvas({id: 'lumagl-canvas', width, height, onError});\n  }\n\n  return targetCanvas;\n}\n","/* eslint-disable quotes */\n// WebGLRenderingContext related methods\nimport {trackContextState} from '@luma.gl/webgl-state-tracker';\n\nimport {createHeadlessContext} from './create-headless-context';\nimport {getCanvas} from './create-canvas';\nimport {createBrowserContext} from './create-browser-context';\nimport {getContextDebugInfo} from '../debug/get-context-debug-info';\n\nimport {WebGL2RenderingContext} from '../webgl-utils';\n\nimport {log, isBrowser, assert} from '../utils';\nimport {global} from '../utils/globals';\n\nexport const ERR_CONTEXT = 'Invalid WebGLRenderingContext';\nexport const ERR_WEBGL = ERR_CONTEXT;\nexport const ERR_WEBGL2 = 'Requires WebGL2';\n\nexport function isWebGL(gl) {\n  return Boolean(gl && Number.isFinite(gl._version));\n}\n\nexport function isWebGL2(gl) {\n  return Boolean(gl && gl._version === 2);\n}\n\nexport function assertWebGLContext(gl) {\n  // Need to handle debug context\n  assert(isWebGL(gl), ERR_CONTEXT);\n}\n\nexport function assertWebGL2Context(gl) {\n  // Need to handle debug context\n  assert(isWebGL2(gl), ERR_WEBGL2);\n}\n\nconst contextDefaults = {\n  // COMMON CONTEXT PARAMETERS\n  // Attempt to allocate WebGL2 context\n  webgl2: true, // Attempt to create a WebGL2 context (false to force webgl1)\n  webgl1: true, // Attempt to create a WebGL1 context (false to fail if webgl2 not available)\n  throwOnFailure: true,\n  manageState: true,\n  // BROWSER CONTEXT PARAMETERS\n  canvas: null, // A canvas element or a canvas string id\n  debug: false, // Instrument context (at the expense of performance)\n  // HEADLESS CONTEXT PARAMETERS\n  width: 800, // width are height are only used by headless gl\n  height: 600\n  // WEBGL/HEADLESS CONTEXT PARAMETERS\n  // Remaining options are passed through to context creator\n};\n\n/*\n * Change default context creation parameters.\n * Main use case is regression test suite.\n */\nexport function setGLContextDefaults(options = {}) {\n  Object.assign(contextDefaults, {width: 1, height: 1}, options);\n}\n\n/*\n * Creates a context giving access to the WebGL API\n */\n/* eslint-disable complexity, max-statements */\nexport function createGLContext(options = {}) {\n  options = Object.assign({}, contextDefaults, options);\n  const {width, height} = options;\n\n  // Error reporting function, enables exceptions to be disabled\n  function onError(message) {\n    if (options.throwOnError) {\n      throw new Error(message);\n    }\n    return null;\n  }\n\n  let gl;\n  if (isBrowser) {\n    // Get or create a canvas\n    const {canvas} = options;\n    const targetCanvas = getCanvas({canvas, width, height, onError});\n    // Create a WebGL context in the canvas\n    gl = createBrowserContext(targetCanvas, options);\n  } else {\n    // Create a headless-gl context under Node.js\n    gl = createHeadlessContext({...options, width, height, onError});\n  }\n\n  if (!gl) {\n    return null;\n  }\n\n  gl = instrumentGLContext(gl, options);\n\n  // Log some debug info about the newly created context\n  logInfo(gl);\n\n  // Add to seer integration\n  return gl;\n}\n\nexport function instrumentGLContext(gl, options = {}) {\n  // Avoid multiple instrumentations\n  if (gl._instrumented) {\n    return gl;\n  }\n\n  gl._version = gl._version || getVersion(gl);\n\n  options = Object.assign({}, contextDefaults, options);\n  const {manageState, debug} = options;\n\n  // Install context state tracking\n  if (manageState) {\n    trackContextState(gl, {\n      copyState: false,\n      log: (...args) => log.log(1, ...args)()\n    });\n  }\n\n  // Add debug instrumentation to the context\n  if (isBrowser && debug) {\n    if (!global.makeDebugContext) {\n      log.warn('WebGL debug mode not activated. import \"@luma.gl/debug\" to enable.')();\n    } else {\n      gl = global.makeDebugContext(gl, options);\n      // Debug forces log level to at least 1\n      log.priority = Math.max(log.priority, 1);\n    }\n  }\n\n  gl._instrumented = true;\n\n  return gl;\n}\n\nexport function destroyGLContext(gl) {\n  // TODO - Remove from seer integration\n\n  // TODO - Unregister any tracking/polyfills\n\n  // There is no way to delete browser based context\n\n  // Destroy headless gl context\n  const ext = gl.getExtension('STACKGL_destroy_context');\n  if (ext) {\n    ext.destroy();\n  }\n}\n\n/**\n * Resize the canvas' drawing buffer.\n *\n * Can match the canvas CSS size, and optionally also consider devicePixelRatio\n * Can be called every frame\n *\n * Regardless of size, the drawing buffer will always be scaled to the viewport, but\n * for best visual results, usually set to either:\n *  canvas CSS width x canvas CSS height\n *  canvas CSS width * devicePixelRatio x canvas CSS height * devicePixelRatio\n * See http://webgl2fundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html\n *\n * resizeGLContext(gl, {width, height, useDevicePixels})\n */\nexport function resizeGLContext(gl, options = {}) {\n  // Resize browser context\n  if (gl.canvas) {\n    /* global window */\n    const devicePixelRatio = options.useDevicePixels ? window.devicePixelRatio || 1 : 1;\n\n    const width = `width` in options ? options.width : gl.canvas.clientWidth;\n    const height = `height` in options ? options.height : gl.canvas.clientHeight;\n\n    gl.canvas.width = width * devicePixelRatio;\n    gl.canvas.height = height * devicePixelRatio;\n\n    return;\n  }\n\n  // Resize headless gl context\n  const ext = gl.getExtension('STACKGL_resize_drawingbuffer');\n  if (ext && `width` in options && `height` in options) {\n    ext.resize(options.width, options.height);\n  }\n}\n\n// HELPER METHODS\n\nfunction logInfo(gl) {\n  const webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';\n  const info = getContextDebugInfo(gl);\n  const driver = info ? `(${info.vendor},${info.renderer})` : '';\n  const debug = gl.debug ? ' debug' : '';\n  log.once(1, `${webGL}${debug} context ${driver}`)();\n}\n\nfunction getVersion(gl) {\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    // WebGL2 context.\n    return 2;\n  }\n  // Must be a WebGL1 context.\n  return 1;\n}\n","/**\n * Create a WebGL context for a canvas\n * Note calling this multiple time on the same canvas does return the same context\n */\nexport function createBrowserContext(canvas, options) {\n  const {onError = message => null} = options;\n\n  // Try to extract any extra information about why context creation failed\n  const onCreateError = error => onError(`WebGL context: ${error.statusMessage || 'error'}`);\n  canvas.addEventListener('webglcontextcreationerror', onCreateError, false);\n\n  const {webgl1 = true, webgl2 = true} = options;\n  let gl = null;\n  // Prefer webgl2 over webgl1, prefer conformant over experimental\n  if (webgl2) {\n    gl = gl || canvas.getContext('webgl2', options);\n    gl = gl || canvas.getContext('experimental-webgl2', options);\n  }\n  if (webgl1) {\n    gl = gl || canvas.getContext('webgl', options);\n    gl = gl || canvas.getContext('experimental-webgl', options);\n  }\n\n  canvas.removeEventListener('webglcontextcreationerror', onCreateError, false);\n\n  if (!gl) {\n    return onError(`Failed to create ${webgl2 && !webgl1 ? 'WebGL2' : 'WebGL'} context`);\n  }\n\n  return gl;\n}\n","import GL from '@luma.gl/constants';\n\n/**\n * Provides strings identifying the GPU vendor and driver.\n * https://www.khronos.org/registry/webgl/extensions/WEBGL_debug_renderer_info/\n * @param {WebGLRenderingContext} gl - context\n * @return {Object} - 'vendor' and 'renderer' string fields.\n */\nexport function getContextDebugInfo(gl) {\n  const vendorMasked = gl.getParameter(GL.VENDOR);\n  const rendererMasked = gl.getParameter(GL.RENDERER);\n  const ext = gl.getExtension('WEBGL_debug_renderer_info');\n  const vendorUnmasked = ext && gl.getParameter(ext.UNMASKED_VENDOR_WEBGL || GL.VENDOR);\n  const rendererUnmasked = ext && gl.getParameter(ext.UNMASKED_RENDERER_WEBGL || GL.RENDERER);\n  return {\n    vendor: vendorUnmasked || vendorMasked,\n    renderer: rendererUnmasked || rendererMasked,\n    vendorMasked,\n    rendererMasked,\n    version: gl.getParameter(GL.VERSION),\n    shadingLanguageVersion: gl.getParameter(GL.SHADING_LANGUAGE_VERSION)\n  };\n}\n","// Node.js polyfills for requestAnimationFrame and cancelAnimationFrame\n/* global window, setTimeout, clearTimeout */\n\nexport function requestAnimationFrame(callback) {\n  return typeof window !== 'undefined' && window.requestAnimationFrame\n    ? window.requestAnimationFrame(callback)\n    : setTimeout(callback, 1000 / 60);\n}\n\nexport function cancelAnimationFrame(timerId) {\n  return typeof window !== 'undefined' && window.cancelAnimationFrame\n    ? window.cancelAnimationFrame(timerId)\n    : clearTimeout(timerId);\n}\n","/* global OffscreenCanvas */\nimport {\n  isWebGL,\n  createGLContext,\n  instrumentGLContext,\n  resizeGLContext,\n  resetParameters,\n  requestAnimationFrame,\n  cancelAnimationFrame,\n  getPageLoadPromise,\n  Query,\n  lumaStats,\n  // TODO - remove dependency on framebuffer (bundle size impact)\n  Framebuffer\n} from '@luma.gl/webgl';\n\nimport {log, assert} from '../utils';\n\nlet statIdCounter = 0;\n\nexport default class AnimationLoop {\n  /*\n   * @param {HTMLCanvasElement} canvas - if provided, width and height will be passed to context\n   */\n  constructor(props = {}) {\n    const {\n      onCreateContext = opts => createGLContext(opts),\n      onAddHTML = null,\n      onInitialize = () => {},\n      onRender = () => {},\n      onFinalize = () => {},\n\n      gl = null,\n      glOptions = {},\n      debug = false,\n\n      createFramebuffer = false,\n\n      // view parameters\n      autoResizeViewport = true,\n      autoResizeDrawingBuffer = true,\n      stats = lumaStats.get(`animation-loop-${statIdCounter++}`)\n    } = props;\n\n    let {useDevicePixels = true} = props;\n\n    if ('useDevicePixelRatio' in props) {\n      log.deprecated('useDevicePixelRatio', 'useDevicePixels')();\n      useDevicePixels = props.useDevicePixelRatio;\n    }\n\n    this.props = {\n      onCreateContext,\n      onAddHTML,\n      onInitialize,\n      onRender,\n      onFinalize,\n\n      gl,\n      glOptions,\n      debug,\n      createFramebuffer\n    };\n\n    // state\n    this.gl = gl;\n    this.needsRedraw = null;\n    this.timeline = null;\n    this.stats = stats;\n    this.cpuTime = this.stats.get('CPU Time');\n    this.gpuTime = this.stats.get('GPU Time');\n    this.frameRate = this.stats.get('Frame Rate');\n\n    this._initialized = false;\n    this._running = false;\n    this._animationFrameId = null;\n    this._nextFramePromise = null;\n    this._resolveNextFrame = null;\n    this._cpuStartTime = 0;\n\n    this.setProps({\n      autoResizeViewport,\n      autoResizeDrawingBuffer,\n      useDevicePixels\n    });\n\n    // Bind methods\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n\n    this._onMousemove = this._onMousemove.bind(this);\n    this._onMouseleave = this._onMouseleave.bind(this);\n  }\n\n  delete() {\n    this.stop();\n    this._setDisplay(null);\n  }\n\n  setNeedsRedraw(reason) {\n    assert(typeof reason === 'string');\n    this.needsRedraw = this.needsRedraw || reason;\n    return this;\n  }\n\n  setProps(props) {\n    if ('autoResizeViewport' in props) {\n      this.autoResizeViewport = props.autoResizeViewport;\n    }\n    if ('autoResizeDrawingBuffer' in props) {\n      this.autoResizeDrawingBuffer = props.autoResizeDrawingBuffer;\n    }\n    if ('useDevicePixels' in props) {\n      this.useDevicePixels = props.useDevicePixels;\n    }\n    return this;\n  }\n\n  // Starts a render loop if not already running\n  // @param {Object} context - contains frame specific info (E.g. tick, width, height, etc)\n  start(opts = {}) {\n    if (this._running) {\n      return this;\n    }\n    this._running = true;\n    // console.debug(`Starting ${this.constructor.name}`);\n    // Wait for start promise before rendering frame\n    getPageLoadPromise()\n      .then(() => {\n        if (!this._running || this._initialized) {\n          return null;\n        }\n\n        // Create the WebGL context\n        this._createWebGLContext(opts);\n        this._createFramebuffer();\n        this._startEventHandling();\n\n        // Initialize the callback data\n        this._initializeCallbackData();\n        this._updateCallbackData();\n\n        // Default viewport setup, in case onInitialize wants to render\n        this._resizeCanvasDrawingBuffer();\n        this._resizeViewport();\n\n        this._gpuTimeQuery = Query.isSupported(this.gl, ['timers']) ? new Query(this.gl) : null;\n\n        this._initialized = true;\n\n        // Note: onIntialize can return a promise (in case it needs to load resources)\n        return this.onInitialize(this.animationProps);\n      })\n      .then(appContext => {\n        if (this._running) {\n          this._addCallbackData(appContext || {});\n          if (appContext !== false) {\n            this._startLoop();\n          }\n        }\n      });\n    return this;\n  }\n\n  // Redraw now\n  redraw() {\n    this._beginTimers();\n\n    this._setupFrame();\n    this._updateCallbackData();\n\n    this._renderFrame(this.animationProps);\n\n    // clear needsRedraw flag\n    this._clearNeedsRedraw();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/commit\n    // Chrome's offscreen canvas does not require gl.commit\n    if (this.offScreen && this.gl.commit) {\n      this.gl.commit();\n    }\n\n    if (this._resolveNextFrame) {\n      this._resolveNextFrame(this);\n      this._nextFramePromise = null;\n      this._resolveNextFrame = null;\n    }\n\n    this._endTimers();\n\n    return this;\n  }\n\n  // Stops a render loop if already running, finalizing\n  stop() {\n    // console.debug(`Stopping ${this.constructor.name}`);\n    if (this._running) {\n      this._finalizeCallbackData();\n      cancelAnimationFrame(this._animationFrameId);\n      this._nextFramePromise = null;\n      this._resolveNextFrame = null;\n      this._animationFrameId = null;\n      this._running = false;\n    }\n    return this;\n  }\n\n  attachTimeline(timeline) {\n    this.timeline = timeline;\n\n    return this.timeline;\n  }\n\n  detachTimeline() {\n    this.timeline = null;\n  }\n\n  waitForRender() {\n    this.setNeedsRedraw('waitForRender');\n\n    if (!this._nextFramePromise) {\n      this._nextFramePromise = new Promise(resolve => {\n        this._resolveNextFrame = resolve;\n      });\n    }\n    return this._nextFramePromise;\n  }\n\n  async toDataURL() {\n    this.setNeedsRedraw('toDataURL');\n\n    await this.waitForRender();\n\n    return this.gl.canvas.toDataURL();\n  }\n\n  onCreateContext(...args) {\n    return this.props.onCreateContext(...args);\n  }\n\n  onInitialize(...args) {\n    return this.props.onInitialize(...args);\n  }\n\n  onRender(...args) {\n    return this.props.onRender(...args);\n  }\n\n  onFinalize(...args) {\n    return this.props.onFinalize(...args);\n  }\n\n  // DEPRECATED/REMOVED METHODS\n\n  getHTMLControlValue(id, defaultValue = 1) {\n    const element = document.getElementById(id);\n    return element ? Number(element.value) : defaultValue;\n  }\n\n  // Update parameters\n  setViewParameters() {\n    log.removed('AnimationLoop.setViewParameters', 'AnimationLoop.setProps')();\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _startLoop() {\n    const renderFrame = () => {\n      if (!this._running) {\n        return;\n      }\n      this.redraw();\n      this._animationFrameId = this._requestAnimationFrame(renderFrame);\n    };\n\n    // cancel any pending renders to ensure only one loop can ever run\n    cancelAnimationFrame(this._animationFrameId);\n    this._animationFrameId = this._requestAnimationFrame(renderFrame);\n  }\n\n  // PRIVATE METHODS\n\n  _setDisplay(display) {\n    if (this.display) {\n      this.display.delete();\n      this.display.animationLoop = null;\n    }\n\n    // store animation loop on the display\n    if (display) {\n      display.animationLoop = this;\n    }\n\n    this.display = display;\n  }\n\n  _requestAnimationFrame(renderFrameCallback) {\n    // E.g. VR display has a separate animation frame to sync with headset\n    if (this.display && this.display.requestAnimationFrame(renderFrameCallback)) {\n      return;\n    }\n\n    requestAnimationFrame(renderFrameCallback);\n  }\n\n  // Called on each frame, can be overridden to call onRender multiple times\n  // to support e.g. stereoscopic rendering\n  _renderFrame(...args) {\n    // Allow e.g. VR display to render multiple frames.\n    if (this.display) {\n      this.display._renderFrame(...args);\n      return;\n    }\n\n    // call callback\n    this.onRender(...args);\n    // end callback\n  }\n\n  _clearNeedsRedraw() {\n    this.needsRedraw = null;\n  }\n\n  _setupFrame() {\n    if (this._onSetupFrame) {\n      // call callback\n      this._onSetupFrame(this.animationProps);\n      // end callback\n    } else {\n      this._resizeCanvasDrawingBuffer();\n      this._resizeViewport();\n      this._resizeFramebuffer();\n    }\n  }\n\n  // Initialize the  object that will be passed to app callbacks\n  _initializeCallbackData() {\n    this.animationProps = {\n      gl: this.gl,\n\n      stop: this.stop,\n      canvas: this.gl.canvas,\n      framebuffer: this.framebuffer,\n\n      // Initial values\n      useDevicePixels: this.useDevicePixels,\n      needsRedraw: null,\n\n      // Animation props\n      startTime: Date.now(),\n      engineTime: 0,\n      tick: 0,\n      tock: 0,\n\n      // Timeline time for back compatibility\n      time: 0,\n\n      // Experimental\n      _timeline: this.timeline,\n      _loop: this,\n      _animationLoop: this,\n      _mousePosition: null // Event props\n    };\n  }\n\n  // Update the context object that will be passed to app callbacks\n  _updateCallbackData() {\n    const {width, height, aspect} = this._getSizeAndAspect();\n    if (width !== this.animationProps.width || height !== this.animationProps.height) {\n      this.setNeedsRedraw('drawing buffer resized');\n    }\n    if (aspect !== this.animationProps.aspect) {\n      this.setNeedsRedraw('drawing buffer aspect changed');\n    }\n\n    this.animationProps.width = width;\n    this.animationProps.height = height;\n    this.animationProps.aspect = aspect;\n\n    this.animationProps.needsRedraw = this.needsRedraw;\n\n    // Update time properties\n    this.animationProps.engineTime = Date.now() - this.animationProps.startTime;\n\n    if (this.timeline) {\n      this.timeline.update(this.animationProps.engineTime);\n    }\n\n    this.animationProps.tick = Math.floor((this.animationProps.time / 1000) * 60);\n    this.animationProps.tock++;\n\n    // For back compatibility\n    this.animationProps.time = this.timeline\n      ? this.timeline.getTime()\n      : this.animationProps.engineTime;\n\n    // experimental\n    this.animationProps._offScreen = this.offScreen;\n  }\n\n  _finalizeCallbackData() {\n    // call callback\n    this.onFinalize(this.animationProps);\n    // end callback\n  }\n\n  // Add application's data to the app context object\n  _addCallbackData(appContext) {\n    if (typeof appContext === 'object' && appContext !== null) {\n      this.animationProps = Object.assign({}, this.animationProps, appContext);\n    }\n  }\n\n  // Either uses supplied or existing context, or calls provided callback to create one\n  _createWebGLContext(opts) {\n    this.offScreen =\n      opts.canvas &&\n      typeof OffscreenCanvas !== 'undefined' &&\n      opts.canvas instanceof OffscreenCanvas;\n\n    // Create the WebGL context if necessary\n    opts = Object.assign({}, opts, this.props.glOptions);\n    this.gl = this.props.gl ? instrumentGLContext(this.props.gl, opts) : this.onCreateContext(opts);\n\n    if (!isWebGL(this.gl)) {\n      throw new Error('AnimationLoop.onCreateContext - illegal context returned');\n    }\n\n    // Reset the WebGL context.\n    resetParameters(this.gl);\n\n    this._createInfoDiv();\n  }\n\n  _createInfoDiv() {\n    if (this.gl.canvas && this.props.onAddHTML) {\n      /* global document */\n      const wrapperDiv = document.createElement('div');\n      document.body.appendChild(wrapperDiv);\n      wrapperDiv.style.position = 'relative';\n      const div = document.createElement('div');\n      div.style.position = 'absolute';\n      div.style.left = '10px';\n      div.style.bottom = '10px';\n      div.style.width = '300px';\n      div.style.background = 'white';\n      wrapperDiv.appendChild(this.gl.canvas);\n      wrapperDiv.appendChild(div);\n      const html = this.props.onAddHTML(div);\n      if (html) {\n        div.innerHTML = html;\n      }\n    }\n  }\n\n  _getSizeAndAspect() {\n    // https://webglfundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html\n    const width = this.gl.drawingBufferWidth;\n    const height = this.gl.drawingBufferHeight;\n\n    // https://webglfundamentals.org/webgl/lessons/webgl-anti-patterns.html\n    let aspect = 1;\n    const {canvas} = this.gl;\n\n    if (canvas && canvas.clientHeight) {\n      aspect = canvas.clientWidth / canvas.clientHeight;\n    } else if (width > 0 && height > 0) {\n      aspect = width / height;\n    }\n\n    return {width, height, aspect};\n  }\n\n  // Default viewport setup\n  _resizeViewport() {\n    if (this.autoResizeViewport) {\n      this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n    }\n  }\n\n  // Resize the render buffer of the canvas to match canvas client size\n  // Optionally multiplying with devicePixel ratio\n  _resizeCanvasDrawingBuffer() {\n    if (this.autoResizeDrawingBuffer) {\n      resizeGLContext(this.gl, {useDevicePixels: this.useDevicePixels});\n    }\n  }\n\n  // TBD - deprecated?\n  _createFramebuffer() {\n    // Setup default framebuffer\n    if (this.props.createFramebuffer) {\n      this.framebuffer = new Framebuffer(this.gl);\n    }\n  }\n\n  _resizeFramebuffer() {\n    if (this.framebuffer) {\n      this.framebuffer.resize({\n        width: this.gl.drawingBufferWidth,\n        height: this.gl.drawingBufferHeight\n      });\n    }\n  }\n\n  _beginTimers() {\n    this.frameRate.timeEnd();\n    this.frameRate.timeStart();\n\n    // Check if timer for last frame has completed.\n    // GPU timer results are never available in the same\n    // frame they are captured.\n    if (\n      this._gpuTimeQuery &&\n      this._gpuTimeQuery.isResultAvailable() &&\n      !this._gpuTimeQuery.isTimerDisjoint()\n    ) {\n      this.stats.get('GPU Time').addTime(this._gpuTimeQuery.getTimerMilliseconds());\n    }\n\n    if (this._gpuTimeQuery) {\n      // GPU time query start\n      this._gpuTimeQuery.beginTimeElapsedQuery();\n    }\n\n    this.cpuTime.timeStart();\n  }\n\n  _endTimers() {\n    this.cpuTime.timeEnd();\n\n    if (this._gpuTimeQuery) {\n      // GPU time query end. Results will be available on next frame.\n      this._gpuTimeQuery.end();\n    }\n  }\n\n  // Event handling\n\n  _startEventHandling() {\n    const {canvas} = this.gl;\n    if (canvas) {\n      canvas.addEventListener('mousemove', this._onMousemove);\n      canvas.addEventListener('mouseleave', this._onMouseleave);\n    }\n  }\n\n  _onMousemove(e) {\n    this.animationProps._mousePosition = [e.offsetX, e.offsetY];\n  }\n  _onMouseleave(e) {\n    this.animationProps._mousePosition = null;\n  }\n}\n","import GL from '@luma.gl/constants';\nimport Framebuffer from './framebuffer';\nimport Renderbuffer from './renderbuffer';\nimport Texture from './texture';\nimport {log} from '../utils';\n\nconst UNIFORM_SETTERS = {\n  // WEBGL1\n\n  /* eslint-disable max-len */\n  [GL.FLOAT]: (gl, location, value) => gl.uniform1fv(location, toFloatArray(value, 1)),\n  [GL.FLOAT_VEC2]: (gl, location, value) => gl.uniform2fv(location, toFloatArray(value, 2)),\n  [GL.FLOAT_VEC3]: (gl, location, value) => gl.uniform3fv(location, toFloatArray(value, 3)),\n  [GL.FLOAT_VEC4]: (gl, location, value) => gl.uniform4fv(location, toFloatArray(value, 4)),\n\n  [GL.INT]: (gl, location, value) => gl.uniform1iv(location, toIntArray(value, 1)),\n  [GL.INT_VEC2]: (gl, location, value) => gl.uniform2iv(location, toIntArray(value, 2)),\n  [GL.INT_VEC3]: (gl, location, value) => gl.uniform3iv(location, toIntArray(value, 3)),\n  [GL.INT_VEC4]: (gl, location, value) => gl.uniform4iv(location, toIntArray(value, 4)),\n\n  [GL.BOOL]: (gl, location, value) => gl.uniform1iv(location, toIntArray(value, 1)),\n  [GL.BOOL_VEC2]: (gl, location, value) => gl.uniform2iv(location, toIntArray(value, 2)),\n  [GL.BOOL_VEC3]: (gl, location, value) => gl.uniform3iv(location, toIntArray(value, 3)),\n  [GL.BOOL_VEC4]: (gl, location, value) => gl.uniform4iv(location, toIntArray(value, 4)),\n\n  // uniformMatrix(false): don't transpose the matrix\n  [GL.FLOAT_MAT2]: (gl, location, value) =>\n    gl.uniformMatrix2fv(location, false, toFloatArray(value, 4)),\n  [GL.FLOAT_MAT3]: (gl, location, value) =>\n    gl.uniformMatrix3fv(location, false, toFloatArray(value, 9)),\n  [GL.FLOAT_MAT4]: (gl, location, value) =>\n    gl.uniformMatrix4fv(location, false, toFloatArray(value, 16)),\n\n  [GL.SAMPLER_2D]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.SAMPLER_CUBE]: (gl, location, value) => gl.uniform1i(location, value),\n\n  // WEBGL2 - unsigned integers, irregular matrices, additional texture samplers\n\n  [GL.UNSIGNED_INT]: (gl, location, value) => gl.uniform1uiv(location, toUIntArray(value, 1)),\n  [GL.UNSIGNED_INT_VEC2]: (gl, location, value) => gl.uniform2uiv(location, toUIntArray(value, 2)),\n  [GL.UNSIGNED_INT_VEC3]: (gl, location, value) => gl.uniform3uiv(location, toUIntArray(value, 3)),\n  [GL.UNSIGNED_INT_VEC4]: (gl, location, value) => gl.uniform4uiv(location, toUIntArray(value, 4)),\n\n  // uniformMatrix(false): don't transpose the matrix\n  [GL.FLOAT_MAT2x3]: (gl, location, value) =>\n    gl.uniformMatrix2x3fv(location, false, toFloatArray(value, 6)),\n  [GL.FLOAT_MAT2x4]: (gl, location, value) =>\n    gl.uniformMatrix2x4fv(location, false, toFloatArray(value, 8)),\n  [GL.FLOAT_MAT3x2]: (gl, location, value) =>\n    gl.uniformMatrix3x2fv(location, false, toFloatArray(value, 6)),\n  [GL.FLOAT_MAT3x4]: (gl, location, value) =>\n    gl.uniformMatrix3x4fv(location, false, toFloatArray(value, 12)),\n  [GL.FLOAT_MAT4x2]: (gl, location, value) =>\n    gl.uniformMatrix4x2fv(location, false, toFloatArray(value, 8)),\n  [GL.FLOAT_MAT4x3]: (gl, location, value) =>\n    gl.uniformMatrix4x3fv(location, false, toFloatArray(value, 12)),\n\n  [GL.SAMPLER_3D]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.SAMPLER_2D_SHADOW]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.SAMPLER_2D_ARRAY]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.SAMPLER_2D_ARRAY_SHADOW]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.SAMPLER_CUBE_SHADOW]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.INT_SAMPLER_2D]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.INT_SAMPLER_3D]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.INT_SAMPLER_CUBE]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.INT_SAMPLER_2D_ARRAY]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.UNSIGNED_INT_SAMPLER_2D]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.UNSIGNED_INT_SAMPLER_3D]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.UNSIGNED_INT_SAMPLER_CUBE]: (gl, location, value) => gl.uniform1i(location, value),\n  [GL.UNSIGNED_INT_SAMPLER_2D_ARRAY]: (gl, location, value) => gl.uniform1i(location, value)\n  /* eslint-enable max-len */\n};\n\n// Pre-allocated typed arrays for temporary conversion\nconst FLOAT_ARRAY = {};\nconst INT_ARRAY = {};\nconst UINT_ARRAY = {};\n\nconst array1 = [0];\n\n// Functions to ensure the type of uniform values\n// TODO - Why is this necessary? The uniform*v funtions can consume Arrays\nfunction toTypedArray(value, uniformLength, Type, cache) {\n  // convert boolean uniforms to Number\n  if (uniformLength === 1 && typeof value === 'boolean') {\n    value = value ? 1 : 0;\n  }\n  if (Number.isFinite(value)) {\n    array1[0] = value;\n    value = array1;\n  }\n  const length = value.length;\n  if (length % uniformLength) {\n    log.warn(`Uniform size should be multiples of ${uniformLength}`, value)();\n  }\n\n  if (value instanceof Type) {\n    return value;\n  }\n  let result = cache[length];\n  if (!result) {\n    result = new Type(length);\n    cache[length] = result;\n  }\n  for (let i = 0; i < length; i++) {\n    result[i] = value[i];\n  }\n  return result;\n}\n\nfunction toFloatArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Float32Array, FLOAT_ARRAY);\n}\n\nfunction toIntArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Int32Array, INT_ARRAY);\n}\n\nfunction toUIntArray(value, uniformLength) {\n  return toTypedArray(value, uniformLength, Uint32Array, UINT_ARRAY);\n}\n\nexport function parseUniformName(name) {\n  // Shortcut to avoid redundant or bad matches\n  if (name[name.length - 1] !== ']') {\n    return {\n      name,\n      length: 1,\n      isArray: false\n    };\n  }\n\n  // if array name then clean the array brackets\n  const UNIFORM_NAME_REGEXP = /([^[]*)(\\[[0-9]+\\])?/;\n  const matches = name.match(UNIFORM_NAME_REGEXP);\n  if (!matches || matches.length < 2) {\n    throw new Error(`Failed to parse GLSL uniform name ${name}`);\n  }\n\n  return {\n    name: matches[1],\n    length: matches[2] || 1,\n    isArray: Boolean(matches[2])\n  };\n}\n\n// Returns a Magic Uniform Setter\n/* eslint-disable complexity */\nexport function getUniformSetter(gl, location, info) {\n  const setter = UNIFORM_SETTERS[info.type];\n  if (!setter) {\n    throw new Error(`Unknown GLSL uniform type ${info.type}`);\n  }\n  return setter.bind(null, gl, location);\n}\n\n// Basic checks of uniform values (with or without knowledge of program)\n// To facilitate early detection of e.g. undefined values in JavaScript\nexport function checkUniformValues(uniforms, source, uniformMap) {\n  for (const uniformName in uniforms) {\n    const value = uniforms[uniformName];\n    const shouldCheck = !uniformMap || Boolean(uniformMap[uniformName]);\n    if (shouldCheck && !checkUniformValue(value)) {\n      // Add space to source\n      source = source ? `${source} ` : '';\n      // Value could be unprintable so write the object on console\n      console.error(`${source} Bad uniform ${uniformName}`, value); // eslint-disable-line\n      /* eslint-enable no-console */\n      throw new Error(`${source} Bad uniform ${uniformName}`);\n    }\n  }\n  return true;\n}\n\n// TODO use type information during validation\nfunction checkUniformValue(value) {\n  if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n    return checkUniformArray(value);\n  }\n\n  // Check if single value is a number\n  if (isFinite(value)) {\n    return true;\n  } else if (value === true || value === false) {\n    return true;\n  } else if (value instanceof Texture) {\n    return true;\n  } else if (value instanceof Renderbuffer) {\n    return true;\n  } else if (value instanceof Framebuffer) {\n    return Boolean(value.texture);\n  }\n  return false;\n}\n\nfunction checkUniformArray(value) {\n  // Check that every element in array is a number, and at least 1 element\n  if (value.length === 0) {\n    return false;\n  }\n\n  const checkLength = Math.min(value.length, 16);\n\n  for (let i = 0; i < checkLength; ++i) {\n    if (!Number.isFinite(value[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Given two values of a uniform, returns `true` if they are equal\n */\nexport function areUniformsEqual(uniform1, uniform2) {\n  if (Array.isArray(uniform1) || ArrayBuffer.isView(uniform1)) {\n    if (!uniform2) {\n      return false;\n    }\n    const len = uniform1.length;\n    if (uniform2.length !== len) {\n      return false;\n    }\n    for (let i = 0; i < len; i++) {\n      if (uniform1[i] !== uniform2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return uniform1 === uniform2;\n}\n\n/**\n * Creates a copy of the uniform\n */\nexport function getUniformCopy(uniform) {\n  if (Array.isArray(uniform) || ArrayBuffer.isView(uniform)) {\n    return uniform.slice();\n  }\n  return uniform;\n}\n","// Supports GLSLIFY style naming of shaders\n// #define SHADER_NAME ...\nexport default function getShaderName(shader, defaultName = 'unnamed') {\n  const SHADER_NAME_REGEXP = /#define[\\s*]SHADER_NAME[\\s*]([A-Za-z0-9_-]+)[\\s*]/;\n  const match = shader.match(SHADER_NAME_REGEXP);\n  return match ? match[1] : defaultName;\n}\n","const GL_FRAGMENT_SHADER = 0x8b30;\nconst GL_VERTEX_SHADER = 0x8b31;\n\nexport default function getShaderTypeName(type) {\n  switch (type) {\n    case GL_FRAGMENT_SHADER:\n      return 'fragment';\n    case GL_VERTEX_SHADER:\n      return 'vertex';\n    default:\n      return 'unknown type';\n  }\n}\n","// TODO - formatGLSLCompilerError should not depend on this\nimport getShaderName from './get-shader-name';\nimport getShaderTypeName from './get-shader-type-name';\n\n// Formats GLSL compiler error log into single string\nexport default function formatGLSLCompilerError(errLog, src, shaderType) {\n  const {shaderName, errors, warnings} = parseGLSLCompilerError(errLog, src, shaderType);\n  return `GLSL compilation error in ${shaderName}\\n\\n${errors}\\n${warnings}`;\n}\n\n/**\n * Parse a GLSL compiler error log into a string showing the source code around each error.\n * Based on https://github.com/wwwtyro/gl-format-compiler-error (public domain)\n */\n/* eslint-disable no-continue, max-statements */\nexport function parseGLSLCompilerError(errLog, src, shaderType, shaderName) {\n  const errorStrings = errLog.split(/\\r?\\n/);\n  const errors = {};\n  const warnings = {};\n\n  // Patch the shader name\n  const name = shaderName || getShaderName(src) || '(unnamed)';\n  const shaderDescription = `${getShaderTypeName(shaderType)} shader ${name}`;\n\n  // Parse the error - note: browser and driver dependent\n  for (let i = 0; i < errorStrings.length; i++) {\n    const errorString = errorStrings[i];\n    if (errorString.length <= 1) {\n      continue;\n    }\n    const segments = errorString.split(':');\n    const type = segments[0];\n    const line = parseInt(segments[2], 10);\n    if (isNaN(line)) {\n      throw new Error(`GLSL compilation error in ${shaderDescription}: ${errLog}`);\n    }\n    if (type !== 'WARNING') {\n      errors[line] = errorString;\n    } else {\n      warnings[line] = errorString;\n    }\n  }\n\n  // Format the error inline with the code\n  const lines = addLineNumbers(src);\n\n  return {\n    shaderName: shaderDescription,\n    errors: formatErrors(errors, lines),\n    warnings: formatErrors(warnings, lines)\n  };\n}\n\n// helper function, outputs annotated errors or warnings\nfunction formatErrors(errors, lines) {\n  let message = '';\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    if (!errors[i + 3] && !errors[i + 2] && !errors[i + 1]) {\n      continue;\n    }\n    message += `${line}\\n`;\n    if (errors[i + 1]) {\n      const error = errors[i + 1];\n      const segments = error.split(':', 3);\n      const type = segments[0];\n      const column = parseInt(segments[1], 10) || 0;\n      const err = error.substring(segments.join(':').length + 1).trim();\n      message += padLeft(`^^^ ${type}: ${err}\\n\\n`, column);\n    }\n  }\n  return message;\n}\n\n/**\n * Prepends line numbers to each line of a string.\n * The line numbers will be left-padded with spaces to ensure an\n * aligned layout when rendered using monospace fonts.\n * @param {String} string - multi-line string to add line numbers to\n * @param {Number} start=1 - number of spaces to add\n * @param {String} delim =': ' - injected between line number and original line\n * @return {String[]} strings - array of string, one per line, with line numbers added\n */\nfunction addLineNumbers(string, start = 1, delim = ': ') {\n  const lines = string.split(/\\r?\\n/);\n  const maxDigits = String(lines.length + start - 1).length;\n  return lines.map((line, i) => {\n    const lineNumber = i + start;\n    const digits = String(lineNumber).length;\n    const prefix = padLeft(lineNumber, maxDigits - digits);\n    return prefix + delim + line;\n  });\n}\n\n/**\n * Pads a string with a number of spaces (space characters) to the left\n * @param {String} string - string to pad\n * @param {Number} digits - number of spaces to add\n * @return {String} string - The padded string\n */\nfunction padLeft(string, digits) {\n  let result = '';\n  for (let i = 0; i < digits; ++i) {\n    result += ' ';\n  }\n  return `${result}${string}`;\n}\n","import GL from '@luma.gl/constants';\nimport {parseGLSLCompilerError, getShaderName} from '../glsl-utils';\nimport {assertWebGLContext} from '../webgl-utils';\nimport {uid, log, assert} from '../utils';\nimport Resource from './resource';\n\nconst ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';\n\n// For now this is an internal class\nexport class Shader extends Resource {\n  static getTypeName(shaderType) {\n    switch (shaderType) {\n      case GL.VERTEX_SHADER:\n        return 'vertex-shader';\n      case GL.FRAGMENT_SHADER:\n        return 'fragment-shader';\n      default:\n        assert(false);\n        return 'unknown';\n    }\n  }\n\n  /* eslint-disable max-statements */\n  constructor(gl, props) {\n    assertWebGLContext(gl);\n\n    // Validate arguments\n    assert(typeof props.source === 'string', ERR_SOURCE);\n\n    // Deduce an id, from shader source, or supplied id, or shader type\n    const id =\n      getShaderName(props.source, null) ||\n      props.id ||\n      uid(`unnamed ${Shader.getTypeName(props.shaderType)}`);\n\n    super(gl, {id});\n\n    this.shaderType = props.shaderType;\n    this.source = props.source;\n\n    this.initialize(props);\n  }\n\n  initialize({source}) {\n    const shaderName = getShaderName(source, null);\n    if (shaderName) {\n      this.id = uid(shaderName);\n    }\n    this._compile(source);\n  }\n\n  // Accessors\n\n  getParameter(pname) {\n    return this.gl.getShaderParameter(this.handle, pname);\n  }\n\n  toString() {\n    return `${Shader.getTypeName(this.shaderType)}:${this.id}`;\n  }\n\n  getName() {\n    return getShaderName(this.source) || 'unnamed-shader';\n  }\n\n  getSource() {\n    return this.gl.getShaderSource(this.handle);\n  }\n\n  // Debug method - Returns translated source if available\n  getTranslatedSource() {\n    const extension = this.gl.getExtension('WEBGL.debug_shaders');\n    return extension\n      ? extension.getTranslatedShaderSource(this.handle)\n      : 'No translated source available. WEBGL.debug_shaders not implemented';\n  }\n\n  // PRIVATE METHODS\n  _compile() {\n    this.gl.shaderSource(this.handle, this.source);\n    this.gl.compileShader(this.handle);\n\n    // TODO - For performance reasons, avoid checking shader compilation errors on production?\n    // TODO - Load log even when no error reported, to catch warnings?\n    // https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings\n    const compileStatus = this.getParameter(GL.COMPILE_STATUS);\n    if (!compileStatus) {\n      const infoLog = this.gl.getShaderInfoLog(this.handle);\n      const {shaderName, errors, warnings} = parseGLSLCompilerError(\n        infoLog,\n        this.source,\n        this.shaderType,\n        this.id\n      );\n      log.error(`GLSL compilation errors in ${shaderName}\\n${errors}`)();\n      log.warn(`GLSL compilation warnings in ${shaderName}\\n${warnings}`)();\n      throw new Error(`GLSL compilation errors in ${shaderName}`);\n    }\n  }\n\n  _deleteHandle() {\n    this.gl.deleteShader(this.handle);\n  }\n\n  _getOptsFromHandle() {\n    return {\n      type: this.getParameter(GL.SHADER_TYPE),\n      source: this.getSource()\n    };\n  }\n}\n\nexport class VertexShader extends Shader {\n  constructor(gl, props) {\n    // Signature: new VertexShader(gl, source)\n    if (typeof props === 'string') {\n      props = {source: props};\n    }\n    super(gl, Object.assign({}, props, {shaderType: GL.VERTEX_SHADER}));\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL.VERTEX_SHADER);\n  }\n}\n\nexport class FragmentShader extends Shader {\n  constructor(gl, props) {\n    // Signature: new FragmentShader(gl, source)\n    if (typeof props === 'string') {\n      props = {source: props};\n    }\n\n    super(gl, Object.assign({}, props, {shaderType: GL.FRAGMENT_SHADER}));\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL.FRAGMENT_SHADER);\n  }\n}\n","// Contains metadata describing attribute configurations for a program's shaders\n// Much of this is automatically extracted from shaders after program linking\nimport Accessor from './accessor';\nimport {isWebGL2} from '../webgl-utils';\nimport {decomposeCompositeGLType} from '../webgl-utils/attribute-utils';\n\nexport default class ProgramConfiguration {\n  constructor(program) {\n    this.id = program.id;\n    this.attributeInfos = [];\n    this.attributeInfosByName = {};\n\n    // Locations may not be contiguous the case of matrix attributes\n    // so keep a separate location->attribute map.\n    this.attributeInfosByLocation = [];\n    this.varyingInfos = [];\n    this.varyingInfosByName = {};\n    Object.seal(this);\n    this._readAttributesFromProgram(program);\n    this._readVaryingsFromProgram(program);\n  }\n\n  getAttributeInfo(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return this.attributeInfosByLocation[location];\n    }\n    return this.attributeInfosByName[locationOrName] || null;\n  }\n\n  // Resolves an attribute name or index to an index\n  getAttributeLocation(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.location : -1;\n  }\n\n  getAttributeAccessor(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.accessor : null;\n  }\n\n  getVaryingInfo(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return this.varyingInfos[location];\n    }\n    return this.varyingInfosByName[locationOrName] || null;\n  }\n\n  getVaryingIndex(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.location : -1;\n  }\n\n  getVaryingAccessor(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.accessor : null;\n  }\n\n  // PRIVATE METHODS\n\n  // linkProgram needs to have been called, although linking does not need to have been successful\n  _readAttributesFromProgram(program) {\n    const {gl} = program;\n    const count = gl.getProgramParameter(program.handle, gl.ACTIVE_ATTRIBUTES);\n\n    for (let index = 0; index < count; index++) {\n      const {name, type, size} = gl.getActiveAttrib(program.handle, index);\n      const location = gl.getAttribLocation(program.handle, name);\n      // Add only user provided attributes, for built-in attributes like\n      // `gl_InstanceID` locaiton will be < 0\n      if (location >= 0) {\n        this._addAttribute(location, name, type, size);\n      }\n    }\n\n    this.attributeInfos.sort((a, b) => a.location - b.location);\n  }\n\n  // linkProgram needs to have been called, although linking does not need to have been successful\n  _readVaryingsFromProgram(program) {\n    const {gl} = program;\n    if (!isWebGL2(gl)) {\n      return;\n    }\n\n    const count = gl.getProgramParameter(program.handle, gl.TRANSFORM_FEEDBACK_VARYINGS);\n    for (let location = 0; location < count; location++) {\n      const {name, type, size} = gl.getTransformFeedbackVarying(program.handle, location);\n      this._addVarying(location, name, type, size);\n    }\n\n    this.varyingInfos.sort((a, b) => a.location - b.location);\n  }\n\n  _addAttribute(location, name, compositeType, size) {\n    const {type, components} = decomposeCompositeGLType(compositeType);\n    const accessor = {type, size: size * components};\n    this._inferProperties(location, name, accessor);\n\n    const attributeInfo = {location, name, accessor: new Accessor(accessor)}; // Base values\n    this.attributeInfos.push(attributeInfo);\n    this.attributeInfosByLocation[location] = attributeInfo; // For quick location based lookup\n    this.attributeInfosByName[attributeInfo.name] = attributeInfo; // For quick name based lookup\n  }\n\n  // Extract additional attribute metadata from shader names (based on attribute naming conventions)\n  _inferProperties(location, name, accessor) {\n    if (/instance/i.test(name)) {\n      // Any attribute containing the word \"instance\" will be assumed to be instanced\n      accessor.divisor = 1;\n    }\n  }\n\n  _addVarying(location, name, compositeType, size) {\n    const {type, components} = decomposeCompositeGLType(compositeType);\n    const accessor = new Accessor({type, size: size * components});\n\n    const varying = {location, name, accessor}; // Base values\n    this.varyingInfos.push(varying);\n    this.varyingInfosByName[varying.name] = varying; // For quick name based lookup\n  }\n}\n","import GL from '@luma.gl/constants';\n\nimport Resource from './resource';\nimport Texture from './texture';\nimport Framebuffer from './framebuffer';\nimport {parseUniformName, getUniformSetter} from './uniforms';\nimport {VertexShader, FragmentShader} from './shader';\nimport ProgramConfiguration from './program-configuration';\nimport {checkUniformValues, areUniformsEqual, getUniformCopy} from './uniforms';\n\nimport {withParameters} from '../context';\nimport {assertWebGL2Context, isWebGL2, getKey} from '../webgl-utils';\nimport {getPrimitiveDrawMode} from '../webgl-utils/attribute-utils';\nimport {log, uid, assert} from '../utils';\n\nconst LOG_PROGRAM_PERF_PRIORITY = 4;\n\nconst GL_SEPARATE_ATTRIBS = 0x8c8d;\n\nconst V6_DEPRECATED_METHODS = [\n  'setVertexArray',\n  'setAttributes',\n  'setBuffers',\n  'unsetBuffers',\n\n  'use',\n  'getUniformCount',\n  'getUniformInfo',\n  'getUniformLocation',\n  'getUniformValue',\n\n  'getVarying',\n  'getFragDataLocation',\n  'getAttachedShaders',\n  'getAttributeCount',\n  'getAttributeLocation',\n  'getAttributeInfo'\n];\n\nexport default class Program extends Resource {\n  constructor(gl, props = {}) {\n    super(gl, props);\n\n    this.stubRemovedMethods('Program', 'v6.0', V6_DEPRECATED_METHODS);\n\n    // Experimental flag to avoid deleting Program object while it is cached\n    this._isCached = false;\n\n    this.initialize(props);\n\n    Object.seal(this);\n\n    this._setId(props.id);\n  }\n\n  initialize(props = {}) {\n    const {vs, fs, varyings, bufferMode = GL_SEPARATE_ATTRIBS} = props;\n    // Create shaders if needed\n    this.vs =\n      typeof vs === 'string' ? new VertexShader(this.gl, {id: `${props.id}-vs`, source: vs}) : vs;\n    this.fs =\n      typeof fs === 'string' ? new FragmentShader(this.gl, {id: `${props.id}-fs`, source: fs}) : fs;\n    assert(this.vs instanceof VertexShader);\n    assert(this.fs instanceof FragmentShader);\n\n    // uniforms\n    this.uniforms = {};\n\n    // Setup varyings if supplied\n    if (varyings) {\n      assertWebGL2Context(this.gl);\n      this.varyings = varyings;\n      this.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n    }\n\n    this._compileAndLink();\n    this._readUniformLocationsFromLinkedProgram();\n    this.configuration = new ProgramConfiguration(this);\n\n    return this.setProps(props);\n  }\n\n  delete(options = {}) {\n    if (this._isCached) {\n      // This object is cached, do not delete\n      return this;\n    }\n    return super.delete(options);\n  }\n\n  setProps(props) {\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms);\n    }\n    return this;\n  }\n\n  // A good thing about the WebGL API is that there are so many ways to draw things ;)\n  // This function unifies those ways into a single call using common parameters with sane defaults\n  draw({\n    logPriority, // Probe log priority, enables Model to do more integrated logging\n\n    drawMode = GL.TRIANGLES,\n    vertexCount,\n    offset = 0,\n    start,\n    end,\n    isIndexed = false,\n    indexType = GL.UNSIGNED_SHORT,\n    isInstanced = false,\n    instanceCount = 0,\n\n    vertexArray = null,\n    transformFeedback,\n    framebuffer,\n    parameters = {},\n\n    // Deprecated\n    uniforms,\n    samplers\n  }) {\n    if (uniforms || samplers) {\n      // DEPRECATED: v7.0 (deprecated earlier but warning not properly implemented)\n      log.deprecated('Program.draw({uniforms})', 'Program.setUniforms(uniforms)')();\n      this.setUniforms(uniforms || {});\n    }\n\n    if (logPriority !== undefined) {\n      const fb = framebuffer ? framebuffer.id : 'default';\n      const message =\n        `mode=${getKey(this.gl, drawMode)} verts=${vertexCount} ` +\n        `instances=${instanceCount} indexType=${getKey(this.gl, indexType)} ` +\n        `isInstanced=${isInstanced} isIndexed=${isIndexed} ` +\n        `Framebuffer=${fb}`;\n      log.log(logPriority, message)();\n    }\n\n    // TODO - move vertex array binding and transform feedback binding to withParameters?\n    assert(vertexArray);\n\n    this.gl.useProgram(this.handle);\n\n    // Note: async textures set as uniforms might still be loading.\n    // Now that all uniforms have been updated, check if any texture\n    // in the uniforms is not yet initialized, then we don't draw\n    if (!this._areTexturesRenderable()) {\n      return false;\n    }\n\n    vertexArray.bindForDraw(vertexCount, instanceCount, () => {\n      if (framebuffer !== undefined) {\n        parameters = Object.assign({}, parameters, {framebuffer});\n      }\n\n      if (transformFeedback) {\n        const primitiveMode = getPrimitiveDrawMode(drawMode);\n        transformFeedback.begin(primitiveMode);\n      }\n\n      this._bindTextures();\n\n      withParameters(this.gl, parameters, () => {\n        // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n        if (isIndexed && isInstanced) {\n          this.gl.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n        } else if (isIndexed && isWebGL2(this.gl) && !isNaN(start) && !isNaN(end)) {\n          this.gl.drawRangeElements(drawMode, start, end, vertexCount, indexType, offset);\n        } else if (isIndexed) {\n          this.gl.drawElements(drawMode, vertexCount, indexType, offset);\n        } else if (isInstanced) {\n          this.gl.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n        } else {\n          this.gl.drawArrays(drawMode, offset, vertexCount);\n        }\n      });\n\n      if (transformFeedback) {\n        transformFeedback.end();\n      }\n    });\n\n    return true;\n  }\n\n  setUniforms(uniforms = {}, _onChangeCallback = () => {}) {\n    // Simple change detection - if all uniforms are unchanged, do nothing\n    let somethingChanged = false;\n    const changedUniforms = {};\n    for (const key in uniforms) {\n      if (!areUniformsEqual(this.uniforms[key], uniforms[key])) {\n        somethingChanged = true;\n        changedUniforms[key] = uniforms[key];\n        this.uniforms[key] = getUniformCopy(uniforms[key]);\n      }\n    }\n\n    if (somethingChanged) {\n      _onChangeCallback();\n      checkUniformValues(changedUniforms, this.id, this._uniformSetters);\n      this._setUniforms(changedUniforms);\n    }\n\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  // stub for shader chache, should reset uniforms to default valiues\n  reset() {}\n\n  // Checks if all texture-values uniforms are renderable (i.e. loaded)\n  // Note: This is currently done before every draw call\n  _areTexturesRenderable() {\n    let texturesRenderable = true;\n\n    for (const uniformName in this.uniforms) {\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter && uniformSetter.textureIndex !== undefined) {\n        let uniform = this.uniforms[uniformName];\n\n        if (uniform instanceof Framebuffer) {\n          const framebuffer = uniform;\n          uniform = framebuffer.texture;\n        }\n\n        if (uniform instanceof Texture) {\n          const texture = uniform;\n          // Check that texture is loaded\n          texturesRenderable = texturesRenderable && texture.loaded;\n        }\n      }\n    }\n\n    return texturesRenderable;\n  }\n\n  // Binds textures\n  // Note: This is currently done before every draw call\n  _bindTextures() {\n    for (const uniformName in this.uniforms) {\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter && uniformSetter.textureIndex !== undefined) {\n        let uniform = this.uniforms[uniformName];\n\n        if (uniform instanceof Framebuffer) {\n          uniform = uniform.texture;\n        }\n        if (uniform instanceof Texture) {\n          const texture = uniform;\n          // Bind texture to index\n          texture.bind(uniformSetter.textureIndex);\n        }\n      }\n    }\n  }\n\n  // Apply a set of uniform values to a program\n  // Only uniforms actually present in the linked program will be updated.\n  _setUniforms(uniforms) {\n    this.gl.useProgram(this.handle);\n\n    for (const uniformName in uniforms) {\n      let uniform = uniforms[uniformName];\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter) {\n        if (uniform instanceof Framebuffer) {\n          uniform = uniform.texture;\n        }\n        if (uniform instanceof Texture) {\n          // eslint-disable-next-line max-depth\n          if (uniformSetter.textureIndex === undefined) {\n            uniformSetter.textureIndex = this._textureIndexCounter++;\n          }\n\n          // Bind texture to index\n          const texture = uniform;\n          const {textureIndex} = uniformSetter;\n\n          texture.bind(textureIndex);\n\n          // Set the uniform sampler to the texture index\n          uniformSetter(textureIndex);\n        } else {\n          // Just set the value\n          uniformSetter(uniform);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createProgram();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  // Extract opts needed to initialize a `Program` from an independently created WebGLProgram handle\n  _getOptionsFromHandle(handle) {\n    const shaderHandles = this.gl.getAttachedShaders(handle);\n    const opts = {};\n    for (const shaderHandle of shaderHandles) {\n      const type = this.gl.getShaderParameter(this.handle, GL.SHADER_TYPE);\n      switch (type) {\n        case GL.VERTEX_SHADER:\n          opts.vs = new VertexShader({handle: shaderHandle});\n          break;\n        case GL.FRAGMENT_SHADER:\n          opts.fs = new FragmentShader({handle: shaderHandle});\n          break;\n        default:\n      }\n    }\n    return opts;\n  }\n\n  _getParameter(pname) {\n    return this.gl.getProgramParameter(this.handle, pname);\n  }\n\n  // If program is not named, name it after shader names\n  // TODO - this.id will already have been initialized\n  _setId(id) {\n    if (!id) {\n      const programName = this._getName();\n      this.id = uid(programName);\n    }\n  }\n\n  // Generate a default name for the program based on names of the shaders\n  _getName() {\n    let programName = this.vs.getName() || this.fs.getName();\n    programName = programName.replace(/shader/i, '');\n    programName = programName ? `${programName}-program` : 'program';\n    return programName;\n  }\n\n  _compileAndLink() {\n    const {gl} = this;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n    gl.linkProgram(this.handle);\n    log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n\n    // Avoid checking program linking error in production\n    if (gl.debug || log.priority > 0) {\n      gl.validateProgram(this.handle);\n      const linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n      if (!linked) {\n        throw new Error(`Error linking: ${gl.getProgramInfoLog(this.handle)}`);\n      }\n    }\n  }\n\n  // query uniform locations and build name to setter map.\n  // TODO - This overlaps with ProgramConfiguration?\n  _readUniformLocationsFromLinkedProgram() {\n    const {gl} = this;\n    this._uniformSetters = {};\n    this._uniformCount = this._getParameter(GL.ACTIVE_UNIFORMS);\n    for (let i = 0; i < this._uniformCount; i++) {\n      const info = this.gl.getActiveUniform(this.handle, i);\n      const {name, isArray} = parseUniformName(info.name);\n      let location = gl.getUniformLocation(this.handle, name);\n      this._uniformSetters[name] = getUniformSetter(gl, location, info, isArray);\n      if (info.size > 1) {\n        for (let l = 0; l < info.size; l++) {\n          location = gl.getUniformLocation(this.handle, `${name}[${l}]`);\n          this._uniformSetters[`${name}[${l}]`] = getUniformSetter(gl, location, info, isArray);\n        }\n      }\n    }\n    this._textureIndexCounter = 0;\n  }\n\n  // TO BE REMOVED in v7?\n\n  // Rretrieves information about active uniforms identifed by their indices (`uniformIndices`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniforms\n  getActiveUniforms(uniformIndices, pname) {\n    return this.gl.getActiveUniforms(this.handle, uniformIndices, pname);\n  }\n\n  // Retrieves the index of a uniform block\n  getUniformBlockIndex(blockName) {\n    return this.gl.getUniformBlockIndex(this.handle, blockName);\n  }\n\n  // Retrieves information about an active uniform block (`blockIndex`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter\n  getActiveUniformBlockParameter(blockIndex, pname) {\n    return this.gl.getActiveUniformBlockParameter(this.handle, blockIndex, pname);\n  }\n\n  // Binds a uniform block (`blockIndex`) to a specific binding point (`blockBinding`)\n  uniformBlockBinding(blockIndex, blockBinding) {\n    this.gl.uniformBlockBinding(this.handle, blockIndex, blockBinding);\n  }\n}\n","import {Matrix4} from 'math.gl';\n\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\nconst DEFAULT_MODULE_OPTIONS = {\n  modelMatrix: IDENTITY_MATRIX,\n  viewMatrix: IDENTITY_MATRIX,\n  projectionMatrix: IDENTITY_MATRIX,\n  cameraPositionWorld: [0, 0, 0]\n};\n\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS, prevUniforms = {}) {\n  // const viewProjectionInverse = viewProjection.invert();\n  // viewInverseMatrix: view.invert(),\n  // viewProjectionInverseMatrix: viewProjectionInverse\n\n  const uniforms = {};\n  if (opts.modelMatrix !== undefined) {\n    uniforms.modelMatrix = opts.modelMatrix;\n  }\n  if (opts.viewMatrix !== undefined) {\n    uniforms.viewMatrix = opts.viewMatrix;\n  }\n  if (opts.projectionMatrix !== undefined) {\n    uniforms.projectionMatrix = opts.projectionMatrix;\n  }\n  if (opts.cameraPositionWorld !== undefined) {\n    uniforms.cameraPositionWorld = opts.cameraPositionWorld;\n  }\n\n  // COMPOSITE UNIFORMS\n  if (opts.projectionMatrix !== undefined || opts.viewMatrix !== undefined) {\n    uniforms.viewProjectionMatrix = new Matrix4(opts.projectionMatrix).multiplyRight(\n      opts.viewMatrix\n    );\n  }\n\n  return uniforms;\n}\n\nconst common = `\\\nvarying vec4 project_vPositionWorld;\nvarying vec3 project_vNormalWorld;\n\nvec4 project_getPosition_World() {\n  return project_vPositionWorld;\n}\n\nvec3 project_getNormal_World() {\n  return project_vNormalWorld;\n}\n`;\n\nconst vs = `\\\n${common}\n\n// Unprefixed uniforms\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewProjectionMatrix;\nuniform vec3 cameraPositionWorld;\n\nstruct World {\n  vec3 position;\n  vec3 normal;\n};\n\nWorld world;\n\nvoid project_setPosition(vec4 position) {\n  project_vPositionWorld = position;\n}\n\nvoid project_setNormal(vec3 normal) {\n  project_vNormalWorld = normal;\n}\n\nvoid project_setPositionAndNormal_World(vec3 position, vec3 normal) {\n  world.position = position;\n  world.normal = normal;\n}\n\nvoid project_setPositionAndNormal_Model(vec3 position, vec3 normal) {\n  world.position = (modelMatrix * vec4(position, 1.)).xyz;\n  world.normal = mat3(modelMatrix) * normal;\n}\n\nvec4 project_model_to_clipspace(vec4 position) {\n  return viewProjectionMatrix * modelMatrix * position;\n}\n\nvec4 project_model_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * modelMatrix * vec4(position, 1.);\n}\n\nvec4 project_world_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_view_to_clipspace(vec3 position) {\n  return projectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n`;\n\nconst fs = `\n${common}\\\n`;\n\nexport default {\n  name: 'project',\n  getUniforms,\n  vs,\n  fs\n};\n","// Cheap lighting - single directional light, single dot product, one uniform\n\nimport project from '../project/project';\n\n/* eslint-disable camelcase */\nconst DEFAULT_LIGHT_DIRECTION = new Float32Array([1, 1, 2]);\n\nconst DEFAULT_MODULE_OPTIONS = {\n  lightDirection: DEFAULT_LIGHT_DIRECTION\n};\n\nfunction getUniforms(opts = DEFAULT_MODULE_OPTIONS) {\n  const uniforms = {};\n  if (opts.lightDirection) {\n    uniforms.dirlight_uLightDirection = opts.lightDirection;\n  }\n  return uniforms;\n}\n\n// TODO - reuse normal from geometry module\nconst vs = null;\n\nconst fs = `\\\nuniform vec3 dirlight_uLightDirection;\n\n/*\n * Returns color attenuated by angle from light source\n */\nvec4 dirlight_filterColor(vec4 color) {\n  vec3 normal = project_getNormal_World();\n  float d = abs(dot(normalize(normal), normalize(dirlight_uLightDirection)));\n  return vec4(color.rgb * d, color.a);\n}\n`;\n\nexport default {\n  name: 'dirlight',\n  vs,\n  fs,\n  getUniforms,\n  dependencies: [project]\n};\n","let channelHandles = 0;\nlet animationHandles = 0;\n\nexport class Timeline {\n  constructor() {\n    this.time = 0;\n    this.channels = new Map();\n    this.animations = new Map();\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  addChannel(props) {\n    const {delay = 0, duration = Number.POSITIVE_INFINITY, rate = 1, repeat = 1} = props;\n\n    const handle = channelHandles++;\n    const channel = {\n      time: 0,\n      delay,\n      duration,\n      rate,\n      repeat\n    };\n    this._setChannelTime(channel, this.time);\n    this.channels.set(handle, channel);\n\n    return handle;\n  }\n\n  removeChannel(handle) {\n    this.channels.delete(handle);\n\n    for (const [animationHandle, animation] of this.animations) {\n      if (animation.channel === handle) {\n        this.detachAnimation(animationHandle);\n      }\n    }\n  }\n\n  getTime(handle) {\n    if (handle === undefined) {\n      return this.time;\n    }\n\n    const channel = this.channels.get(handle);\n\n    if (channel === undefined) {\n      return -1;\n    }\n\n    return channel.time;\n  }\n\n  setTime(time) {\n    this.time = Math.max(0, time);\n\n    const channels = this.channels.values();\n    for (const channel of channels) {\n      this._setChannelTime(channel, this.time);\n    }\n\n    const animations = this.animations.values();\n    for (const animationData of animations) {\n      const {animation, channel} = animationData;\n      animation.setTime(this.getTime(channel));\n    }\n  }\n\n  play() {\n    this.playing = true;\n  }\n\n  pause() {\n    this.playing = false;\n    this.lastEngineTime = -1;\n  }\n\n  reset() {\n    this.setTime(0);\n  }\n\n  attachAnimation(animation, channelHandle) {\n    const animationHandle = animationHandles++;\n\n    this.animations.set(animationHandle, {\n      animation,\n      channel: channelHandle\n    });\n\n    animation.setTime(this.getTime(channelHandle));\n\n    return animationHandle;\n  }\n\n  detachAnimation(handle) {\n    this.animations.delete(handle);\n  }\n\n  update(engineTime) {\n    if (this.playing) {\n      if (this.lastEngineTime === -1) {\n        this.lastEngineTime = engineTime;\n      }\n      this.setTime(this.time + (engineTime - this.lastEngineTime));\n      this.lastEngineTime = engineTime;\n    }\n  }\n\n  _setChannelTime(channel, time) {\n    const offsetTime = time - channel.delay;\n    const totalDuration = channel.duration * channel.repeat;\n    // Note(Tarek): Don't loop on final repeat.\n    if (offsetTime >= totalDuration) {\n      channel.time = channel.duration * channel.rate;\n    } else {\n      channel.time = Math.max(0, offsetTime) % channel.duration;\n      channel.time *= channel.rate;\n    }\n  }\n}\n","import {\n  AnimationLoop,\n  setParameters,\n  ModelNode,\n  picking,\n  dirlight,\n  readPixelsToArray,\n  Buffer,\n  CubeGeometry,\n  createShaderHook,\n  createModuleInjection\n} from '@luma.gl/core';\nimport {Timeline} from '@luma.gl/addons';\nimport {Matrix4, radians} from 'math.gl';\n\nconst INFO_HTML = `\n<p>\nCube drawn with <b>instanced rendering</b>.\n<p>\nA luma.gl <code>Cube</code>, rendering 65,536 instances in a\nsingle GPU draw call using instanced vertex attributes.\n`;\n\nfunction getDevicePixelRatio() {\n  return typeof window !== 'undefined' ? window.devicePixelRatio : 1;\n}\n\nconst SIDE = 256;\n\ncreateShaderHook('vs:MY_SHADER_HOOK_pickColor(inout vec4 color)');\n\ncreateShaderHook('fs:MY_SHADER_HOOK_fragmentColor(inout vec4 color)');\n\ncreateModuleInjection('picking', {\n  hook: 'vs:MY_SHADER_HOOK_pickColor',\n  injection: 'picking_setPickingColor(color.rgb);'\n});\n\ncreateModuleInjection('dirlight', {\n  hook: 'fs:MY_SHADER_HOOK_fragmentColor',\n  injection: 'color = dirlight_filterColor(color);'\n});\n\ncreateModuleInjection('picking', {\n  hook: 'fs:MY_SHADER_HOOK_fragmentColor',\n  injection: 'color = picking_filterColor(color);',\n  order: Number.POSITIVE_INFINITY\n});\n\n// Make a cube with 65K instances and attributes to control offset and color of each instance\nclass InstancedCube extends ModelNode {\n  constructor(gl, props) {\n    let offsets = [];\n    for (let i = 0; i < SIDE; i++) {\n      const x = ((-SIDE + 1) * 3) / 2 + i * 3;\n      for (let j = 0; j < SIDE; j++) {\n        const y = ((-SIDE + 1) * 3) / 2 + j * 3;\n        offsets.push(x, y);\n      }\n    }\n    offsets = new Float32Array(offsets);\n\n    const pickingColors = new Uint8ClampedArray(SIDE * SIDE * 2);\n    for (let i = 0; i < SIDE; i++) {\n      for (let j = 0; j < SIDE; j++) {\n        pickingColors[(i * SIDE + j) * 2 + 0] = i;\n        pickingColors[(i * SIDE + j) * 2 + 1] = j;\n      }\n    }\n\n    const colors = new Float32Array(SIDE * SIDE * 3).map(() => Math.random() * 0.75 + 0.25);\n\n    const vs = `\\\nattribute float instanceSizes;\nattribute vec3 positions;\nattribute vec3 normals;\nattribute vec2 instanceOffsets;\nattribute vec3 instanceColors;\nattribute vec2 instancePickingColors;\n\nuniform mat4 uModel;\nuniform mat4 uView;\nuniform mat4 uProjection;\nuniform float uTime;\n\nvarying vec3 color;\n\nvoid main(void) {\n  vec3 normal = vec3(uModel * vec4(normals, 1.0));\n\n  // Set up data for modules\n  color = instanceColors;\n  project_setNormal(normal);\n  vec4 pickColor = vec4(0., instancePickingColors, 1.0);\n  MY_SHADER_HOOK_pickColor(pickColor);\n\n  // Vertex position (z coordinate undulates with time), and model rotates around center\n  float delta = length(instanceOffsets);\n  vec4 offset = vec4(instanceOffsets, sin((uTime + delta) * 0.1) * 16.0, 0);\n  gl_Position = uProjection * uView * (uModel * vec4(positions * instanceSizes, 1.0) + offset);\n}\n`;\n    const fs = `\\\nprecision highp float;\n\nvarying vec3 color;\n\nvoid main(void) {\n  gl_FragColor = vec4(color, 1.);\n  MY_SHADER_HOOK_fragmentColor(gl_FragColor);\n}\n`;\n\n    const offsetsBuffer = new Buffer(gl, offsets);\n    const colorsBuffer = new Buffer(gl, colors);\n    const pickingColorsBuffer = new Buffer(gl, pickingColors);\n\n    super(\n      gl,\n      Object.assign({}, props, {\n        vs,\n        fs,\n        modules: [dirlight, picking],\n        isInstanced: 1,\n        instanceCount: SIDE * SIDE,\n        geometry: new CubeGeometry(),\n        attributes: {\n          instanceSizes: new Float32Array([1]), // Constant attribute\n          instanceOffsets: [offsetsBuffer, {divisor: 1}],\n          instanceColors: [colorsBuffer, {divisor: 1}],\n          instancePickingColors: [pickingColorsBuffer, {divisor: 1}]\n        }\n      })\n    );\n  }\n}\n\nexport default class AppAnimationLoop extends AnimationLoop {\n  constructor() {\n    super({createFramebuffer: true, debug: true});\n  }\n\n  static getInfo() {\n    return INFO_HTML;\n  }\n\n  onInitialize({gl, _animationLoop}) {\n    setParameters(gl, {\n      clearColor: [0, 0, 0, 1],\n      clearDepth: 1,\n      depthTest: true,\n      depthFunc: gl.LEQUAL\n    });\n\n    this.attachTimeline(new Timeline());\n    this.timeline.play();\n\n    const timeChannel = this.timeline.addChannel({\n      rate: 0.01\n    });\n\n    const eyeXChannel = this.timeline.addChannel({\n      rate: 0.0003\n    });\n\n    const eyeYChannel = this.timeline.addChannel({\n      rate: 0.0004\n    });\n\n    const eyeZChannel = this.timeline.addChannel({\n      rate: 0.0002\n    });\n\n    this.cube = new InstancedCube(gl, {\n      _animationLoop,\n      // inject: {\n      //   'fs:#main-end': 'gl_FragColor = picking_filterColor(gl_FragColor)'\n      // },\n      uniforms: {\n        uTime: () => this.timeline.getTime(timeChannel),\n        // Basic projection matrix\n        uProjection: ({aspect}) =>\n          new Matrix4().perspective({fov: radians(60), aspect, near: 1, far: 2048.0}),\n        // Move the eye around the plane\n        uView: () =>\n          new Matrix4().lookAt({\n            center: [0, 0, 0],\n            eye: [\n              (Math.cos(this.timeline.getTime(eyeXChannel)) * SIDE) / 2,\n              (Math.sin(this.timeline.getTime(eyeYChannel)) * SIDE) / 2,\n              ((Math.sin(this.timeline.getTime(eyeZChannel)) + 1) * SIDE) / 4 + 32\n            ]\n          }),\n        // Rotate all the individual cubes\n        uModel: ({tick}) => new Matrix4().rotateX(tick * 0.01).rotateY(tick * 0.013)\n      }\n    });\n  }\n\n  onRender(animationProps) {\n    const {gl} = animationProps;\n\n    const {framebuffer, useDevicePixels, _mousePosition} = animationProps;\n\n    if (_mousePosition) {\n      const dpr = useDevicePixels ? getDevicePixelRatio() : 1;\n\n      const pickX = _mousePosition[0] * dpr;\n      const pickY = gl.canvas.height - _mousePosition[1] * dpr;\n\n      pickInstance(gl, pickX, pickY, this.cube, framebuffer);\n    }\n\n    // Draw the cubes\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    this.cube.draw();\n  }\n\n  onFinalize({gl}) {\n    this.cube.delete();\n  }\n}\n\nfunction pickInstance(gl, pickX, pickY, model, framebuffer) {\n  framebuffer.clear({color: true, depth: true});\n  // Render picking colors\n  /* eslint-disable camelcase */\n  model.setUniforms({picking_uActive: 1});\n  model.draw({framebuffer});\n  model.setUniforms({picking_uActive: 0});\n\n  const color = readPixelsToArray(framebuffer, {\n    sourceX: pickX,\n    sourceY: pickY,\n    sourceWidth: 1,\n    sourceHeight: 1,\n    sourceFormat: gl.RGBA,\n    sourceType: gl.UNSIGNED_BYTE\n  });\n\n  if (color[0] + color[1] + color[2] > 0) {\n    model.updateModuleSettings({\n      pickingSelectedColor: color\n    });\n  } else {\n    model.updateModuleSettings({\n      pickingSelectedColor: null\n    });\n  }\n}\n\n/* global window */\nif (typeof window !== 'undefined' && !window.website) {\n  const animationLoop = new AppAnimationLoop();\n  animationLoop.start();\n}\n","import React from 'react';\nimport AnimationLoopExamplePage from '../../src/components/animation-loop-example-page';\nimport AnimationLoop from '../../../examples/core/instancing/app';\n\nexport default class Example extends React.Component {\n  render() {\n    const { pageContext } = this.props;\n    const exampleConfig = (pageContext && pageContext.exampleConfig) || {};\n    return (\n      <AnimationLoopExamplePage AnimationLoop={AnimationLoop} exampleConfig={exampleConfig} />\n    );\n  }\n}\n","import {withParameters} from '@luma.gl/core';\n\nexport default class Display {\n  getViews(options) {\n    const {width, height} = options;\n    return [\n      {\n        params: {\n          viewport: [0, 0, width, height],\n          scissor: [0, 0, width, height],\n          scissorTest: true\n        }\n      }\n    ];\n  }\n\n  submitFrame() {\n    return true;\n  }\n\n  // return true if animation frame has been requested\n  requestAnimationFrame(renderFrame) {\n    return false;\n  }\n\n  delete() {}\n\n  // AnimationLoop calls this API\n  _renderFrame(options) {\n    const views = this.getViews(options);\n    if (!views) {\n      return false;\n    }\n\n    const {gl} = this.animationLoop;\n    for (const view of views) {\n      withParameters(gl, view.params, () => this.animationLoop.onRender({...options, ...view}));\n    }\n\n    this.submitFrame();\n    return true;\n  }\n}\n","/* global document */\n\nexport function createEnterVRButton({canvas, title}) {\n  const {top, left, width, height} = canvas.getBoundingClientRect();\n\n  const container = document.createElement('div');\n  container.style.position = 'absolute';\n  container.style.top = `${top}px`;\n  container.style.left = `${left}px`;\n  container.style.width = `${width}px`;\n  container.style.height = `${height}px`;\n  container.style.pointerEvents = 'none';\n  container.style.zIndex = '999';\n  document.body.appendChild(container);\n\n  const button = document.createElement('button');\n  button.style.padding = '16px';\n  button.style.border = '1px solid #fff';\n  button.style.borderRadius = '8px';\n  button.style.background = 'rgba(0,0,0,0.5)';\n  button.style.color = '#fff';\n  button.style.font = 'normal 20px sans-serif';\n  button.style.cursor = 'pointer';\n  button.style.margin = '20px auto';\n  button.style.display = 'block';\n  button.style.pointerEvents = 'all';\n  button.textContent = title;\n  container.appendChild(button);\n\n  return button;\n}\n","/* global window, navigator */\nimport {log} from '@luma.gl/core';\nimport Display from './display';\nimport {createEnterVRButton} from './vr-button';\n\nexport default class VRDisplay extends Display {\n  static isSupported() {\n    return (\n      typeof navigator !== 'undefined' && 'getVRDisplays' in navigator && 'VRFrameData' in window\n    );\n  }\n\n  constructor(props) {\n    super(props);\n\n    this._vrSupported = VRDisplay.isSupported();\n    if (this._vrSupported) {\n      this.vrFrameData = new window.VRFrameData();\n      this.vrPresenting = false;\n      this.vrFrame = false;\n      window.addEventListener('vrdisplaypresentchange', this._vrDisplayPresentChange.bind(this));\n    }\n  }\n\n  delete() {\n    super.delete();\n    this._removeVRButton();\n  }\n\n  getViews(options) {\n    if (this._vrSupported) {\n      this._addVRButton();\n    }\n\n    // Need both vrPresenting and vrFrame\n    // to avoid race conditions when we exit VR\n    // after we schedule an animation frame\n    if (this.vrPresenting && this.vrFrame) {\n      this.vrDisplay.getFrameData(this.vrFrameData);\n\n      const {\n        leftProjectionMatrix,\n        leftViewMatrix,\n        rightProjectionMatrix,\n        rightViewMatrix\n      } = this.vrFrameData;\n\n      const {width, height} = options;\n\n      return [\n        {\n          displayEye: 'left',\n          projectionMatrix: leftProjectionMatrix,\n          viewMatrix: leftViewMatrix,\n          params: {\n            viewport: [0, 0, width * 0.5, height],\n            scissor: [0, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        },\n        {\n          displayEye: 'right',\n          projectionMatrix: rightProjectionMatrix,\n          viewMatrix: rightViewMatrix,\n          params: {\n            viewport: [width * 0.5, 0, width * 0.5, height],\n            scissor: [width * 0.5, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        }\n      ];\n    }\n\n    return super.getViews(options);\n  }\n\n  submitFrame() {\n    if (this.vrPresenting && this.vrFrame) {\n      this.vrDisplay.submitFrame();\n      return true;\n    }\n\n    return false;\n  }\n\n  requestAnimationFrame(renderFrame) {\n    if (this.vrPresenting) {\n      this.vrDisplay.requestAnimationFrame(() => {\n        this.vrFrame = true;\n        renderFrame();\n        this.vrFrame = false;\n      });\n\n      return true;\n    }\n\n    return false;\n  }\n\n  // PRIVATE\n\n  // TODO: Consider resizing canvas to match vrDisplay.getEyeParameters()\n  // TODO: Maybe allow to select display?\n  async _addVRButton() {\n    if (this.vrButton) {\n      return;\n    }\n\n    const canvas = this._getCanvas();\n    if (!canvas) {\n      return;\n    }\n\n    const displays = await navigator.getVRDisplays();\n    if (displays && displays.length) {\n      log.info(2, 'Found VR Displays', displays)();\n\n      this.vrDisplay = displays[0];\n      this.vrButton = createEnterVRButton({\n        canvas,\n        title: `Enter VR (${this.vrDisplay.displayName})`\n      });\n      this.vrButton.onclick = () => this._startDisplay();\n    }\n  }\n\n  _getCanvas() {\n    return this.animationLoop.canvas || (this.animationLoop.gl && this.animationLoop.gl.canvas);\n  }\n\n  _removeVRButton() {\n    if (this.vrButton) {\n      // TODO\n    }\n  }\n\n  _startDisplay() {\n    this.vrDisplay.requestPresent([\n      {\n        source: this._getCanvas()\n      }\n    ]);\n  }\n\n  _vrDisplayPresentChange() {\n    if (this.vrDisplay.isPresenting) {\n      log.info(2, 'Entering VR')();\n\n      this.vrPresenting = true;\n      this.vrButton.style.display = 'none';\n    } else {\n      log.info(2, 'Exiting VR')();\n\n      this.vrPresenting = false;\n      this.vrButton.style.display = 'block';\n    }\n  }\n}\n","let arrayBuffer = null;\n\nexport function getScratchArrayBuffer(byteLength) {\n  if (!arrayBuffer || arrayBuffer.byteLength < byteLength) {\n    arrayBuffer = new ArrayBuffer(byteLength);\n  }\n  return arrayBuffer;\n}\n\nexport function getScratchArray(Type, length) {\n  const scratchArrayBuffer = getScratchArrayBuffer(Type.BYTES_PER_ELEMENT * length);\n  return new Type(scratchArrayBuffer, 0, length); // arrayBuffer, byteOffset, length (in elements)\n}\n\n// Uses copyWithin to significantly speed up typed array value filling\nexport function fillArray({target, source, start = 0, count = 1}) {\n  const length = source.length;\n  const total = count * length;\n  let copied = 0;\n  for (let i = start; copied < length; copied++) {\n    target[i++] = source[copied];\n  }\n\n  while (copied < total) {\n    // If we have copied less than half, copy everything we got\n    // else copy remaining in one operation\n    if (copied < total - copied) {\n      target.copyWithin(start + copied, start, start + copied);\n      copied *= 2;\n    } else {\n      target.copyWithin(start + copied, start, start + total - copied);\n      copied = total;\n    }\n  }\n\n  return target;\n}\n\n/*\n\n// Creates a new Uint8Array based on two different ArrayBuffers\n// @private\n// @param {ArrayBuffers} buffer1 The first buffer.\n// @param {ArrayBuffers} buffer2 The second buffer.\n// @return {ArrayBuffers} The new ArrayBuffer created out of the two.\n//\nexport function copyArrayBuffer(\n  targetBuffer, sourceBuffer, byteOffset, byteLength = sourceBuffer.byteLength\n) {\n  const targetArray = new Uint8Array(targetBuffer, byteOffset, byteLength);\n  const sourceArray = new Uint8Array(sourceBuffer);\n  targetArray.set(sourceArray);\n  return targetBuffer;\n}\n\n*/\n","import GL from '@luma.gl/constants';\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {isWebGL2} from '../webgl-utils';\nimport {getScratchArray, fillArray} from '../utils/array-utils-flat';\nimport {assert} from '../utils';\nimport {getBrowser} from 'probe.gl';\n\n/* eslint-disable camelcase */\nconst OES_vertex_array_object = 'OES_vertex_array_object';\n\nconst ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';\n\nexport default class VertexArrayObject extends Resource {\n  static isSupported(gl, options = {}) {\n    // Attribute 0 can not be disable on most desktop OpenGL based browsers\n    // and on iOS Safari browser.\n    if (options.constantAttributeZero) {\n      return isWebGL2(gl) || getBrowser() === 'Chrome';\n    }\n\n    // Whether additional objects can be created\n    return isWebGL2(gl) || gl.getExtension(OES_vertex_array_object);\n  }\n\n  // Returns the global (null) vertex array object. Exists even when no extension available\n  static getDefaultArray(gl) {\n    gl.luma = gl.luma || {};\n    if (!gl.luma.defaultVertexArray) {\n      gl.luma.defaultVertexArray = new VertexArrayObject(gl, {handle: null});\n    }\n    return gl.luma.defaultVertexArray;\n  }\n\n  static getMaxAttributes(gl) {\n    // TODO - should be cached per context\n    VertexArrayObject.MAX_ATTRIBUTES =\n      VertexArrayObject.MAX_ATTRIBUTES || gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    return VertexArrayObject.MAX_ATTRIBUTES;\n  }\n\n  // Note: Constants are stored globally on the WebGL context, not the VAO\n  // So they need to be updated before every render\n  // TODO - use known type (in configuration or passed in) to allow non-typed arrays?\n  // TODO - remember/cache values to avoid setting them unnecessarily?\n  static setConstant(gl, location, array) {\n    switch (array.constructor) {\n      case Float32Array:\n        VertexArrayObject._setConstantFloatArray(gl, location, array);\n        break;\n      case Int32Array:\n        VertexArrayObject._setConstantIntArray(gl, location, array);\n        break;\n      case Uint32Array:\n        VertexArrayObject._setConstantUintArray(gl, location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  // Create a VertexArray\n  constructor(gl, opts = {}) {\n    // Use program's id if program but no id is supplied\n    const id = opts.id || (opts.program && opts.program.id);\n    super(gl, Object.assign({}, opts, {id}));\n\n    this.hasVertexArrays = VertexArrayObject.isSupported(gl);\n    this.buffer = null;\n    this.bufferValue = null;\n\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  delete() {\n    super.delete();\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n  }\n\n  get MAX_ATTRIBUTES() {\n    return VertexArrayObject.getMaxAttributes(this.gl);\n  }\n\n  initialize(props = {}) {\n    return this.setProps(props);\n  }\n\n  setProps(props) {\n    // TODO: decide which props should be supported\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, opts = {}) {\n    assert(!elementBuffer || elementBuffer.target === GL.ELEMENT_ARRAY_BUFFER, ERR_ELEMENTS);\n\n    // The GL.ELEMENT_ARRAY_BUFFER_BINDING is stored on the VertexArrayObject...\n    this.bind(() => {\n      this.gl.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, elementBuffer ? elementBuffer.handle : null);\n    });\n\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a bufferk, enables the location, sets divisor\n  setBuffer(location, buffer, accessor) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer, accessor);\n    }\n\n    const {size, type, stride, offset, normalized, integer, divisor} = accessor;\n\n    const {gl} = this;\n    location = Number(location);\n\n    this.bind(() => {\n      // A non-zero buffer object must be bound to the GL_ARRAY_BUFFER target\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer.handle);\n\n      // WebGL2 supports *integer* data formats, i.e. GPU will see integer values\n      if (integer) {\n        assert(isWebGL2(gl));\n        gl.vertexAttribIPointer(location, size, type, stride, offset);\n      } else {\n        // Attaches ARRAY_BUFFER with specified buffer format to location\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n      }\n      gl.enableVertexAttribArray(location);\n      gl.vertexAttribDivisor(location, divisor || 0);\n\n      // NOTE We don't unbind buffer here, typically another buffer will be bound just after\n    });\n\n    return this;\n  }\n\n  // Enabling an attribute location makes it reference the currently bound buffer\n  // Disabling an attribute location makes it reference the global constant value\n  // TODO - handle single values for size 1 attributes?\n  // TODO - convert classic arrays based on known type?\n  enable(location, enable = true) {\n    // Attribute 0 cannot be disabled in most desktop OpenGL based browsers\n    const disablingAttributeZero =\n      !enable &&\n      location === 0 &&\n      !VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true});\n\n    if (!disablingAttributeZero) {\n      location = Number(location);\n      this.bind(\n        () =>\n          enable\n            ? this.gl.enableVertexAttribArray(location)\n            : this.gl.disableVertexAttribArray(location)\n      );\n    }\n    return this;\n  }\n\n  // Provide a means to create a buffer that is equivalent to a constant.\n  // NOTE: Desktop OpenGL cannot disable attribute 0.\n  // https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-\n  // this-has-significant-performance-penalt\n  getConstantBuffer(elementCount, value, accessor) {\n    // Create buffer only when needed, and reuse it (avoids inflating buffer creation statistics)\n\n    const constantValue = this._normalizeConstantArrayValue(value, accessor);\n\n    const byteLength = constantValue.byteLength * elementCount;\n    const length = constantValue.length * elementCount;\n\n    let updateNeeded = !this.buffer;\n\n    this.buffer = this.buffer || new Buffer(this.gl, byteLength);\n    updateNeeded = updateNeeded || this.buffer.reallocate(byteLength);\n\n    // Reallocate and update contents if needed\n    updateNeeded =\n      updateNeeded || !this._compareConstantArrayValues(constantValue, this.bufferValue);\n\n    if (updateNeeded) {\n      // Create a typed array that is big enough, and fill it with the required data\n      const typedArray = getScratchArray(value.constructor, length);\n      fillArray({target: typedArray, source: constantValue, start: 0, count: length});\n      this.buffer.subData(typedArray);\n      this.bufferValue = value;\n    }\n\n    return this.buffer;\n  }\n\n  // PRIVATE\n\n  // TODO - convert Arrays based on known type? (read type from accessor, don't assume Float32Array)\n  // TODO - handle single values for size 1 attributes?\n  _normalizeConstantArrayValue(arrayValue, accessor) {\n    if (Array.isArray(arrayValue)) {\n      return new Float32Array(arrayValue);\n    }\n    return arrayValue;\n  }\n\n  _compareConstantArrayValues(v1, v2) {\n    if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {\n      return false;\n    }\n    for (let i = 0; i < v1.length; ++i) {\n      if (v1[i] !== v2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  static _setConstantFloatArray(gl, location, array) {\n    switch (array.length) {\n      case 1:\n        gl.vertexAttrib1fv(location, array);\n        break;\n      case 2:\n        gl.vertexAttrib2fv(location, array);\n        break;\n      case 3:\n        gl.vertexAttrib3fv(location, array);\n        break;\n      case 4:\n        gl.vertexAttrib4fv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantIntArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1iv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2iv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3iv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4iv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantUintArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1uiv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2uiv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3uiv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4uiv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  // RESOURCE IMPLEMENTATION\n\n  _createHandle() {\n    this.hasVertexArrays = VertexArrayObject.isSupported(this.gl);\n    if (this.hasVertexArrays) {\n      return this.gl.createVertexArray();\n    }\n    return null;\n  }\n\n  _deleteHandle(handle) {\n    if (this.hasVertexArrays) {\n      this.gl.deleteVertexArray(handle);\n    }\n    return [this.elements];\n    // return [this.elements, ...this.buffers];\n  }\n\n  _bindHandle(handle) {\n    if (this.hasVertexArrays) {\n      this.gl.bindVertexArray(handle);\n    }\n  }\n\n  // Generic getter for information about a vertex attribute at a given position\n  _getParameter(pname, {location}) {\n    assert(Number.isFinite(location));\n    return this.bind(() => {\n      switch (pname) {\n        case GL.VERTEX_ATTRIB_ARRAY_POINTER:\n          return this.gl.getVertexAttribOffset(location, pname);\n        default:\n          return this.gl.getVertexAttrib(location, pname);\n      }\n    });\n  }\n\n  // DEPRECATED\n\n  /*\n  setDivisor(location, divisor) {\n    location = Number(location);\n    this.bind(() => this.gl.vertexAttribDivisor(location, divisor));\n    return this;\n  }\n\n  // match assumed WebGL defaults\n  static resetConstants(gl) {\n    const MAX_ATTRIBUTES = VertexArrayObject.getMaxAttributes(gl);\n    for (let i = 0; i < MAX_ATTRIBUTES; i++) {\n      VertexArrayObject.setConstant(gl, i, [0, 0, 0, 1]);\n    }\n  }\n\n  // Resets all attributes (to default valued constants)\n  resetAttributes() {\n    // WebGL offers disabling, but no clear way to set a VertexArray buffer to `null`\n    // But Chrome does not like buffers that are bound to several binding points.\n    // So we just bind all the attributes to the dummy \"attribute zero\" buffer\n    this.buffer = this.buffer || new Buffer(this.gl, {size: 4});\n\n    for (const location in this.values) {\n      if (this.values[location] instanceof Buffer) {\n        this.gl.disableVertexAttribArray(location);\n        this.gl.bindBuffer(GL.ARRAY_BUFFER, this.buffer.handle);\n        this.gl.vertexAttribPointer(location, 1, GL.FLOAT, false, 0, 0);\n      }\n    }\n\n    this.setElementBuffer(null);\n    return this;\n  }\n  */\n}\n","import GL from '@luma.gl/constants';\nimport Accessor from './accessor';\nimport Buffer from './buffer';\nimport VertexArrayObject from './vertex-array-object';\nimport {log, assert, stubRemovedMethods} from '../utils';\n\nconst ERR_ATTRIBUTE_TYPE =\n  'VertexArray: attributes must be Buffers or constants (i.e. typed array)';\n\n// This is done to support mat type attributes.\n// See section \"Notes about setting mat type attributes\"\n// in vertex-array.md\nconst MULTI_LOCATION_ATTRIBUTE_REGEXP = /^(.+)__LOCATION_([0-9]+)$/;\n\nconst DEPRECATIONS_V6 = [\n  'setBuffers',\n  'setGeneric',\n  'clearBindings',\n  'setLocations',\n  'setGenericValues',\n  'setDivisor',\n  'enable',\n  'disable'\n];\n\nexport default class VertexArray {\n  constructor(gl, opts = {}) {\n    // Use program's id if program is supplied but no id is supplied\n    const id = opts.id || (opts.program && opts.program.id);\n    // super(gl, Object.assign({}, opts, {id}));\n\n    this.id = id;\n    this.gl = gl;\n    this.configuration = null;\n\n    // Extracted information\n    this.elements = null;\n    this.elementsAccessor = null;\n    this.values = null;\n    this.accessors = null;\n    this.unused = null;\n    this.drawParams = null;\n    this.buffer = null; // For attribute 0 on desktops, and created when unbinding buffers\n\n    this.vertexArrayObject = VertexArrayObject.isSupported(gl)\n      ? new VertexArrayObject(gl)\n      : VertexArrayObject.getDefaultArray(gl);\n\n    // Issue errors when using removed methods\n    stubRemovedMethods(this, 'VertexArray', 'v6.0', DEPRECATIONS_V6);\n\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  delete() {\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n  }\n\n  initialize(props = {}) {\n    this.reset();\n    this.configuration = null;\n    this.bindOnUse = false;\n    return this.setProps(props);\n  }\n\n  // Resets all attributes (to default valued constants)\n  reset() {\n    // this.vertexArrayObject.reset();\n\n    this.elements = null;\n    this.elementsAccessor = null;\n    const {MAX_ATTRIBUTES} = this.vertexArrayObject;\n    this.values = new Array(MAX_ATTRIBUTES).fill(null);\n    this.accessors = new Array(MAX_ATTRIBUTES).fill(null);\n    this.unused = {};\n\n    // Auto detects draw params\n    this.drawParams = null;\n\n    return this;\n  }\n\n  setProps(props) {\n    if ('program' in props) {\n      this.configuration = props.program && props.program.configuration;\n    }\n    if ('configuration' in props) {\n      this.configuration = props.configuration;\n    }\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('elements' in props) {\n      this.setElementBuffer(props.elements);\n    }\n    if ('bindOnUse' in props) {\n      props = props.bindOnUse;\n    }\n    return this;\n  }\n\n  // Automatically called if buffers changed through VertexArray API\n  clearDrawParams() {\n    this.drawParams = null;\n  }\n\n  getDrawParams(appParameters) {\n    // Auto deduced draw parameters\n    this.drawParams = this.drawParams || this._updateDrawParams();\n\n    // Override with any application supplied draw parameters\n    return Object.assign({}, this.drawParams, appParameters);\n  }\n\n  // Set (bind) an array or map of vertex array buffers, either in numbered or named locations.\n  // For names that are not present in `location`, the supplied buffers will be ignored.\n  // if a single buffer of type GL.ELEMENT_ARRAY_BUFFER is present, it will be set as elements\n  //   Signatures:\n  //     {attributeName: buffer}\n  //     {attributeName: [buffer, accessor]}\n  //     {attributeName: (typed) array} => constant\n  setAttributes(attributes) {\n    this.vertexArrayObject.bind(() => {\n      for (const locationOrName in attributes) {\n        const value = attributes[locationOrName];\n        this._setAttribute(locationOrName, value);\n      }\n      // Make sure we don't leave any bindings\n      this.gl.bindBuffer(GL.ARRAY_BUFFER, null);\n    });\n\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, accessor = {}) {\n    this.elements = elementBuffer; // Save value for debugging\n    this.elementsAccessor = accessor;\n    this.clearDrawParams();\n\n    // Update vertexArray immediately if we have our own array\n    if (!this.vertexArrayObject.isDefaultArray) {\n      this.vertexArrayObject.setElementBuffer(elementBuffer, accessor);\n    }\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a buffer\n  setBuffer(locationOrName, buffer, appAccessor = {}) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer, appAccessor);\n    }\n\n    const {location, accessor} = this._resolveLocationAndAccessor(\n      locationOrName,\n      buffer,\n      buffer.accessor,\n      appAccessor\n    );\n\n    if (location >= 0) {\n      this.values[location] = buffer;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n\n      // Update vertexArray immediately if we have our own array\n      if (!this.vertexArrayObject.isDefaultArray) {\n        this.vertexArrayObject.setBuffer(location, buffer, accessor);\n      }\n    }\n\n    return this;\n  }\n\n  // Set attribute to constant value (small typed array corresponding to one vertex' worth of data)\n  setConstant(locationOrName, arrayValue, appAccessor = {}) {\n    const {location, accessor} = this._resolveLocationAndAccessor(\n      locationOrName,\n      arrayValue,\n      // Ensure that size isn't taken from program for multi-column\n      // attributes\n      Object.assign({size: arrayValue.length}, appAccessor)\n    );\n\n    if (location >= 0) {\n      arrayValue = this.vertexArrayObject._normalizeConstantArrayValue(arrayValue, accessor);\n\n      this.values[location] = arrayValue;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n\n      // Update vertexArray immediately if we have our own array\n      // NOTE: We set the actual constant value later on bind. We can't set the value now since\n      // constants are global and affect all other VertexArrays that have disabled attributes\n      // in the same location.\n      // We do disable the attribute which makes it use the global constant value at that location\n      if (!this.vertexArrayObject.isDefaultArray) {\n        this.vertexArrayObject.enable(location, false);\n      }\n    }\n\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, unbind temporarily to avoid conflicting with TransformFeedback\n  unbindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.setElementBuffer(null);\n      }\n\n      // Chrome does not like buffers that are bound to several binding points,\n      // so we need to offer and unbind facility\n      // WebGL offers disabling, but no clear way to set a VertexArray buffer to `null`\n      // So we just bind all the attributes to the dummy \"attribute zero\" buffer\n      this.buffer = this.buffer || new Buffer(this.gl, {accessor: {size: 4}});\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        if (this.values[location] instanceof Buffer) {\n          this.gl.disableVertexAttribArray(location);\n          this.gl.bindBuffer(GL.ARRAY_BUFFER, this.buffer.handle);\n          this.gl.vertexAttribPointer(location, 1, GL.FLOAT, false, 0, 0);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, rebind rebind after temporary unbind\n  bindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.setElementBuffer(this.elements);\n      }\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        const buffer = this.values[location];\n        if (buffer instanceof Buffer) {\n          this.setBuffer(location, buffer);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Bind for use\n  // When a vertex array is about to be used, we must:\n  // - Set constant attributes (since these are stored on the context and reset on bind)\n  // - Check if we need to initialize the buffer\n  bindForDraw(vertexCount, instanceCount, func) {\n    let value;\n\n    this.vertexArrayObject.bind(() => {\n      // Make sure that any constant attributes are updated (stored on the context, not the VAO)\n      // Also handles attribute 0\n      this._setConstantAttributes(vertexCount, instanceCount);\n\n      if (!this.vertexArrayObject.hasVertexArrays) {\n        this.bindBuffers();\n      }\n\n      value = func();\n\n      if (!this.vertexArrayObject.hasVertexArrays) {\n        this.unbindBuffers();\n      }\n    });\n\n    return value;\n  }\n\n  // PRIVATE\n\n  // Resolve locations and accessors\n  _resolveLocationAndAccessor(locationOrName, value, valueAccessor, appAccessor) {\n    const {location, name} = this._getAttributeIndex(locationOrName);\n    if (!Number.isFinite(location) || location < 0) {\n      this.unused[locationOrName] = value;\n      log.once(3, () => `unused value ${locationOrName} in ${this.id}`)();\n      return this;\n    }\n\n    const accessInfo = this._getAttributeInfo(name || location);\n\n    // Attribute location wasn't directly found.\n    // Likely due to multi-location attributes (e.g. matrix)\n    if (!accessInfo) {\n      return {\n        location: -1,\n        accessor: null\n      };\n    }\n\n    // Resolve the partial accessors into a final accessor\n    const accessor = Accessor.resolve(accessInfo.accessor, valueAccessor, appAccessor);\n\n    const {size, type} = accessor;\n    assert(Number.isFinite(size) && Number.isFinite(type));\n\n    return {location, accessor};\n  }\n\n  _getAttributeInfo(attributeName) {\n    return this.configuration && this.configuration.getAttributeInfo(attributeName);\n  }\n\n  _getAttributeIndex(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return {location};\n    }\n\n    const multiLocation = MULTI_LOCATION_ATTRIBUTE_REGEXP.exec(locationOrName);\n    const name = multiLocation ? multiLocation[1] : locationOrName;\n    const locationOffset = multiLocation ? Number(multiLocation[2]) : 0;\n\n    if (this.configuration) {\n      return {\n        location: this.configuration.getAttributeLocation(name) + locationOffset,\n        name\n      };\n    }\n\n    return {location: -1};\n  }\n\n  _setAttribute(locationOrName, value) {\n    if (value instanceof Buffer) {\n      //  Signature: {attributeName: Buffer}\n      this.setBuffer(locationOrName, value);\n    } else if (Array.isArray(value) && value.length && value[0] instanceof Buffer) {\n      // Signature: {attributeName: [buffer, accessor]}\n      const buffer = value[0];\n      const accessor = value[1];\n      this.setBuffer(locationOrName, buffer, accessor);\n    } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {\n      // Signature: {attributeName: constant}, constant == short (typed) array\n      const constant = value;\n      this.setConstant(locationOrName, constant);\n    } else if (value.buffer instanceof Buffer) {\n      // luma.gl v7: Support accessor objects with 'buffer' field\n      // for interleaved data\n      // Signature: {attributeName: {...accessor, buffer}}\n      const accessor = value;\n      this.setBuffer(locationOrName, accessor.buffer, accessor);\n    } else {\n      throw new Error(ERR_ATTRIBUTE_TYPE);\n    }\n  }\n\n  // Updates all constant attribute values (constants are used when vertex attributes are disabled).\n  // This needs to be done repeatedly since in contrast to buffer bindings,\n  // constants are stored on the WebGL context, not the VAO\n  _setConstantAttributes(vertexCount, instanceCount) {\n    // TODO - use accessor to determine what length to use\n    const elementCount = Math.max(vertexCount | 0, instanceCount | 0);\n    let constant = this.values[0];\n    if (ArrayBuffer.isView(constant)) {\n      this._setConstantAttributeZero(constant, elementCount);\n    }\n\n    for (let location = 1; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      constant = this.values[location];\n      if (ArrayBuffer.isView(constant)) {\n        this._setConstantAttribute(location, constant);\n      }\n    }\n  }\n\n  _setConstantAttributeZero(constant, elementCount) {\n    if (VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true})) {\n      this._setConstantAttribute(0, constant);\n      return;\n    }\n\n    // Get a dummy buffer populated with repeated constants\n    const buffer = this.vertexArrayObject.getConstantBuffer(elementCount, constant);\n\n    // Set the buffer on location 0\n    this.vertexArrayObject.setBuffer(0, buffer, this.accessors[0]);\n  }\n\n  _setConstantAttribute(location, constant) {\n    VertexArrayObject.setConstant(this.gl, location, constant);\n\n    // If we are using the global VertexArrayObject, we need to disable the attribute now\n    if (this.vertexArrayObject.isDefault) {\n      this.vertexArrayObject.enable(location, false);\n    }\n  }\n\n  // Walks the buffers and updates draw parameters\n  _updateDrawParams() {\n    const drawParams = {\n      isIndexed: false,\n      isInstanced: false,\n      indexCount: Infinity,\n      vertexCount: Infinity,\n      instanceCount: Infinity\n    };\n\n    for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      this._updateDrawParamsForLocation(drawParams, location);\n    }\n\n    if (this.elements) {\n      // indexing is autodetected - buffer with target GL.ELEMENT_ARRAY_BUFFER\n      // index type is saved for drawElement calls\n      drawParams.elementCount = this.elements.getElementCount(this.elements.accessor);\n      drawParams.isIndexed = true;\n      drawParams.indexType = this.elementsAccessor.type || this.elements.accessor.type;\n      drawParams.indexOffset = this.elementsAccessor.offset || 0;\n    }\n\n    // Post-calculation checks\n    if (drawParams.indexCount === Infinity) {\n      drawParams.indexCount = 0;\n    }\n    if (drawParams.vertexCount === Infinity) {\n      drawParams.vertexCount = 0;\n    }\n    if (drawParams.instanceCount === Infinity) {\n      drawParams.instanceCount = 0;\n    }\n\n    return drawParams;\n  }\n\n  _updateDrawParamsForLocation(drawParams, location) {\n    const value = this.values[location];\n    const accessor = this.accessors[location];\n\n    if (!value) {\n      return;\n    }\n\n    // Check if instanced (whether buffer or constant)\n    const {divisor} = accessor;\n    const isInstanced = divisor > 0;\n    drawParams.isInstanced = drawParams.isInstanced || isInstanced;\n\n    if (value instanceof Buffer) {\n      const buffer = value;\n\n      if (isInstanced) {\n        // instance attribute\n        const instanceCount = buffer.getVertexCount(accessor);\n        drawParams.instanceCount = Math.min(drawParams.instanceCount, instanceCount);\n      } else {\n        // normal attribute\n        const vertexCount = buffer.getVertexCount(accessor);\n        drawParams.vertexCount = Math.min(drawParams.vertexCount, vertexCount);\n      }\n    }\n  }\n\n  // DEPRECATED in v6.x - but not warnings not properly implemented\n\n  setElements(elementBuffer = null, accessor = {}) {\n    log.deprecated('setElements', 'setElementBuffer')();\n    return this.setElementBuffer(elementBuffer, accessor);\n  }\n}\n"],"sourceRoot":""}