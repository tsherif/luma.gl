{"version":3,"sources":["../../../src/gltf/gltf-animator.js"],"names":["ATTRIBUTE_TYPE_TO_COMPONENTS","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY","Int8Array","Uint8Array","Int16Array","Uint16Array","Uint32Array","Float32Array","accessorToJsArray","accessor","_animation","ArrayType","componentType","components","type","length","count","bufferView","data","buffer","byteOffset","array","Array","from","slicedArray","i","push","slice","helperMatrix","Matrix4","applyTranslationRotationScale","gltfNode","node","matrix","identity","translation","translate","rotation","rotationMatrix","fromQuaternion","multiplyRight","scale","GLTFAnimation","props","startTime","playing","speed","Object","assign","timeMs","absTime","time","channels","forEach","sampler","input","output","target","path","index","findIndex","t","_node","GLTFAnimator","gltf","animations","map","animation","name","samplers","interpolation","accessors","nodes","animate"],"mappings":"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","sourcesContent":["import {Matrix4} from 'math.gl';\n\n// TODO: import from loaders.gl?\nexport const ATTRIBUTE_TYPE_TO_COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\n\nexport const ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY = {\n  5120: Int8Array,\n  5121: Uint8Array,\n  5122: Int16Array,\n  5123: Uint16Array,\n  5125: Uint32Array,\n  5126: Float32Array\n};\n//\n\nfunction accessorToJsArray(accessor) {\n  if (!accessor._animation) {\n    const ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[accessor.componentType];\n    const components = ATTRIBUTE_TYPE_TO_COMPONENTS[accessor.type];\n    const length = components * accessor.count;\n    const {buffer, byteOffset} = accessor.bufferView.data;\n\n    const array = new ArrayType(buffer, byteOffset + (accessor.byteOffset || 0), length);\n\n    if (components === 1) {\n      accessor._animation = Array.from(array);\n    } else {\n      // Slice array\n      const slicedArray = [];\n      for (let i = 0; i < array.length; i += components) {\n        slicedArray.push(Array.from(array.slice(i, i + components)));\n      }\n      accessor._animation = slicedArray;\n    }\n  }\n\n  return accessor._animation;\n}\n\n// TODO: share with GLTFInstantiator\nconst helperMatrix = new Matrix4();\nfunction applyTranslationRotationScale(gltfNode, node) {\n  node.matrix.identity();\n\n  if (gltfNode.translation) {\n    node.matrix.translate(gltfNode.translation);\n  }\n\n  if (gltfNode.rotation) {\n    const rotationMatrix = helperMatrix.fromQuaternion(gltfNode.rotation);\n    node.matrix.multiplyRight(rotationMatrix);\n  }\n\n  if (gltfNode.scale) {\n    node.matrix.scale(gltfNode.scale);\n  }\n}\n\nclass GLTFAnimation {\n  constructor(props) {\n    this.startTime = 0;\n    this.playing = true;\n    this.speed = 1;\n\n    Object.assign(this, props);\n  }\n\n  animate(timeMs) {\n    if (!this.playing) {\n      return;\n    }\n\n    const absTime = timeMs / 1000;\n    const time = (absTime - this.startTime) * this.speed;\n\n    this.channels.forEach(({sampler: {input, output}, target, path}) => {\n      // TODO: support \"interpolation\"\n      let index = input.findIndex(t => t > time);\n      if (index === -1) {\n        index = 0;\n        this.startTime = absTime;\n      }\n      target[path] = output[index];\n      applyTranslationRotationScale(target, target._node);\n    });\n  }\n}\n\nexport default class GLTFAnimator {\n  constructor(gltf) {\n    this.animations = gltf.animations.map((animation, index) => {\n      const name = animation.name || `Animation-${index}`;\n      const samplers = animation.samplers.map(({input, interpolation = 'LINEAR', output}) => ({\n        input: accessorToJsArray(gltf.accessors[input]),\n        interpolation,\n        output: accessorToJsArray(gltf.accessors[output])\n      }));\n      const channels = animation.channels.map(({sampler, target}) => ({\n        sampler: samplers[sampler],\n        target: gltf.nodes[target.node],\n        path: target.path\n      }));\n      return new GLTFAnimation({name, channels});\n    });\n  }\n\n  animate(timeMs) {\n    this.animations.forEach(animation => animation.animate(timeMs));\n  }\n\n  getAnimations() {\n    return this.animations;\n  }\n}\n"],"file":"gltf-animator.js"}