{"version":3,"sources":["../../../src/glsl-to-js-compiler/compile-shader.js"],"names":["Compiler","getUniformNormalizer","normalize","source","replace","$0","$1","getVersion","slice","compileShaderModule","moduleName","compileModule","uniform","name","version","compiledSource","compiler","evalScript","uniforms","Object","keys","functions","join","compileVertexShader","shaderName","compileVS","attribute","varyings","compileFragmentShader","compileFS","varying","value","script","eval"],"mappings":"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","sourcesContent":["import Compiler from 'glsl-transpiler';\nimport {getUniformNormalizer} from './normalize-uniforms';\n\nfunction normalize(source) {\n  return (\n    source\n      // prepr does not like #define without value\n      .replace(/^(#define \\w+) *$/gm, ($0, $1) => `${$1} 1`)\n  );\n}\n\nfunction getVersion(source) {\n  return source.slice(0, 9) === '#version ' ? '300 es' : '100 es';\n}\n\nexport function compileShaderModule(moduleName, source) {\n  source = normalize(source);\n\n  const compileModule = Compiler({\n    uniform: name => `uniforms.${name}`,\n    version: getVersion(source)\n  });\n\n  const compiledSource = compileModule(source);\n  const {compiler} = compileModule;\n\n  return evalScript(\n    `function vs(uniforms) {\n  ${getUniformNormalizer(compiler.uniforms)}\n  ${compiledSource}\n  return {\n    ${Object.keys(compiler.functions).join(',')}\n  };\n}`,\n    moduleName\n  );\n}\n\n// @returns JavaScript function of the transpiled shader\nexport function compileVertexShader(shaderName, source) {\n  source = normalize(source);\n\n  const compileVS = Compiler({\n    uniform: name => `uniforms.${name}`,\n    attribute: name => `attributes.${name}`,\n    version: getVersion(source)\n  });\n\n  const compiledSource = compileVS(source);\n  const {compiler} = compileVS;\n\n  return evalScript(\n    `function vs(uniforms, attributes) {\n  var gl_Position;\n  ${getUniformNormalizer(compiler.uniforms)}\n  ${compiledSource}\n  /* End of shader code */\n  main();\n  return {\n    gl_Position,\n    varyings: {${Object.keys(compiler.varyings).join(', ')}}\n  };\n}`,\n    shaderName\n  );\n}\n\n// @returns JavaScript function of the transpiled shader\nexport function compileFragmentShader(shaderName, source) {\n  source = normalize(source);\n\n  const compileFS = Compiler({\n    uniform: name => `uniforms.${name}`,\n    attribute: name => `attributes.${name}`,\n    varying: name => `varyings.${name}`,\n    version: getVersion(source)\n  });\n\n  const compiledSource = compileFS(source);\n  const {compiler} = compileFS;\n\n  return evalScript(\n    `function fs(uniforms, varyings) {\n  var gl_FragColor;\n  var isDiscarded = false;\n  function discard() {\n    isDiscarded = true;\n  }\n  ${getUniformNormalizer(compiler.uniforms)}\n  ${compiledSource}\n  /* End of shader code */\n  main();\n  return {\n    gl_FragColor,\n    isDiscarded\n  };\n}`,\n    shaderName\n  );\n}\n\n/* eslint-disable no-eval */\nfunction evalScript(value, name) {\n  const script = `(function() { return ${value}; })()\n//# sourceURL=${name}.js`;\n  return eval(script);\n}\n"],"file":"compile-shader.js"}