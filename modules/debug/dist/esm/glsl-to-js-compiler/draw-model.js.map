{"version":3,"sources":["../../../src/glsl-to-js-compiler/draw-model.js"],"names":["compileVertexShader","compileFragmentShader","clamp","lerp","shaderCache","COLOR_MODE","NONE","DEPTH","FRAGMENT","MIN_DEPTH_COLOR","MAX_DEPTH_COLOR","DISCARDED_FRAG_COLOR","model","draw","colorMode","shaders","getShaders","uniforms","program","sortAttributes","_attributes","instancedAttributes","vertexAttributes","indices","attributeValues","vertexCount","drawMode","getDrawMode","instanceCount","i","ai","getAttributeAtIndex","positions","colors","j","aj","Object","assign","renderVertex","position","color","id","vs","source","fs","attributes","indexAttribute","attributeName","attribute","isIndexed","divisor","constant","getBuffer","getElementCount","size","getData","Array","from","length","d","values","result","value","subarray","gl_Position","varyings","depth","gl_FragColor","isDiscarded"],"mappings":"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","sourcesContent":["import {compileVertexShader, compileFragmentShader} from './compile-shader';\nimport {clamp, lerp} from 'math.gl';\n\nconst shaderCache = {};\n\nexport const COLOR_MODE = {\n  NONE: 0,\n  DEPTH: 1,\n  FRAGMENT: 2\n};\n\nconst MIN_DEPTH_COLOR = [1, 1, 0, 1];\nconst MAX_DEPTH_COLOR = [0, 0, 1, 1];\nconst DISCARDED_FRAG_COLOR = [1, 0, 0, 1];\n\nexport default ({model, draw, colorMode = COLOR_MODE.NONE}) => {\n  const shaders = getShaders(model);\n\n  // draw params\n  const {uniforms} = model.program;\n  const {\n    instancedAttributes,\n    vertexAttributes,\n    indices,\n    attributeValues,\n    vertexCount\n  } = sortAttributes(model._attributes);\n  const drawMode = model.getDrawMode();\n  const instanceCount = model.instanceCount || 1;\n\n  // iterate through all instances\n  for (let i = 0; i < instanceCount; i++) {\n    const ai = getAttributeAtIndex(instancedAttributes, i, attributeValues);\n    const positions = [];\n    const colors = [];\n\n    // iterate through all vertices\n    for (let j = 0; j < vertexCount; j++) {\n      const aj = Object.assign({}, ai, getAttributeAtIndex(vertexAttributes, j, attributeValues));\n\n      const {position, color} = renderVertex(shaders, uniforms, aj, colorMode);\n      positions[j] = position;\n      colors[j] = color;\n    }\n\n    draw({indices, drawMode, positions, colors});\n  }\n};\n\n// Transpile shaders of a model to JavaScript\nfunction getShaders(model) {\n  const {id, program} = model;\n\n  let vs = shaderCache[program.vs.source];\n  if (!vs) {\n    vs = compileVertexShader(`${id}-vs`, program.vs.source);\n    shaderCache[program.vs.source] = vs;\n  }\n\n  let fs = shaderCache[program.fs.source];\n  if (!fs) {\n    fs = compileFragmentShader(`${id}-fs`, program.fs.source);\n    shaderCache[program.fs.source] = fs;\n  }\n\n  return {vs, fs};\n}\n\n// Sort attributes by instanced and indexed\nfunction sortAttributes(attributes) {\n  const attributeValues = {};\n  const instancedAttributes = {};\n  const vertexAttributes = {};\n  let indexAttribute = null;\n  let vertexCount = 1;\n\n  for (const attributeName in attributes) {\n    const attribute = attributes[attributeName];\n    if (attribute.isIndexed) {\n      indexAttribute = attribute;\n    } else if (attribute.divisor) {\n      instancedAttributes[attributeName] = attribute;\n    } else {\n      vertexAttributes[attributeName] = attribute;\n      if (!attribute.constant) {\n        vertexCount = attribute.getBuffer().getElementCount() / attribute.size;\n      }\n    }\n    attributeValues[attributeName] = !attribute.constant && attribute.getBuffer().getData();\n  }\n\n  let indices;\n  if (indexAttribute) {\n    indices = attributeValues[indexAttribute.id];\n  } else {\n    indices = Array.from({length: vertexCount}, (d, i) => i);\n  }\n\n  return {instancedAttributes, vertexAttributes, indices, attributeValues, vertexCount};\n}\n\n// Get single attribute value by vertex index\nfunction getAttributeAtIndex(attributes, i, values) {\n  const result = {};\n\n  for (const attributeName in attributes) {\n    const attribute = attributes[attributeName];\n    if (attribute.constant) {\n      result[attributeName] = attribute.value;\n    } else {\n      const {size} = attribute;\n      const value = values[attributeName].subarray(i * size, (i + 1) * size);\n      result[attributeName] = Array.from(value);\n    }\n  }\n\n  return result;\n}\n\n// Get the position and color of a single vertex\nfunction renderVertex(shaders, uniforms, attributes, colorMode) {\n  // Run vertex shader\n  const {gl_Position, varyings} = shaders.vs(uniforms, attributes);\n\n  let color;\n  switch (colorMode) {\n    case COLOR_MODE.DEPTH: {\n      const depth = clamp(gl_Position[2] / gl_Position[3], -1, 1);\n      color = lerp(MIN_DEPTH_COLOR, MAX_DEPTH_COLOR, (depth + 1) / 2);\n      break;\n    }\n\n    case COLOR_MODE.FRAGMENT: {\n      // Run fragment shader\n      const {gl_FragColor, isDiscarded} = shaders.fs(uniforms, varyings);\n      color = isDiscarded ? DISCARDED_FRAG_COLOR : gl_FragColor;\n      break;\n    }\n\n    default:\n  }\n\n  return {position: gl_Position, color};\n}\n"],"file":"draw-model.js"}