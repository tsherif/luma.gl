{"version":3,"sources":["../../../src/modules/convolution.js"],"names":["KERNEL","NORMAL","GAUSSIAN_BLUR","GAUSSIAN_BLUR_2","GAUSSIAN_BLUR_3","UNSHARPEN","SHARPNESS","SHARPEN","EDGE_DETECT","EDGE_DETECT_2","EDGE_DETECT_3","EDGE_DETECT_4","EDGE_DETECT_5","EDGE_DETECT_6","SOBEL_HORIZONTAL","SOBEL_VERTICAL","PREVIT_HORIZONTAL","PREVIT_VERTICAL","BOX_BLUR","TRIANGLE_BLUR","EMBOSS","fs","DEFAULT_PROPS","name","getUniforms","props"],"mappings":"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","sourcesContent":["// A convolution shader\n// Based on https://webglfundamentals.org/webgl/lessons/webgl-image-processing-continued.html\n\n/*\n# Copyright 2012, Gregg Tavares.\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are\n# met:\n#\n#     * Redistributions of source code must retain the above copyright\n# notice, this list of conditions and the following disclaimer.\n#     * Redistributions in binary form must reproduce the above\n# copyright notice, this list of conditions and the following disclaimer\n# in the documentation and/or other materials provided with the\n# distribution.\n#     * Neither the name of Gregg Tavares. nor the names of his\n# contributors may be used to endorse or promote products derived from\n# this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n// Pre-defined convolution kernels\n/* eslint-disable */\nconst KERNEL = {\n  NORMAL: [0, 0, 0, 0, 1, 0, 0, 0, 0],\n  GAUSSIAN_BLUR: [0.045, 0.122, 0.045, 0.122, 0.332, 0.122, 0.045, 0.122, 0.045],\n  GAUSSIAN_BLUR_2: [1, 2, 1, 2, 4, 2, 1, 2, 1],\n  GAUSSIAN_BLUR_3: [0, 1, 0, 1, 1, 1, 0, 1, 0],\n  UNSHARPEN: [-1, -1, -1, -1, 9, -1, -1, -1, -1],\n  SHARPNESS: [0, -1, 0, -1, 5, -1, 0, -1, 0],\n  SHARPEN: [-1, -1, -1, -1, 16, -1, -1, -1, -1],\n  EDGE_DETECT: [-0.125, -0.125, -0.125, -0.125, 1, -0.125, -0.125, -0.125, -0.125],\n  EDGE_DETECT_2: [-1, -1, -1, -1, 8, -1, -1, -1, -1],\n  EDGE_DETECT_3: [-5, 0, 0, 0, 0, 0, 0, 0, 5],\n  EDGE_DETECT_4: [-1, -1, -1, 0, 0, 0, 1, 1, 1],\n  EDGE_DETECT_5: [-1, -1, -1, 2, 2, 2, -1, -1, -1],\n  EDGE_DETECT_6: [-5, -5, -5, -5, 39, -5, -5, -5, -5],\n  SOBEL_HORIZONTAL: [1, 2, 1, 0, 0, 0, -1, -2, -1],\n  SOBEL_VERTICAL: [1, 0, -1, 2, 0, -2, 1, 0, -1],\n  PREVIT_HORIZONTAL: [1, 1, 1, 0, 0, 0, -1, -1, -1],\n  PREVIT_VERTICAL: [1, 0, -1, 1, 0, -1, 1, 0, -1],\n  BOX_BLUR: [0.111, 0.111, 0.111, 0.111, 0.111, 0.111, 0.111, 0.111, 0.111],\n  TRIANGLE_BLUR: [0.0625, 0.125, 0.0625, 0.125, 0.25, 0.125, 0.0625, 0.125, 0.0625],\n  EMBOSS: [-2, -1, 0, -1, 1, 1, 0, 1, 2]\n};\n/* eslint-enable */\n\nconst fs = `\nprecision highp float;\n\nuniform vec2 uTextureSize;\nuniform float uKernel[9];\nuniform float uKernelWeight;\n\nvec4 convolution_getColor(sampler2D tDiffuse, vec2 uv) {\n  vec2 onePixel = vec2(1.0, 1.0) / uTextureSize;\n  vec4 colorSum =\n    texture2D(tDiffuse, uv + onePixel * vec2(-1, -1)) * uKernel[0] +\n    texture2D(tDiffuse, uv + onePixel * vec2( 0, -1)) * uKernel[1] +\n    texture2D(tDiffuse, uv + onePixel * vec2( 1, -1)) * uKernel[2] +\n    texture2D(tDiffuse, uv + onePixel * vec2(-1,  0)) * uKernel[3] +\n    texture2D(tDiffuse, uv + onePixel * vec2( 0,  0)) * uKernel[4] +\n    texture2D(tDiffuse, uv + onePixel * vec2( 1,  0)) * uKernel[5] +\n    texture2D(tDiffuse, uv + onePixel * vec2(-1,  1)) * uKernel[6] +\n    texture2D(tDiffuse, uv + onePixel * vec2( 0,  1)) * uKernel[7] +\n    texture2D(tDiffuse, uv + onePixel * vec2( 1,  1)) * uKernel[8] ;\n\n  // Divide the sum by the weight but just use rgb, set alpha to 1.0\n  return vec4((colorSum / uKernelWeight).rgb, 1.0);\n}\n`;\n\nconst DEFAULT_PROPS = {};\n\nexport default {\n  name: 'convolution',\n  fs,\n  DEFAULT_PROPS,\n  getUniforms: props => props,\n  KERNEL\n};\n"],"file":"convolution.js"}