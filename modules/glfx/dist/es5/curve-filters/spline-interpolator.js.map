{"version":3,"sources":["../../../src/curve-filters/spline-interpolator.js"],"names":["SplineInterpolator","points","n","length","xa","ya","u","y2","sort","a","b","i","push","wx","sig","p","ddydx","x","klo","khi","k","h"],"mappings":"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","sourcesContent":["// from SplineInterpolator.cs in the Paint.NET source code\n\nexport default class SplineInterpolator {\n  constructor(points) {\n    const n = points.length;\n    this.xa = [];\n    this.ya = [];\n    this.u = [];\n    this.y2 = [];\n\n    points.sort((a, b) => a[0] - b[0]);\n\n    for (let i = 0; i < n; i++) {\n      this.xa.push(points[i][0]);\n      this.ya.push(points[i][1]);\n    }\n\n    this.u[0] = 0;\n    this.y2[0] = 0;\n\n    for (let i = 1; i < n - 1; ++i) {\n      // This is the decomposition loop of the tridiagonal algorithm.\n      // y2 and u are used for temporary storage of the decomposed factors.\n      const wx = this.xa[i + 1] - this.xa[i - 1];\n      const sig = (this.xa[i] - this.xa[i - 1]) / wx;\n      const p = sig * this.y2[i - 1] + 2.0;\n\n      this.y2[i] = (sig - 1.0) / p;\n\n      const ddydx =\n        (this.ya[i + 1] - this.ya[i]) / (this.xa[i + 1] - this.xa[i]) -\n        (this.ya[i] - this.ya[i - 1]) / (this.xa[i] - this.xa[i - 1]);\n\n      this.u[i] = ((6.0 * ddydx) / wx - sig * this.u[i - 1]) / p;\n    }\n\n    this.y2[n - 1] = 0;\n\n    // This is the backsubstitution loop of the tridiagonal algorithm\n    for (let i = n - 2; i >= 0; --i) {\n      this.y2[i] = this.y2[i] * this.y2[i + 1] + this.u[i];\n    }\n  }\n\n  interpolate(x) {\n    const n = this.ya.length;\n    let klo = 0;\n    let khi = n - 1;\n\n    // We will find the right place in the table by means of\n    // bisection. This is optimal if sequential calls to this\n    // routine are at random values of x. If sequential calls\n    // are in order, and closely spaced, one would do better\n    // to store previous values of klo and khi.\n    while (khi - klo > 1) {\n      const k = (khi + klo) >> 1;\n\n      if (this.xa[k] > x) {\n        khi = k;\n      } else {\n        klo = k;\n      }\n    }\n\n    const h = this.xa[khi] - this.xa[klo];\n    const a = (this.xa[khi] - x) / h;\n    const b = (x - this.xa[klo]) / h;\n\n    // Cubic spline polynomial is now evaluated.\n    return (\n      a * this.ya[klo] +\n      b * this.ya[khi] +\n      (((a * a * a - a) * this.y2[klo] + (b * b * b - b) * this.y2[khi]) * (h * h)) / 6.0\n    );\n  }\n}\n"],"file":"spline-interpolator.js"}