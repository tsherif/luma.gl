{"version":3,"sources":["../../../src/warp-filters/matrixwarp.js"],"names":["fs","uniforms","matrix","inverse","getInverse","useTextureSpace","getMatrix","Array","prototype","concat","apply","length","name","dependencies","warp","passes","sampler"],"mappings":";;;;;;;;;AAeA;;AAEA,IAAMA,EAAE,+UAAR;AAoBA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAEC,OAAO,GAAGC,UAAU,CAACF,MAAD,CAAb,GAAwBA,MADxB;AAEfG,EAAAA,eAAe,EAAE;AAFF,CAAjB;;AAKA,SAASC,SAAT,CAAmBJ,MAAnB,EAA2BC,OAA3B,EAAoCE,eAApC,EAAqD;AAEnDH,EAAAA,MAAM,GAAGK,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuBC,KAAvB,CAA6B,EAA7B,EAAiCR,MAAjC,CAAT;;AAGA,MAAIA,MAAM,CAACS,MAAP,IAAiB,CAArB,EAAwB;AACtBT,IAAAA,MAAM,GAAG,CAACA,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,EAAuB,CAAvB,EAA0BA,MAAM,CAAC,CAAD,CAAhC,EAAqCA,MAAM,CAAC,CAAD,CAA3C,EAAgD,CAAhD,EAAmD,CAAnD,EAAsD,CAAtD,EAAyD,CAAzD,CAAT;AACD,GAFD,MAEO,IAAIA,MAAM,CAACS,MAAP,IAAiB,CAArB,EAAwB;AAC7B,UAAM,sCAAN;AACD;;AAED,SAAO,IAAP;AACD;;eAEc;AACbC,EAAAA,IAAI,EAAE,YADO;AAEbX,EAAAA,QAAQ,EAARA,QAFa;AAGbD,EAAAA,EAAE,EAAFA,EAHa;AAIba,EAAAA,YAAY,EAAE,CAACC,gBAAD,CAJD;AAMbC,EAAAA,MAAM,EAAE,CAAC;AAACC,IAAAA,OAAO,EAAE;AAAV,GAAD;AANK,C","sourcesContent":["/**\n * @filter                Matrix Warp\n * @description           Transforms an image by a 2x2 or 3x3 matrix. The coordinates used in\n *                        the transformation are (x, y) for a 2x2 matrix or (x, y, 1) for a\n *                        3x3 matrix, where x and y are in units of pixels.\n * @param matrix          A 2x2 or 3x3 matrix represented as either a list or a list of lists.\n *                        For example, the 3x3 matrix [[2,0,0],[0,3,0],[0,0,1]] can also be\n *                        represented as [2,0,0,0,3,0,0,0,1] or just [2,0,0,3].\n * @param inverse         A boolean value that, when true, applies the inverse transformation\n *                        instead. (optional, defaults to false)\n * @param useTextureSpace A boolean value that, when true, uses texture-space coordinates\n *                        instead of screen-space coordinates. Texture-space coordinates range\n *                        from -1 to 1 instead of 0 to width - 1 or height - 1, and are easier\n *                        to use for simple operations like flipping and rotating.\n */\nimport warp from './warp';\n\nconst fs = `\\\nuniform mat3 matrix;\nuniform bool useTextureSpace;\n\nvec2 matrixWarp_warp(vec2 coord) {\n  if (useTextureSpace) {\n    coord = coord / texSize * 2.0 - 1.0;\n  }\n  vec3 warp = matrix * vec3(coord, 1.0);\n  coord = warp.xy / warp.z;\n  if (useTextureSpace) {\n    coord = (coord * 0.5 + 0.5) * texSize;\n  }\n  return coord;\n}\n`;\n\n// TODO: FIXME\n/* eslint-disable */\n\nconst uniforms = {\n  matrix: inverse ? getInverse(matrix) : matrix,\n  useTextureSpace: false\n};\n\nfunction getMatrix(matrix, inverse, useTextureSpace) {\n  // Flatten all members of matrix into one big list\n  matrix = Array.prototype.concat.apply([], matrix);\n\n  // Extract a 3x3 matrix out of the arguments\n  if (matrix.length == 4) {\n    matrix = [matrix[0], matrix[1], 0, matrix[2], matrix[3], 0, 0, 0, 1];\n  } else if (matrix.length != 9) {\n    throw 'can only warp with 2x2 or 3x3 matrix';\n  }\n\n  return this;\n}\n\nexport default {\n  name: 'matrixWarp',\n  uniforms,\n  fs,\n  dependencies: [warp],\n\n  passes: [{sampler: true}]\n};\n"],"file":"matrixwarp.js"}