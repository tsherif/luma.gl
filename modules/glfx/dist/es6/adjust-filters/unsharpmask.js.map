{"version":3,"sources":["../../../src/adjust-filters/unsharpmask.js"],"names":["triangleBlur","fs","uniforms","radius","value","min","softMax","strength","name","dependencies","passes","module","target","sampler","blurredTexture","unsharpMask","gl","Shader","window","_","extraTexture","ensureFormat","texture","use","drawTo","getDefaultShader","drawRect","textures","originalTexture","simpleShader","call","unuse"],"mappings":"AAOA,OAAOA,YAAP,MAAyB,8BAAzB;AAEA,MAAMC,EAAE,kVAAR;AAYA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE;AAACC,IAAAA,KAAK,EAAE,EAAR;AAAYC,IAAAA,GAAG,EAAE,CAAjB;AAAoBC,IAAAA,OAAO,EAAE;AAA7B,GADO;AAEfC,EAAAA,QAAQ,EAAE;AAACH,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,GAAG,EAAE,CAAhB;AAAmBC,IAAAA,OAAO,EAAE;AAA5B;AAFK,CAAjB;AAKA,eAAe;AACbE,EAAAA,IAAI,EAAE,aADO;AAEbN,EAAAA,QAFa;AAGbO,EAAAA,YAAY,EAAE,CAACT,YAAD,CAHD;AAIbU,EAAAA,MAAM,EAAE,CACN;AAACC,IAAAA,MAAM,EAAEX,YAAT;AAAuBY,IAAAA,MAAM,EAAE;AAA/B,GADM,EAEN;AAACC,IAAAA,OAAO,EAAE,IAAV;AAAgBX,IAAAA,QAAQ,EAAE;AAACY,MAAAA,cAAc,EAAE;AAAjB;AAA1B,GAFM;AAJK,CAAf;;AAYA,SAASC,WAAT,CAAqBZ,MAArB,EAA6BI,QAA7B,EAAuC;AACrCS,EAAAA,EAAE,CAACD,WAAH,GAAiBC,EAAE,CAACD,WAAH,IAAkB,IAAIE,MAAJ,CAAW,IAAX,EAAiBhB,EAAjB,CAAnC;;AAGAiB,EAAAA,MAAM,CAACC,CAAP,CAASC,YAAT,CAAsBC,YAAtB,CAAmCH,MAAM,CAACC,CAAP,CAASG,OAA5C;;AACAJ,EAAAA,MAAM,CAACC,CAAP,CAASG,OAAT,CAAiBC,GAAjB;;AACAL,EAAAA,MAAM,CAACC,CAAP,CAASC,YAAT,CAAsBI,MAAtB,CAA6B,MAAMP,MAAM,CAACQ,gBAAP,CAAwB,KAAKT,EAA7B,EAAiCU,QAAjC,EAAnC;;AAGAR,EAAAA,MAAM,CAACC,CAAP,CAASC,YAAT,CAAsBG,GAAtB,CAA0B,CAA1B;;AACA,OAAKvB,YAAL,CAAkBG,MAAlB;AACAa,EAAAA,EAAE,CAACD,WAAH,CAAeY,QAAf,CAAwB;AACtBC,IAAAA,eAAe,EAAE;AADK,GAAxB;AAGAC,EAAAA,YAAY,CAACC,IAAb,CAAkB,IAAlB,EAAwBd,EAAE,CAACD,WAA3B,EAAwC;AACtCR,IAAAA,QAAQ,EAAEA;AAD4B,GAAxC;;AAGAW,EAAAA,MAAM,CAACC,CAAP,CAASC,YAAT,CAAsBW,KAAtB,CAA4B,CAA5B;AACD","sourcesContent":["/**\n * @filter         Unsharp Mask\n * @description    A form of image sharpening that amplifies high-frequencies in the image. It\n *                 is implemented by scaling pixels away from the average of their neighbors.\n * @param radius   The blur radius that calculates the average of the neighboring pixels.\n * @param strength A scale factor where 0 is no effect and higher values cause a stronger effect.\n */\nimport triangleBlur from '../blur-filters/triangleblur';\n\nconst fs = `\\\nuniform float strength;\nuniform float threshold;\nuniform sampler2D blurredTexture;\n\nvec4 unsharpMark_sampleColor(sampler2D texture, vec2 texSize, vec2 texCoord) {\n  vec4 blurred = texture2D(blurredTexture, texCoord);\n  vec4 original = texture2D(texture, texCoord);\n  gl_FragColor = mix(blurred, original, 1.0 + strength);\n}\n`;\n\nconst uniforms = {\n  radius: {value: 20, min: 0, softMax: 200},\n  strength: {value: 1, min: 0, softMax: 5}\n};\n\nexport default {\n  name: 'unsharpMask',\n  uniforms,\n  dependencies: [triangleBlur],\n  passes: [\n    {module: triangleBlur, target: 'texture1'},\n    {sampler: true, uniforms: {blurredTexture: 'texture1'}}\n  ]\n};\n\n// TODO: FIXME\n/* eslint-disable */\nfunction unsharpMask(radius, strength) {\n  gl.unsharpMask = gl.unsharpMask || new Shader(null, fs);\n\n  // Store a copy of the current texture in the second texture unit\n  window._.extraTexture.ensureFormat(window._.texture);\n  window._.texture.use();\n  window._.extraTexture.drawTo(() => Shader.getDefaultShader(this.gl).drawRect());\n\n  // Blur the current texture, then use the stored texture to detect edges\n  window._.extraTexture.use(1);\n  this.triangleBlur(radius);\n  gl.unsharpMask.textures({\n    originalTexture: 1\n  });\n  simpleShader.call(this, gl.unsharpMask, {\n    strength: strength\n  });\n  window._.extraTexture.unuse(1);\n}\n"],"file":"unsharpmask.js"}