{"version":3,"sources":["../../../src/curve-filters/curves.js"],"names":["SplineInterpolator","fs","uniforms","map","type","name","passes","filter","getCurvesArray","clamp","value","min","max","Math","splineInterpolate","points","interpolator","array","i","push","floor","interpolate","red","green","blue","arguments","length","splice","Uint8Array"],"mappings":"AAiBA,OAAOA,kBAAP,MAA+B,uBAA/B;AAEA,IAAMC,EAAE,0RAAR;AAaA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,GAAG,EAAE;AAACC,IAAAA,IAAI,EAAE;AAAP;AADU,CAAjB;AAIA,eAAe;AACbC,EAAAA,IAAI,EAAE,QADO;AAEbH,EAAAA,QAAQ,EAARA,QAFa;AAGbD,EAAAA,EAAE,EAAFA,EAHa;AAKbK,EAAAA,MAAM,EAAE,CAAC;AAACC,IAAAA,MAAM,EAAE;AAAT,GAAD,CALK;AAObC,EAAAA,cAAc,EAAdA;AAPa,CAAf;;AAUA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAQC,GAAR,EAAaC,GAAb;AAAA,SAAqBC,IAAI,CAACD,GAAL,CAASC,IAAI,CAACF,GAAL,CAASD,KAAT,EAAgBE,GAAhB,CAAT,EAA+BD,GAA/B,CAArB;AAAA,CAAd;;AAEA,OAAO,SAASG,iBAAT,CAA2BC,MAA3B,EAAmC;AACxC,MAAMC,YAAY,GAAG,IAAIhB,kBAAJ,CAAuBe,MAAvB,CAArB;AACA,MAAME,KAAK,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5BD,IAAAA,KAAK,CAACE,IAAN,CAAWV,KAAK,CAACI,IAAI,CAACO,KAAL,CAAWJ,YAAY,CAACK,WAAb,CAAyBH,CAAC,GAAG,GAA7B,IAAoC,GAA/C,CAAD,EAAsD,CAAtD,EAAyD,EAAzD,CAAhB;AACAD,IAAAA,KAAK,CAACE,IAAN,CAAWV,KAAK,CAACI,IAAI,CAACO,KAAL,CAAWJ,YAAY,CAACK,WAAb,CAAyBH,CAAC,GAAG,GAA7B,IAAoC,GAA/C,CAAD,EAAsD,CAAtD,EAAyD,EAAzD,CAAhB;AACD;;AACD,SAAOD,KAAP;AACD;AAED,OAAO,SAAST,cAAT,GAA6D;AAAA,MAArCc,GAAqC,uEAA/B,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,CAA+B;AAAA,MAAbC,KAAa;AAAA,MAANC,IAAM;AAElEF,EAAAA,GAAG,GAAGR,iBAAiB,CAACQ,GAAD,CAAvB;;AACA,MAAIG,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1BH,IAAAA,KAAK,GAAGC,IAAI,GAAGF,GAAf;AACD,GAFD,MAEO;AACLC,IAAAA,KAAK,GAAGT,iBAAiB,CAACS,KAAD,CAAzB;AACAC,IAAAA,IAAI,GAAGV,iBAAiB,CAACU,IAAD,CAAxB;AACD;;AAED,MAAMP,KAAK,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5BD,IAAAA,KAAK,CAACU,MAAN,CAAaV,KAAK,CAACS,MAAnB,EAA2B,CAA3B,EAA8BJ,GAAG,CAACJ,CAAD,CAAjC,EAAsCK,KAAK,CAACL,CAAD,CAA3C,EAAgDM,IAAI,CAACN,CAAD,CAApD,EAAyD,GAAzD;AACD;;AAED,SAAO,IAAIU,UAAJ,CAAeX,KAAf,CAAP;AACD","sourcesContent":["/**\n * @filter      Curves\n * @description A powerful mapping tool that transforms the colors in the image\n *              by an arbitrary function. The function is interpolated between\n *              a set of 2D points using splines. The curves filter can take\n *              either one or three arguments which will apply the mapping to\n *              either luminance or RGB values, respectively.\n * @param red   A list of points that define the function for the red channel.\n *              Each point is a list of two values: the value before the mapping\n *              and the value after the mapping, both in the range 0 to 1. For\n *              example, [[0,1], [1,0]] would invert the red channel while\n *              [[0,0], [1,1]] would leave the red channel unchanged.\n * @param green (optional) A list of points that define the function for the green\n *              channel (just like for red).\n * @param blue  (optional) A list of points that define the function for the blue\n *              channel (just like for red).\n */\nimport SplineInterpolator from './spline-interpolator';\n\nconst fs = `\\\nuniform sampler2D red;\nuniform sampler2D green;\nuniform sampler2D blue;\n\nvec4 curves_filterColor(vec4 color) {\n  color.r = texture2D(red, vec2(color.r)).r;\n  color.g = texture2D(green, vec2(color.g)).g;\n  color.b = texture2D(blue, vec2(color.b)).b;\n  return color;\n}\n`;\n\nconst uniforms = {\n  map: {type: 'sampler2D'}\n};\n\nexport default {\n  name: 'curves',\n  uniforms,\n  fs,\n\n  passes: [{filter: true}],\n\n  getCurvesArray\n};\n\nconst clamp = (value, min, max) => Math.max(Math.min(value, max), min);\n\nexport function splineInterpolate(points) {\n  const interpolator = new SplineInterpolator(points);\n  const array = [];\n  for (let i = 0; i < 256; i++) {\n    array.push(clamp(Math.floor(interpolator.interpolate(i / 255) * 256), 0, 55));\n    array.push(clamp(Math.floor(interpolator.interpolate(i / 255) * 256), 0, 55));\n  }\n  return array;\n}\n\nexport function getCurvesArray(red = [[0, 0], [1, 1]], green, blue) {\n  // Create the ramp texture\n  red = splineInterpolate(red);\n  if (arguments.length === 1) {\n    green = blue = red;\n  } else {\n    green = splineInterpolate(green);\n    blue = splineInterpolate(blue);\n  }\n\n  const array = [];\n  for (let i = 0; i < 256; i++) {\n    array.splice(array.length, 0, red[i], green[i], blue[i], 255);\n  }\n\n  return new Uint8Array(array);\n}\n"],"file":"curves.js"}