{"version":3,"sources":["../../../src/histopyramid/histopyramid.js"],"names":["Transform","Buffer","copyToTexture","cloneTextureFrom","HISTOPYRAMID_BUILD_VS_UTILS","HISTOPYRAMID_TRAVERSAL_UTILS","HISTOPYRAMID_BASE_BUILD_VS","HISTOPYRAMID_BUILD_VS","HISTOPYRAMID_TRAVERSAL_VS","nextPowerOfTwo","x","p","Math","ceil","log2","pow","channelToIndexMap","buildHistopyramidBaseLevel","gl","opts","texture","channel","_readData","width","height","size","baseTexture","transform","_sourceTextures","inTexture","_targetTexture","_targetTextureVarying","vs","elementCount","run","uniforms","padingPixelValue","textureData","getData","packed","flatPyramidSize","flatPyramidTexture","parameters","framebuffer","getFramebuffer","targetX","getHistoPyramid","levelCount","pyramidTextures","topLevelData","i","push","flatOffset","outSize","update","histoPyramidGenerateIndices","keyIndexCount","keyIndex","Float32Array","map","_","index","locationAndIndex","sourceBuffers","feedbackBuffers","varyings","numLevels","locationAndIndexBuffer"],"mappings":"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","sourcesContent":["import {Transform, Buffer, copyToTexture, cloneTextureFrom} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport {\n  HISTOPYRAMID_BUILD_VS_UTILS,\n  HISTOPYRAMID_TRAVERSAL_UTILS,\n  HISTOPYRAMID_BASE_BUILD_VS,\n  HISTOPYRAMID_BUILD_VS,\n  HISTOPYRAMID_TRAVERSAL_VS\n} from './histopyramid-shaders';\n\n// Following methods implement Histopyramid operations as described in 'High‐speed marching cubes using histopyramids' by Dyken C, Ziegler G, Theobalt C and Seidel H\n// Link to the paper: http://olmozavala.com/Custom/OpenGL/Tutorials/OpenGL4_Examples/MarchingCubes_Dyken/Dyken_et_al-2008-Computer_Graphics_Forum.pdf\n\n// TODO: enable to assert on texture dimension\n// function isPowerOfTwo(x) {\n//     return ((x !== 0) && !(x & (x - 1)));\n// }\n\nfunction nextPowerOfTwo(x) {\n  const p = Math.ceil(Math.log2(x));\n  return Math.pow(2, p);\n}\n\nconst channelToIndexMap = {\n  ['r']: 0,\n  ['x']: 0,\n  ['g']: 1,\n  ['y']: 1,\n  ['b']: 2,\n  ['z']: 2,\n  ['a']: 3,\n  ['w']: 3\n};\n\n// returns a base level texture that packs given weight into a texture\n// each 2X2 region is mapped into RGBA channels of single pixel\n// returned texture is a squred power of two sized texture\n// R -> lower left, G -> lower right B -> upper left A -> upper right\nexport function buildHistopyramidBaseLevel(gl, opts) {\n  const {texture, channel = 'r', _readData = false} = opts;\n  let {width, height} = texture;\n  width = nextPowerOfTwo(width);\n  height = nextPowerOfTwo(height);\n  // Use sqaured next power of two size, then use half of it since we are packing 2X2 group into a single RGBA pixel\n  const size = (width > height ? width : height) / 2;\n  const baseTexture = cloneTextureFrom(texture, {\n    width: size,\n    height: size\n  });\n\n  // build individual pyramid textures\n  const transform = new Transform(gl, {\n    _sourceTextures: {\n      inTexture: texture\n    },\n    _targetTexture: baseTexture,\n    _targetTextureVarying: 'outTexture',\n    vs: `${HISTOPYRAMID_BUILD_VS_UTILS}${HISTOPYRAMID_BASE_BUILD_VS}`,\n    elementCount: baseTexture.width * baseTexture.height\n  });\n  transform.run({\n    uniforms: {\n      channel: channelToIndexMap[channel] || 0,\n      padingPixelValue: [0, 0, 0, 0]\n    }\n  });\n  // _readData is debug only option\n  let textureData;\n  // when base textuer size is 1X1, there are no more level to be generated\n  // so read the texture data to be provided as base level data.\n  if (_readData || size === 1) {\n    textureData = transform.getData({packed: true});\n  }\n  const flatPyramidSize = size * 2;\n  const flatPyramidTexture = cloneTextureFrom(texture, {\n    width: flatPyramidSize,\n    height: flatPyramidSize,\n    parameters: {\n      [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n      [GL.TEXTURE_MIN_FILTER]: GL.NEAREST\n    }\n  });\n  const framebuffer = transform.getFramebuffer();\n  copyToTexture(framebuffer, flatPyramidTexture, {\n    targetX: 0,\n    width: size,\n    height: size\n  });\n\n  return {textureData, baseTexture, flatPyramidTexture};\n}\n\n// builds histopyramid for a given texture and returns individual levels and flatended pyramid texture\n// Returns object\n// * pyramidTextures: Array with all individual mip levels\n// * flatPyramidTexture: Texture with all mip levels laid out horizontally\nexport function getHistoPyramid(gl, opts) {\n  const {textureData, baseTexture, flatPyramidTexture} = buildHistopyramidBaseLevel(gl, opts);\n  const {width} = baseTexture;\n  // assert(width === height && isPowerOfTwo(width));\n  const levelCount = Math.log2(width) + 1;\n  const pyramidTextures = [baseTexture];\n\n  let topLevelData = textureData;\n  if (levelCount > 1) {\n    // build empty textures for rest of the pyramid\n    for (let i = 1; i < levelCount; i++) {\n      const size = width / Math.pow(2, i);\n      pyramidTextures.push(\n        cloneTextureFrom(baseTexture, {\n          width: size,\n          height: size\n        })\n      );\n    }\n\n    // build individual pyramid textures\n    const transform = new Transform(gl, {\n      _sourceTextures: {\n        inTexture: pyramidTextures[0]\n      },\n      _targetTexture: pyramidTextures[1],\n      _targetTextureVarying: 'outTexture',\n      vs: `${HISTOPYRAMID_BUILD_VS_UTILS}${HISTOPYRAMID_BUILD_VS}`,\n      elementCount: pyramidTextures[1].width * pyramidTextures[1].height\n    });\n\n    let flatOffset = width;\n    for (let i = 1; i < levelCount; i++) {\n      const outSize = [pyramidTextures[i].width, pyramidTextures[i].height];\n      transform.update({\n        _sourceTextures: {inTexture: pyramidTextures[i - 1]},\n        _targetTexture: pyramidTextures[i],\n        elementCount: pyramidTextures[i].width * pyramidTextures[i].height\n      });\n      transform.run();\n\n      // copy the result to the flaten pyramid texture\n      const framebuffer = transform.getFramebuffer();\n      copyToTexture(framebuffer, flatPyramidTexture, {\n        targetX: flatOffset,\n        width: outSize[0],\n        height: outSize[1]\n      });\n\n      flatOffset += outSize[0];\n    }\n    topLevelData = transform.getData();\n  }\n\n  return {pyramidTextures, flatPyramidTexture, levelCount, topLevelData};\n}\n\n// builds and traverses a histopyramid for a given texture and returns pixel locations and local-key index for each non zero weight in input texture\n// Returns object\n// *locationAndIndexBuffer : Buffer contains one vec4 for each non zero weight. XY represent loation, Z represents local-key index and W represent key-index\nexport function histoPyramidGenerateIndices(gl, opts) {\n  const {flatPyramidTexture, levelCount, topLevelData} = getHistoPyramid(gl, opts);\n\n  const keyIndexCount = topLevelData[0] + topLevelData[1] + topLevelData[2] + topLevelData[3];\n  const keyIndex = new Buffer(gl, new Float32Array(keyIndexCount).map((_, index) => index));\n  const locationAndIndex = new Buffer(gl, keyIndexCount * 4 * 4); // 4 floats for each key index\n\n  const transform = new Transform(gl, {\n    sourceBuffers: {\n      keyIndex\n    },\n    _sourceTextures: {\n      flatPyramidTexture\n    },\n    feedbackBuffers: {\n      locationAndIndex\n    },\n    varyings: ['locationAndIndex'],\n    vs: `${HISTOPYRAMID_TRAVERSAL_UTILS}${HISTOPYRAMID_TRAVERSAL_VS}`,\n    elementCount: keyIndexCount\n  });\n  transform.run({\n    uniforms: {\n      numLevels: levelCount\n    }\n  });\n\n  return {locationAndIndexBuffer: locationAndIndex};\n}\n"],"file":"histopyramid.js"}