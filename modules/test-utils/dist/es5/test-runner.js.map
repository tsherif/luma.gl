{"version":3,"sources":["../../src/test-runner.js"],"names":["noop","DEFAULT_TEST_CASE","name","onInitialize","onRender","done","onFinalize","DEFAULT_TEST_OPTIONS","onTestStart","testCase","console","log","onTestPass","onTestFail","timeout","TestRunner","props","isRunning","_testCases","_testCaseData","isHeadless","Boolean","window","browserTestDriver_isHeadless","testOptions","Object","assign","testCases","Array","isArray","push","options","Promise","resolve","_animationLoop","AnimationLoop","_onRender","bind","start","isDiffing","_currentTestCase","error","_fail","message","animationLoop","key","animationProps","_pass","_next","result","_nextTestCase","_animationProps","stop","isDone","testCaseAnimationProps","startTime","_currentTestCaseStartTime","time","tick","_currentTestCaseStartTick","shouldRender","assert","value","gl","shift","initTestCase","then","userData"],"mappings":"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","sourcesContent":["/* global window, console */\n/* eslint-disable no-console */\nimport {AnimationLoop} from '@luma.gl/core';\nimport {pushContextState, popContextState} from '@luma.gl/webgl-state-tracker';\n\nfunction noop() {}\n\nconst DEFAULT_TEST_CASE = {\n  name: 'Unnamed test',\n  onInitialize: noop,\n  onRender: ({done}) => done(),\n  onFinalize: noop\n};\n\nconst DEFAULT_TEST_OPTIONS = {\n  // test lifecycle callback\n  onTestStart: testCase => console.log(`# ${testCase.name}`),\n  onTestPass: testCase => console.log(`ok ${testCase.name} passed`),\n  onTestFail: testCase => console.log(`not ok ${testCase.name} failed`),\n\n  // milliseconds to wait for each test case before aborting\n  timeout: 2000\n};\n\nexport default class TestRunner {\n  /**\n   * props\n   *   AnimationLoop props\n   */\n  constructor(props = {}) {\n    this.props = props;\n    this.isRunning = false;\n    this._testCases = [];\n    this._testCaseData = null;\n\n    this.isHeadless = Boolean(window.browserTestDriver_isHeadless);\n\n    this.testOptions = Object.assign({}, DEFAULT_TEST_OPTIONS);\n  }\n\n  /**\n   * Add testCase(s)\n   */\n  add(testCases) {\n    if (!Array.isArray(testCases)) {\n      testCases = [testCases];\n    }\n    for (const testCase of testCases) {\n      this._testCases.push(testCase);\n    }\n    return this;\n  }\n\n  /**\n   * Returns a promise that resolves when all the test cases are done\n   */\n  run(options = {}) {\n    Object.assign(this.testOptions, options);\n\n    return new Promise(resolve => {\n      this._animationLoop = new AnimationLoop(\n        Object.assign({}, this.props, {\n          onRender: this._onRender.bind(this),\n          onFinalize: () => {\n            this.isRunning = false;\n            resolve();\n          }\n        })\n      );\n      this._animationLoop.start(this.props);\n\n      this.isRunning = true;\n      this.isDiffing = false;\n      this._currentTestCase = null;\n    }).catch(error => {\n      this._fail({error: error.message});\n    });\n  }\n\n  /* Lifecycle methods for subclassing */\n\n  initTestCase(testCase) {\n    const {animationLoop} = testCase;\n    if (animationLoop) {\n      testCase.onInitialize = animationLoop.onInitialize.bind(animationLoop);\n      testCase.onRender = animationLoop.onRender.bind(animationLoop);\n      testCase.onFinalize = animationLoop.onFinalize.bind(animationLoop);\n    }\n    for (const key in DEFAULT_TEST_CASE) {\n      testCase[key] = testCase[key] || DEFAULT_TEST_CASE[key];\n    }\n  }\n\n  shouldRender(animationProps) {\n    return true;\n  }\n\n  assert(testCase) {\n    this._pass(testCase);\n    this._next();\n  }\n\n  /* Utilities */\n\n  _pass(result) {\n    this.testOptions.onTestPass(this._currentTestCase, result);\n  }\n\n  _fail(result) {\n    this.testOptions.onTestFail(this._currentTestCase, result);\n  }\n\n  _next() {\n    this._nextTestCase();\n  }\n\n  /* Private methods */\n\n  _onRender(animationProps) {\n    this._animationProps = animationProps;\n\n    const testCase = this._currentTestCase || this._nextTestCase();\n    if (!testCase) {\n      // all test cases are done\n      this._animationLoop.stop();\n      return;\n    }\n\n    let isDone = false;\n    const testCaseAnimationProps = Object.assign({}, animationProps, this._testCaseData, {\n      // tick/time starts from 0 for each test case\n      startTime: this._currentTestCaseStartTime,\n      time: animationProps.time - this._currentTestCaseStartTime,\n      tick: animationProps.tick - this._currentTestCaseStartTick,\n      // called by the test case when it is done rendering and ready for capture and diff\n      done: () => {\n        isDone = true;\n      }\n    });\n\n    if (this._testCaseData && this.shouldRender(testCaseAnimationProps)) {\n      // test case is initialized, render frame\n      testCase.onRender(testCaseAnimationProps);\n    }\n\n    const timeout = testCase.timeout || this.testOptions.timeout;\n    if (timeout && testCaseAnimationProps.time > timeout) {\n      isDone = true;\n    }\n\n    if (isDone) {\n      this.assert(testCase);\n    }\n  }\n\n  _nextTestCase() {\n    const animationProps = this._animationProps;\n\n    // finalize the current test case\n    if (this._testCaseData) {\n      for (const key in this._testCaseData) {\n        const value = this._testCaseData[key];\n        if (value && value.delete) {\n          value.delete();\n        }\n      }\n      this._currentTestCase.onFinalize(Object.assign({}, animationProps, this._testCaseData));\n\n      // reset WebGL context\n      popContextState(animationProps.gl);\n\n      this._currentTestCase = null;\n      this._testCaseData = null;\n    }\n\n    // get the next test case\n    const testCase = this._testCases.shift();\n    if (testCase) {\n      // start new test case\n      this._currentTestCase = testCase;\n      this._currentTestCaseStartTime = animationProps.time;\n      this._currentTestCaseStartTick = animationProps.tick;\n      this.initTestCase(testCase);\n\n      // initialize test case\n\n      // save WebGL context\n      pushContextState(animationProps.gl);\n\n      // aligned with the behavior of AnimationLoop.onInitialized\n      // onInitialized could return a plain object or a promise\n      Promise.resolve(\n        testCase.onInitialize(\n          Object.assign({}, animationProps, {\n            // tick/time starts from 0 for each test case\n            startTime: animationProps.time,\n            time: 0,\n            tick: 0\n          })\n        )\n      ).then(userData => {\n        this._testCaseData = userData || {};\n      });\n      // invoke user callback\n      this.testOptions.onTestStart(testCase);\n    }\n    return testCase;\n  }\n}\n"],"file":"test-runner.js"}