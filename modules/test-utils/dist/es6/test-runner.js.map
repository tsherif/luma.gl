{"version":3,"sources":["../../src/test-runner.js"],"names":["AnimationLoop","pushContextState","popContextState","noop","DEFAULT_TEST_CASE","name","onInitialize","onRender","done","onFinalize","DEFAULT_TEST_OPTIONS","onTestStart","testCase","console","log","onTestPass","onTestFail","timeout","TestRunner","constructor","props","isRunning","_testCases","_testCaseData","isHeadless","Boolean","window","browserTestDriver_isHeadless","testOptions","Object","assign","add","testCases","Array","isArray","push","run","options","Promise","resolve","_animationLoop","_onRender","bind","start","isDiffing","_currentTestCase","catch","error","_fail","message","initTestCase","animationLoop","key","shouldRender","animationProps","assert","_pass","_next","result","_nextTestCase","_animationProps","stop","isDone","testCaseAnimationProps","startTime","_currentTestCaseStartTime","time","tick","_currentTestCaseStartTick","value","delete","gl","shift","then","userData"],"mappings":"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","sourcesContent":["/* global window, console */\n/* eslint-disable no-console */\nimport {AnimationLoop} from '@luma.gl/core';\nimport {pushContextState, popContextState} from '@luma.gl/webgl-state-tracker';\n\nfunction noop() {}\n\nconst DEFAULT_TEST_CASE = {\n  name: 'Unnamed test',\n  onInitialize: noop,\n  onRender: ({done}) => done(),\n  onFinalize: noop\n};\n\nconst DEFAULT_TEST_OPTIONS = {\n  // test lifecycle callback\n  onTestStart: testCase => console.log(`# ${testCase.name}`),\n  onTestPass: testCase => console.log(`ok ${testCase.name} passed`),\n  onTestFail: testCase => console.log(`not ok ${testCase.name} failed`),\n\n  // milliseconds to wait for each test case before aborting\n  timeout: 2000\n};\n\nexport default class TestRunner {\n  /**\n   * props\n   *   AnimationLoop props\n   */\n  constructor(props = {}) {\n    this.props = props;\n    this.isRunning = false;\n    this._testCases = [];\n    this._testCaseData = null;\n\n    this.isHeadless = Boolean(window.browserTestDriver_isHeadless);\n\n    this.testOptions = Object.assign({}, DEFAULT_TEST_OPTIONS);\n  }\n\n  /**\n   * Add testCase(s)\n   */\n  add(testCases) {\n    if (!Array.isArray(testCases)) {\n      testCases = [testCases];\n    }\n    for (const testCase of testCases) {\n      this._testCases.push(testCase);\n    }\n    return this;\n  }\n\n  /**\n   * Returns a promise that resolves when all the test cases are done\n   */\n  run(options = {}) {\n    Object.assign(this.testOptions, options);\n\n    return new Promise(resolve => {\n      this._animationLoop = new AnimationLoop(\n        Object.assign({}, this.props, {\n          onRender: this._onRender.bind(this),\n          onFinalize: () => {\n            this.isRunning = false;\n            resolve();\n          }\n        })\n      );\n      this._animationLoop.start(this.props);\n\n      this.isRunning = true;\n      this.isDiffing = false;\n      this._currentTestCase = null;\n    }).catch(error => {\n      this._fail({error: error.message});\n    });\n  }\n\n  /* Lifecycle methods for subclassing */\n\n  initTestCase(testCase) {\n    const {animationLoop} = testCase;\n    if (animationLoop) {\n      testCase.onInitialize = animationLoop.onInitialize.bind(animationLoop);\n      testCase.onRender = animationLoop.onRender.bind(animationLoop);\n      testCase.onFinalize = animationLoop.onFinalize.bind(animationLoop);\n    }\n    for (const key in DEFAULT_TEST_CASE) {\n      testCase[key] = testCase[key] || DEFAULT_TEST_CASE[key];\n    }\n  }\n\n  shouldRender(animationProps) {\n    return true;\n  }\n\n  assert(testCase) {\n    this._pass(testCase);\n    this._next();\n  }\n\n  /* Utilities */\n\n  _pass(result) {\n    this.testOptions.onTestPass(this._currentTestCase, result);\n  }\n\n  _fail(result) {\n    this.testOptions.onTestFail(this._currentTestCase, result);\n  }\n\n  _next() {\n    this._nextTestCase();\n  }\n\n  /* Private methods */\n\n  _onRender(animationProps) {\n    this._animationProps = animationProps;\n\n    const testCase = this._currentTestCase || this._nextTestCase();\n    if (!testCase) {\n      // all test cases are done\n      this._animationLoop.stop();\n      return;\n    }\n\n    let isDone = false;\n    const testCaseAnimationProps = Object.assign({}, animationProps, this._testCaseData, {\n      // tick/time starts from 0 for each test case\n      startTime: this._currentTestCaseStartTime,\n      time: animationProps.time - this._currentTestCaseStartTime,\n      tick: animationProps.tick - this._currentTestCaseStartTick,\n      // called by the test case when it is done rendering and ready for capture and diff\n      done: () => {\n        isDone = true;\n      }\n    });\n\n    if (this._testCaseData && this.shouldRender(testCaseAnimationProps)) {\n      // test case is initialized, render frame\n      testCase.onRender(testCaseAnimationProps);\n    }\n\n    const timeout = testCase.timeout || this.testOptions.timeout;\n    if (timeout && testCaseAnimationProps.time > timeout) {\n      isDone = true;\n    }\n\n    if (isDone) {\n      this.assert(testCase);\n    }\n  }\n\n  _nextTestCase() {\n    const animationProps = this._animationProps;\n\n    // finalize the current test case\n    if (this._testCaseData) {\n      for (const key in this._testCaseData) {\n        const value = this._testCaseData[key];\n        if (value && value.delete) {\n          value.delete();\n        }\n      }\n      this._currentTestCase.onFinalize(Object.assign({}, animationProps, this._testCaseData));\n\n      // reset WebGL context\n      popContextState(animationProps.gl);\n\n      this._currentTestCase = null;\n      this._testCaseData = null;\n    }\n\n    // get the next test case\n    const testCase = this._testCases.shift();\n    if (testCase) {\n      // start new test case\n      this._currentTestCase = testCase;\n      this._currentTestCaseStartTime = animationProps.time;\n      this._currentTestCaseStartTick = animationProps.tick;\n      this.initTestCase(testCase);\n\n      // initialize test case\n\n      // save WebGL context\n      pushContextState(animationProps.gl);\n\n      // aligned with the behavior of AnimationLoop.onInitialized\n      // onInitialized could return a plain object or a promise\n      Promise.resolve(\n        testCase.onInitialize(\n          Object.assign({}, animationProps, {\n            // tick/time starts from 0 for each test case\n            startTime: animationProps.time,\n            time: 0,\n            tick: 0\n          })\n        )\n      ).then(userData => {\n        this._testCaseData = userData || {};\n      });\n      // invoke user callback\n      this.testOptions.onTestStart(testCase);\n    }\n    return testCase;\n  }\n}\n"],"file":"test-runner.js"}