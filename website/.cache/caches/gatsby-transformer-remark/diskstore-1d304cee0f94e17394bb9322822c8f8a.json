{"expireTime":9007200809748944000,"key":"transformer-remark-markdown-html-2e3f84ef270a7ca46fd3c2cd00feb7ae-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-autolink-headers-","val":"<h1 id=\"materials\"><a href=\"#materials\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Materials</h1>\n<p>References:</p>\n<ul>\n<li>This page draws a lot of content from <a href=\"https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#materials\">glTF 2.0 Materials section</a>.</li>\n</ul>\n<h2 id=\"concepts\"><a href=\"#concepts\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Concepts</h2>\n<h2 id=\"material-models\"><a href=\"#material-models\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Material Models</h2>\n<p>The material system can support different material models (shader stacks). The core glTF standard uses the metallic-roughness material model, but others can also be used, programmatically or via glTF extensions.</p>\n<h3 id=\"default-material\"><a href=\"#default-material\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Default Material</h3>\n<p>The default material, used when a mesh does not specify a material, is defined to be a material with no properties specified. All the default values of <a href=\"#reference-material\"><code class=\"language-text\">material</code></a> apply. Note that this material does not emit light and will be black unless some lighting is present in the scene.</p>\n<h3 id=\"point-and-line-materials\"><a href=\"#point-and-line-materials\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Point and Line Materials</h3>\n<p>The glTF specification does not define size and style of non-triangular primitives (such as POINTS or LINES). However, the following recommendations are provided for consistency:</p>\n<ul>\n<li>POINTS and LINES should have widths of 1px in viewport space.</li>\n<li>For LINES with <code class=\"language-text\">NORMAL</code> and <code class=\"language-text\">TANGENT</code> properties, render with standard lighting including normal maps.</li>\n<li>For POINTS or LINES with no <code class=\"language-text\">TANGENT</code> property, render with standard lighting but ignore any normal maps on the material.</li>\n<li>For POINTS or LINES with no <code class=\"language-text\">NORMAL</code> property, don't calculate lighting and instead output the <code class=\"language-text\">COLOR</code> value for each pixel drawn.</li>\n</ul>\n<h2 id=\"common-materials-properties\"><a href=\"#common-materials-properties\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Common Materials Properties</h2>\n<h3 id=\"double-sided\"><a href=\"#double-sided\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Double Sided</h3>\n<p>The <code class=\"language-text\">doubleSided</code> property specifies whether the material is double sided. When this value is false, back-face culling is enabled. When this value is true, back-face culling is disabled and double sided lighting is enabled. The back-face must have its normals reversed before the lighting equation is evaluated.</p>\n<h3 id=\"alpha-coverage\"><a href=\"#alpha-coverage\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Alpha Coverage</h3>\n<p>The <code class=\"language-text\">alpha</code> value is typically defined in the <code class=\"language-text\">baseColor</code> prop, e.g. for the for metallic-roughness material model.</p>\n<p>The <code class=\"language-text\">alphaMode</code> property defines how the alpha value of the main factor and texture should be interpreted.</p>\n<p><code class=\"language-text\">alphaMode</code> can be one of the following values:</p>\n<ul>\n<li><code class=\"language-text\">OPAQUE</code> - The rendered output is fully opaque and any alpha value is ignored.</li>\n<li><code class=\"language-text\">MASK</code> - The rendered output is either fully opaque or fully transparent depending on the alpha value and the specified alpha cutoff value. This mode is used to simulate geometry such as tree leaves or wire fences.</li>\n<li><code class=\"language-text\">BLEND</code> - The rendered output is combined with the background using the normal painting operation (i.e. the Porter and Duff over operator). This mode is used to simulate geometry such as guaze cloth or animal fur.</li>\n</ul>\n<p> When <code class=\"language-text\">alphaMode</code> is set to <code class=\"language-text\">MASK</code> the <code class=\"language-text\">alphaCutoff</code> property specifies the cutoff threshold. If the alpha value is greater than or equal to the <code class=\"language-text\">alphaCutoff</code> value then it is rendered as fully opaque, otherwise, it is rendered as fully transparent. <code class=\"language-text\">alphaCutoff</code> value is ignored for other modes.</p>\n<blockquote>\n<p><strong>Implementation Note for Real-Time Rasterizers:</strong> Real-time rasterizers typically use depth buffers and mesh sorting to support alpha modes. The following describe the expected behavior for these types of renderers.</p>\n<ul>\n<li><code class=\"language-text\">OPAQUE</code> - A depth value is written for every pixel and mesh sorting is not required for correct output.</li>\n<li><code class=\"language-text\">MASK</code> - A depth value is not written for a pixel that is discarded after the alpha test. A depth value is written for all other pixels. Mesh sorting is not required for correct output.</li>\n<li><code class=\"language-text\">BLEND</code> - Support for this mode varies. There is no perfect and fast solution that works for all cases. Implementations should try to achieve the correct blending output for as many situations as possible. Whether depth value is written or whether to sort is up to the implementation. For example, implementations can discard pixels which have zero or close to zero alpha value to avoid sorting issues.</li>\n</ul>\n</blockquote>\n<h2 id=\"common-material-maps\"><a href=\"#common-material-maps\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Common Material Maps</h2>\n<p>Material maps have the following properties:</p>\n<ul>\n<li>A texture (or sampler)</li>\n<li>A scale</li>\n<li>A texture coordinate set</li>\n</ul>\n<h3 id=\"common-material-maps-1\"><a href=\"#common-material-maps-1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Common Material Maps</h3>\n<p>The material definition provides for common maps that can also be used with different material models, including the metallic-roughness material model selected by the core glTF standard.</p>\n<table>\n<thead>\n<tr>\n<th>Map</th>\n<th>Description</th>\n<th>Rendering impact when map is not supported</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Normal</td>\n<td>A tangent space normal map.</td>\n<td>Geometry will appear less detailed than authored.</td>\n</tr>\n<tr>\n<td>Occlusion</td>\n<td>Indicates areas of indirect lighting.</td>\n<td>Model will appear brighter in areas that should be darker.</td>\n</tr>\n<tr>\n<td>Emissive</td>\n<td>Controls the color and intensity of the light being emitted by the material.</td>\n<td>Model with lights will not be lit. For example, the headlights of a car model will be off instead of on.</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>Implementation Note:</strong> If an implementation is resource-bound and cannot support all the maps defined it will drop these optional maps from the bottom.</p>\n</blockquote>\n<p>The following examples shows how a normal mao can be added to a material:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"normalTexture\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"normalTextureScale\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"normalTextureCoords\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"metallic-roughness-material-model\"><a href=\"#metallic-roughness-material-model\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Metallic-Roughness Material Model</h3>\n<p>The metallic-roughness material model specified in the glTF 2 standard enables glTF files to be rendered consistently across platforms.</p>\n<p>All parameters related to the metallic-roughness material model are defined under the <code class=\"language-text\">pbrMetallicRoughness</code> property of <code class=\"language-text\">material</code> object. The following example shows how a material like gold can be defined using the metallic-roughness parameters:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"baseColor\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1.000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.766</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.336</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"metallic\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"roughness\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"baseColorTexture\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"metallicRoughnessTexture\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The metallic-roughness material model is defined by the following properties:</p>\n<ul>\n<li><code class=\"language-text\">baseColor</code> - The base color of the material</li>\n<li><code class=\"language-text\">metallic</code> - The metalness of the material</li>\n<li><code class=\"language-text\">roughness</code> - The roughness of the material</li>\n</ul>\n<p>The base color has two different interpretations depending on the value of metalness. When the material is a metal, the base color is the specific measured reflectance value at normal incidence (F0). For a non-metal the base color represents the reflected diffuse color of the material. In this model it is not possible to specify a F0 value for non-metals, and a linear value of 4% (0.04) is used.</p>\n<p>The value for each property (<code class=\"language-text\">baseColor</code>, <code class=\"language-text\">metallic</code>, <code class=\"language-text\">roughness</code>) can be defined using factors or textures. The <code class=\"language-text\">metallic</code> and <code class=\"language-text\">roughness</code> properties are packed together in a single texture called <code class=\"language-text\">metallicRoughnessTexture</code>. </p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"pbrMetallicRoughness\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"baseColor\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"baseColorTexture\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"baseColorTextureCoord\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"metallic\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"roughness\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"metallicRoughnessTexture\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"metallicRoughnessTexture\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"metallicRoughnessTextureCoord\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If a texture is not given, all respective texture components within this material model are assumed to have a value of <code class=\"language-text\">1.0</code>. If both factors and textures are present the factor value acts as a linear multiplier for the corresponding texture values. The <code class=\"language-text\">baseColorTexture</code> is in sRGB space and must be converted to linear space before it is used for any computations.</p>\n<p>For example, assume a value of <code class=\"language-text\">[0.9, 0.5, 0.3, 1.0]</code> in linear space is obtained from an RGBA <code class=\"language-text\">baseColorTexture</code>, and assume that <code class=\"language-text\">baseColorFactor</code> is given as <code class=\"language-text\">[0.2, 1.0, 0.7, 1.0]</code>.\nThen, the result would be</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[0.9 * 0.2, 0.5 * 1.0, 0.3 * 0.7, 1.0 * 1.0] = [0.18, 0.5, 0.21, 1.0]</code></pre></div>\n<h3 id=\"calculating-reflectance\"><a href=\"#calculating-reflectance\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Calculating Reflectance</h3>\n<p>The following equations show how to calculate bidirectional reflectance distribution function (BRDF) inputs (<em>c<sub>diff</sub></em>, <em>F<sub>0</sub></em>, <em>α</em>) from the metallic-roughness material properties. In addition to the material properties, if a primitive specifies a vertex color using the attribute semantic property <code class=\"language-text\">COLOR_0</code>, then this value acts as an additional linear multiplier to <code class=\"language-text\">baseColor</code>.</p>\n<p><code class=\"language-text\">const dielectricSpecular = rgb(0.04, 0.04, 0.04)</code>\n<br>\n<code class=\"language-text\">const black = rgb(0, 0, 0)</code></p>\n<p><em>c<sub>diff</sub></em> = <code class=\"language-text\">lerp(baseColor.rgb * (1 - dielectricSpecular.r), black, metallic)</code>\n<br>\n<em>F<sub>0</sub></em> = <code class=\"language-text\">lerp(dieletricSpecular, baseColor.rgb, metallic)</code>\n<br>\n<em>α</em> = <code class=\"language-text\">roughness ^ 2</code></p>"}