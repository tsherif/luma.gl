{"expireTime":9007200809748945000,"key":"transformer-remark-markdown-html-20b18db9c3fba270bddaa0b948e6572d-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-autolink-headers-","val":"<h1 id=\"texture\"><a href=\"#texture\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Texture</h1>\n<p>A <code class=\"language-text\">Texture</code> is a WebGL object that contains one or more images that all have the same image format. Shaders can read from textures (through a sampler uniform) and they can be set up as render targets (by attaching them to a framebuffer).</p>\n<p>Note: This section describes the <code class=\"language-text\">Texture</code> base class that implements functionality common to all four types of WebGL:</p>\n<ul>\n<li><a href=\"/docs/api-reference/webgl/texture-2d.md\"><code class=\"language-text\">Texture2D</code></a> - Contains a \"normal\" image texture</li>\n<li><a href=\"/docs/api-reference/webgl/texture-cube.md\"><code class=\"language-text\">TextureCube</code></a> - Holds 6 textures representing sides of a cube.</li>\n<li><a href=\"/docs/api-reference/webgl/texture-2d-array.md\"><code class=\"language-text\">Texture2DArray</code></a> (WebGL2) - Holds an array of textures</li>\n<li><a href=\"/docs/api-reference/webgl/texture-3d.md\"><code class=\"language-text\">Texture3D</code></a> (WebGL2) - Holds a \"stack\" of textures which enables 3D interpolation.</li>\n</ul>\n<p>For more details see <a href=\"https://www.khronos.org/opengl/wiki/Texture\">OpenGL Wiki</a>.</p>\n<p>Note that textures have a lot of optional capabilities made available by extensions, see the Limits section below.</p>\n<h2 id=\"usage\"><a href=\"#usage\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage</h2>\n<ul>\n<li>For additional usage examples, <code class=\"language-text\">Texture</code> inherits from <a href=\"/docs/api-reference/webgl/resource.md\"><code class=\"language-text\">Resource</code></a>.</li>\n</ul>\n<p>Configuring a Texture</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> texture <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Texture2D</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntexture<span class=\"token punctuation\">.</span><span class=\"token function\">setParameters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">GL</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_WRAP_S</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">GL</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CLAMP</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Using Textures</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> texture <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Texture2D</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// For ease of use, the `Model` class can bind textures for a draw call</span>\nmodel<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">uniforms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>uMVMatrix<span class=\"token punctuation\">:</span> matrix<span class=\"token punctuation\">,</span> texture1<span class=\"token punctuation\">:</span> texture<span class=\"token punctuation\">,</span> texture2<span class=\"token punctuation\">:</span> texture<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Alternatively, bind the textures using the `Texture` API directly</span>\n<span class=\"token function\">texture</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">texture</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodel<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">uniforms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>uMVMatrix<span class=\"token punctuation\">:</span> matrix<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"members\"><a href=\"#members\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Members</h2>\n<p>A number of read only accessors are available:</p>\n<ul>\n<li>\n<p><code class=\"language-text\">width</code> - width of one face of the cube map</p>\n</li>\n<li>\n<p><code class=\"language-text\">height</code> - height of one face of the cube map</p>\n</li>\n<li>\n<p><code class=\"language-text\">format</code> - internal format of the face textures</p>\n</li>\n<li>\n<p><code class=\"language-text\">border</code> - Always 0.</p>\n</li>\n<li>\n<p><code class=\"language-text\">type</code> - type used to create face textures</p>\n</li>\n<li>\n<p><code class=\"language-text\">dataFormat</code> - data format used to create face textures.</p>\n</li>\n<li>\n<p><code class=\"language-text\">offset</code> - offset used to create face textures. Always 0, unless specified using WebGL2 buffer constructor.</p>\n</li>\n<li>\n<p><code class=\"language-text\">handle</code> - The underlying WebGL object.</p>\n</li>\n<li>\n<p><code class=\"language-text\">id</code> - An identifying string that is intended to help debugging.</p>\n</li>\n</ul>\n<p>Sampler parameters can be accessed using <code class=\"language-text\">Texture.getParameter</code>, e.g:</p>\n<p><code class=\"language-text\">texture.getParameter(GL.TEXTURE_MAG_FILTER);</code></p>\n<h2 id=\"methods\"><a href=\"#methods\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Methods</h2>\n<h3 id=\"constructorgl--webglrenderingcontext-props--object\"><a href=\"#constructorgl--webglrenderingcontext-props--object\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>constructor(gl : WebGLRenderingContext, props : Object)</h3>\n<p>The texture class cannot be constructed directly. It is a base class that provides common methods the the concrete texture classes.</p>\n<ul>\n<li><a href=\"/docs/api-reference/webgl/texture-2d.md\"><code class=\"language-text\">Texture2D</code></a>,</li>\n<li><a href=\"/docs/api-reference/webgl/texture-cube.md\"><code class=\"language-text\">TextureCube</code></a>,</li>\n<li><a href=\"/docs/api-reference/webgl/texture-2d-array.md\"><code class=\"language-text\">Texture2DArray</code></a> and</li>\n<li><a href=\"/docs/api-reference/webgl/texture-3d.md\"><code class=\"language-text\">Texture3D</code></a>.</li>\n</ul>\n<p>The constructors for these classes should be used to create textures. They constructors all take common parameters, many of which are specified in this document.</p>\n<ul>\n<li>Sampling parameters are described in <a href=\"/docs/api-reference/webgl/sampler.md\"><code class=\"language-text\">Sampler</code></a>.</li>\n<li>Pixel store parameters are described in <a href=\"/docs/api-reference/webgl/context/get-parameters.md\"><code class=\"language-text\">State Management</code></a>.</li>\n</ul>\n<h3 id=\"generatemipmap--texture2d\"><a href=\"#generatemipmap--texture2d\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>generateMipmap() : Texture2D</h3>\n<p>Call to regenerate mipmaps after modifying texture(s)</p>\n<p>WebGL References <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/generateMipmap\">gl.generateMipmap</a></p>\n<h3 id=\"setimagedataoptions--object--texture2d\"><a href=\"#setimagedataoptions--object--texture2d\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>setImageData(options : Object) : Texture2D</h3>\n<p>Allocates storage and sets image data</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  Texture<span class=\"token punctuation\">.</span><span class=\"token function\">setImageData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    target <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">,</span>\n    pixels <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    data <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    width<span class=\"token punctuation\">,</span>\n    height<span class=\"token punctuation\">,</span>\n    level <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    format <span class=\"token operator\">=</span> <span class=\"token constant\">GL</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RGBA</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token punctuation\">,</span>\n    dataFormat<span class=\"token punctuation\">,</span>\n    offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    border <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    compressed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    parameters<span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">data</code> (*) - Image data. Can be one of several data types see table below</li>\n<li><code class=\"language-text\">pixels</code> (*) - alternative to  <code class=\"language-text\">data</code></li>\n<li><code class=\"language-text\">width</code> (GLint) -</li>\n<li><code class=\"language-text\">height</code> (GLint) -</li>\n<li><code class=\"language-text\">level</code> (GLint) -</li>\n<li><code class=\"language-text\">format</code> (GLenum) - format of image data.</li>\n<li><code class=\"language-text\">type</code> (GLenum)</li>\n<li>format of array (autodetect from type) or</li>\n<li>(WEBGL2) format of buffer</li>\n<li><code class=\"language-text\">offset</code> (Number) - (WEBGL2) offset from start of buffer</li>\n<li><code class=\"language-text\">border</code> (GLint) - must be 0.</li>\n<li><code class=\"language-text\">compressed</code> (Boolean) -</li>\n<li><code class=\"language-text\">parameters</code> (Object) - GL parameters to be temporarily applied (most of the time, pixelStorage parameters) when updating the texture.</li>\n</ul>\n<p>Valid image data types:</p>\n<ul>\n<li><code class=\"language-text\">null</code> - create empty texture of specified format</li>\n<li>Typed array - initializes from image data in typed array according to <code class=\"language-text\">format</code></li>\n<li><code class=\"language-text\">Buffer</code>|<code class=\"language-text\">WebGLBuffer</code> - (WEBGL2) initialized from image data in WebGLBuffer accoeding to <code class=\"language-text\">format</code>.</li>\n<li><code class=\"language-text\">HTMLImageElement</code>|<code class=\"language-text\">Image</code> - Initializes with content of image. Auto deduces texture width/height from image.</li>\n<li><code class=\"language-text\">HTMLCanvasElement</code> - Inits with contents of canvas. Auto width/height.</li>\n<li><code class=\"language-text\">HTMLVideoElement</code> - Creates video texture that continuously updates. Auto width/height.</li>\n</ul>\n<h3 id=\"setsubimagedataoptions--object--texture2d\"><a href=\"#setsubimagedataoptions--object--texture2d\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>setSubImageData(options : Object) : Texture2D</h3>\n<p>Redefines an area of an existing texture\nNote: does not allocate storage</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Texture.setSubImageData({\n    target = this.target,\n    pixels = null,\n    data = null,\n    x = 0,\n    y = 0,\n    width,\n    height,\n    level = 0,\n    format = GL.RGBA,\n    type,\n    dataFormat,\n    compressed = false,\n    offset = 0,\n    border = 0,\n    parameters = {}\n  });</code></pre></div>\n<ul>\n<li><code class=\"language-text\">x</code> (<code class=\"language-text\">GLint</code>) - xOffset from where texture to be updated</li>\n<li><code class=\"language-text\">y</code> (<code class=\"language-text\">GLint</code>) - yOffset from where texture to be updated</li>\n<li><code class=\"language-text\">width</code> (<code class=\"language-text\">GLint</code>) - width of the sub image to be updated</li>\n<li><code class=\"language-text\">height</code> (<code class=\"language-text\">GLint</code>) - height of the sub image to be updated</li>\n<li><code class=\"language-text\">level</code> (<code class=\"language-text\">GLint</code>) - mip level to be updated</li>\n<li><code class=\"language-text\">format</code> (<code class=\"language-text\">GLenum</code>) - internal format of image data.</li>\n<li><code class=\"language-text\">typ</code> (<code class=\"language-text\">GLenum</code>) - format of array (autodetect from type) or (WEBGL2) format of buffer or ArrayBufferView</li>\n<li><code class=\"language-text\">dataFormat</code> (<code class=\"language-text\">GLenum</code>) - format of image data.</li>\n<li><code class=\"language-text\">offset</code> (<code class=\"language-text\">Number</code>) - (WEBGL2) offset from start of buffer</li>\n<li><code class=\"language-text\">border</code> (<code class=\"language-text\">GLint</code>) - must be 0.</li>\n<li>parameters - temporary settings to be applied, can be used to supply pixel store settings.</li>\n</ul>\n<p>See also <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D\">gl.compressedTexSubImage2D</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texSubImage2D\">gl.texSubImage2D</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindTexture\">gl.bindTexture</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindBuffer\">gl.bindBuffer</a></p>\n<h3 id=\"getactiveunit\"><a href=\"#getactiveunit\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getActiveUnit()</h3>\n<p>Returns number of active textures.</p>\n<h3 id=\"bind\"><a href=\"#bind\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>bind()</h3>\n<p>Binds itself to given textureUnit.</p>\n<p>The following WebGL APIs are called in the function\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/activeTexture\">gl.activeTexture</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindTexture\">gl.bindTexture</a></p>\n<h3 id=\"unbind\"><a href=\"#unbind\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>unbind()</h3>\n<p>The following WebGL APIs are called in the function\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/activeTexture\">gl.activeTexture</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindTexture\">gl.bindTexture</a></p>\n<h2 id=\"texture-image-data\"><a href=\"#texture-image-data\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Texture Image Data</h2>\n<p>WebGL allows textures to be created from a number of different data sources.</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">null</code></td>\n<td>A texture will be created with the appropriate format, size and width. Bytes will be \"uninitialized\".</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">typed array</code></td>\n<td>Bytes will be interpreted according to format/type parameters and pixel store parameters.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Buffer</code> or <code class=\"language-text\">WebGLBuffer</code> (<code class=\"language-text\">WebGL2</code>)</td>\n<td>Bytes will be interpreted according to format/type parameters and pixel store parameters.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Image</code> (<code class=\"language-text\">HTMLImageElement</code>)</td>\n<td>image will be used to fill the texture. width and height will be deduced.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Video</code> (<code class=\"language-text\">HTMLVideoElement</code>)</td>\n<td>video will be played, continously updating the texture. width and height will be deduced.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Canvas</code> (<code class=\"language-text\">HTMLCanvasElement</code>)</td>\n<td>canvas will be used to fill the texture. width and height will be deduced.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ImageData</code></td>\n<td><code class=\"language-text\">canvas.getImageData()</code> - Used to fill the texture. width and height will be deduced.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"texture-formats\"><a href=\"#texture-formats\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Texture Formats</h2>\n<h3 id=\"internal-format\"><a href=\"#internal-format\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Internal Format</h3>\n<p>If an application wants to store the texture at a certain resolution or in a certain format, it can request the resolution and format with <code class=\"language-text\">internalFormat</code>. WebGL will choose an internal representation with least the internal component sizes, and exactly the component types shown for that format, although it may not match exactly.</p>\n<p>WebGL2 adds sized internal formats which enables the application to request\nspecific components sizes and types (float and integer formats). While sized formats offer more control, unsized formats do give the GPU freedom to select the most performant internal representation.</p>\n<table>\n<thead>\n<tr>\n<th>Unsized Internal Format</th>\n<th>Components</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">GL.RGB</code></td>\n<td>3</td>\n<td>sampler reads the red, green and blue components, alpha is 1.0</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGBA</code></td>\n<td>4</td>\n<td>Red, green, blue and alpha components are sampled from the color buffer.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.LUMINANCE</code></td>\n<td>1</td>\n<td>Each color contains a single luminance value. When sampled, rgb are all set to this luminance, alpha is 1.0.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.LUMINANCE_ALPHA</code></td>\n<td>2</td>\n<td>Each component is a luminance/alpha double. When sampled, rgb are all set to luminance, alpha from component.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.ALPHA</code></td>\n<td>1</td>\n<td>Discards the red, green and blue components and reads the alpha component.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.DEPTH_COMPONENT</code></td>\n<td>1</td>\n<td>WebGL2 or <code class=\"language-text\">WEBGL_depth_texture</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.DEPTH_STENCIL</code></td>\n<td>2</td>\n<td>WebGL2 or <code class=\"language-text\">WEBGL_depth_texture</code></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Sized Internal Format</th>\n<th>Comp.</th>\n<th>Size</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">GL.R8</code> (WebGL2)</td>\n<td>1</td>\n<td>8 bits</td>\n<td>red component</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.R16F</code> (WebGL2)</td>\n<td>1</td>\n<td>16 bits</td>\n<td>half float red component</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.R32F</code> (WebGL2)</td>\n<td>1</td>\n<td>32 bits</td>\n<td>float red component</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.R8UI</code> (WebGL2)</td>\n<td>1</td>\n<td>8 bits</td>\n<td>unsigned int red component, <code class=\"language-text\">usampler</code>, no filtering</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RG8</code> (WebGL2)</td>\n<td>1</td>\n<td>16 bits</td>\n<td>red and green components</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RG16F</code> (WebGL2)</td>\n<td>2</td>\n<td>32 bits</td>\n<td>red and green components, half float</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RG32F</code> (WebGL2)</td>\n<td>2</td>\n<td>64 bits</td>\n<td>red and green components, float</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGUI</code> (WebGL2)</td>\n<td>2</td>\n<td>16 bits</td>\n<td>red and green components, <code class=\"language-text\">usampler</code>, no filtering</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGB8</code> (WebGL2)</td>\n<td>3</td>\n<td>24 bits</td>\n<td>red, green and blue components</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.SRGB8</code> (WebGL2, EXT_sRGB)</td>\n<td>3</td>\n<td>24 bits</td>\n<td>Color values are encoded to/decoded from sRGB before being written to/read from framebuffer</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGB565</code> (WebGL2)</td>\n<td>3</td>\n<td>16 bits</td>\n<td>5 bit red, 6 bit green, 5 bit blue</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.R11F_G11F_B10F</code> (WebGL2)</td>\n<td>3</td>\n<td>32 bits</td>\n<td><a href=\"https://www.opengl.org/wiki/Small_Float_Formats\">11 and 10 bit floating point colors</a></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGB9_E5</code> (WebGL2)</td>\n<td>3</td>\n<td>32 bits</td>\n<td><a href=\"https://www.opengl.org/wiki/Small_Float_Formats\">14 bit floating point RGB, shared exponent</a></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGB16F</code> (WebGL2)</td>\n<td>3</td>\n<td>48 bits</td>\n<td>half float RGB</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGB32F</code> (WebGL2)</td>\n<td>3</td>\n<td>96 bits</td>\n<td>float RBG</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGB8UI</code> (WebGL2)</td>\n<td>3</td>\n<td>24 bits</td>\n<td>unsigned integer 8 bit RGB: use <code class=\"language-text\">usampler</code>, no filtering</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGBA8</code> (WebGL2)</td>\n<td>4</td>\n<td>32 bits</td>\n<td>8 bit RGBA, typically what <code class=\"language-text\">GL.RGBA</code> \"resolves\" to</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.SRGB_APLHA8</code> (WebGL2, EXT_sRGB)</td>\n<td>4</td>\n<td>32 bits</td>\n<td>Color values are encoded to/decoded from sRGB before being written to/read from framebuffer</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGB5_A1</code> (WebGL2)</td>\n<td>4</td>\n<td>16 bits</td>\n<td>5 bit RGB, 1 bit alpha</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGBA4444</code> (WebGL2)</td>\n<td>4</td>\n<td>16 bits</td>\n<td>4 bit RGBA</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGBA16F</code> (WebGL2)</td>\n<td>4</td>\n<td>64 bits</td>\n<td>half float RGBA</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGBA32F</code> (WebGL2)</td>\n<td>4</td>\n<td>128 bits</td>\n<td>float RGA</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGBA8UI</code> (WebGL2)</td>\n<td>4</td>\n<td>32 bits</td>\n<td>unsigned integer 8 bit RGBA, <code class=\"language-text\">usampler</code>, no filtering</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"texture-component-type\"><a href=\"#texture-component-type\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Texture Component Type</h3>\n<p>Describes the layout of each color component in memory.</p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>WebGL2</th>\n<th>WebGL1</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">GL.UNSIGNED_BYTE</code></td>\n<td>Yes</td>\n<td>Yes</td>\n<td>GLbyte 8 bits per channel for <code class=\"language-text\">GL.RGBA</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.UNSIGNED_SHORT_5_6_5</code></td>\n<td>Yes</td>\n<td>Yes</td>\n<td>5 red bits, 6 green bits, 5 blue bits</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.UNSIGNED_SHORT_4_4_4_4</code></td>\n<td>Yes</td>\n<td>Yes</td>\n<td>4 red bits, 4 green bits, 4 blue bits, 4 alpha bits</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.UNSIGNED_SHORT_5_5_5_1</code></td>\n<td>Yes</td>\n<td>Yes</td>\n<td>5 red bits, 5 green bits, 5 blue bits, 1 alpha bit</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.BYTE</code></td>\n<td>Yes</td>\n<td>No</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.UNSIGNED_SHORT</code></td>\n<td>Yes</td>\n<td><code class=\"language-text\">WEBGL_depth_texture</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.SHORT</code></td>\n<td>Yes</td>\n<td>No</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.UNSIGNED_INT</code></td>\n<td>Yes</td>\n<td><code class=\"language-text\">WEBGL_depth_texture</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.INT</code></td>\n<td>Yes</td>\n<td>No</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.HALF_FLOAT</code></td>\n<td>Yes</td>\n<td><code class=\"language-text\">OES_texture_half_float</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.FLOAT</code></td>\n<td>Yes</td>\n<td><code class=\"language-text\">OES_texture_float</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.UNSIGNED_INT_2_10_10_10_REV</code></td>\n<td>Yes</td>\n<td>No</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.UNSIGNED_INT_10F_11F_11F_REV</code></td>\n<td>Yes</td>\n<td>No</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.UNSIGNED_INT_5_9_9_9_REV</code></td>\n<td>Yes</td>\n<td>No</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.UNSIGNED_INT_24_8</code></td>\n<td>Yes</td>\n<td><code class=\"language-text\">WEBGL_depth_texture</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.FLOAT_32_UNSIGNED_INT_24_8_REV</code></td>\n<td>Yes</td>\n<td>No</td>\n<td>(pixels must be null)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"texture-format-combinations\"><a href=\"#texture-format-combinations\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Texture Format Combinations</h3>\n<p>This a simplified table illustrating what combinations of internal formats\nwork with what formats and types. Note that luma.gl deduces <code class=\"language-text\">format</code> and <code class=\"language-text\">type</code> from <code class=\"language-text\">internalFormat</code> by taking the first value from the format and type entries in this table.</p>\n<p>For more details, see tables in:</p>\n<ul>\n<li><a href=\"https://www.khronos.org/registry/webgl/specs/latest/2.0/\">WebGL2 spec</a></li>\n<li><a href=\"https://www.khronos.org/opengles/sdk/docs/man3/html/glTexImage2D.xhtml\">OpenGL ES spec</a></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Internal Format</th>\n<th>Data Format</th>\n<th>Data Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">GL.RGB</code></td>\n<td><code class=\"language-text\">GL.RGB</code></td>\n<td><code class=\"language-text\">GL.UNSIGNED_BYTE</code> <code class=\"language-text\">GL.UNSIGNED_SHORT_5_6_5</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGBA</code></td>\n<td><code class=\"language-text\">GL.RGBA</code></td>\n<td><code class=\"language-text\">GL.UNSIGNED_BYTE</code> <code class=\"language-text\">GL.UNSIGNED_SHORT_4_4_4_4</code> <code class=\"language-text\">GL.UNSIGNED_SHORT_5_5_5_1</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.LUMINANCE_ALPHA</code></td>\n<td><code class=\"language-text\">GL.LUMINANCE_ALPHA</code></td>\n<td><code class=\"language-text\">GL.UNSIGNED_BYTE</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.LUMINANCE</code></td>\n<td><code class=\"language-text\">GL.LUMINANCE</code></td>\n<td><code class=\"language-text\">GL.UNSIGNED_BYTE</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.ALPHA</code></td>\n<td><code class=\"language-text\">GL.ALPHA</code></td>\n<td><code class=\"language-text\">GL.UNSIGNED_BYTE</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.R8</code></td>\n<td><code class=\"language-text\">GL.RED</code></td>\n<td><code class=\"language-text\">GL.UNSIGNED_BYTE</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.R16F</code></td>\n<td><code class=\"language-text\">GL.RED</code></td>\n<td><code class=\"language-text\">GL.HALF_FLOAT</code> <code class=\"language-text\">GL.FLOAT</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.R32F</code></td>\n<td><code class=\"language-text\">GL.RED</code></td>\n<td><code class=\"language-text\">GL.FLOAT</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.R8UI</code></td>\n<td><code class=\"language-text\">GL.RED_INTEGER</code></td>\n<td><code class=\"language-text\">GL.UNSIGNED_BYTE</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RG8</code></td>\n<td><code class=\"language-text\">GL.RG</code></td>\n<td><code class=\"language-text\">GL.UNSIGNED_BYTE</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RG16F</code></td>\n<td><code class=\"language-text\">GL.RG</code></td>\n<td><code class=\"language-text\">GL.HALF_FLOAT</code> <code class=\"language-text\">GL.FLOAT</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RG32F</code></td>\n<td><code class=\"language-text\">GL.RG</code></td>\n<td><code class=\"language-text\">GL.FLOAT</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RG8UI</code></td>\n<td><code class=\"language-text\">GL.RG_INTEGER</code></td>\n<td><code class=\"language-text\">GL.UNSIGNED_BYTE</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGB8</code></td>\n<td><code class=\"language-text\">GL.RGB</code></td>\n<td><code class=\"language-text\">GL.UNSIGNED_BYTE</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.SRGB8</code></td>\n<td><code class=\"language-text\">GL.RGB</code></td>\n<td><code class=\"language-text\">GL.UNSIGNED_BYTE</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGB565</code></td>\n<td><code class=\"language-text\">GL.RGB</code></td>\n<td><code class=\"language-text\">GL.UNSIGNED_BYTE</code> <code class=\"language-text\">GL.UNSIGNED_SHORT_5_6_5</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.R11F_G11F_B10F</code></td>\n<td><code class=\"language-text\">GL.RGB</code></td>\n<td><code class=\"language-text\">GL.UNSIGNED_INT_10F_11F_11F_REV</code> <code class=\"language-text\">GL.HALF_FLOAT</code> <code class=\"language-text\">GL.FLOAT</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGB9_E5</code></td>\n<td><code class=\"language-text\">GL.RGB</code></td>\n<td><code class=\"language-text\">GL.HALF_FLOAT</code> <code class=\"language-text\">GL.FLOAT</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGB16FG</code></td>\n<td><code class=\"language-text\">GL.RGB</code></td>\n<td><code class=\"language-text\">GL.HALF_FLOAT</code> <code class=\"language-text\">GL.FLOAT</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGB32F</code></td>\n<td><code class=\"language-text\">GL.RGB</code></td>\n<td><code class=\"language-text\">GL.FLOAT</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGB8UI</code></td>\n<td><code class=\"language-text\">GL.RGB_INTEGER</code></td>\n<td><code class=\"language-text\">GL.UNSIGNED_BYTE</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGBA8</code></td>\n<td><code class=\"language-text\">GL.RGBA</code></td>\n<td><code class=\"language-text\">GL.UNSIGNED_BYTE</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.SRGB8_ALPHA8</code></td>\n<td><code class=\"language-text\">GL.RGBA</code></td>\n<td><code class=\"language-text\">GL.UNSIGNED_BYTE</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGB5_A1</code></td>\n<td><code class=\"language-text\">GL.RGBA</code></td>\n<td><code class=\"language-text\">GL.UNSIGNED_BYTE</code> <code class=\"language-text\">GL.UNSIGNED_SHORT_5_5_5_1</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGBA4</code></td>\n<td><code class=\"language-text\">GL.RGBA</code></td>\n<td><code class=\"language-text\">GL.UNSIGNED_BYTE</code> <code class=\"language-text\">GL.UNSIGNED_SHORT_4_4_4_4</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGBA16F</code></td>\n<td><code class=\"language-text\">GL.RGBA</code></td>\n<td><code class=\"language-text\">GL.HALF_FLOAT</code> <code class=\"language-text\">GL.FLOAT</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGBA32F</code></td>\n<td><code class=\"language-text\">GL.RGBA</code></td>\n<td><code class=\"language-text\">GL.FLOAT</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.RGBA8UI</code></td>\n<td><code class=\"language-text\">GL.RGBA_INTEGER</code></td>\n<td><code class=\"language-text\">GL.UNSIGNED_BYTE</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"limits-and-capabilities\"><a href=\"#limits-and-capabilities\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Limits and Capabilities</h2>\n<table>\n<thead>\n<tr>\n<th>Optional capabilities</th>\n<th>controlled by extensions</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Create floating point textures (<code class=\"language-text\">GL.NEAREST</code> sampling only)</td>\n<td><code class=\"language-text\">TEXTURE_FLOAT</code></td>\n</tr>\n<tr>\n<td>Create half-floating point textures (<code class=\"language-text\">GL.NEAREST</code> sampling)</td>\n<td><code class=\"language-text\">TEXTURE_HALF_FLOAT</code></td>\n</tr>\n<tr>\n<td>Floating point textures are color-renderable and readable</td>\n<td><code class=\"language-text\">COLOR_BUFFER_FLOAT</code></td>\n</tr>\n<tr>\n<td>Half float textures are color-renderable and readable</td>\n<td><code class=\"language-text\">COLOR_BUFFER_HALF_FLOAT</code></td>\n</tr>\n<tr>\n<td>sRGB format support</td>\n<td><code class=\"language-text\">SRGB</code></td>\n</tr>\n<tr>\n<td>depth texture support</td>\n<td><code class=\"language-text\">DEPTH_TEXTURE</code></td>\n</tr>\n<tr>\n<td>anisotropic filtering</td>\n<td><code class=\"language-text\">TEXTURE_FILTER_ANISOTROPIC</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.LINEAR_*</code> sampling of floating point textures</td>\n<td><code class=\"language-text\">TEXTURE_FILTER_LINEAR_FLOAT</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.LINEAR_*</code> sampling of half-floating point textures</td>\n<td><code class=\"language-text\">TEXTURE_FILTER_LINEAR_HALF_FLOAT</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"npot-textures-webgl1\"><a href=\"#npot-textures-webgl1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NPOT Textures (WebGL1)</h2>\n<ul>\n<li>Any texture with a <code class=\"language-text\">non power of two</code> dimension (width or height) is referred as <code class=\"language-text\">NPOT</code> texture, under WebGL1 NPOT textures have following limitations.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>State</th>\n<th>Limitation</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Mipmapping</td>\n<td>Should be disabled</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.TEXTURE_MIN_FILTER</code></td>\n<td>Must be either <code class=\"language-text\">GL.LINEAR</code> or <code class=\"language-text\">GL.NEAREST</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.TEXTURE_WRAP_S</code></td>\n<td>Must be <code class=\"language-text\">GL.CLAMP_TO_EDGE</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.TEXTURE_WRAP_T</code></td>\n<td>Must be <code class=\"language-text\">GL.CLAMP_TO_EDGE</code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>'Texture' class will perform above settings when NPOT texture resource is created. When un-supported filtering is set using <code class=\"language-text\">Texture.setParameters</code>, those will be overwritten with above supported values (<code class=\"language-text\">GL.TEXTURE_MIN_FILTER</code> will be set to <code class=\"language-text\">GL.LINEAR</code>). This only happens for NPOT textures when using WebGL1, and a warning log will be printed every time a setting is overwritten.</li>\n</ul>\n<h2 id=\"remarks\"><a href=\"#remarks\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Remarks</h2>\n<ul>\n<li>Textures can be supplied as uniforms to shaders that can sample them using texture coordinates and color pixels accordingly.</li>\n<li>Parameters that affect texture sampling can be set on textures or sampler objects.</li>\n<li>Textures can be created from a number of different sources, including typed arrays, HTML Images, HTML Canvases, HTML Videos and WebGLBuffers (WebGL2).</li>\n<li>The WebGL Context has global \"pixel store\" parameters that control how pixel data is laid out, including Y direction, color space etc.</li>\n<li>Textures are read from supplied data and written to the specified format/type parameters and pixel store parameters.</li>\n</ul>"}