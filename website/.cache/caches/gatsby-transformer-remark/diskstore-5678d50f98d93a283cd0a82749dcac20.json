{"expireTime":9007200809748945000,"key":"transformer-remark-markdown-html-f92daa5e011475f31eadd47065d1f295-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-autolink-headers-","val":"<h1 id=\"glsl-reference\"><a href=\"#glsl-reference\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GLSL Reference</h1>\n<p>This page is a brief reference for both the GLSL 3.00 ES and GLSL 1.00 ES syntax, with notes about what has changed between the two versions (GLSL documentation tends to describe one version and the differences are often not emphasized).</p>\n<p>Main sources of information for this page comes the Khronos WebGL reference cards and GLSL language specs:</p>\n<ul>\n<li><a href=\"https://www.khronos.org/files/webgl20-reference-guide.pdf\">WebGL2/GLSL 3.00 ES</a></li>\n<li><a href=\"https://www.khronos.org/files/webgl/webgl-reference-card-1_0.pdf\">WebGL1/GLSL 1.00 ES</a></li>\n<li><a href=\"https://www.khronos.org/registry/OpenGL/specs/es/3.0/GLSL_ES_Specification_3.00.pdf\">GLSL 3.00 Spec</a></li>\n</ul>\n<h2 id=\"types\"><a href=\"#types\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types</h2>\n<h3 id=\"basic-types\"><a href=\"#basic-types\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basic Types</h3>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>GLSL 1.00</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">void</code></td>\n<td></td>\n<td>no function return value or empty parameter list</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">bool</code></td>\n<td></td>\n<td>Boolean</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">int</code></td>\n<td></td>\n<td>signed integer</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">float</code></td>\n<td></td>\n<td>floating scalar</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">vec2</code>, <code class=\"language-text\">vec3</code>, <code class=\"language-text\">vec4</code></td>\n<td></td>\n<td>floating point vectors</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">bvec2</code>, <code class=\"language-text\">bvec3</code>, <code class=\"language-text\">bvec4</code></td>\n<td></td>\n<td>boolean vectors</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ivec2</code>, <code class=\"language-text\">ivec3</code>, <code class=\"language-text\">ivec4</code></td>\n<td></td>\n<td>signed integer vectors</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">uvec2</code>, <code class=\"language-text\">uvec3</code>, <code class=\"language-text\">uvec4</code></td>\n<td>N/A</td>\n<td>unsigned integer vectors</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">mat2</code>, <code class=\"language-text\">mat3</code>, <code class=\"language-text\">mat4</code></td>\n<td></td>\n<td>2x2, 3x3, 4x4 float matrix</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">mat2x2</code>, <code class=\"language-text\">mat2x3</code>, <code class=\"language-text\">mat2x4</code></td>\n<td>N/A</td>\n<td>2x2, 2x3, 2x4 float matrix</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">mat3x2</code>, <code class=\"language-text\">mat3x3</code>, <code class=\"language-text\">mat3x4</code></td>\n<td>N/A</td>\n<td>3x2, 3x3, 3x4 float matrix</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">mat4x2</code>, <code class=\"language-text\">mat4x3</code>, <code class=\"language-text\">mat4x4</code></td>\n<td>N/A</td>\n<td>4x2, 4x3, 4x4 float matrix</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"floating-point-sampler-types\"><a href=\"#floating-point-sampler-types\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Floating Point Sampler Types</h3>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>GLSL 1.00</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">sampler2D</code></td>\n<td></td>\n<td>access a 2D (or 3D) texture</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">samplerCube</code></td>\n<td></td>\n<td>access cube mapped texture</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">sampler3D</code></td>\n<td>N/A</td>\n<td>access a 2D or 3D texture</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">samplerCubeShadow</code></td>\n<td>N/A</td>\n<td>access cube map depth texture with comparison</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">sampler2DShadow</code></td>\n<td>N/A</td>\n<td>access 2D depth texture with comparison</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">sampler2DArray</code></td>\n<td>N/A</td>\n<td>access 2D array texture</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">sampler2DArrayShadow</code></td>\n<td>N/A</td>\n<td>access 2D array depth texture with comparison</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"signed-integer-sampler-types\"><a href=\"#signed-integer-sampler-types\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Signed Integer Sampler Types</h3>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>GLSL 1.00</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">isampler2D, isampler3D</code></td>\n<td>N/A</td>\n<td>access an integer 2D or 3D texture</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">isamplerCube</code></td>\n<td>N/A</td>\n<td>access integer cube mapped texture</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">isampler2DArray</code></td>\n<td>N/A</td>\n<td>access integer 2D array texture</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"unsigned-integer-sampler-types\"><a href=\"#unsigned-integer-sampler-types\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unsigned Integer Sampler Types</h3>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>GLSL 1.00</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">usampler2D, usampler3D</code></td>\n<td>N/A</td>\n<td>access unsigned integer 2D or 3D texture</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">usamplerCube</code></td>\n<td>N/A</td>\n<td>access unsigned integer cube mapped texture</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">usampler2DArray</code></td>\n<td>N/A</td>\n<td>access unsigned integer 2D array texture</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"structures-and-arrays\"><a href=\"#structures-and-arrays\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Structures and Arrays</h3>\n<p>Structures</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">struct type-name {\n members\n} struct-name[]; // optional variable declaration, optionally an array</code></pre></div>\n<p>Arrays</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">float foo[3];</code></pre></div>\n<p>Notes:</p>\n<ul>\n<li>Structures and blocks can be arrays</li>\n<li>Only 1-dimensional arrays supported</li>\n<li>Structure members can be arrays</li>\n</ul>\n<h2 id=\"qualifiers\"><a href=\"#qualifiers\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Qualifiers</h2>\n<p>Storage Qualifiers [4.3]\nVariable declarations may be preceded by one storage qualifier.\nnone (Default) local read/write memory, or input parameter\nconst Compile-time constant, or read-only function\nparameter\nin\ncentroid in Linkage into a shader from a previous stage\nout\ncentroid out Linkage out of a shader to a subsequent stage\nuniform\nValue does not change across the primitive being processed, uniforms form the linkage between a shader, OpenGL ES, and the application\nThe following interpolation qualifiers for shader outputs and inputs may procede in, centroid in, out, or centroid out.\nsmooth Perspective correct interpolation\nflat No interpolation</p>\n<h3 id=\"interface-blocks\"><a href=\"#interface-blocks\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interface Blocks</h3>\n<p>Uniform variable declarations can be grouped into named interface blocks, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">uniform Transform {\n mat4 ModelViewProjectionMatrix;\n uniform mat3 NormalMatrix; // restatement of qualifier\n float Deformation;\n}</code></pre></div>\n<h3 id=\"layout-qualifiers-glsl-300\"><a href=\"#layout-qualifiers-glsl-300\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Layout Qualifiers (GLSL 3.00)</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">layout(layout-qualifier) block-declaration\nlayout(layout-qualifier) in/out/uniform\nlayout(layout-qualifier) in/out/uniform\n declaration</code></pre></div>\n<p>For all shader stages:</p>\n<p>location = integer-constant</p>\n<h3 id=\"uniform-block-layout-qualifiers-glsl-300\"><a href=\"#uniform-block-layout-qualifiers-glsl-300\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Uniform Block Layout Qualifiers (GLSL 3.00)</h3>\n<p>Layout qualifier identifiers for uniform blocks:</p>\n<p><code class=\"language-text\">shared</code>, <code class=\"language-text\">packed</code>, <code class=\"language-text\">std140</code>, <code class=\"language-text\">row_major</code>, <code class=\"language-text\">column_major</code></p>\n<h3 id=\"parameter-qualifiers\"><a href=\"#parameter-qualifiers\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parameter Qualifiers</h3>\n<p>Input values are copied in at function call time, output values are copied out at function return time.</p>\n<p>| <code class=\"language-text\">none</code> (Default) | same as in |\n| <code class=\"language-text\">in</code>             | For function parameters passed into a function |\n| <code class=\"language-text\">out</code>            | For function parameters passed back out of a function, but not initialized for use when passed in |\n| <code class=\"language-text\">inout</code>          | For function parameters passed both into and out of a function |</p>\n<h3 id=\"precision-and-precision-qualifiers\"><a href=\"#precision-and-precision-qualifiers\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Precision and Precision Qualifiers</h3>\n<p>Any floating point, integer, or sampler declaration can have the type preceded by one of these precision qualifiers:</p>\n<p>| <code class=\"language-text\">highp</code>   | Satisfies minimum requirements for the vertex language. |\n| <code class=\"language-text\">mediump</code> | Range and precision is between that provided by lowp and highp. |\n| <code class=\"language-text\">lowp</code>    | Range and precision can be less than mediump, but still represents all color values for any color channel. |</p>\n<p>Ranges and precisions for precision qualifiers (FP=floating point):</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>FP Range</th>\n<th>FP Magnitude Range</th>\n<th>FP Precision</th>\n<th>Integer Range Signed</th>\n<th>Integer Range Unsigned</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">highp</code></td>\n<td>(−2126 , 2127)</td>\n<td>0.0, (2^–126 , 2^127)</td>\n<td>Relative 2^–24</td>\n<td>[−2^31, 2^31 −1]</td>\n<td>[0, 2^32 −1]</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">mediump</code></td>\n<td>(−214 , 214)</td>\n<td>(2^–14 , 2^14)</td>\n<td>Relative 2^–10</td>\n<td>[−2^15, 2^15 −1]</td>\n<td>[0, 2^16 −1]</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">lowp</code></td>\n<td>(−2, 2)</td>\n<td>(2^–8 , 2)</td>\n<td>Absolute 26–8</td>\n<td>[−2^7, 2^7 −1]</td>\n<td>[0, 2^8 −1]</td>\n</tr>\n</tbody>\n</table>\n<p>A precision statement establishes a default precision qualifier for subsequent <code class=\"language-text\">int</code>, <code class=\"language-text\">float</code>, and sampler declarations, e.g.: <code class=\"language-text\">precision highp int;</code></p>\n<h3 id=\"invariant-qualifiers-examples\"><a href=\"#invariant-qualifiers-examples\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Invariant Qualifiers Examples</h3>\n<p>| <code class=\"language-text\">#pragma STDGL invariant(all)</code>       | Force all output variables to be invariant |\n| <code class=\"language-text\">invariant gl_Position;</code>             | Qualify a previously declared variable |\n| <code class=\"language-text\">invariant centroid out vec3 Color;</code> | Qualify as part of a variable declaration |</p>\n<h3 id=\"order-of-qualification\"><a href=\"#order-of-qualification\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Order of Qualification</h3>\n<p>When multiple qualifications are present, they must follow a strict order. This order is either:</p>\n<ul>\n<li>invariant, interpolation, storage, precision</li>\n<li>storage, parameter, precision</li>\n</ul>\n<h2 id=\"preprocessor\"><a href=\"#preprocessor\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Preprocessor</h2>\n<p>Preprocessor Directives</p>\n<p>The number sign (#) can be immediately preceded or followed in its line by spaces or horizontal tabs.</p>\n<p><code class=\"language-text\">#</code> <code class=\"language-text\">#define</code> <code class=\"language-text\">#undef</code> <code class=\"language-text\">#if</code> <code class=\"language-text\">#ifdef</code> <code class=\"language-text\">#ifndef</code> <code class=\"language-text\">#else</code> <code class=\"language-text\">#elif</code> <code class=\"language-text\">#endif</code> <code class=\"language-text\">#error</code> <code class=\"language-text\">#pragma</code> <code class=\"language-text\">#extension</code> <code class=\"language-text\">#version</code> <code class=\"language-text\">#line</code></p>\n<p>Examples of Preprocessor Directives</p>\n<ul>\n<li><code class=\"language-text\">#version 100</code> in a shader program specifies that the program is written in GLSL ES version 1.00. It is optional. If used, it must occur before anything else in the program other than whitespace or comments.</li>\n<li><code class=\"language-text\">#extension extension_name : behavior</code>, where behavior can be <code class=\"language-text\">require</code>, <code class=\"language-text\">enable</code>, <code class=\"language-text\">warn</code>, or <code class=\"language-text\">disable</code>; and where extension_name is an extension supported by the compiler</li>\n<li><code class=\"language-text\">#pragma optimize({on, off})</code> - enable or disable shader optimization (default on) - GLSL 3.00</li>\n<li><code class=\"language-text\">#pragma debug({on, off})</code> - enable or disable compiling shaders with debug information (default off) - GLSL 3.00</li>\n</ul>\n<p>Predefined Macros</p>\n<table>\n<thead>\n<tr>\n<th>Macro</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">__LINE__</code></td>\n<td>Decimal integer constant that is one more than the number of preceding new-lines in the current</td>\n</tr>\n<tr>\n<td>source string</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">__FILE__</code></td>\n<td>Decimal integer constant that says which source string number is currently being processed</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">__VERSION__</code></td>\n<td>Decimal integer: 100 or 300</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL_ES</code></td>\n<td>Defined and set to integer <code class=\"language-text\">1</code> if running on an OpenGL-ES Shading Language. Always <code class=\"language-text\">1</code> in WebGL, mainly useful if sharing shader code with non-ES environments.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL_FRAGMENT_PRECISION_HIGH</code></td>\n<td><code class=\"language-text\">1</code> if <code class=\"language-text\">highp</code> is supported in the fragment language, else undefined</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"built-in-inputs-outputs-and-constants\"><a href=\"#built-in-inputs-outputs-and-constants\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Built-In Inputs, Outputs, and Constants</h2>\n<p>Shader programs use special variables and constants to communicate with fixed-function parts of the pipeline.</p>\n<p>Notes:</p>\n<ul>\n<li>Output Special Variables may be read back after writing.</li>\n<li>Input Special Variables are read-only.</li>\n<li>All Special Variables have global scope.</li>\n</ul>\n<h3 id=\"built-in-vertex-shader-variables\"><a href=\"#built-in-vertex-shader-variables\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Built-in Vertex Shader Variables</h3>\n<p>Inputs:</p>\n<table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Type</th>\n<th>Description</th>\n<th>Units or coordinate system</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">gl_VertexID</code></td>\n<td><code class=\"language-text\">int</code></td>\n<td>integer index (GLSL 3.00 only)</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">gl_InstanceID</code></td>\n<td><code class=\"language-text\">int</code></td>\n<td>instance number (GLSL 3.00 only)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Outputs:</p>\n<table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Type</th>\n<th>Description</th>\n<th>Units or coordinate system</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">gl_Position</code></td>\n<td><code class=\"language-text\">highp vec4</code></td>\n<td>transformed vertex position</td>\n<td>clip coordinates</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">gl_PointSize</code></td>\n<td><code class=\"language-text\">mediump float</code></td>\n<td>transformed point size (point rasterization only)</td>\n<td>pixels</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"built-in-fragment-shader-variables\"><a href=\"#built-in-fragment-shader-variables\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Built-in Fragment Shader Variables</h3>\n<p>Inputs:</p>\n<table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Type</th>\n<th>Description</th>\n<th>Units or coordinate system</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">gl_FragCoord</code></td>\n<td><code class=\"language-text\">mediump vec4</code></td>\n<td>fragment position within frame buffer</td>\n<td>window coordinates</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">gl_FrontFacing</code></td>\n<td><code class=\"language-text\">bool</code></td>\n<td>fragment belongs to a front-facing primitive</td>\n<td>Boolean</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">gl_PointCoord</code></td>\n<td><code class=\"language-text\">mediump vec2</code></td>\n<td>fragment position within a point (point rasterization only)</td>\n<td>0.0 to 1.0 for each component</td>\n</tr>\n</tbody>\n</table>\n<p>Outputs (GLSL 1.00 es only):</p>\n<table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Type</th>\n<th>Description</th>\n<th>Units or coordinate system</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">gl_FragColor</code></td>\n<td><code class=\"language-text\">mediump vec4</code></td>\n<td>fragment color</td>\n<td>RGBA color</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">gl_FragData[n]</code></td>\n<td><code class=\"language-text\">mediump vec4</code></td>\n<td>fragment color for color attachment n</td>\n<td>RGBA color</td>\n</tr>\n</tbody>\n</table>\n<p>Notes:</p>\n<ul>\n<li>In GLSL 3.00 es there are no built-in variables for fragment shader outputs, they are declared by the shader using the <code class=\"language-text\">out</code> syntax.</li>\n<li>Fragment shaders may write to <code class=\"language-text\">gl_FragColor</code> or to one or more elements of <code class=\"language-text\">gl_FragData[]</code>, but not both.</li>\n<li>The size of the <code class=\"language-text\">gl_FragData</code> array is given by the built-in constant <code class=\"language-text\">gl_MaxDrawBuffers</code>.</li>\n</ul>\n<h3 id=\"built-in-constants\"><a href=\"#built-in-constants\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Built-In Constants</h3>\n<table>\n<thead>\n<tr>\n<th>Constant</th>\n<th>Type</th>\n<th>WebGL1</th>\n<th>WebGL2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">gl_MaxVertexAttribs</code></td>\n<td><code class=\"language-text\">const mediump int</code></td>\n<td>8</td>\n<td>16</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">gl_MaxVertexUniformVectors</code></td>\n<td><code class=\"language-text\">const mediump int</code></td>\n<td>128</td>\n<td>256</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">gl_MaxVaryingVectors</code></td>\n<td><code class=\"language-text\">const mediump int</code></td>\n<td>8</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">gl_MaxVertexOutputVectors</code></td>\n<td><code class=\"language-text\">const mediump int</code></td>\n<td>N/A</td>\n<td>16</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">gl_MaxVertexTextureImageUnits</code></td>\n<td><code class=\"language-text\">const mediump int</code></td>\n<td>0</td>\n<td>16</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">gl_MaxCombinedTextureImageUnits</code></td>\n<td><code class=\"language-text\">const mediump int</code></td>\n<td>8</td>\n<td>32</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">gl_MaxTextureImageUnits</code></td>\n<td><code class=\"language-text\">const mediump int</code></td>\n<td>8</td>\n<td>16</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">gl_MaxFragmentInputVectors</code></td>\n<td><code class=\"language-text\">const mediump int</code></td>\n<td>N/A</td>\n<td>15</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">gl_MaxFragmentUniformVectors</code></td>\n<td><code class=\"language-text\">const mediump int</code></td>\n<td>16</td>\n<td>224</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">gl_MaxDrawBuffers</code></td>\n<td><code class=\"language-text\">const mediump int</code></td>\n<td>1</td>\n<td>4</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">gl_MinProgramTexelOffset</code></td>\n<td><code class=\"language-text\">const mediump int</code></td>\n<td>N/A</td>\n<td>-8</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">gl_MaxProgramTexelOffset</code></td>\n<td><code class=\"language-text\">const mediump int</code></td>\n<td>N/A</td>\n<td>7</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"built-in-uniforms\"><a href=\"#built-in-uniforms\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Built-in Uniforms</h3>\n<table>\n<thead>\n<tr>\n<th>Uniform</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">gl_DepthRange</code></td>\n<td><code class=\"language-text\">gl_DepthRangeParameters</code></td>\n<td>Specifies depth range in window coordinates. If an implementation does not support highp precision in the fragment language, and state is listed as highp, then that state will only be available as mediump in the fragment language.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">struct gl_DepthRangeParameters {\n  highp float near; // n\n  highp float far; // f\n  highp float diff; // f - n\n};</code></pre></div>\n<h2 id=\"glsl-built-in-functions\"><a href=\"#glsl-built-in-functions\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GLSL Built-in Functions</h2>\n<h3 id=\"common-functions\"><a href=\"#common-functions\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Common Functions</h3>\n<p><code class=\"language-text\">T</code> can be <code class=\"language-text\">float</code>, <code class=\"language-text\">vec2</code>, <code class=\"language-text\">vec3</code>, <code class=\"language-text\">vec4</code>. Component-wise operation on vectors.</p>\n<p>| <code class=\"language-text\">T abs(T x)</code>          | absolute value |\n| <code class=\"language-text\">T sign(T x)</code>         | returns -1.0, 0.0, or 1.0 |\n| <code class=\"language-text\">T floor(T x)</code>        | nearest integer &#x3C;= x |\n| <code class=\"language-text\">T ceil(T x)</code>         |  |\n| <code class=\"language-text\">T fract(T x)</code>        | <code class=\"language-text\">x - floor(x)</code> |\n| <code class=\"language-text\">T mod(T x, T y)</code>     | modulus |\n| <code class=\"language-text\">T mod(T x, float y)</code> |  |\n| <code class=\"language-text\">T min(T x, T y)</code>     | minimum value |\n| <code class=\"language-text\">T min(T x, float y)</code> |  |\n| <code class=\"language-text\">T max(T x, T y)</code>     | maximum value |\n| <code class=\"language-text\">T max(T x, float y)</code> |  |\n| <code class=\"language-text\">T clamp(T x, T minVal, T maxVal)</code>         | <code class=\"language-text\">min(max(x, minVal), maxVal)</code> |\n| <code class=\"language-text\">T clamp(T x, float minVal, float maxVal)</code> | |\n| <code class=\"language-text\">T mix(T x, T y, T a)</code>     | linear blend of x and y |\n| <code class=\"language-text\">T mix(T x, T y, float a)</code> | |\n| <code class=\"language-text\">T step(T edge, T x)</code>      | 0.0 if x &#x3C; edge, else 1.0 |\n| <code class=\"language-text\">T step(float edge, T x)</code>  | |\n| <code class=\"language-text\">T smoothstep(T edge0, T edge1, T x)</code> | clip and smooth |\n| <code class=\"language-text\">T smoothstep(float edge0, float edge1, T x)</code> |  |</p>\n<h3 id=\"geometric-functions\"><a href=\"#geometric-functions\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Geometric Functions</h3>\n<p><code class=\"language-text\">T</code> can be <code class=\"language-text\">float</code>, <code class=\"language-text\">vec2</code>, <code class=\"language-text\">vec3</code>, <code class=\"language-text\">vec4</code>. These functions operate on vectors as vectors, not component-wise.</p>\n<p>| <code class=\"language-text\">float length(T x)</code>               | length of vector |\n| <code class=\"language-text\">float distance(T p0, T p1)</code>      | distance between points |\n| <code class=\"language-text\">float dot(T x, T y)</code>             | dot product |\n| <code class=\"language-text\">vec3 cross(vec3 x, vec3 y)</code>      | cross product |\n| <code class=\"language-text\">T normalize(T x)</code>                | normalize vector to length 1 |\n| <code class=\"language-text\">T faceforward(T N, T I, T Nref)</code> | returns N if dot(Nref, I) &#x3C; 0, else -N |\n| <code class=\"language-text\">T reflect(T I, T N)</code>             | reflection direction I - 2 * dot(N,I) * N |\n| <code class=\"language-text\">T refract(T I, T N, float eta)</code>  | refraction vector |</p>\n<h3 id=\"matrix-functions\"><a href=\"#matrix-functions\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Matrix Functions</h3>\n<p>Type mat is any matrix type.</p>\n<p>| <code class=\"language-text\">mat matrixCompMult(mat x, mat y)</code> | multiply x by y component-wise |</p>\n<h3 id=\"vector-relational-functions\"><a href=\"#vector-relational-functions\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vector Relational Functions</h3>\n<p>Compare x and y component-wise. Sizes of input and return vectors for a particular call must match.\nType bvec is bvecn; vec is vecn; ivec is ivecn (where n is 2, 3, or 4). T is the union of vec and ivec.</p>\n<p>| <code class=\"language-text\">bvec lessThan(T x, T y)</code>         | x &#x3C; y |\n| <code class=\"language-text\">bvec lessThanEqual(T x, T y)</code>    | x &#x3C;= y |\n| <code class=\"language-text\">bvec greaterThan(T x, T y)</code>      | x > y |\n| <code class=\"language-text\">bvec greaterThanEqual(T x, T y)</code> | x >= y |\n| <code class=\"language-text\">bvec equal(T x, T y)</code>            | |\n| <code class=\"language-text\">bvec equal(bvec x, bvec y)</code>      | x == y |\n| <code class=\"language-text\">bvec notEqual(T x, T y)</code>         | |\n| <code class=\"language-text\">bvec notEqual(bvec x, bvec y)</code>   | x != y |\n| <code class=\"language-text\">bool any(bvec x)</code>                | true if any component of x is true |\n| <code class=\"language-text\">bool all(bvec x)</code>                | true if all components of x are true |\n| <code class=\"language-text\">bvec not(bvec x)</code>                | logical complement of <code class=\"language-text\">x</code> |</p>\n<h3 id=\"texture-lookup-functions\"><a href=\"#texture-lookup-functions\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Texture Lookup Functions</h3>\n<p>Available in vertex and fragment shaders:</p>\n<p>| <code class=\"language-text\">vec4 texture2D(sampler2D sampler, vec2 coord)</code> |\n| <code class=\"language-text\">vec4 texture2DProj(sampler2D sampler, vec3 coord)</code> |\n| <code class=\"language-text\">vec4 texture2DProj(sampler2D sampler, vec4 coord)</code> |\n| <code class=\"language-text\">vec4 textureCube(samplerCube sampler, vec3 coord)</code> |</p>\n<p>Available only in vertex shaders.</p>\n<p>| <code class=\"language-text\">vec4 texture2DLod(sampler2D sampler, vec2 coord, float lod)</code> |\n| <code class=\"language-text\">vec4 texture2DProjLod(sampler2D sampler, vec3 coord, float lod)</code> |\n| <code class=\"language-text\">vec4 texture2DProjLod(sampler2D sampler, vec4 coord, float lod)</code> |\n| <code class=\"language-text\">vec4 textureCubeLod(samplerCube sampler, vec3 coord, float lod)</code> |</p>\n<p>Available only in fragment shaders.</p>\n<p>| <code class=\"language-text\">vec4 texture2D(sampler2D sampler, vec2 coord, float bias)</code> |\n| <code class=\"language-text\">vec4 texture2DProj(sampler2D sampler, vec3 coord, float bias)</code> |\n| <code class=\"language-text\">vec4 texture2DProj(sampler2D sampler, vec4 coord, float bias)</code> |\n| <code class=\"language-text\">vec4 textureCube(samplerCube sampler, vec3 coord, float bias)</code> |</p>\n<h3 id=\"texture-lookup-functions-88\"><a href=\"#texture-lookup-functions-88\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Texture Lookup Functions [8.8]</h3>\n<p>The function textureSize returns the dimensions of level lod for the texture bound to sampler, as described in [2.11.9] of the OpenGL ES 3.0 specification, under “Texture Size Query”. The initial “g” in a type name is a placeholder for nothing, “i”, or “u”.</p>\n<p>| <code class=\"language-text\">highp ivec{2,3} textureSize(gsampler{2,3}D sampler, int lod);</code> |\n| <code class=\"language-text\">highp ivec2 textureSize(gsamplerCube sampler, int lod);</code> |\n| <code class=\"language-text\">highp ivec2 textureSize(sampler2DShadow sampler, int lod);</code> |\n| <code class=\"language-text\">highp ivec2 textureSize(samplerCubeShadow sampler, int lod);</code> |\n| <code class=\"language-text\">highp ivec3 textureSize(gsampler2DArray sampler, int lod);</code> |\n| <code class=\"language-text\">highp ivec3 textureSize(sampler2DArrayShadow sampler, int lod);</code> |</p>\n<p>Texture lookup functions using samplers are available to vertex and fragment shaders. The initial “g” in a type name is a placeholder for nothing, “i”, or “u”.</p>\n<p>| <code class=\"language-text\">gvec4 texture(gsampler{2,3}D sampler, vec{2,3} P [, float bias]);</code> |\n| <code class=\"language-text\">gvec4 texture(gsamplerCube sampler, vec3 P [, float bias]);</code> |\n| <code class=\"language-text\">float texture(sampler2DShadow sampler, vec3 P [, float bias]);</code> |\n| <code class=\"language-text\">float texture(samplerCubeShadow sampler, vec4 P [, float bias]);</code> |\n| <code class=\"language-text\">gvec4 texture(gsampler2DArray sampler, vec3 P [, float bias]);</code> |\n| <code class=\"language-text\">float texture(sampler2DArrayShadow sampler, vec4 P);</code> |\n| <code class=\"language-text\">gvec4 textureProj(gsampler2D sampler, vec{3,4} P [, float bias]);</code> |\n| <code class=\"language-text\">gvec4 textureProj(gsampler3D sampler, vec4 P [, float bias]);</code> |\n| <code class=\"language-text\">float textureProj(sampler2DShadow sampler, vec4 P [, float bias]);</code> |\n| <code class=\"language-text\">gvec4 textureLod(gsampler{2,3}D sampler, vec{2,3} P, float lod);</code> |\n| <code class=\"language-text\">gvec4 textureLod(gsamplerCube sampler, vec3 P, float lod);</code> |\n| <code class=\"language-text\">float textureLod(sampler2DShadow sampler, vec3 P, float lod);</code> |\n| <code class=\"language-text\">gvec4 textureLod(gsampler2DArray sampler, vec3 P, float lod);</code> |\n| <code class=\"language-text\">gvec4 textureOffset(gsampler2D sampler, vec2 P, ivec2 offset [, float bias]);</code> |\n| <code class=\"language-text\">gvec4 textureOffset(gsampler3D sampler, vec3 P, ivec3 offset [, float bias]);</code> |\n| <code class=\"language-text\">float textureOffset(sampler2DShadow sampler, vec3 P, ivec2 offset [, float bias]);</code> |\n| <code class=\"language-text\">gvec4 textureOffset(gsampler2DArray sampler, vec3 P, ivec2 offset [, float bias]);</code> |\n| <code class=\"language-text\">gvec4 texelFetch(gsampler2D sampler, ivec2 P, int lod);</code> |\n| <code class=\"language-text\">gvec4 texelFetch(gsampler3D sampler, ivec3 P, int lod);</code> |\n| <code class=\"language-text\">gvec4 texelFetch(gsampler2DArray sampler, ivec3 P, int lod);</code> |\n| <code class=\"language-text\">gvec4 texelFetchOffset(gsampler2D sampler, ivec2 P, int lod, ivec2 offset);</code> |\n| <code class=\"language-text\">gvec4 texelFetchOffset(gsampler3D sampler, ivec3 P, int lod, ivec3 offset);</code> |\n| <code class=\"language-text\">gvec4 texelFetchOffset(gsampler2DArray sampler, ivec3 P, int lod, ivec2 offset);</code> |\n| <code class=\"language-text\">gvec4 textureProjOffset(gsampler2D sampler, vec3 P, ivec2 offset [, float bias]);</code> |\n| <code class=\"language-text\">gvec4 textureProjOffset(gsampler2D sampler, vec4 P, ivec2 offset [, float bias]);</code> |\n| <code class=\"language-text\">gvec4 textureProjOffset(gsampler3D sampler, vec4 P, ivec3 offset [, float bias]);</code> |\n| <code class=\"language-text\">float textureProjOffset(sampler2DShadow sampler, vec4 P, ivec2 offset [,float bias]);</code> |\n| <code class=\"language-text\">gvec4 textureLodOffset(gsampler2D sampler, vec2 P, float lod, ivec2 offset);</code> |\n| <code class=\"language-text\">gvec4 textureLodOffset(gsampler3D sampler, vec3 P, float lod, ivec3 offset);</code> |\n| <code class=\"language-text\">float textureLodOffset(sampler2DShadow sampler, vec3 P, float lod, ivec2 offset);</code> |\n| <code class=\"language-text\">gvec4 textureLodOffset(gsampler2DArray sampler, vec3 P, float lod, ivec2 offset);</code> |\n| <code class=\"language-text\">gvec4 textureProjLod(gsampler2D sampler, vec3 P, float lod);</code> |\n| <code class=\"language-text\">gvec4 textureProjLod(gsampler2D sampler, vec4 P, float lod);</code> |\n| <code class=\"language-text\">gvec4 textureProjLod(gsampler3D sampler, vec4 P, float lod);</code> |\n| <code class=\"language-text\">float textureProjLod(sampler2DShadow sampler, vec4 P, float lod);</code> |\n| <code class=\"language-text\">gvec4 textureProjLodOffset(gsampler2D sampler, vec3 P, float lod, ivec2 offset);</code> |\n| <code class=\"language-text\">gvec4 textureProjLodOffset(gsampler2D sampler, vec4 P, float lod, ivec2 offset);</code> |\n| <code class=\"language-text\">gvec4 textureProjLodOffset(gsampler3D sampler, vec4 P, float lod, ivec3 offset);</code> |\n| <code class=\"language-text\">float textureProjLodOffset(sampler2DShadow sampler, vec4 P, float lod, ivec2 offset);</code> |\n| <code class=\"language-text\">gvec4 textureGrad(gsampler2D sampler, vec2 P, vec2 dPdx, vec2 dPdy);</code> |\n| <code class=\"language-text\">gvec4 textureGrad(gsampler3D sampler, vec3 P, vec3 dPdx, vec3 dPdy);</code> |\n| <code class=\"language-text\">gvec4 textureGrad(gsamplerCube sampler, vec3 P, vec3 dPdx, vec3 dPdy);</code> |\n| <code class=\"language-text\">float textureGrad(sampler2DShadow sampler, vec3 P, vec2 dPdx, vec2 dPdy);</code> |\n| <code class=\"language-text\">float textureGrad(samplerCubeShadow sampler, vec4 P, vec3 dPdx, vec3 dPdy);</code> |\n| <code class=\"language-text\">gvec4 textureGrad(gsampler2DArray sampler, vec3 P, vec2 dPdx, vec2 dPdy);</code> |\n| <code class=\"language-text\">float textureGrad(sampler2DArrayShadow sampler, vec4 P, vec2 dPdx, vec2 dPdy);</code> |\n| <code class=\"language-text\">gvec4 textureGradOffset(gsampler2D sampler, vec2 P, vec2 dPdx, vec2 dPdy, ivec2 offset);</code> |\n| <code class=\"language-text\">gvec4 textureGradOffset(gsampler3D sampler, vec3 P, vec3 dPdx, vec3 dPdy, ivec3 offset);</code> |\n| <code class=\"language-text\">float textureGradOffset(sampler2DShadow sampler, vec3 P, vec2 dPdx, vec2 dPdy, ivec2 offset);</code> |\n| <code class=\"language-text\">gvec4 textureGradOffset(gsampler2DArray sampler, vec3 P, vec2 dPdx, vec2 dPdy, ivec2 offset);</code> |\n| <code class=\"language-text\">float textureGradOffset(sampler2DArrayShadow sampler, vec4 P, vec2 dPdx, vec2 dPdy, ivec2 offset);</code> |\n| <code class=\"language-text\">gvec4 textureProjGrad(gsampler2D sampler, vec3 P, vec2 dPdx, vec2 dPdy);</code> |\n| <code class=\"language-text\">gvec4 textureProjGrad(gsampler2D sampler, vec4 P, vec2 dPdx, vec2 dPdy);</code> |\n| <code class=\"language-text\">gvec4 textureProjGrad(gsampler3D sampler, vec4 P, vec3 dPdx, vec3 dPdy);</code> |\n| <code class=\"language-text\">float textureProjGrad(sampler2DShadow sampler, vec4 P, vec2 dPdx, vec2 dPdy);</code> |\n| <code class=\"language-text\">gvec4 textureProjGradOffset(gsampler2D sampler, vec3 P, vec2 dPdx, vec2 dPdy, ivec2 offset);</code> |\n| <code class=\"language-text\">gvec4 textureProjGradOffset(gsampler2D sampler, vec4 P, vec2 dPdx, vec2 dPdy, ivec2 offset);</code> |\n| <code class=\"language-text\">gvec4 textureProjGradOffset(gsampler3D sampler, vec4 P, vec3 dPdx, vec3 dPdy, ivec3 offset);</code> |\n| <code class=\"language-text\">float textureProjGradOffset(sampler2DShadow sampler, vec4 P, vec2 dPdx, vec2 dPdy, ivec2 offset);</code> |</p>\n<h3 id=\"fragment-processing-functions-89\"><a href=\"#fragment-processing-functions-89\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fragment Processing Functions [8.9]</h3>\n<p>Approximated using local differencing.</p>\n<p>| <code class=\"language-text\">T dFdx(T p); Derivative in x</code> |\n| <code class=\"language-text\">T dFdy(T p); Derivative in y</code> |\n| <code class=\"language-text\">T fwidth(T p); abs (dFdx (p)) + abs (dFdy (p));</code> |</p>"}