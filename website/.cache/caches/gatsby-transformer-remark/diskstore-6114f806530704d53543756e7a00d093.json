{"expireTime":9007200809748943000,"key":"transformer-remark-markdown-html-ast-fe3abc141212bf590ae9288707d959dd-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-autolink-headers-","val":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{"id":"transform-feedback-webgl2"},"children":[{"type":"element","tagName":"a","properties":{"href":"#transform-feedback-webgl2","aria-hidden":true,"class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Transform Feedback (WebGL2)","position":{"start":{"line":1,"column":3,"offset":2},"end":{"line":1,"column":30,"offset":29}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":30,"offset":29}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Transform Feedback operations represent a GPGPU/GPU compute technique where GPU draw calls are configured so that they write some specified outputs from the vertex shaders to (one or more) GPU memory buffers that have been provided by the application. Applications use transform feedback to data processing from CPU to GPU, where multiple parallel execution units will be used for processing. Data is handled in form of ","position":{"start":{"line":3,"column":1,"offset":31},"end":{"line":3,"column":421,"offset":451}}},{"type":"raw","value":"<code class=\"language-text\">Buffer</code>","position":{"start":{"line":3,"column":421,"offset":451},"end":{"line":3,"column":429,"offset":459}}},{"type":"text","value":" objects, i.e. data resides in the GPU memory.","position":{"start":{"line":3,"column":429,"offset":459},"end":{"line":3,"column":475,"offset":505}}}],"position":{"start":{"line":3,"column":1,"offset":31},"end":{"line":3,"column":475,"offset":505}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Transform Feedback operations write their output into ","position":{"start":{"line":5,"column":1,"offset":507},"end":{"line":5,"column":55,"offset":561}}},{"type":"raw","value":"<code class=\"language-text\">Buffer</code>","position":{"start":{"line":5,"column":55,"offset":561},"end":{"line":5,"column":63,"offset":569}}},{"type":"text","value":" instances. These buffers can then be directly set as attributes on ","position":{"start":{"line":5,"column":63,"offset":569},"end":{"line":5,"column":131,"offset":637}}},{"type":"raw","value":"<code class=\"language-text\">Model</code>","position":{"start":{"line":5,"column":131,"offset":637},"end":{"line":5,"column":138,"offset":644}}},{"type":"text","value":" or ","position":{"start":{"line":5,"column":138,"offset":644},"end":{"line":5,"column":142,"offset":648}}},{"type":"raw","value":"<code class=\"language-text\">VertexArray</code>","position":{"start":{"line":5,"column":142,"offset":648},"end":{"line":5,"column":155,"offset":661}}},{"type":"text","value":" for regular rendering operations.","position":{"start":{"line":5,"column":155,"offset":661},"end":{"line":5,"column":189,"offset":695}}}],"position":{"start":{"line":5,"column":1,"offset":507},"end":{"line":5,"column":189,"offset":695}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Buffers can be read back to the CPU, but this has a high performance penaltyh. Ideally, the application's logic can be designed so that CPU access is not required which avoids expensive CPU and GPU sync.","position":{"start":{"line":7,"column":1,"offset":697},"end":{"line":7,"column":204,"offset":900}}}],"position":{"start":{"line":7,"column":1,"offset":697},"end":{"line":7,"column":204,"offset":900}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To run a single transform feedback operation:","position":{"start":{"line":9,"column":1,"offset":902},"end":{"line":9,"column":46,"offset":947}}}],"position":{"start":{"line":9,"column":1,"offset":902},"end":{"line":9,"column":46,"offset":947}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Create a ","position":{"start":{"line":11,"column":3,"offset":951},"end":{"line":11,"column":12,"offset":960}}},{"type":"raw","value":"<code class=\"language-text\">Program</code>","position":{"start":{"line":11,"column":12,"offset":960},"end":{"line":11,"column":21,"offset":969}}},{"type":"text","value":" or a ","position":{"start":{"line":11,"column":21,"offset":969},"end":{"line":11,"column":27,"offset":975}}},{"type":"raw","value":"<code class=\"language-text\">Model</code>","position":{"start":{"line":11,"column":27,"offset":975},"end":{"line":11,"column":34,"offset":982}}},{"type":"text","value":" with varyings (","position":{"start":{"line":11,"column":34,"offset":982},"end":{"line":11,"column":50,"offset":998}}},{"type":"raw","value":"<code class=\"language-text\">out</code>","position":{"start":{"line":11,"column":50,"offset":998},"end":{"line":11,"column":55,"offset":1003}}},{"type":"text","value":" variables) declared in the vertex shader's GLSL code, and provide the names of these varyings to the ","position":{"start":{"line":11,"column":55,"offset":1003},"end":{"line":11,"column":157,"offset":1105}}},{"type":"raw","value":"<code class=\"language-text\">Program</code>","position":{"start":{"line":11,"column":157,"offset":1105},"end":{"line":11,"column":166,"offset":1114}}},{"type":"text","value":" constructor.","position":{"start":{"line":11,"column":166,"offset":1114},"end":{"line":11,"column":179,"offset":1127}}}],"position":{"start":{"line":11,"column":1,"offset":949},"end":{"line":11,"column":179,"offset":1127}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Use ","position":{"start":{"line":12,"column":3,"offset":1130},"end":{"line":12,"column":7,"offset":1134}}},{"type":"raw","value":"<code class=\"language-text\">Program.draw()</code>","position":{"start":{"line":12,"column":7,"offset":1134},"end":{"line":12,"column":23,"offset":1150}}},{"type":"text","value":" or ","position":{"start":{"line":12,"column":23,"offset":1150},"end":{"line":12,"column":27,"offset":1154}}},{"type":"raw","value":"<code class=\"language-text\">Model.draw()</code>","position":{"start":{"line":12,"column":27,"offset":1154},"end":{"line":12,"column":41,"offset":1168}}},{"type":"text","value":" with a ","position":{"start":{"line":12,"column":41,"offset":1168},"end":{"line":12,"column":49,"offset":1176}}},{"type":"raw","value":"<code class=\"language-text\">transformFeedback</code>","position":{"start":{"line":12,"column":49,"offset":1176},"end":{"line":12,"column":68,"offset":1195}}},{"type":"text","value":" parameter.","position":{"start":{"line":12,"column":68,"offset":1195},"end":{"line":12,"column":79,"offset":1206}}}],"position":{"start":{"line":12,"column":1,"offset":1128},"end":{"line":12,"column":79,"offset":1206}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">Model.transform()</code>","position":{"start":{"line":13,"column":3,"offset":1209},"end":{"line":13,"column":22,"offset":1228}}},{"type":"text","value":" is equivalent to ","position":{"start":{"line":13,"column":22,"offset":1228},"end":{"line":13,"column":40,"offset":1246}}},{"type":"raw","value":"<code class=\"language-text\">Model.draw()</code>","position":{"start":{"line":13,"column":40,"offset":1246},"end":{"line":13,"column":54,"offset":1260}}},{"type":"text","value":" but automatically turns off the fragment shader stage.","position":{"start":{"line":13,"column":54,"offset":1260},"end":{"line":13,"column":109,"offset":1315}}}],"position":{"start":{"line":13,"column":1,"offset":1207},"end":{"line":13,"column":109,"offset":1315}}},{"type":"text","value":"\n"}],"position":{"start":{"line":11,"column":1,"offset":949},"end":{"line":13,"column":109,"offset":1315}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Alternatively, the more powerful ","position":{"start":{"line":15,"column":1,"offset":1317},"end":{"line":15,"column":34,"offset":1350}}},{"type":"raw","value":"<code class=\"language-text\">Transform</code>","position":{"start":{"line":15,"column":34,"offset":1350},"end":{"line":15,"column":45,"offset":1361}}},{"type":"text","value":" class is preferable if you don't want to deal with setting up ","position":{"start":{"line":15,"column":45,"offset":1361},"end":{"line":15,"column":108,"offset":1424}}},{"type":"raw","value":"<code class=\"language-text\">Program</code>","position":{"start":{"line":15,"column":108,"offset":1424},"end":{"line":15,"column":117,"offset":1433}}},{"type":"text","value":" and ","position":{"start":{"line":15,"column":117,"offset":1433},"end":{"line":15,"column":122,"offset":1438}}},{"type":"raw","value":"<code class=\"language-text\">TransformFeedback</code>","position":{"start":{"line":15,"column":122,"offset":1438},"end":{"line":15,"column":141,"offset":1457}}},{"type":"text","value":" instances, or if intend to run a repeating, double buffered transform feedback loop.","position":{"start":{"line":15,"column":141,"offset":1457},"end":{"line":15,"column":226,"offset":1542}}}],"position":{"start":{"line":15,"column":1,"offset":1317},"end":{"line":15,"column":226,"offset":1542}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"usage"},"children":[{"type":"element","tagName":"a","properties":{"href":"#usage","aria-hidden":true,"class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Usage","position":{"start":{"line":18,"column":4,"offset":1548},"end":{"line":18,"column":9,"offset":1553}}}],"position":{"start":{"line":18,"column":1,"offset":1545},"end":{"line":18,"column":9,"offset":1553}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Transform<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@luma.gl/core'</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":20,"column":1,"offset":1555},"end":{"line":22,"column":4,"offset":1605}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"use-case--specify-source-and-destination-buffers"},"children":[{"type":"element","tagName":"a","properties":{"href":"#use-case--specify-source-and-destination-buffers","aria-hidden":true,"class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Use case : Specify source and destination buffers.","position":{"start":{"line":24,"column":5,"offset":1611},"end":{"line":24,"column":55,"offset":1661}}}],"position":{"start":{"line":24,"column":1,"offset":1607},"end":{"line":24,"column":55,"offset":1661}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Create a ","position":{"start":{"line":26,"column":1,"offset":1663},"end":{"line":26,"column":10,"offset":1672}}},{"type":"raw","value":"<code class=\"language-text\">Transform</code>","position":{"start":{"line":26,"column":10,"offset":1672},"end":{"line":26,"column":21,"offset":1683}}},{"type":"text","value":" object by passing, vs (vertex shader), source buffer(s), varyings (output variable names in vertex shader) and destination buffers. Then call ","position":{"start":{"line":26,"column":21,"offset":1683},"end":{"line":26,"column":164,"offset":1826}}},{"type":"raw","value":"<code class=\"language-text\">run</code>","position":{"start":{"line":26,"column":164,"offset":1826},"end":{"line":26,"column":169,"offset":1831}}},{"type":"text","value":" to perform one transform feedback iteration.","position":{"start":{"line":26,"column":169,"offset":1831},"end":{"line":26,"column":214,"offset":1876}}}],"position":{"start":{"line":26,"column":1,"offset":1663},"end":{"line":26,"column":214,"offset":1876}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">VS</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`\\\n#version 300 es\nattribute float inValue;\nvarying float outValue;\n\nvoid main()\n{\n  outValue = 2.0 * inValue;\n}\n`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> sourceData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">57</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> sourceBuffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Buffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">:</span> sourceData<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Default values applied for size (1) and type (gl.FLOAT)</span>\n<span class=\"token keyword\">const</span> feedbackBuffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Buffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>byteLength<span class=\"token punctuation\">:</span> sourceData<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> transform <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Transform</span><span class=\"token punctuation\">(</span>gl2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  sourceBuffers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    inValue<span class=\"token punctuation\">:</span> sourceBuffer\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  feedbackBuffers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    outValue<span class=\"token punctuation\">:</span> feedbackBuffer\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  vs<span class=\"token punctuation\">:</span> <span class=\"token constant\">VS</span><span class=\"token punctuation\">,</span>\n  varyings<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'outValue'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  elementCount<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Perform one transform feedback iteration</span>\ntransform<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":28,"column":1,"offset":1878},"end":{"line":60,"column":4,"offset":2532}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"use-case--create-destination-buffers-automatically"},"children":[{"type":"element","tagName":"a","properties":{"href":"#use-case--create-destination-buffers-automatically","aria-hidden":true,"class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Use case : Create destination buffers automatically.","position":{"start":{"line":62,"column":5,"offset":2538},"end":{"line":62,"column":57,"offset":2590}}}],"position":{"start":{"line":62,"column":1,"offset":2534},"end":{"line":62,"column":57,"offset":2590}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">Transform</code>","position":{"start":{"line":64,"column":1,"offset":2592},"end":{"line":64,"column":12,"offset":2603}}},{"type":"text","value":" can internally create destination buffers (i.e. feedback buffers), when ","position":{"start":{"line":64,"column":12,"offset":2603},"end":{"line":64,"column":85,"offset":2676}}},{"type":"raw","value":"<code class=\"language-text\">feedbackMap</code>","position":{"start":{"line":64,"column":85,"offset":2676},"end":{"line":64,"column":98,"offset":2689}}},{"type":"text","value":" is provided. Each destination buffer is created with same settings and layout as corresponding source buffer as per ","position":{"start":{"line":64,"column":98,"offset":2689},"end":{"line":64,"column":215,"offset":2806}}},{"type":"raw","value":"<code class=\"language-text\">feedbackMap</code>","position":{"start":{"line":64,"column":215,"offset":2806},"end":{"line":64,"column":228,"offset":2819}}},{"type":"text","value":".","position":{"start":{"line":64,"column":228,"offset":2819},"end":{"line":64,"column":229,"offset":2820}}}],"position":{"start":{"line":64,"column":1,"offset":2592},"end":{"line":64,"column":229,"offset":2820}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> transform <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Transform</span><span class=\"token punctuation\">(</span>gl2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  sourceBuffers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    inValue<span class=\"token punctuation\">:</span> sourceBuffer\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  feedbackMap<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    inValue<span class=\"token punctuation\">:</span> <span class=\"token string\">'outValue'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  vs<span class=\"token punctuation\">:</span> <span class=\"token constant\">VS</span><span class=\"token punctuation\">,</span>\n  varyings<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'outValue'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  elementCount<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":66,"column":1,"offset":2822},"end":{"line":79,"column":4,"offset":3025}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"use-case--multiple-iterations-using-swap"},"children":[{"type":"element","tagName":"a","properties":{"href":"#use-case--multiple-iterations-using-swap","aria-hidden":true,"class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Use case : Multiple iterations using swap().","position":{"start":{"line":80,"column":5,"offset":3030},"end":{"line":80,"column":49,"offset":3074}}}],"position":{"start":{"line":80,"column":1,"offset":3026},"end":{"line":80,"column":49,"offset":3074}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When ","position":{"start":{"line":82,"column":1,"offset":3076},"end":{"line":82,"column":6,"offset":3081}}},{"type":"raw","value":"<code class=\"language-text\">feedbackMap</code>","position":{"start":{"line":82,"column":6,"offset":3081},"end":{"line":82,"column":19,"offset":3094}}},{"type":"text","value":" is specified buffers can be swapped using a single call to ","position":{"start":{"line":82,"column":19,"offset":3094},"end":{"line":82,"column":79,"offset":3154}}},{"type":"raw","value":"<code class=\"language-text\">swap()</code>","position":{"start":{"line":82,"column":79,"offset":3154},"end":{"line":82,"column":87,"offset":3162}}},{"type":"text","value":", this is useful for cases like particle simulation, where output of one transform feedback iteration is piped as input to the next iteration.","position":{"start":{"line":82,"column":87,"offset":3162},"end":{"line":82,"column":229,"offset":3304}}}],"position":{"start":{"line":82,"column":1,"offset":3076},"end":{"line":82,"column":229,"offset":3304}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Setup Transform with `souceDestinationMap` as above</span>\n\ntransform<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> bufferWithNewValues <span class=\"token operator\">=</span> transform<span class=\"token punctuation\">.</span><span class=\"token function\">getBuffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'outValue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token comment\">// Render using 'bufferWithNewValues'</span>\n<span class=\"token operator\">...</span>\n\n<span class=\"token comment\">//swap buffers</span>\ntransform<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntransform<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbufferWithNewValues <span class=\"token operator\">=</span> transform<span class=\"token punctuation\">.</span><span class=\"token function\">getBuffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'outValue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token comment\">// Render using 'bufferWithNewValues'</span>\n<span class=\"token operator\">...</span></code></pre></div>","position":{"start":{"line":84,"column":1,"offset":3306},"end":{"line":102,"column":4,"offset":3647}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"use-case--update-one-or-more-buffers-using-update-method"},"children":[{"type":"element","tagName":"a","properties":{"href":"#use-case--update-one-or-more-buffers-using-update-method","aria-hidden":true,"class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Use case : Update one or more buffers using update() method..","position":{"start":{"line":104,"column":5,"offset":3653},"end":{"line":104,"column":66,"offset":3714}}}],"position":{"start":{"line":104,"column":1,"offset":3649},"end":{"line":104,"column":66,"offset":3714}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Once ","position":{"start":{"line":106,"column":1,"offset":3716},"end":{"line":106,"column":6,"offset":3721}}},{"type":"raw","value":"<code class=\"language-text\">Transform</code>","position":{"start":{"line":106,"column":6,"offset":3721},"end":{"line":106,"column":17,"offset":3732}}},{"type":"text","value":" object is constructed and used, one or more source or destination buffers can be updated using ","position":{"start":{"line":106,"column":17,"offset":3732},"end":{"line":106,"column":113,"offset":3828}}},{"type":"raw","value":"<code class=\"language-text\">update</code>","position":{"start":{"line":106,"column":113,"offset":3828},"end":{"line":106,"column":121,"offset":3836}}},{"type":"text","value":".","position":{"start":{"line":106,"column":121,"offset":3836},"end":{"line":106,"column":122,"offset":3837}}}],"position":{"start":{"line":106,"column":1,"offset":3716},"end":{"line":106,"column":122,"offset":3837}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// transform is set up as above</span>\n<span class=\"token operator\">...</span>\n\n<span class=\"token comment\">// update buffer binding for 'inValue' attribute</span>\n<span class=\"token keyword\">const</span> newSourceBuffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Buffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">:</span> newSourceData<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntransform<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  sourceBuffers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    inValue<span class=\"token punctuation\">:</span> newSourceBuffer\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// now data is provided from newly bound buffer.</span>\ntransform<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":108,"column":1,"offset":3839},"end":{"line":122,"column":4,"offset":4139}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":123,"column":1,"offset":4140}}}}