{"expireTime":9007200809748944000,"key":"transformer-remark-markdown-html-0fe4724e50eb7b0e1a8e2cc4d387a705-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-autolink-headers-","val":"<h1 id=\"readback-copy-and-blit\"><a href=\"#readback-copy-and-blit\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Readback, Copy and Blit</h1>\n<p><code class=\"language-text\">luma.gl</code> offers a set of functions that copy or blit data from and to Texture and Framebuffer objects. Image data can also be copied into Buffer, TypedArray, Images or Urls.</p>\n<h2 id=\"readback-functions\"><a href=\"#readback-functions\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Readback Functions</h2>\n<h3 id=\"readpixelstoarraysource--framebuffertexture--options-object--typedarray\"><a href=\"#readpixelstoarraysource--framebuffertexture--options-object--typedarray\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>readPixelsToArray(source : Framebuffer|Texture [, options: Object]) : TypedArray</h3>\n<p>Reads data from a <code class=\"language-text\">Framebuffer</code> or <code class=\"language-text\">Texture</code> object into a TypedArray object and returns it. A new TypedArray object is created when not provided. This method requires a sync between CPU and GPU as pixel values are copied from GPU texture memory to CPU Array object memory. This could introduce a delay as it waits for GPU to finish updating the texture. For asynchronous read, check <code class=\"language-text\">copyToBuffer</code> method.</p>\n<ul>\n<li><code class=\"language-text\">source</code> (<code class=\"language-text\">Texture</code> or <code class=\"language-text\">Framebuffer</code>) - This object will be bound and data copied from it.</li>\n</ul>\n<p>  Optional parameters:</p>\n<ul>\n<li><code class=\"language-text\">options.sourceX</code> - (<em>number</em>, default: 0) X offset of the area to be copied,</li>\n<li><code class=\"language-text\">options.sourceY</code> - (<em>number</em>, default: 0) Y offset of the area to be copied,</li>\n<li><code class=\"language-text\">options.sourceFormat</code> - (<em>GLenum</em>, default: GL.RGBA) The format of the data.</li>\n<li><code class=\"language-text\">options.sourceAttachment</code> - (<em>GLenum</em>, default: <code class=\"language-text\">COLOR_ATTACHMENT0</code>) Used to deduce the <code class=\"language-text\">type</code> when not provided.</li>\n<li><code class=\"language-text\">options.target</code> - (<em>TypedArray</em>, default: null) Array object, into which data to be copied, new object is created when not provided.</li>\n<li><code class=\"language-text\">options.sourceWidth</code> - (<em>number</em>, default: source width) The width of the area to be copied.</li>\n<li><code class=\"language-text\">options.sourceHeight</code> - (<em>number</em>, default: source height) The height of the area to be copied.</li>\n<li><code class=\"language-text\">options.sourceType</code> - (<em>GLenum</em>, default: type of <code class=\"language-text\">pixelArray</code> or <code class=\"language-text\">UNSIGNED_BYTE</code>) The type of the data.</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>Reading from floating point textures is dependent on an extension both in WebGL1 and WebGL2.</li>\n<li>When supported, the <code class=\"language-text\">{format: GL.RGBA, type: GL.FLOAT, ...}</code> combination becomes valid for reading from a floating-point color buffer.</li>\n<li>When color attachment is a float texture with format less than 4 channels, i.e, <code class=\"language-text\">GL.R32F</code>, or  <code class=\"language-text\">GL.RG32F</code>, <code class=\"language-text\">readPixels</code> should still be called with a 4 component <code class=\"language-text\">format</code>(<code class=\"language-text\">GL.RGBA</code>), and default value (R:0, G:0, B: 0 and A: 1) will be returned for un-used channel.</li>\n</ul>\n<p>This function makes calls to the following WebGL APIs:</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/readPixels\"><code class=\"language-text\">gl.readPixels</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindFramebuffer\"><code class=\"language-text\">gl.bindFramebuffer</code></a></p>\n<h3 id=\"readpixelstobuffersource--framebuffertexture-options-object--buffer-webgl2\"><a href=\"#readpixelstobuffersource--framebuffertexture-options-object--buffer-webgl2\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>readPixelsToBuffer(source : Framebuffer|Texture, options: Object) : Buffer (WebGL2)</h3>\n<p>Reads data from a <code class=\"language-text\">Framebuffer</code> or <code class=\"language-text\">Texture</code> object into A <code class=\"language-text\">Buffer</code> object and returns it. A new <code class=\"language-text\">Buffer</code> object is created when not provided. This method avoids a sync between CPU and GPU as pixel values are copied from GPU texture memory to GPU Buffer memory. This method returns right away without any delays.</p>\n<p>A CPU and GPU sync will be triggered when the returned buffer data is read using <code class=\"language-text\">buffer.getData()</code>, but applications can delay this read, which can reduces the delay due to the sync, or the sync can be completely avoided by using the <code class=\"language-text\">Buffer</code> as the source of input to the GPU (either as <code class=\"language-text\">ARRAY_BUFFER</code> or <code class=\"language-text\">PIXEL_UNPACK_BUFFER</code>).</p>\n<ul>\n<li><code class=\"language-text\">source</code> (<code class=\"language-text\">Texture</code> or <code class=\"language-text\">Framebuffer</code>) - This object will be bound and data copied from it.</li>\n</ul>\n<p>  Optional parameters:</p>\n<ul>\n<li><code class=\"language-text\">options.sourceX</code> - (<em>number</em>, default: 0) X offset of the area to be copied,</li>\n<li><code class=\"language-text\">options.sourceY</code> - (<em>number</em>, default: 0) Y offset of the area to be copied,</li>\n<li><code class=\"language-text\">options.sourceFormat</code> - (<em>GLenum</em>, default: GL.RGBA) The format of the data.</li>\n<li><code class=\"language-text\">options.target</code> - (<em>Buffer</em>) Buffer object, into which data to be copied, new object is created when not provided.</li>\n<li><code class=\"language-text\">options.targetByteOffset</code> - (<em>number</em>, default: 0) Byte offset from which data should be copied into buffer.</li>\n<li><code class=\"language-text\">options.sourceWidth</code> - (<em>number</em>, default: source.width) The width of the area to be copied,</li>\n<li><code class=\"language-text\">options.sourceHeight</code> - (<em>number</em>, default: source.height) The height of the area to be copied,</li>\n<li><code class=\"language-text\">options.sourceType</code> - (<em>GLenum</em>, default: type of <code class=\"language-text\">target</code> or <code class=\"language-text\">UNSIGNED_BYTE</code>) The type of the data.</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>Reading from floating point textures is dependent on an extension both in WebGL1 and WebGL2.</li>\n<li>When supported, the <code class=\"language-text\">{format: GL.RGBA, type: GL.FLOAT, ...}</code> combination becomes valid for reading from a floating-point color buffer.</li>\n</ul>\n<p>This function makes calls to the following WebGL APIs:</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/readPixels\"><code class=\"language-text\">gl.readPixels</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindFramebuffer\"><code class=\"language-text\">gl.bindFramebuffer</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindBuffer\"><code class=\"language-text\">gl.bindBuffer</code></a></p>\n<h2 id=\"copy-functions\"><a href=\"#copy-functions\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Copy Functions</h2>\n<h3 id=\"copytodataurlsource--framebuffertexture-options-object--data-url\"><a href=\"#copytodataurlsource--framebuffertexture-options-object--data-url\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>copyToDataUrl(source : Framebuffer|Texture, options: Object) : Data URL</h3>\n<p>Reads data form a <code class=\"language-text\">Texture</code> or <code class=\"language-text\">Framebuffer</code> object and returns a <code class=\"language-text\">Data URL</code> containing the pixel data in PNG format.</p>\n<ul>\n<li><code class=\"language-text\">source</code> (<code class=\"language-text\">Texture</code> or <code class=\"language-text\">Framebuffer</code>) - This object will be bound and data copied from it.</li>\n</ul>\n<p>  Optional parameters:</p>\n<ul>\n<li><code class=\"language-text\">options.sourceAttachment</code> - (<em>GLenum</em>, default: <code class=\"language-text\">COLOR_ATTACHMENT0</code>) Used to deduce the <code class=\"language-text\">type</code> when not provided.</li>\n<li><code class=\"language-text\">options.targetMaxHeight</code> - (<em>number</em>, default: Number.MAX<em>SAFE</em>INTEGER) Maximum height of the image to be in returned Data URL.</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>Works only under a browser environment, doesn't work under Node.</li>\n</ul>\n<p>This function makes calls to the following WebGL APIs:</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/readPixels\"><code class=\"language-text\">gl.readPixels</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindFramebuffer\"><code class=\"language-text\">gl.bindFramebuffer</code></a></p>\n<h3 id=\"copytoimagesource--framebuffertexture-options-object--image\"><a href=\"#copytoimagesource--framebuffertexture-options-object--image\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>copyToImage(source : Framebuffer|Texture, options: Object) : Image</h3>\n<p>Reads data form a <code class=\"language-text\">Texture</code> or <code class=\"language-text\">Framebuffer</code> object and copies it to provided image, new <code class=\"language-text\">Image</code> instance is created if not provided.</p>\n<ul>\n<li><code class=\"language-text\">source</code> (<code class=\"language-text\">Texture</code> or <code class=\"language-text\">Framebuffer</code>) - This object will be bound and data copied from it.</li>\n</ul>\n<p>  Optional parameters:</p>\n<ul>\n<li><code class=\"language-text\">options.sourceAttachment</code> - (<em>GLenum</em>, default: <code class=\"language-text\">COLOR_ATTACHMENT0</code>) Used to deduce the <code class=\"language-text\">type</code> when not provided.</li>\n<li><code class=\"language-text\">options.targetImage</code> - (<code class=\"language-text\">Image</code>, Optional) <code class=\"language-text\">Image</code> to to which pixel data to be copied, new one is created if not provide.</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>Works only under a browser environment, doesn't work under Node.</li>\n</ul>\n<p>This function makes calls to the following WebGL APIs:</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/readPixels\"><code class=\"language-text\">gl.readPixels</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindFramebuffer\"><code class=\"language-text\">gl.bindFramebuffer</code></a></p>\n<h3 id=\"copytotexturesource--framebuffertexture-target-texturegl-enum-options-object--texture\"><a href=\"#copytotexturesource--framebuffertexture-target-texturegl-enum-options-object--texture\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>copyToTexture(source : Framebuffer|Texture, target: Texture|GL-enum, options: Object) : Texture</h3>\n<p>Copies pixels from a <code class=\"language-text\">Framebuffer</code> or <code class=\"language-text\">Texture</code> object into the specified area of a two-dimensional texture image or cube-map texture image. (gl.copyTexImage2D, gl.copyTexSubImage2D and gl.copyTexSubImage3D wrapper)</p>\n<ul>\n<li><code class=\"language-text\">source</code> (<code class=\"language-text\">Texture</code> or <code class=\"language-text\">Framebuffer</code>) - If provided this object will be bound and data copied from it.</li>\n<li><code class=\"language-text\">target</code> (<code class=\"language-text\">Texture</code> or <code class=\"language-text\">GL enum</code>) - Texture object or GL enum specifying the target binding point, to which data to be copied. If target binding point is specified, it is assumed that a valid texture object is already bound.</li>\n<li><code class=\"language-text\">options.sourceX</code> (<code class=\"language-text\">GLint</code>, optional, default: 0) - x coordinate of the lower left corner where to start copying.</li>\n<li><code class=\"language-text\">options.sourceY</code> (<code class=\"language-text\">GLint</code>, optional, default: 0) - y coordinate of the lower left corner where to start copying.</li>\n<li><code class=\"language-text\">options.targetX</code> (<code class=\"language-text\">GLint</code>, optional) - X offset with in target texture.</li>\n<li><code class=\"language-text\">options.targetY</code> (<code class=\"language-text\">GLint</code>, optional) - Y offset with in target texture.</li>\n<li><code class=\"language-text\">options.targetZ</code> (<code class=\"language-text\">GLint</code>, optional, WebGL2) - Z offset with in target texture, when using copying into 2D Array of 3D texture.</li>\n<li><code class=\"language-text\">options.width</code> (<code class=\"language-text\">GLint</code>, optional, default: texture.width) - Width of the pixel rectangle to be copied.</li>\n<li><code class=\"language-text\">options.height</code> (<code class=\"language-text\">GLint</code>, optional, default: texture.height) - Height of the pixel rectangle to be copied.</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li><code class=\"language-text\">targetX</code>, <code class=\"language-text\">targetY</code>, <code class=\"language-text\">targetZ</code> : when an offset is specified, it implies we are copying data into a sub region of the target texture and internally <code class=\"language-text\">gl.copyTexSubImage2D</code> or <code class=\"language-text\">gl.copyTexSubImage3D</code> are used based on the <code class=\"language-text\">target</code>, for these cases it is assumed that target texture has enough GPU memory already allocated. When none of the offsets are specified, <code class=\"language-text\">gl.copyTexImage2D</code> is used to copy data to entire target region and GPU memory is allocated if needed, target texture GPU memory doesn't have to be pre-allocated.</li>\n</ul>\n<p>This function makes calls to the following WebGL APIs:</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/copyTexImage2D\"><code class=\"language-text\">gl.copyTexImage2D</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/copyTexSubImage2D\"><code class=\"language-text\">gl.copyTexSubImage2D</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/copyTexSubImage3D\"><code class=\"language-text\">gl,copyTexSubImage3D</code></a></p>\n<h2 id=\"blit-functions\"><a href=\"#blit-functions\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Blit Functions</h2>\n<h3 id=\"blitoptions-object--webgl2\"><a href=\"#blitoptions-object--webgl2\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>blit(options: Object) : (WebGL2)</h3>\n<p>Copies a rectangle of pixels from a <code class=\"language-text\">Texture</code> or <code class=\"language-text\">Framebuffer</code> object into a <code class=\"language-text\">Texture</code> or <code class=\"language-text\">Framebuffer</code> object.</p>\n<ul>\n<li><code class=\"language-text\">source</code> (<code class=\"language-text\">Texture</code> or <code class=\"language-text\">Framebuffer</code>) - This object will be bound and data copied from it.</li>\n<li><code class=\"language-text\">options.target</code> (<code class=\"language-text\">Texture</code> or <code class=\"language-text\">Framebuffer</code>) - This object will be bound and data is copied into it.</li>\n<li><code class=\"language-text\">options.sourceAttachment</code> (<code class=\"language-text\">GLenum</code>, default: <code class=\"language-text\">COLOR_ATTACHMENT0</code>) - Attachment index from which data to be copied from.</li>\n<li><code class=\"language-text\">options.sourceX0</code> (<code class=\"language-text\">GLint</code>, default: <code class=\"language-text\">0</code>) - Lower X bound of copy rectangle in source.</li>\n<li><code class=\"language-text\">options.sourceY0</code> (<code class=\"language-text\">GLint</code>, default: <code class=\"language-text\">0</code>) - Lower Y bound of copy rectangle in source.</li>\n<li><code class=\"language-text\">options.sourceX1</code> (<code class=\"language-text\">GLint</code>) - Higher X bound of copy rectangle in source.</li>\n<li><code class=\"language-text\">options.sourceY1</code> (<code class=\"language-text\">GLint</code>) - Higher Y bound of copy rectangle in source.</li>\n<li><code class=\"language-text\">options.targetX0</code> (<code class=\"language-text\">GLint</code>, default: <code class=\"language-text\">0</code>) - Lower X bound of copy rectangle in destination.</li>\n<li><code class=\"language-text\">options.targetY0</code> (<code class=\"language-text\">GLint</code>, default: <code class=\"language-text\">0</code>) - Lower Y bound of copy rectangle in destination.</li>\n<li><code class=\"language-text\">options.targetX1</code> (<code class=\"language-text\">GLint</code>) - Higher X bound of copy rectangle in destination.</li>\n<li><code class=\"language-text\">options.targetY1</code> (<code class=\"language-text\">GLint</code>) - Higher Y bound of copy rectangle in destination.</li>\n<li><code class=\"language-text\">options.mask</code> (<code class=\"language-text\">GLbitfild</code>, default: <code class=\"language-text\">0</code>) - A <code class=\"language-text\">GLbitfield</code> specifying a bitwise OR mask indicating which buffers are to be copied, possible buffers masks are <code class=\"language-text\">GL.COLOR_BUFFER_BIT</code>, <code class=\"language-text\">GL.DEPTH_BUFFER_BIT</code> and <code class=\"language-text\">GL.STENCIL_BUFFER_BIT</code></li>\n<li><code class=\"language-text\">options.color</code> (<code class=\"language-text\">Boolean</code>, default: <code class=\"language-text\">true</code>) - When true <code class=\"language-text\">GL.COLOR_BUFFER_BIT</code> is added to the mask.</li>\n<li><code class=\"language-text\">options.depth</code> (<code class=\"language-text\">Boolean</code>, default: <code class=\"language-text\">false</code>) - When true <code class=\"language-text\">GL.DEPTH_BUFFER_BIT</code> is added to the mask.</li>\n<li><code class=\"language-text\">options.stencil</code> (<code class=\"language-text\">Boolean</code>, default: <code class=\"language-text\">false</code>) - When true <code class=\"language-text\">GL.STENCIL_BUFFER_BIT</code> is added to the mask.</li>\n<li><code class=\"language-text\">options.filter</code>=<code class=\"language-text\">GL.NEAREST</code> - specifies interpolation mode if stretching is needed. <code class=\"language-text\">GL.LINEAR</code> can be used exclusively for color buffers.</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>There are a number of restrictions when blitting between integer and floating point formats.</li>\n</ul>\n<p>This function makes calls to the following WebGL APIs:</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/blitFramebuffer\"><code class=\"language-text\">gl.blitFramebuffer</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/readBuffer\"><code class=\"language-text\">gl.readBuffer</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindFramebuffer\"><code class=\"language-text\">gl.bindFramebuffer</code></a></p>"}