{"expireTime":9007200809748944000,"key":"transformer-remark-markdown-html-f1fa2c2165c428608b87b59acfea8319-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-autolink-headers-","val":"<h1 id=\"uniformbufferlayout-webgl2\"><a href=\"#uniformbufferlayout-webgl2\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UniformBufferLayout (WebGL2)</h1>\n<p>A helper class that lets the application describe the contents of a uniform block and then perform <code class=\"language-text\">setUniforms({uniform: value})</code> calls on it, manipulating individual values without concern for memory layout requirements.</p>\n<h2 id=\"usage\"><a href=\"#usage\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage</h2>\n<p>Create a <code class=\"language-text\">UniformBufferLayout</code> that matches the uniform block declaration in your shader</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">#version <span class=\"token number\">300</span> es\n<span class=\"token function\">layout</span> <span class=\"token punctuation\">(</span>std140<span class=\"token punctuation\">)</span> uniform matrix <span class=\"token punctuation\">{</span>\n    mat4 mvp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> matrixBlock<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> matrixBlockLayout <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UniformBufferLayout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  mvp<span class=\"token punctuation\">:</span> <span class=\"token constant\">GL</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FLOAT_MAT4</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Setting values on a <code class=\"language-text\">UniformBufferLayout</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">.</span><span class=\"token function\">setValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  mvp<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Creating a uniform buffer to hold the data required by the layout</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> layout <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UniformBufferLayout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Buffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>size<span class=\"token punctuation\">:</span> layout<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Updating your actual uniform buffer</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> layout <span class=\"token operator\">=</span> <span class=\"token operator\">...</span>\nlayout<span class=\"token punctuation\">.</span><span class=\"token function\">setValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">subData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">:</span> layout<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Updating a minimal part of the actual uniform buffer</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> layout<span class=\"token punctuation\">.</span><span class=\"token function\">getSubData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">subData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Binding your uniform buffer</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token constant\">TBA</span></code></pre></div>\n<h2 id=\"methods\"><a href=\"#methods\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Methods</h2>\n<h3 id=\"constructor\"><a href=\"#constructor\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>constructor</h3>\n<p>Takes a layout object and creates an internal layout description. Once constructed the layout cannot be changed. Once constructed the size of the required memory buffer is known, and the buffer layout provides a convenient interface for updating values.</p>\n<p>Note: The order and type of the uniforms in the layout object provided to the constructor must match the order and type of the uniform declarations in the GLSL uniform block</p>\n<h3 id=\"setvalues\"><a href=\"#setvalues\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>setValues</h3>\n<p>Sets uniform values.</p>\n<h3 id=\"getbytes\"><a href=\"#getbytes\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getBytes</h3>\n<p>Returns the number of bytes needed to hold all the uniforms in the layout, which can be used to create a <code class=\"language-text\">Buffer</code> with enough data to hold the entire memory layout.</p>\n<h3 id=\"getdata\"><a href=\"#getdata\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getData</h3>\n<p>Returns a <code class=\"language-text\">Float32Array</code> representing all the memory in the layout. The length of this array (* 4) will correspond to the value returned by <code class=\"language-text\">getBytes()</code></p>\n<h3 id=\"getsubdata\"><a href=\"#getsubdata\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getSubData</h3>\n<p>Returns a <code class=\"language-text\">Float32Array</code> representing all the memory in the layout. The length of this array (* 4) will correspond to the value returned by <code class=\"language-text\">getBytes()</code></p>\n<h2 id=\"types\"><a href=\"#types\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types</h2>\n<p>Use the following WebGL types to declare uniforms corresponding to your GLSL data types.</p>\n<table>\n<thead>\n<tr>\n<th>GLSL Type</th>\n<th>WebGL type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">float</code></td>\n<td><code class=\"language-text\">GL.FLOAT</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">vec2</code></td>\n<td><code class=\"language-text\">GL.FLOAT_VEC2</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">vec3</code></td>\n<td><code class=\"language-text\">GL.FLOAT_VEC3</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">vec4</code></td>\n<td><code class=\"language-text\">GL.FLOAT_VEC4</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">int</code></td>\n<td><code class=\"language-text\">GL.INT</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ivec2</code></td>\n<td><code class=\"language-text\">GL.INT_VEC2</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ivec3</code></td>\n<td><code class=\"language-text\">GL.INT_VEC3</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">ivec4</code></td>\n<td><code class=\"language-text\">GL.INT_VEC4</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">uint</code></td>\n<td><code class=\"language-text\">GL.UNSIGNED_INT</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">uvec2</code></td>\n<td><code class=\"language-text\">GL.UNSIGNED_INT_VEC2</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">uvec3</code></td>\n<td><code class=\"language-text\">GL.UNSIGNED_INT_VEC3</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">uvec4</code></td>\n<td><code class=\"language-text\">GL.UNSIGNED_INT_VEC4</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">bool</code></td>\n<td><code class=\"language-text\">GL.BOOL</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">bvec2</code></td>\n<td><code class=\"language-text\">GL.BOOL_VEC2</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">bvec3</code></td>\n<td><code class=\"language-text\">GL.BOOL_VEC3</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">bvec4</code></td>\n<td><code class=\"language-text\">GL.BOOL_VEC4</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">mat2</code></td>\n<td><code class=\"language-text\">GL.FLOAT_MAT2</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">mat3</code></td>\n<td><code class=\"language-text\">GL.FLOAT_MAT3</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">mat4</code></td>\n<td><code class=\"language-text\">GL.FLOAT_MAT4</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">mat2x3</code></td>\n<td><code class=\"language-text\">GL.FLOAT_MAT2x3</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">mat2x4</code></td>\n<td><code class=\"language-text\">GL.FLOAT_MAT2x4</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">mat3x2</code></td>\n<td><code class=\"language-text\">GL.FLOAT_MAT3x2</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">mat3x4</code></td>\n<td><code class=\"language-text\">GL.FLOAT_MAT3x4</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">mat4x2</code></td>\n<td><code class=\"language-text\">GL.FLOAT_MAT4x2</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">mat4x3</code></td>\n<td><code class=\"language-text\">GL.FLOAT_MAT4x3</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"remarks\"><a href=\"#remarks\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Remarks</h2>\n<ul>\n<li>WebGL requires the data representing the uniforms in to be laid out in memory according to specific rules (essentially some padding needs to be injected between successive values to facilitate memory access by the GPU).</li>\n<li>Note that WebGL2 uniform buffers are just <a href=\"/docs/api-reference/webgl/buffer.md\">Buffer</a> objects and can be manipulated directly. The <code class=\"language-text\">UniformBufferLayout</code> class is not a WebGL2 object, it is just an optional helper class that makes it easy to create and update a block of memory with the required layout.</li>\n<li>More information on the <code class=\"language-text\">std140</code> layout specification: <a href=\"https://khronos.org/registry/OpenGL/specs/gl/glspec45.core.pdf#page=137\">OpenGL spec</a></li>\n</ul>"}