{"expireTime":9007200809748943000,"key":"transformer-remark-markdown-html-d0fd5c11838dab4db0ad794cb134dd3f-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-autolink-headers-","val":"<h1 id=\"loading-data\"><a href=\"#loading-data\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Loading Data</h1>\n<p>Often 3D applications need to load assets like textures and models into memory.</p>\n<p>Data loading is not a part of luma.gl, however an optional companion framework (loaders.gl) provides a rich suite of compatible loaders.</p>\n<h2 id=\"loading-images-and-textures\"><a href=\"#loading-images-and-textures\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Loading Images and Textures</h2>\n<p><code class=\"language-text\">Texture</code> constructors accept any WebGL-supported texture image data sources such as <code class=\"language-text\">Image</code> objects and image data arrays. They also accept <code class=\"language-text\">Promise</code>s that resolve the those objects. This enables applications to pass the <code class=\"language-text\">Promise</code> from an image loading function directly to the texture constructor:</p>\n<p>For basic image loading use cases, a very simple <code class=\"language-text\">loadImage</code> utility is included in luma.gl:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import {Texture2D, loadImage} from &#39;@luma.gl/core&#39;;\n\n// The following constructors are all equivalent:\nconst texture = new Texture2D(gl, url); // String argument, `loadImage` automatically called\nconst texture = new Texture2D(gl, {data: url}); // String `data`, `loadImage` automatically called\nconst texture = new Texture2D(gl, loadImage(url)); // Promise argument\nconst texture = new Texture2D(gl, {data: loadImage(url)}); // Promise `data`</code></pre></div>\n<p>Note: the luma.gl <code class=\"language-text\">Program.draw()</code> function will not render until all texture uniforms have been initialized (i.e. any promises have resolved).</p>\n<p>For more advanced use cases, e.g. loading images in browser worker threads or Node.js, you can use custom image loading code or the <code class=\"language-text\">loadImage</code> utilities from loaders.gl.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import {Texture2D} from &#39;@luma.gl/core&#39;;\nimport {loadImage} from &#39;@loaders.gl/core&#39;;\n\nconst texture = new Texture2D(gl, loadImage(url));\nconst texture = new Texture2D(gl, {data: loadImage(url)});</code></pre></div>\n<h2 id=\"loading-meshes-and-point-clouds\"><a href=\"#loading-meshes-and-point-clouds\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Loading Meshes and Point Clouds</h2>\n<p>Refer to loaders.gl for a suite of loaders supporting a variety of 3D formats.</p>\n<h2 id=\"loading-gltf-scenegraphs\"><a href=\"#loading-gltf-scenegraphs\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Loading glTF Scenegraphs</h2>\n<p>Install <code class=\"language-text\">@loaders.gl/gltf</code>.</p>\n<p>Support for Draco encoded glTF models is also available, however it requires installing and injecting the draco decoder into the gltf parser.</p>"}