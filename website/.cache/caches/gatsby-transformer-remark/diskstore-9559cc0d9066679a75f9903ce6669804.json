{"expireTime":9007200809748933000,"key":"transformer-remark-markdown-ast-d0fd5c11838dab4db0ad794cb134dd3f-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-autolink-headers-","val":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"link","url":"#loading-data","title":null,"data":{"hProperties":{"aria-hidden":true,"class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Loading Data","position":{"start":{"line":1,"column":3,"offset":2},"end":{"line":1,"column":15,"offset":14},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":15,"offset":14},"indent":[]},"data":{"id":"loading-data","htmlAttributes":{"id":"loading-data"},"hProperties":{"id":"loading-data"}}},{"type":"paragraph","children":[{"type":"text","value":"Often 3D applications need to load assets like textures and models into memory.","position":{"start":{"line":3,"column":1,"offset":16},"end":{"line":3,"column":80,"offset":95},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":16},"end":{"line":3,"column":80,"offset":95},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Data loading is not a part of luma.gl, however an optional companion framework (loaders.gl) provides a rich suite of compatible loaders.","position":{"start":{"line":5,"column":1,"offset":97},"end":{"line":5,"column":137,"offset":233},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":97},"end":{"line":5,"column":137,"offset":233},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#loading-images-and-textures","title":null,"data":{"hProperties":{"aria-hidden":true,"class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Loading Images and Textures","position":{"start":{"line":7,"column":4,"offset":238},"end":{"line":7,"column":31,"offset":265},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":235},"end":{"line":7,"column":31,"offset":265},"indent":[]},"data":{"id":"loading-images-and-textures","htmlAttributes":{"id":"loading-images-and-textures"},"hProperties":{"id":"loading-images-and-textures"}}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">Texture</code>","position":{"start":{"line":9,"column":1,"offset":267},"end":{"line":9,"column":10,"offset":276},"indent":[]}},{"type":"text","value":" constructors accept any WebGL-supported texture image data sources such as ","position":{"start":{"line":9,"column":10,"offset":276},"end":{"line":9,"column":86,"offset":352},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Image</code>","position":{"start":{"line":9,"column":86,"offset":352},"end":{"line":9,"column":93,"offset":359},"indent":[]}},{"type":"text","value":" objects and image data arrays. They also accept ","position":{"start":{"line":9,"column":93,"offset":359},"end":{"line":9,"column":142,"offset":408},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Promise</code>","position":{"start":{"line":9,"column":142,"offset":408},"end":{"line":9,"column":151,"offset":417},"indent":[]}},{"type":"text","value":"s that resolve the those objects. This enables applications to pass the ","position":{"start":{"line":9,"column":151,"offset":417},"end":{"line":9,"column":223,"offset":489},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Promise</code>","position":{"start":{"line":9,"column":223,"offset":489},"end":{"line":9,"column":232,"offset":498},"indent":[]}},{"type":"text","value":" from an image loading function directly to the texture constructor:","position":{"start":{"line":9,"column":232,"offset":498},"end":{"line":9,"column":300,"offset":566},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":267},"end":{"line":9,"column":300,"offset":566},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For basic image loading use cases, a very simple ","position":{"start":{"line":11,"column":1,"offset":568},"end":{"line":11,"column":50,"offset":617},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">loadImage</code>","position":{"start":{"line":11,"column":50,"offset":617},"end":{"line":11,"column":61,"offset":628},"indent":[]}},{"type":"text","value":" utility is included in luma.gl:","position":{"start":{"line":11,"column":61,"offset":628},"end":{"line":11,"column":93,"offset":660},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":568},"end":{"line":11,"column":93,"offset":660},"indent":[]}},{"type":"html","lang":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import {Texture2D, loadImage} from &#39;@luma.gl/core&#39;;\n\n// The following constructors are all equivalent:\nconst texture = new Texture2D(gl, url); // String argument, `loadImage` automatically called\nconst texture = new Texture2D(gl, {data: url}); // String `data`, `loadImage` automatically called\nconst texture = new Texture2D(gl, loadImage(url)); // Promise argument\nconst texture = new Texture2D(gl, {data: loadImage(url)}); // Promise `data`</code></pre></div>","position":{"start":{"line":13,"column":1,"offset":662},"end":{"line":21,"column":4,"offset":1112},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Note: the luma.gl ","position":{"start":{"line":23,"column":1,"offset":1114},"end":{"line":23,"column":19,"offset":1132},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Program.draw()</code>","position":{"start":{"line":23,"column":19,"offset":1132},"end":{"line":23,"column":35,"offset":1148},"indent":[]}},{"type":"text","value":" function will not render until all texture uniforms have been initialized (i.e. any promises have resolved).","position":{"start":{"line":23,"column":35,"offset":1148},"end":{"line":23,"column":144,"offset":1257},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1114},"end":{"line":23,"column":144,"offset":1257},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For more advanced use cases, e.g. loading images in browser worker threads or Node.js, you can use custom image loading code or the ","position":{"start":{"line":26,"column":1,"offset":1260},"end":{"line":26,"column":133,"offset":1392},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">loadImage</code>","position":{"start":{"line":26,"column":133,"offset":1392},"end":{"line":26,"column":144,"offset":1403},"indent":[]}},{"type":"text","value":" utilities from loaders.gl.","position":{"start":{"line":26,"column":144,"offset":1403},"end":{"line":26,"column":171,"offset":1430},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1260},"end":{"line":26,"column":171,"offset":1430},"indent":[]}},{"type":"html","lang":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import {Texture2D} from &#39;@luma.gl/core&#39;;\nimport {loadImage} from &#39;@loaders.gl/core&#39;;\n\nconst texture = new Texture2D(gl, loadImage(url));\nconst texture = new Texture2D(gl, {data: loadImage(url)});</code></pre></div>","position":{"start":{"line":28,"column":1,"offset":1432},"end":{"line":34,"column":4,"offset":1635},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#loading-meshes-and-point-clouds","title":null,"data":{"hProperties":{"aria-hidden":true,"class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Loading Meshes and Point Clouds","position":{"start":{"line":36,"column":4,"offset":1640},"end":{"line":36,"column":35,"offset":1671},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1637},"end":{"line":36,"column":35,"offset":1671},"indent":[]},"data":{"id":"loading-meshes-and-point-clouds","htmlAttributes":{"id":"loading-meshes-and-point-clouds"},"hProperties":{"id":"loading-meshes-and-point-clouds"}}},{"type":"paragraph","children":[{"type":"text","value":"Refer to loaders.gl for a suite of loaders supporting a variety of 3D formats.","position":{"start":{"line":38,"column":1,"offset":1673},"end":{"line":38,"column":79,"offset":1751},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1673},"end":{"line":38,"column":79,"offset":1751},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#loading-gltf-scenegraphs","title":null,"data":{"hProperties":{"aria-hidden":true,"class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Loading glTF Scenegraphs","position":{"start":{"line":41,"column":4,"offset":1757},"end":{"line":41,"column":28,"offset":1781},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":1754},"end":{"line":41,"column":28,"offset":1781},"indent":[]},"data":{"id":"loading-gltf-scenegraphs","htmlAttributes":{"id":"loading-gltf-scenegraphs"},"hProperties":{"id":"loading-gltf-scenegraphs"}}},{"type":"paragraph","children":[{"type":"text","value":"Install ","position":{"start":{"line":43,"column":1,"offset":1783},"end":{"line":43,"column":9,"offset":1791},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">@loaders.gl/gltf</code>","position":{"start":{"line":43,"column":9,"offset":1791},"end":{"line":43,"column":27,"offset":1809},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":43,"column":27,"offset":1809},"end":{"line":43,"column":28,"offset":1810},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1783},"end":{"line":43,"column":28,"offset":1810},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Support for Draco encoded glTF models is also available, however it requires installing and injecting the draco decoder into the gltf parser.","position":{"start":{"line":45,"column":1,"offset":1812},"end":{"line":45,"column":142,"offset":1953},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1812},"end":{"line":45,"column":142,"offset":1953},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":46,"column":1,"offset":1954}}}}