{"expireTime":9007200809748943000,"key":"transformer-remark-markdown-html-121473d23e52de2c5e8bc7c0a778e602-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-autolink-headers-","val":"<h1 id=\"using-glsl-300-es\"><a href=\"#using-glsl-300-es\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using GLSL 3.00 ES</h1>\n<p>luma.gl makes it easy to write portable applications that work with the latest WebGL APIs (WebGL2 components and methods in JavaScript and GLSL 3.00 ES in shaders), by providing a modern JavaScript components and transparently handling differences between WebGL and GLSL versions.</p>\n<h2 id=\"automatic-glsl-code-transpilation\"><a href=\"#automatic-glsl-code-transpilation\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Automatic GLSL Code Transpilation</h2>\n<p>If one wishes to use GLSL 3.00 features in a shader, one has to make modifications to the shader so that it no longer runs on GLSL 1.00 code. For a small monolithic shader it may be less of an issue (e.g. if you need WebGL2 features, use GLSL 3.00, otherwise GLSL 1.00) but if the goal is to create reusable shader code that can run under both WebGL1 and WebGL2 and both in GLSL 1.00 and GLSL 3.00 shaders, then there are problems.</p>\n<h3 id=\"textual-replacement\"><a href=\"#textual-replacement\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Textual replacement</h3>\n<p>The required modifications are very simple, and can mostly be done by a (fairly) simple series of textual replacements, as detailed in the proposal below.</p>\n<h3 id=\"fragment-shader-outputs\"><a href=\"#fragment-shader-outputs\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fragment Shader Outputs</h3>\n<p>The major complication is related to fragment shader outputs, that use built-in <code class=\"language-text\">gl_fragColor</code>/<code class=\"language-text\">gl_fragData[]</code> variables in GLSL 1.00, but must be declared as variables in GLSL 3.00. And any variable starting with <code class=\"language-text\">gl_</code> is reserved, so names must be changed.</p>\n<ul>\n<li>Shader Assembler knows the target version of GLSL.</li>\n<li>It applies as series of regular expressions (different between vertex and fragment shader) to replace basic constructs.</li>\n<li>Users will need to avoid WebGL2 constructs if they wish their shaders to compile</li>\n</ul>\n<h3 id=\"table-of-replacements\"><a href=\"#table-of-replacements\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of replacements</h3>\n<h4 id=\"converting-from-glsl-300-to-300\"><a href=\"#converting-from-glsl-300-to-300\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Converting from GLSL 3.00 to 3.00</h4>\n<p>To enable portable code to be written, we must allow some non-conformant code in GLSL 3.00.</p>\n<p>Most importantly, <code class=\"language-text\">texture</code> in GLSL 3.00 might translate to either <code class=\"language-text\">texture2D</code> or <code class=\"language-text\">textureCube</code> in GLSL 1.00. Therefor we allow <code class=\"language-text\">textureCube</code> to be used in GLSL 3.00 code but automatically change it to <code class=\"language-text\">texture</code>.</p>\n<h4 id=\"converting-from-glsl-300-to-100\"><a href=\"#converting-from-glsl-300-to-100\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Converting from GLSL 3.00 to 1.00</h4>\n<p>Vertex Shader</p>\n<ul>\n<li><code class=\"language-text\">in</code> -> <code class=\"language-text\">attribute</code> - only beginning of line</li>\n<li><code class=\"language-text\">out</code> -> <code class=\"language-text\">varying</code> - only beginning of line</li>\n</ul>\n<p>Fragment Shader</p>\n<ul>\n<li><code class=\"language-text\">in</code> -> <code class=\"language-text\">varying</code> - only beginning of line</li>\n<li><code class=\"language-text\">out</code> -> <code class=\"language-text\">gl_fragColor/gl_fragData[]</code> - only beginning of line, remove declaration</li>\n</ul>\n<p>Common</p>\n<ul>\n<li><code class=\"language-text\">texture</code> -> <code class=\"language-text\">texture2D</code></li>\n</ul>\n<h3 id=\"converting-from-glsl-100-to-300\"><a href=\"#converting-from-glsl-100-to-300\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Converting from GLSL 1.00 to 3.00</h3>\n<p>Vertex Shader</p>\n<ul>\n<li><code class=\"language-text\">attribute</code> -> <code class=\"language-text\">in</code> - can be done with macro</li>\n<li><code class=\"language-text\">varying</code> -> <code class=\"language-text\">out</code> - can be done with macro</li>\n</ul>\n<p>Fragment Shader</p>\n<ul>\n<li><code class=\"language-text\">varying</code> -> <code class=\"language-text\">out</code> - only beginning of line</li>\n<li><code class=\"language-text\">out</code> -> <code class=\"language-text\">gl_fragColor/gl_fragData[]</code> - only beginning of line, remove declaration, if multiple <code class=\"language-text\">out</code>s use gl_fragData</li>\n</ul>\n<p>Common</p>\n<ul>\n<li><code class=\"language-text\">texture2D</code> -> <code class=\"language-text\">texture</code></li>\n<li><code class=\"language-text\">textureCube</code> -> <code class=\"language-text\">texture</code></li>\n</ul>"}