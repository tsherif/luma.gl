{"expireTime":9007200809748943000,"key":"transformer-remark-markdown-html-ast-a7fb9ee485563bf4a8f6042bcefb396c-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-autolink-headers-","val":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{"id":"programs-and-shaders"},"children":[{"type":"element","tagName":"a","properties":{"href":"#programs-and-shaders","aria-hidden":true,"class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Programs and Shaders","position":{"start":{"line":1,"column":3,"offset":2},"end":{"line":1,"column":23,"offset":22}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":23,"offset":22}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A ","position":{"start":{"line":3,"column":1,"offset":24},"end":{"line":3,"column":3,"offset":26}}},{"type":"raw","value":"<code class=\"language-text\">Program</code>","position":{"start":{"line":3,"column":3,"offset":26},"end":{"line":3,"column":12,"offset":35}}},{"type":"text","value":" performs the following duties:","position":{"start":{"line":3,"column":12,"offset":35},"end":{"line":3,"column":43,"offset":66}}}],"position":{"start":{"line":3,"column":1,"offset":24},"end":{"line":3,"column":43,"offset":66}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Holds, and links together, two shader programs (vertex and fragment shaders) so that they can be executed via a draw call.","position":{"start":{"line":5,"column":3,"offset":70},"end":{"line":5,"column":125,"offset":192}}}],"position":{"start":{"line":5,"column":1,"offset":68},"end":{"line":5,"column":125,"offset":192}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Extracts information about attributes and uniforms from the linker.","position":{"start":{"line":6,"column":3,"offset":195},"end":{"line":6,"column":70,"offset":262}}}],"position":{"start":{"line":6,"column":1,"offset":193},"end":{"line":6,"column":70,"offset":262}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Stores uniforms","position":{"start":{"line":7,"column":3,"offset":265},"end":{"line":7,"column":18,"offset":280}}}],"position":{"start":{"line":7,"column":1,"offset":263},"end":{"line":7,"column":18,"offset":280}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Runs the linked shaders using the stored uniforms (as well as attributes from a ","position":{"start":{"line":8,"column":3,"offset":283},"end":{"line":8,"column":83,"offset":363}}},{"type":"raw","value":"<code class=\"language-text\">VertexArray</code>","position":{"start":{"line":8,"column":83,"offset":363},"end":{"line":8,"column":96,"offset":376}}},{"type":"text","value":" object and optionally output buffers from a ","position":{"start":{"line":8,"column":96,"offset":376},"end":{"line":8,"column":141,"offset":421}}},{"type":"raw","value":"<code class=\"language-text\">TransformFeedback</code>","position":{"start":{"line":8,"column":141,"offset":421},"end":{"line":8,"column":160,"offset":440}}},{"type":"text","value":" object).","position":{"start":{"line":8,"column":160,"offset":440},"end":{"line":8,"column":169,"offset":449}}}],"position":{"start":{"line":8,"column":1,"offset":281},"end":{"line":8,"column":169,"offset":449}}},{"type":"text","value":"\n"}],"position":{"start":{"line":5,"column":1,"offset":68},"end":{"line":8,"column":169,"offset":449}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":10,"column":1,"offset":451},"end":{"line":10,"column":5,"offset":455}}},{"type":"raw","value":"<code class=\"language-text\">Program</code>","position":{"start":{"line":10,"column":5,"offset":455},"end":{"line":10,"column":14,"offset":464}}},{"type":"text","value":" constructor always links shaders and queries the linkers output to extract an \"attribute configuration map\". This attribute configuration map can be transferred to ","position":{"start":{"line":10,"column":14,"offset":464},"end":{"line":10,"column":179,"offset":629}}},{"type":"raw","value":"<code class=\"language-text\">VertexArray</code>","position":{"start":{"line":10,"column":179,"offset":629},"end":{"line":10,"column":192,"offset":642}}},{"type":"text","value":" and ","position":{"start":{"line":10,"column":192,"offset":642},"end":{"line":10,"column":197,"offset":647}}},{"type":"raw","value":"<code class=\"language-text\">TransformFeedback</code>","position":{"start":{"line":10,"column":197,"offset":647},"end":{"line":10,"column":216,"offset":666}}},{"type":"text","value":" objects which allows those objects to accept the names of shader ","position":{"start":{"line":10,"column":216,"offset":666},"end":{"line":10,"column":282,"offset":732}}},{"type":"raw","value":"<code class=\"language-text\">in</code>","position":{"start":{"line":10,"column":282,"offset":732},"end":{"line":10,"column":286,"offset":736}}},{"type":"text","value":" and ","position":{"start":{"line":10,"column":286,"offset":736},"end":{"line":10,"column":291,"offset":741}}},{"type":"raw","value":"<code class=\"language-text\">out</code>","position":{"start":{"line":10,"column":291,"offset":741},"end":{"line":10,"column":296,"offset":746}}},{"type":"text","value":" parameters instead of numeric location indices.","position":{"start":{"line":10,"column":296,"offset":746},"end":{"line":10,"column":344,"offset":794}}}],"position":{"start":{"line":10,"column":1,"offset":451},"end":{"line":10,"column":344,"offset":794}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"running-programs"},"children":[{"type":"element","tagName":"a","properties":{"href":"#running-programs","aria-hidden":true,"class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Running Programs","position":{"start":{"line":13,"column":4,"offset":800},"end":{"line":13,"column":20,"offset":816}}}],"position":{"start":{"line":13,"column":1,"offset":797},"end":{"line":13,"column":20,"offset":816}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The way to execute anything on the GPU happens through calls to ","position":{"start":{"line":15,"column":1,"offset":818},"end":{"line":15,"column":65,"offset":882}}},{"type":"raw","value":"<code class=\"language-text\">Program.draw()</code>","position":{"start":{"line":15,"column":65,"offset":882},"end":{"line":15,"column":81,"offset":898}}},{"type":"text","value":", which runs the programs. Running the program (i.e the shaders) is customarily referred to as a \"draw call\", but does not necessarily draw anything on the screen.","position":{"start":{"line":15,"column":81,"offset":898},"end":{"line":15,"column":244,"offset":1061}}}],"position":{"start":{"line":15,"column":1,"offset":818},"end":{"line":15,"column":244,"offset":1061}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":18,"column":1,"offset":1064},"end":{"line":18,"column":5,"offset":1068}}},{"type":"raw","value":"<code class=\"language-text\">Program.draw</code>","position":{"start":{"line":18,"column":5,"offset":1068},"end":{"line":18,"column":19,"offset":1082}}},{"type":"text","value":" call runs the shader","position":{"start":{"line":18,"column":19,"offset":1082},"end":{"line":18,"column":40,"offset":1103}}}],"position":{"start":{"line":18,"column":1,"offset":1064},"end":{"line":18,"column":40,"offset":1103}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> program <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Program</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>vs<span class=\"token punctuation\">,</span> fs<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nprogram<span class=\"token punctuation\">.</span><span class=\"token function\">setUniforms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nprogram<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":20,"column":1,"offset":1105},"end":{"line":24,"column":4,"offset":1205}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"updating-uniforms"},"children":[{"type":"element","tagName":"a","properties":{"href":"#updating-uniforms","aria-hidden":true,"class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Updating Uniforms","position":{"start":{"line":26,"column":4,"offset":1210},"end":{"line":26,"column":21,"offset":1227}}}],"position":{"start":{"line":26,"column":1,"offset":1207},"end":{"line":26,"column":21,"offset":1227}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To store new uniform values, call ","position":{"start":{"line":28,"column":1,"offset":1229},"end":{"line":28,"column":35,"offset":1263}}},{"type":"raw","value":"<code class=\"language-text\">Program.setUniforms()</code>","position":{"start":{"line":28,"column":35,"offset":1263},"end":{"line":28,"column":58,"offset":1286}}},{"type":"text","value":" (or ","position":{"start":{"line":28,"column":58,"offset":1286},"end":{"line":28,"column":63,"offset":1291}}},{"type":"raw","value":"<code class=\"language-text\">Model.setUniforms()</code>","position":{"start":{"line":28,"column":63,"offset":1291},"end":{"line":28,"column":84,"offset":1312}}},{"type":"text","value":") with a uniforms object map.","position":{"start":{"line":28,"column":84,"offset":1312},"end":{"line":28,"column":113,"offset":1341}}}],"position":{"start":{"line":28,"column":1,"offset":1229},"end":{"line":28,"column":113,"offset":1341}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":30,"column":1,"offset":1343},"end":{"line":30,"column":5,"offset":1347}}},{"type":"raw","value":"<code class=\"language-text\">Program.draw()</code>","position":{"start":{"line":30,"column":5,"offset":1347},"end":{"line":30,"column":21,"offset":1363}}},{"type":"text","value":" class accepts a uniforms object (map), which will set (i.e. store) the supplied uniforms on the ","position":{"start":{"line":30,"column":21,"offset":1363},"end":{"line":30,"column":118,"offset":1460}}},{"type":"raw","value":"<code class=\"language-text\">Program</code>","position":{"start":{"line":30,"column":118,"offset":1460},"end":{"line":30,"column":127,"offset":1469}}},{"type":"text","value":" just before drawing (and leave them set!).","position":{"start":{"line":30,"column":127,"offset":1469},"end":{"line":30,"column":170,"offset":1512}}}],"position":{"start":{"line":30,"column":1,"offset":1343},"end":{"line":30,"column":170,"offset":1512}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Setting uniforms in each draw call does allow for a very attractive \"functional\" programming style but for very draw call intensice programs it can slightly impact performance. For uniforms that change with each draw call, we don't have a choice, but for other uniforms it can be slightly more performance to set them outside of the render loop.","position":{"start":{"line":32,"column":1,"offset":1514},"end":{"line":32,"column":346,"offset":1859}}}],"position":{"start":{"line":32,"column":1,"offset":1514},"end":{"line":32,"column":346,"offset":1859}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Examples could be a ","position":{"start":{"line":34,"column":1,"offset":1861},"end":{"line":34,"column":21,"offset":1881}}},{"type":"raw","value":"<code class=\"language-text\">time</code>","position":{"start":{"line":34,"column":21,"offset":1881},"end":{"line":34,"column":27,"offset":1887}}},{"type":"text","value":" uniform that updates every frame, versus a ","position":{"start":{"line":34,"column":27,"offset":1887},"end":{"line":34,"column":71,"offset":1931}}},{"type":"raw","value":"<code class=\"language-text\">scale</code>","position":{"start":{"line":34,"column":71,"offset":1931},"end":{"line":34,"column":78,"offset":1938}}},{"type":"text","value":" uniform that changes only when the user manipulates a control in the application's user interface.","position":{"start":{"line":34,"column":78,"offset":1938},"end":{"line":34,"column":177,"offset":2037}}}],"position":{"start":{"line":34,"column":1,"offset":1861},"end":{"line":34,"column":177,"offset":2037}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"configuring-vertex-attributes"},"children":[{"type":"element","tagName":"a","properties":{"href":"#configuring-vertex-attributes","aria-hidden":true,"class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Configuring Vertex Attributes","position":{"start":{"line":37,"column":4,"offset":2043},"end":{"line":37,"column":33,"offset":2072}}}],"position":{"start":{"line":37,"column":1,"offset":2040},"end":{"line":37,"column":33,"offset":2072}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">VertexArray</code>","position":{"start":{"line":39,"column":1,"offset":2074},"end":{"line":39,"column":14,"offset":2087}}},{"type":"text","value":" objects allow the user to store a set of buffer bindings / constants that specify what values the various vertex shader ","position":{"start":{"line":39,"column":14,"offset":2087},"end":{"line":39,"column":135,"offset":2208}}},{"type":"raw","value":"<code class=\"language-text\">in</code>","position":{"start":{"line":39,"column":135,"offset":2208},"end":{"line":39,"column":139,"offset":2212}}},{"type":"text","value":" parameters (also known as \"attributes\") will have during a draw call.","position":{"start":{"line":39,"column":139,"offset":2212},"end":{"line":39,"column":209,"offset":2282}}}],"position":{"start":{"line":39,"column":1,"offset":2074},"end":{"line":39,"column":209,"offset":2282}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> program <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Program</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> vertexArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VertexArray</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  program<span class=\"token punctuation\">,</span>\n  attributes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\nprogram<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>vertexArray<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":41,"column":1,"offset":2284},"end":{"line":51,"column":4,"offset":2447}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">VertexArray</code>","position":{"start":{"line":53,"column":1,"offset":2449},"end":{"line":53,"column":14,"offset":2462}}},{"type":"text","value":" objects need to be configured to match the expectations of a linked program, and the details of this configuration are rather technical, The good news is ","position":{"start":{"line":53,"column":14,"offset":2462},"end":{"line":53,"column":169,"offset":2617}}},{"type":"raw","value":"<code class=\"language-text\">VertexArray</code>","position":{"start":{"line":53,"column":169,"offset":2617},"end":{"line":53,"column":182,"offset":2630}}},{"type":"text","value":" objects can obtain most of the required configuration data from a ","position":{"start":{"line":53,"column":182,"offset":2630},"end":{"line":53,"column":249,"offset":2697}}},{"type":"raw","value":"<code class=\"language-text\">Program</code>","position":{"start":{"line":53,"column":249,"offset":2697},"end":{"line":53,"column":258,"offset":2706}}},{"type":"text","value":" instance. This data includes the name and types of attributes. In some cases, when configuration is needed, extra parameters can be added to a buffer.","position":{"start":{"line":53,"column":258,"offset":2706},"end":{"line":53,"column":409,"offset":2857}}}],"position":{"start":{"line":53,"column":1,"offset":2449},"end":{"line":53,"column":409,"offset":2857}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Once configured, ","position":{"start":{"line":57,"column":1,"offset":2861},"end":{"line":57,"column":18,"offset":2878}}},{"type":"raw","value":"<code class=\"language-text\">VertexArray</code>","position":{"start":{"line":57,"column":18,"offset":2878},"end":{"line":57,"column":31,"offset":2891}}},{"type":"text","value":" objects can be manipulated independently of the program. And you can create multiple ","position":{"start":{"line":57,"column":31,"offset":2891},"end":{"line":57,"column":117,"offset":2977}}},{"type":"raw","value":"<code class=\"language-text\">VertexArray</code>","position":{"start":{"line":57,"column":117,"offset":2977},"end":{"line":57,"column":130,"offset":2990}}},{"type":"text","value":" objects that can be used with your program, and these ","position":{"start":{"line":57,"column":130,"offset":2990},"end":{"line":57,"column":185,"offset":3045}}},{"type":"raw","value":"<code class=\"language-text\">VertexArray</code>","position":{"start":{"line":57,"column":185,"offset":3045},"end":{"line":57,"column":198,"offset":3058}}},{"type":"text","value":" object can also be used with other programs (as long as they are created with identical parameters, i.e. same shaders etc).","position":{"start":{"line":57,"column":198,"offset":3058},"end":{"line":57,"column":322,"offset":3182}}}],"position":{"start":{"line":57,"column":1,"offset":2861},"end":{"line":57,"column":322,"offset":3182}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> program <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Program</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>fs<span class=\"token punctuation\">:</span> <span class=\"token constant\">FS</span><span class=\"token punctuation\">,</span> vs<span class=\"token punctuation\">:</span> <span class=\"token constant\">VS</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> vertexArray1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VertexArray</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>program<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> vertexArray2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VertexArray</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>program<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> vertexArray3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VertexArray</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>program<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\nprogram<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>vertexArray<span class=\"token punctuation\">:</span> vertexArray1<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nprogram<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>vertexArray<span class=\"token punctuation\">:</span> vertexArray2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nprogram<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>vertexArray<span class=\"token punctuation\">:</span> vertexArray3<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> program2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Program</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>fs<span class=\"token punctuation\">:</span> <span class=\"token constant\">FS</span><span class=\"token punctuation\">,</span> vs<span class=\"token punctuation\">:</span> <span class=\"token constant\">VS</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nprogram2<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>vertexArray<span class=\"token punctuation\">:</span> vertexArray1<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":59,"column":1,"offset":3184},"end":{"line":71,"column":4,"offset":3653}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"configuring-transformfeedback-outputs"},"children":[{"type":"element","tagName":"a","properties":{"href":"#configuring-transformfeedback-outputs","aria-hidden":true,"class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Configuring TransformFeedback outputs","position":{"start":{"line":74,"column":4,"offset":3659},"end":{"line":74,"column":41,"offset":3696}}}],"position":{"start":{"line":74,"column":1,"offset":3656},"end":{"line":74,"column":41,"offset":3696}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TransformFeedback objects work very similarly to ","position":{"start":{"line":76,"column":1,"offset":3698},"end":{"line":76,"column":50,"offset":3747}}},{"type":"raw","value":"<code class=\"language-text\">VertexAttribute</code>","position":{"start":{"line":76,"column":50,"offset":3747},"end":{"line":76,"column":67,"offset":3764}}},{"type":"text","value":" objects","position":{"start":{"line":76,"column":67,"offset":3764},"end":{"line":76,"column":75,"offset":3772}}}],"position":{"start":{"line":76,"column":1,"offset":3698},"end":{"line":76,"column":75,"offset":3772}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const program = new Program();\nconst vertexArray = new VertexArray(gl, {program});\nconst transformFeedback = new TransformFeedback(gl, {program});\n...\nprogram.draw({vertexArray, transformFeedback...});</code></pre></div>","position":{"start":{"line":78,"column":1,"offset":3774},"end":{"line":84,"column":4,"offset":3983}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Just as with ","position":{"start":{"line":86,"column":1,"offset":3985},"end":{"line":86,"column":14,"offset":3998}}},{"type":"raw","value":"<code class=\"language-text\">VertexAttributes</code>","position":{"start":{"line":86,"column":14,"offset":3998},"end":{"line":86,"column":32,"offset":4016}}},{"type":"text","value":", you can create multiple ","position":{"start":{"line":86,"column":32,"offset":4016},"end":{"line":86,"column":58,"offset":4042}}},{"type":"raw","value":"<code class=\"language-text\">TransformFeedback</code>","position":{"start":{"line":86,"column":58,"offset":4042},"end":{"line":86,"column":77,"offset":4061}}},{"type":"text","value":" objects for each program, and use them with any program built from (exactly) the same shaders.","position":{"start":{"line":86,"column":77,"offset":4061},"end":{"line":86,"column":172,"offset":4156}}}],"position":{"start":{"line":86,"column":1,"offset":3985},"end":{"line":86,"column":172,"offset":4156}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"debugging-programs"},"children":[{"type":"element","tagName":"a","properties":{"href":"#debugging-programs","aria-hidden":true,"class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Debugging Programs","position":{"start":{"line":89,"column":4,"offset":4162},"end":{"line":89,"column":22,"offset":4180}}}],"position":{"start":{"line":89,"column":1,"offset":4159},"end":{"line":89,"column":22,"offset":4180}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Getting all data properly configured before calling ","position":{"start":{"line":91,"column":1,"offset":4182},"end":{"line":91,"column":53,"offset":4234}}},{"type":"raw","value":"<code class=\"language-text\">Program.draw()</code>","position":{"start":{"line":91,"column":53,"offset":4234},"end":{"line":91,"column":69,"offset":4250}}},{"type":"text","value":" is key to correct exection. The result of mistakes is often just silent failure and black screens, and there are precious few ways to debug what has gone wrong. Because of this, luma.gl provides extensive validation and logging support, for more information see the ","position":{"start":{"line":91,"column":69,"offset":4250},"end":{"line":91,"column":336,"offset":4517}}},{"type":"element","tagName":"a","properties":{"href":""},"children":[{"type":"text","value":"debugging","position":{"start":{"line":91,"column":337,"offset":4518},"end":{"line":91,"column":346,"offset":4527}}}],"position":{"start":{"line":91,"column":336,"offset":4517},"end":{"line":91,"column":349,"offset":4530}}},{"type":"text","value":" article.","position":{"start":{"line":91,"column":349,"offset":4530},"end":{"line":91,"column":358,"offset":4539}}}],"position":{"start":{"line":91,"column":1,"offset":4182},"end":{"line":91,"column":358,"offset":4539}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"remarks"},"children":[{"type":"element","tagName":"a","properties":{"href":"#remarks","aria-hidden":true,"class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Remarks","position":{"start":{"line":94,"column":4,"offset":4545},"end":{"line":94,"column":11,"offset":4552}}}],"position":{"start":{"line":94,"column":1,"offset":4542},"end":{"line":94,"column":11,"offset":4552}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There is a cost to updating uniforms. As a general guide, this cost should be considered quite small, but not completely free, and can compound when drawing many programs each with many uniforms. The cost is partly (but not completely) reduced since the ","position":{"start":{"line":96,"column":3,"offset":4556},"end":{"line":96,"column":257,"offset":4810}}},{"type":"raw","value":"<code class=\"language-text\">Program</code>","position":{"start":{"line":96,"column":257,"offset":4810},"end":{"line":96,"column":266,"offset":4819}}},{"type":"text","value":" class may do comparisons on uniform values before setting them to avoid unnecessary WebGL uniform updates.","position":{"start":{"line":96,"column":266,"offset":4819},"end":{"line":96,"column":373,"offset":4926}}}],"position":{"start":{"line":96,"column":3,"offset":4556},"end":{"line":96,"column":373,"offset":4926}}},{"type":"text","value":"\n"}],"position":{"start":{"line":96,"column":1,"offset":4554},"end":{"line":97,"column":1,"offset":4927}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The fact that uniforms are stored on the program object (as opposed in a separate \"uniform bank\" object) is often considered a design flaw in WebGL and OpenGL. Just like it is convenient to be able to use separate ","position":{"start":{"line":98,"column":3,"offset":4930},"end":{"line":98,"column":217,"offset":5144}}},{"type":"raw","value":"<code class=\"language-text\">VertexArray</code>","position":{"start":{"line":98,"column":217,"offset":5144},"end":{"line":98,"column":230,"offset":5157}}},{"type":"text","value":"s or ","position":{"start":{"line":98,"column":230,"offset":5157},"end":{"line":98,"column":235,"offset":5162}}},{"type":"raw","value":"<code class=\"language-text\">TransformFeedback</code>","position":{"start":{"line":98,"column":235,"offset":5162},"end":{"line":98,"column":254,"offset":5181}}},{"type":"text","value":" objects with the same program, it would be nice to be able to use separate uniform banks to quickly switch between different sets of uniforms. In WebGL1 one must create multiple program instances to store multipe uniform sets. In WebGL2 \"uniform buffers\" can somewhat compensate for the limitation, although they are not nearly as easy to use as the basic uniform API.","position":{"start":{"line":98,"column":254,"offset":5181},"end":{"line":98,"column":623,"offset":5550}}}],"position":{"start":{"line":98,"column":3,"offset":4930},"end":{"line":98,"column":623,"offset":5550}}},{"type":"text","value":"\n"}],"position":{"start":{"line":98,"column":1,"offset":4928},"end":{"line":98,"column":623,"offset":5550}}},{"type":"text","value":"\n"}],"position":{"start":{"line":96,"column":1,"offset":4554},"end":{"line":98,"column":623,"offset":5550}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":99,"column":1,"offset":5551}}}}