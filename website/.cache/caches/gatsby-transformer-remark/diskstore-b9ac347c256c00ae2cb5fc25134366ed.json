{"expireTime":9007200809748944000,"key":"transformer-remark-markdown-html-475fe1da8c4897ba035aa60b72519453-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-autolink-headers-","val":"<h1 id=\"animationloop\"><a href=\"#animationloop\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AnimationLoop</h1>\n<p>Manages an animation loop and optionally a WebGL context and a WebGL canvas. It provides a number of features related to initialization and animation of a WebGL context.</p>\n<ul>\n<li>Provides a number of commonly needed variables as part of the <code class=\"language-text\">context</code> object which is passed to <code class=\"language-text\">onRender</code> and <code class=\"language-text\">onFinalize</code> callbacks.</li>\n<li>Objects returned by <code class=\"language-text\">onInitialize</code> will be appended to <code class=\"language-text\">context</code> object hence available to <code class=\"language-text\">onRender</code> and <code class=\"language-text\">onFinalize</code>.</li>\n<li>To avoid problems with page load timing, move context creation to the <code class=\"language-text\">onCreateContext</code> method.</li>\n<li>By default, <code class=\"language-text\">onRender</code> method manages resizing of canvas, viewport and framebuffer.</li>\n<li>Makes it easy to wait for the HTML page to load before creating a canvas and WebGL resources.</li>\n</ul>\n<p>References:</p>\n<ul>\n<li><a href=\"https://webglfundamentals.org/webgl/lessons/webgl-anti-patterns.html#drawingbuffer\">WebGL Fundamentals</a> contains excellent information on the subtleties of the how the WebGL context's drawing buffer and the HTML canvas interact.</li>\n<li>When running in the browser, this class uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\"><code class=\"language-text\">requestAnimationFrame</code></a></li>\n</ul>\n<h2 id=\"usage\"><a href=\"#usage\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage</h2>\n<p>Autocreates a canvas/context</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>AnimationLoop<span class=\"token punctuation\">,</span> ClipSpace<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@luma.gl/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> animationLoop <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnimationLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">onInitialize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>gl<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Keys in the object returned here will be available in onRender</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      clipSpaceQuad<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClipSpace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>gl<span class=\"token punctuation\">,</span> fs<span class=\"token punctuation\">:</span> <span class=\"token constant\">FRAGMENT_SHADER</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">onRender</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>tick<span class=\"token punctuation\">,</span> clipSpaceQuad<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Tick is autoupdated by AnimationLoop</span>\n    clipSpaceQuad<span class=\"token punctuation\">.</span><span class=\"token function\">setUniforms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>uTime<span class=\"token punctuation\">:</span> tick <span class=\"token operator\">*</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nanimationLoop<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Use a canvas in the existing DOM through its HTML id</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">animationLoop<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>canvas<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-canvas'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"methods\"><a href=\"#methods\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Methods</h2>\n<h3 id=\"constructorprops--object\"><a href=\"#constructorprops--object\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>constructor(props : Object)</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">AnimationLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  onCreateContext<span class=\"token punctuation\">,</span>\n  onInitialize<span class=\"token punctuation\">,</span>\n  onFinalize<span class=\"token punctuation\">,</span>\n  onRender<span class=\"token punctuation\">,</span>\n\n  autoResizeViewport<span class=\"token punctuation\">,</span>\n  autoResizeDrawingBuffer\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">props.onCreateContext</code>=<code class=\"language-text\">null</code> (callback) - function without parameters that returns a <code class=\"language-text\">WebGLRenderingContext</code>. This callback will be called exactly once, after page load completes.</li>\n<li><code class=\"language-text\">props.onInitialize</code> (callback) - if supplied, will be called once after first <code class=\"language-text\">start()</code> has been called, after page load completes and a context has been created.</li>\n<li><code class=\"language-text\">props.onRender</code>=<code class=\"language-text\">null</code> (callback) - Called on every animation frame.</li>\n<li><code class=\"language-text\">props.onFinalize</code>=<code class=\"language-text\">null</code> (callback) - Called once when animation is stopped. Can be used to delete objects or free any resources created during <code class=\"language-text\">onInitialize</code>.</li>\n<li><code class=\"language-text\">props.autoResizeViewport</code>=<code class=\"language-text\">true</code> - If true, calls <code class=\"language-text\">gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight)</code> each frame before <code class=\"language-text\">onRender</code> is called. Set to false to control viewport size.</li>\n<li><code class=\"language-text\">props.autoResizeDrawingBuffer</code>=<code class=\"language-text\">true</code> - If true, checks the canvas size every frame and updates the drawing buffer size if needed.</li>\n<li><code class=\"language-text\">props.useDevicePixels</code> - Whether to use <code class=\"language-text\">window.devicePixelRatio</code> as a multiplier, e.g. in <code class=\"language-text\">autoResizeDrawingBuffer</code> etc.</li>\n<li><code class=\"language-text\">props.gl</code>=<code class=\"language-text\">null</code> (WebGLContext) - If supplied, will render into this external context instead of creating a new one.</li>\n<li><code class=\"language-text\">props.glOptions</code>=<code class=\"language-text\">{}</code> (object) - Options to create the WebGLContext with. See <a href=\"/docs/api-reference/webgl/context/context.md\">createGLContext</a>.</li>\n<li><code class=\"language-text\">props.debug</code>=<code class=\"language-text\">false</code> (bool) - Enable debug mode will provide more validations and error messages, but less performant.</li>\n<li><code class=\"language-text\">props.createFramebuffer</code>=<code class=\"language-text\">false</code> (bool) - If true, will make a <code class=\"language-text\">framebuffer</code> (FrameBuffer) parameter available to <code class=\"language-text\">onInitialize</code> and <code class=\"language-text\">onRender</code> callbacks.</li>\n</ul>\n<h3 id=\"startoptions--object--animationloop\"><a href=\"#startoptions--object--animationloop\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>start([options : Object]) : AnimationLoop</h3>\n<p>Restarts the animation</p>\n<p><code class=\"language-text\">animationLoop.start(options)</code></p>\n<ul>\n<li><code class=\"language-text\">options</code>=<code class=\"language-text\">{}</code> (object) - Options to create the WebGLContext with. See <a href=\"/docs/api-reference/webgl/context/context.md\">createGLContext</a>.</li>\n</ul>\n<h3 id=\"stop--animationloop\"><a href=\"#stop--animationloop\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>stop() : AnimationLoop</h3>\n<p>Stops the animation</p>\n<p><code class=\"language-text\">animationLoop.stop()</code></p>\n<h3 id=\"waitforrender--promise\"><a href=\"#waitforrender--promise\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>waitForRender() : Promise</h3>\n<p>Returns a promise which resolves in the next frame after rendering and the <code class=\"language-text\">onRender</code> callback have completed.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> loop <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> animationLoop<span class=\"token punctuation\">.</span><span class=\"token function\">waitForRender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// can now read pixels from webgl context</span>\nloop<span class=\"token punctuation\">.</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">readPixels</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"redraw--animationloop\"><a href=\"#redraw--animationloop\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redraw() : AnimationLoop</h3>\n<p>Immediately invokes a redraw (call <code class=\"language-text\">onRender</code> with updated animation props). Only use if the canvas must be updated synchronously.</p>\n<h3 id=\"setneedsredrawreason--string--animationloop\"><a href=\"#setneedsredrawreason--string--animationloop\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>setNeedsRedraw(reason : String) : AnimationLoop</h3>\n<p><code class=\"language-text\">animationLoop.setNeedsRedraw(reason)</code></p>\n<ul>\n<li><code class=\"language-text\">reason</code> (<code class=\"language-text\">String</code>) - A human readable string giving a hint as to why redraw was needed (e.g. \"geometry changed\").</li>\n</ul>\n<p>If set, the value will be provided as the <code class=\"language-text\">needsRedraw</code> field to the <code class=\"language-text\">onRender</code> callback.</p>\n<p>Notes:</p>\n<ul>\n<li><code class=\"language-text\">onRender</code> will be called for each animation frame regardless of whether this flag is set, and the redraw reason is automatically cleared.</li>\n<li>If called multiple times, the <code class=\"language-text\">reason</code> provided in the first call will be remembered.</li>\n<li><code class=\"language-text\">AnimationLoop</code> automatically sets this flag if the WebGL context's drawing buffer size changes.</li>\n</ul>\n<h3 id=\"setpropsprops--object--animationloop\"><a href=\"#setpropsprops--object--animationloop\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>setProps(props : Object) : AnimationLoop</h3>\n<p><code class=\"language-text\">animationLoop.setProps({...props})</code></p>\n<ul>\n<li><code class=\"language-text\">props.autoResizeViewport</code> - Call <code class=\"language-text\">gl.viewport</code> before each call to <code class=\"language-text\">onRender()</code></li>\n<li><code class=\"language-text\">props.autoResizeDrawingBuffer</code> - Update the drawing buffer size to match the canvas size before each call to <code class=\"language-text\">onRender()</code></li>\n<li><code class=\"language-text\">props.useDevicePixels</code> - Whether to use <code class=\"language-text\">window.devicePixelRatio</code> as a multiplier, e.g. in <code class=\"language-text\">autoResizeDrawingBuffer</code> etc.</li>\n</ul>\n<h3 id=\"todataurl\"><a href=\"#todataurl\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>toDataURL</h3>\n<p>Returns returns a <code class=\"language-text\">Promise</code> that resolves to the data URL of the canvas once drawing operations are complete for the current frame. The data URL can be used as the <code class=\"language-text\">src</code> for an HTML image element.</p>\n<p><code class=\"language-text\">animationLoop.toDataURL()</code></p>\n<h2 id=\"callback-parameters\"><a href=\"#callback-parameters\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Callback Parameters</h2>\n<p>The callbacks <code class=\"language-text\">onInitialize</code>, <code class=\"language-text\">onRender</code> and <code class=\"language-text\">onFinalize</code> that the app supplies to the <code class=\"language-text\">AnimationLoop</code>, will be called with an object containing named parameters:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">_animationLoop</code></td>\n<td><code class=\"language-text\">AnimationLoop</code></td>\n<td>(<strong>experimental</strong>) The calling <code class=\"language-text\">AnimationLoop</code> instance</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">gl</code></td>\n<td><code class=\"language-text\">WebGLRenderingContext</code></td>\n<td>This <code class=\"language-text\">AnimationLoop</code>'s gl context.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">canvas</code></td>\n<td><code class=\"language-text\">HTMLCanvasElement</code> or <code class=\"language-text\">OffscreenCanvas</code></td>\n<td>The canvas associated with this context.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">width</code></td>\n<td>The drawing buffer width, in \"device\" pixels (can be different from canvas.width).</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">height</code></td>\n<td>The drawing buffer height, in \"device\" pixels (can be different from canvas.width).</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">aspect</code></td>\n<td>The canvas aspect ratio (width/height) to update projection matrices</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">useDevicePixels</code></td>\n<td>Boolean indicating if canvas is utilizes full resolution of Retina/</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">needsRedraw</code></td>\n<td><code class=\"language-text\">String</code></td>\n<td>Redraw flag (will be automatically set if drawingBuffer resizes)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">time</code></td>\n<td><code class=\"language-text\">Number</code></td>\n<td>Milliseconds since <code class=\"language-text\">AnimationLoop</code> was created (monotonic).</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">tick</code></td>\n<td><code class=\"language-text\">Number</code></td>\n<td>Counter that updates for every frame rendered (monotonic).</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">framebuffer</code></td>\n<td><code class=\"language-text\">FrameBuffer</code></td>\n<td>Availabel if <code class=\"language-text\">createFrameBuffer: true</code> was passed to the constructor.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">_mousePosition</code></td>\n<td><code class=\"language-text\">[x, y]</code> or <code class=\"language-text\">null</code></td>\n<td>(<strong>experimental</strong>) Current mouse position over the canvas.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">_offScreen</code></td>\n<td><code class=\"language-text\">Boolean</code></td>\n<td>(<strong>experimental</strong>) If the animation loop is rendering to an OffscreenCanvas.</td>\n</tr>\n<tr>\n<td>...</td>\n<td>Any fields in the object that was returned by the <code class=\"language-text\">onInitialize</code> method.</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"frame-timers\"><a href=\"#frame-timers\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Frame timers</h3>\n<ul>\n<li>The animation loop tracks GPU and CPU render time of each frame the in member properties <code class=\"language-text\">cpuTime</code> and <code class=\"language-text\">gpuTime</code>. If <code class=\"language-text\">gpuTime</code> is set to <code class=\"language-text\">-1</code>, then the timing for the last frame was invalid and should not be used (this rare and might occur, for example, if the GPU was throttled mid-frame).</li>\n</ul>\n<h2 id=\"remarks\"><a href=\"#remarks\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Remarks</h2>\n<ul>\n<li>You can instantiate multiple <code class=\"language-text\">AnimationLoop</code> classes in parallel, rendering into the same or different <code class=\"language-text\">WebGLRenderingContext</code>s.</li>\n<li>Works both in browser and under Node.js.</li>\n<li>All <code class=\"language-text\">AnimationLoop</code> methods can be chained.</li>\n<li>Postpones context creation until the page (i.e. all HTML) has been loaded. At this time it is safe to specify canvas ids when calling <a href=\"/docs/api-reference/webgl/context/context.md\"><code class=\"language-text\">createGLContext</code></a>.</li>\n<li>The supplied callback function must return a WebGLRenderingContext or an error will be thrown.</li>\n<li>This callback registration function should not be called if a <code class=\"language-text\">WebGLRenderingContext</code> was supplied to the AnimationLoop constructor.</li>\n</ul>"}