{"expireTime":9007200809748944000,"key":"transformer-remark-markdown-html-dbba3632998fbe1c8ef238126dd81ee2-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-autolink-headers-","val":"<h1 id=\"program\"><a href=\"#program\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Program</h1>\n<p>A <code class=\"language-text\">Program</code> contains a matched pair of vertex and fragment <a href=\"/docs/api-reference/webgl/shader.md\">shaders</a> that can be exectued on the GPU by calling <code class=\"language-text\">Program.draw()</code>. Programs handle compilation and linking of shaders, and store uniform values. They provide <code class=\"language-text\">draw</code> call which allows the application to run the shaders on specified input data.</p>\n<h2 id=\"usage\"><a href=\"#usage\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage</h2>\n<p>Creating a program</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> program <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Program</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-program'</span><span class=\"token punctuation\">,</span>\n    vs<span class=\"token punctuation\">:</span> vertexShaderSourceString<span class=\"token punctuation\">,</span>\n    fs<span class=\"token punctuation\">:</span> fragmentShaderSourceString\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Set or update uniforms, in this case world and projection matrices</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">program<span class=\"token punctuation\">.</span><span class=\"token function\">setUniforms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  uMVMatrix<span class=\"token punctuation\">:</span> view<span class=\"token punctuation\">,</span>\n  uPMatrix<span class=\"token punctuation\">:</span> projection\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Create a <code class=\"language-text\">VertexArray</code> to store buffer values for the vertices of a triangle and drawing</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> program <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Program</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>vs<span class=\"token punctuation\">,</span> fs<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> vertexArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VertexArray</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>program<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nvertexArray<span class=\"token punctuation\">.</span><span class=\"token function\">setAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  aVertexPosition<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Buffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nprogram<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>vertexArray<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Creating a program for transform feedback, specifying which varyings to use</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> program <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Program</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>vs<span class=\"token punctuation\">,</span> fs<span class=\"token punctuation\">,</span> varyings<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'gl_Position'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"members\"><a href=\"#members\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Members</h2>\n<ul>\n<li><code class=\"language-text\">gl</code> : <code class=\"language-text\">WebGLRenderingContext</code></li>\n<li><code class=\"language-text\">handle</code> : <code class=\"language-text\">WebGLProgram</code> - The WebGL <code class=\"language-text\">WebGLProgram</code> instance.</li>\n<li><code class=\"language-text\">id</code> : <code class=\"language-text\">String</code> - <code class=\"language-text\">id</code> string for debugging.</li>\n</ul>\n<h2 id=\"constructor\"><a href=\"#constructor\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Constructor</h2>\n<h3 id=\"programgl--webglrenderingcontext-props--object\"><a href=\"#programgl--webglrenderingcontext-props--object\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Program(gl : WebGLRenderingContext, props : Object)</h3>\n<p>Creates a new program using the supplied vertex and fragment shaders. The shaders are compiled into WebGLShaders and is created and the shaders are linked.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">\t<span class=\"token keyword\">const</span> program <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Program</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-identifier'</span><span class=\"token punctuation\">,</span>\n    vs<span class=\"token punctuation\">:</span> vertexShaderSource<span class=\"token punctuation\">,</span>\n    fs<span class=\"token punctuation\">:</span> fragmentShaderSource<span class=\"token punctuation\">,</span>\n    varyings<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'gl_Position'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vColor'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">id</code> (<code class=\"language-text\">string</code>, optional) - string id (to help indentify the program during debugging).</li>\n<li><code class=\"language-text\">vs</code> (<code class=\"language-text\">VertexShader</code>|<code class=\"language-text\">String</code>) - A vertex shader object, or source as a string.</li>\n<li><code class=\"language-text\">fs</code> (<code class=\"language-text\">FragmentShader</code>|<code class=\"language-text\">String</code>) - A fragment shader object, or source as a string.</li>\n<li><code class=\"language-text\">varyings</code> WebGL2 (<code class=\"language-text\">String[]</code>) - a list of names of varyings.</li>\n<li><code class=\"language-text\">bufferMode</code>=<code class=\"language-text\">GL.SEPARATE_ATTRIBS</code> WebGL2 (<code class=\"language-text\">GLenum</code>) - Optional, specifies how transform feedback should store the varyings.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><code class=\"language-text\">GL.TRANSFORM_FEEDBACK_BUFFER_MODE</code></th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">GL.SEPARATE_ATTRIBS</code></td>\n<td>One varying per buffer</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.INTERLEAVED_ATTRIBS</code></td>\n<td>Multiple varyings per buffer</td>\n</tr>\n</tbody>\n</table>\n<p>WebGL References <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLProgram\">WebGLProgram</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createProgram\">gl.createProgram</a></p>\n<h3 id=\"delete--program\"><a href=\"#delete--program\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>delete() : Program</h3>\n<p>Deletes resources held by program. Note: Does not currently delete shaders (to enable shader caching).</p>\n<h2 id=\"methods\"><a href=\"#methods\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Methods</h2>\n<h3 id=\"initializeprops--object--program\"><a href=\"#initializeprops--object--program\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>initialize(props : Object) : Program</h3>\n<p>Relinks a program. Takes the same options as the constructor</p>\n<h3 id=\"setuniformsuniforms--object--program\"><a href=\"#setuniformsuniforms--object--program\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>setUniforms(uniforms : Object) : Program</h3>\n<p>Sets named uniforms from a map, ignoring names</p>\n<ul>\n<li><code class=\"language-text\">key</code> (<em>String</em>) - The name of the uniform to be set. The name of the uniform will be matched with the name of the uniform declared in the shader. You can set more uniforms on the Program than its shaders use, the extra uniforms will simply be ignored.</li>\n<li><code class=\"language-text\">value</code> (<em>mixed</em>) - The value to be set. Can be a float, an array of floats, a typed array, a boolean, <code class=\"language-text\">Texture</code> etc. The values must match the declarations in the shader.</li>\n</ul>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/useProgram\">gl.useProgram</a></p>\n<h3 id=\"drawopts--program\"><a href=\"#drawopts--program\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>draw(opts) : Program</h3>\n<p><code class=\"language-text\">Program.draw</code> is the entry point for running shaders, rendering and (optionally calculating data using transform feedback techniques).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  Program<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    vertexArray<span class=\"token punctuation\">,</span>\n\n    uniforms <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    transformFeedback <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    samplers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    parameters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    drawMode <span class=\"token operator\">=</span> <span class=\"token constant\">GL</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TRIANGLES</span><span class=\"token punctuation\">,</span>\n    vertexCount<span class=\"token punctuation\">,</span>\n    offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    isIndexed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    indexType <span class=\"token operator\">=</span> <span class=\"token constant\">GL</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UNSIGNED_SHORT</span><span class=\"token punctuation\">,</span>\n    isInstanced <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    instanceCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\n    start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    end<span class=\"token operator\">=</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Main parameters</p>\n<ul>\n<li><code class=\"language-text\">vertexArray</code> - a <code class=\"language-text\">VertexArray</code> object that will be bound and unbound before and after the draw call.</li>\n<li><code class=\"language-text\">uniforms</code>=<code class=\"language-text\">{}</code> - a map of uniforms that will be set just before the draw call (and remain set after the call).</li>\n<li><code class=\"language-text\">samplers</code>=<code class=\"language-text\">{}</code> - a map of texture <code class=\"language-text\">Sampler</code>s that will be bound before the draw call.</li>\n<li><code class=\"language-text\">parameters</code> - temporary gl settings to be applied to this draw call.</li>\n<li><code class=\"language-text\">transformFeedback</code>=<code class=\"language-text\">null</code> - optional <code class=\"language-text\">TransformFeedback</code> object containing buffers that will receive the output of the transform feedback operation.</li>\n</ul>\n<p>Potentially autodeduced parameters</p>\n<ul>\n<li><code class=\"language-text\">drawMode</code>=<code class=\"language-text\">GL.TRIANGLES</code> - geometry primitive format of vertex data</li>\n<li><code class=\"language-text\">vertexCount</code> - number of vertices to draw</li>\n<li><code class=\"language-text\">offset</code>=<code class=\"language-text\">0</code> - first vertex to draw</li>\n<li><code class=\"language-text\">isIndexed</code>=<code class=\"language-text\">false</code> - use indices in the \"elements\" buffer</li>\n<li><code class=\"language-text\">indexType</code>=<code class=\"language-text\">GL.UNSIGNED_SHORT</code> - must match the type of the \"elements\" buffer</li>\n<li><code class=\"language-text\">isInstanced</code>=<code class=\"language-text\">false</code> - Set to enable instanced rendering.</li>\n<li><code class=\"language-text\">instanceCount</code>=<code class=\"language-text\">0</code> - Number of instances</li>\n</ul>\n<p>Parameters for drawing a limited range (WebGL2 only)</p>\n<ul>\n<li><code class=\"language-text\">start</code> - hint to GPU, activates <code class=\"language-text\">gl.drawElementsRange</code> (WebGL2)</li>\n<li><code class=\"language-text\">end</code> - hint to GPU, activates <code class=\"language-text\">gl.drawElementsRange</code> (WebGL2)</li>\n</ul>\n<p>Returns: <code class=\"language-text\">true</code> if successful, <code class=\"language-text\">false</code> if draw call is blocked due to missing resources.</p>\n<p>Notes:</p>\n<ul>\n<li>Runs the shaders in the program, on the attributes and uniforms.</li>\n<li>Indexed rendering uses the element buffer (<code class=\"language-text\">GL.ELEMENT_ARRAY_BUFFER</code>), make sure your attributes or <code class=\"language-text\">VertexArray</code> contains one.</li>\n<li>If a <code class=\"language-text\">TransformFeedback</code> object is supplied, <code class=\"language-text\">transformFeedback.begin()</code> and <code class=\"language-text\">transformFeedback.end()</code> will be called before and after the draw call.</li>\n<li>A <code class=\"language-text\">Sampler</code> will only be bound if there is a matching Texture with the same key in the supplied <code class=\"language-text\">uniforms</code> object.</li>\n</ul>\n<p>The following WebGL APIs are called in this function:</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/useProgram\">gl.useProgram</a>,\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements\">gl.drawElements</a>,\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawRangeElements\">gl.drawRangeElements</a> (WebGL2),\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawArrays\">gl.drawArrays</a>,\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawElementsInstanced\">gl.drawElementsInstanced</a> (WebGL2),\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawArraysInstanced\">gl.drawArraysInstanced</a> (WebGL2),\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getExtension\">gl.getExtension</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays\">ANGLE<em>instanced</em>arrays</a>,\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays/drawElementsInstancedANGLE\">gl.drawElementsInstancedANGLE</a>,\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ANGLE_instanced_arrays/drawArraysInstancedANGLE\">gl.drawArraysInstancedANGLE</a></p>\n<h2 id=\"constants\"><a href=\"#constants\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Constants</h2>\n<h3 id=\"limits\"><a href=\"#limits\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Limits</h3>\n<table>\n<thead>\n<tr>\n<th>Limit</th>\n<th>Value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS</code></td>\n<td>>= 0 (GLint)</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.MAX_RENDERBUFFER_SIZE</code></td>\n<td>>= 1 (GLint)</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.MAX_VARYING_VECTORS</code></td>\n<td>>= 8 (GLint)</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.MAX_VERTEX_ATTRIBS</code></td>\n<td>>= 8 (GLint)</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.MAX_VERTEX_UNIFORM_VECTORS</code></td>\n<td>>= 128 (GLint)</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.MAX_FRAGMENT_UNIFORM_VECTORS</code></td>\n<td>>= 16 (GLint)</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH</code> (WebGL2)</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"parameters\"><a href=\"#parameters\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parameters</h3>\n<p>Use with <code class=\"language-text\">Program.getParameter(parameter)</code></p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">GL.DELETE_STATUS</code></td>\n<td>GLboolean</td>\n<td>If true, program has been flagged for deletion (by calling <code class=\"language-text\">Program.delete()</code>), but the delete is pending because program is still part of current rendering state</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.LINK_STATUS</code></td>\n<td>GLboolean</td>\n<td>Indicates whether last link operation was successful. Program linking is performed by luma on program initialization</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.VALIDATE_STATUS</code></td>\n<td>GLboolean</td>\n<td>Result of last <code class=\"language-text\">gl.validateProgram()</code> operation</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.ATTACHED_SHADERS</code></td>\n<td>GLint</td>\n<td>Number of attached shaders (<code class=\"language-text\">0</code>, <code class=\"language-text\">1</code> or <code class=\"language-text\">2</code>)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.ACTIVE_ATTRIBUTES</code></td>\n<td>GLint</td>\n<td>Number of active attribute variables to a program</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.ACTIVE_UNIFORMS</code></td>\n<td>GLint</td>\n<td>Number of active attribute variables to a program</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.TRANSFORM_FEEDBACK_BUFFER_MODE</code></td>\n<td>GLenum</td>\n<td>(WebGL2) Buffer capture mode, <code class=\"language-text\">GL.SEPARATE_ATTRIBS</code> or <code class=\"language-text\">GL.INTERLEAVED_ATTRIBS</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.TRANSFORM_FEEDBACK_VARYINGS</code></td>\n<td>GLint</td>\n<td>(WebGL2) Number of varying variables to capture in transform feedback mode.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GL.ACTIVE_UNIFORM_BLOCKS</code></td>\n<td>GLint</td>\n<td>(WebGL2) Number of uniform blocks containing active uniforms.</td>\n</tr>\n</tbody>\n</table>"}